
BAR30-F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004068  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080041f0  080041f0  000051f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004208  08004208  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004208  08004208  00005208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004210  08004210  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004210  08004210  00005210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004214  08004214  00005214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004218  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          00000278  20000010  20000010  00006010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000288  20000288  00006010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008eca  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bb4  00000000  00000000  0000ef06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008a0  00000000  00000000  00010ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000687  00000000  00000000  00011360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fc8d  00000000  00000000  000119e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bb2a  00000000  00000000  00031674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c045e  00000000  00000000  0003d19e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fd5fc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002214  00000000  00000000  000fd640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000ff854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080041d8 	.word	0x080041d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080041d8 	.word	0x080041d8

080001c8 <__aeabi_ldivmod>:
 80001c8:	b97b      	cbnz	r3, 80001ea <__aeabi_ldivmod+0x22>
 80001ca:	b972      	cbnz	r2, 80001ea <__aeabi_ldivmod+0x22>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bfbe      	ittt	lt
 80001d0:	2000      	movlt	r0, #0
 80001d2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80001d6:	e006      	blt.n	80001e6 <__aeabi_ldivmod+0x1e>
 80001d8:	bf08      	it	eq
 80001da:	2800      	cmpeq	r0, #0
 80001dc:	bf1c      	itt	ne
 80001de:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80001e2:	f04f 30ff 	movne.w	r0, #4294967295
 80001e6:	f000 b9b5 	b.w	8000554 <__aeabi_idiv0>
 80001ea:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f2:	2900      	cmp	r1, #0
 80001f4:	db09      	blt.n	800020a <__aeabi_ldivmod+0x42>
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	db1a      	blt.n	8000230 <__aeabi_ldivmod+0x68>
 80001fa:	f000 f84d 	bl	8000298 <__udivmoddi4>
 80001fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000206:	b004      	add	sp, #16
 8000208:	4770      	bx	lr
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	2b00      	cmp	r3, #0
 8000212:	db1b      	blt.n	800024c <__aeabi_ldivmod+0x84>
 8000214:	f000 f840 	bl	8000298 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4240      	negs	r0, r0
 8000224:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000228:	4252      	negs	r2, r2
 800022a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800022e:	4770      	bx	lr
 8000230:	4252      	negs	r2, r2
 8000232:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000236:	f000 f82f 	bl	8000298 <__udivmoddi4>
 800023a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000242:	b004      	add	sp, #16
 8000244:	4240      	negs	r0, r0
 8000246:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024a:	4770      	bx	lr
 800024c:	4252      	negs	r2, r2
 800024e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000252:	f000 f821 	bl	8000298 <__udivmoddi4>
 8000256:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025e:	b004      	add	sp, #16
 8000260:	4252      	negs	r2, r2
 8000262:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000266:	4770      	bx	lr

08000268 <__aeabi_uldivmod>:
 8000268:	b953      	cbnz	r3, 8000280 <__aeabi_uldivmod+0x18>
 800026a:	b94a      	cbnz	r2, 8000280 <__aeabi_uldivmod+0x18>
 800026c:	2900      	cmp	r1, #0
 800026e:	bf08      	it	eq
 8000270:	2800      	cmpeq	r0, #0
 8000272:	bf1c      	itt	ne
 8000274:	f04f 31ff 	movne.w	r1, #4294967295
 8000278:	f04f 30ff 	movne.w	r0, #4294967295
 800027c:	f000 b96a 	b.w	8000554 <__aeabi_idiv0>
 8000280:	f1ad 0c08 	sub.w	ip, sp, #8
 8000284:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000288:	f000 f806 	bl	8000298 <__udivmoddi4>
 800028c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000294:	b004      	add	sp, #16
 8000296:	4770      	bx	lr

08000298 <__udivmoddi4>:
 8000298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800029c:	9d08      	ldr	r5, [sp, #32]
 800029e:	460c      	mov	r4, r1
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d14e      	bne.n	8000342 <__udivmoddi4+0xaa>
 80002a4:	4694      	mov	ip, r2
 80002a6:	458c      	cmp	ip, r1
 80002a8:	4686      	mov	lr, r0
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	d962      	bls.n	8000376 <__udivmoddi4+0xde>
 80002b0:	b14a      	cbz	r2, 80002c6 <__udivmoddi4+0x2e>
 80002b2:	f1c2 0320 	rsb	r3, r2, #32
 80002b6:	4091      	lsls	r1, r2
 80002b8:	fa20 f303 	lsr.w	r3, r0, r3
 80002bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c0:	4319      	orrs	r1, r3
 80002c2:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ca:	fa1f f68c 	uxth.w	r6, ip
 80002ce:	fbb1 f4f7 	udiv	r4, r1, r7
 80002d2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d6:	fb07 1114 	mls	r1, r7, r4, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb04 f106 	mul.w	r1, r4, r6
 80002e2:	4299      	cmp	r1, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x64>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ee:	f080 8112 	bcs.w	8000516 <__udivmoddi4+0x27e>
 80002f2:	4299      	cmp	r1, r3
 80002f4:	f240 810f 	bls.w	8000516 <__udivmoddi4+0x27e>
 80002f8:	3c02      	subs	r4, #2
 80002fa:	4463      	add	r3, ip
 80002fc:	1a59      	subs	r1, r3, r1
 80002fe:	fa1f f38e 	uxth.w	r3, lr
 8000302:	fbb1 f0f7 	udiv	r0, r1, r7
 8000306:	fb07 1110 	mls	r1, r7, r0, r1
 800030a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030e:	fb00 f606 	mul.w	r6, r0, r6
 8000312:	429e      	cmp	r6, r3
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x94>
 8000316:	eb1c 0303 	adds.w	r3, ip, r3
 800031a:	f100 31ff 	add.w	r1, r0, #4294967295
 800031e:	f080 80fc 	bcs.w	800051a <__udivmoddi4+0x282>
 8000322:	429e      	cmp	r6, r3
 8000324:	f240 80f9 	bls.w	800051a <__udivmoddi4+0x282>
 8000328:	4463      	add	r3, ip
 800032a:	3802      	subs	r0, #2
 800032c:	1b9b      	subs	r3, r3, r6
 800032e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000332:	2100      	movs	r1, #0
 8000334:	b11d      	cbz	r5, 800033e <__udivmoddi4+0xa6>
 8000336:	40d3      	lsrs	r3, r2
 8000338:	2200      	movs	r2, #0
 800033a:	e9c5 3200 	strd	r3, r2, [r5]
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	428b      	cmp	r3, r1
 8000344:	d905      	bls.n	8000352 <__udivmoddi4+0xba>
 8000346:	b10d      	cbz	r5, 800034c <__udivmoddi4+0xb4>
 8000348:	e9c5 0100 	strd	r0, r1, [r5]
 800034c:	2100      	movs	r1, #0
 800034e:	4608      	mov	r0, r1
 8000350:	e7f5      	b.n	800033e <__udivmoddi4+0xa6>
 8000352:	fab3 f183 	clz	r1, r3
 8000356:	2900      	cmp	r1, #0
 8000358:	d146      	bne.n	80003e8 <__udivmoddi4+0x150>
 800035a:	42a3      	cmp	r3, r4
 800035c:	d302      	bcc.n	8000364 <__udivmoddi4+0xcc>
 800035e:	4290      	cmp	r0, r2
 8000360:	f0c0 80f0 	bcc.w	8000544 <__udivmoddi4+0x2ac>
 8000364:	1a86      	subs	r6, r0, r2
 8000366:	eb64 0303 	sbc.w	r3, r4, r3
 800036a:	2001      	movs	r0, #1
 800036c:	2d00      	cmp	r5, #0
 800036e:	d0e6      	beq.n	800033e <__udivmoddi4+0xa6>
 8000370:	e9c5 6300 	strd	r6, r3, [r5]
 8000374:	e7e3      	b.n	800033e <__udivmoddi4+0xa6>
 8000376:	2a00      	cmp	r2, #0
 8000378:	f040 8090 	bne.w	800049c <__udivmoddi4+0x204>
 800037c:	eba1 040c 	sub.w	r4, r1, ip
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	fa1f f78c 	uxth.w	r7, ip
 8000388:	2101      	movs	r1, #1
 800038a:	fbb4 f6f8 	udiv	r6, r4, r8
 800038e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000392:	fb08 4416 	mls	r4, r8, r6, r4
 8000396:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039a:	fb07 f006 	mul.w	r0, r7, r6
 800039e:	4298      	cmp	r0, r3
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0x11c>
 80003a2:	eb1c 0303 	adds.w	r3, ip, r3
 80003a6:	f106 34ff 	add.w	r4, r6, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x11a>
 80003ac:	4298      	cmp	r0, r3
 80003ae:	f200 80cd 	bhi.w	800054c <__udivmoddi4+0x2b4>
 80003b2:	4626      	mov	r6, r4
 80003b4:	1a1c      	subs	r4, r3, r0
 80003b6:	fa1f f38e 	uxth.w	r3, lr
 80003ba:	fbb4 f0f8 	udiv	r0, r4, r8
 80003be:	fb08 4410 	mls	r4, r8, r0, r4
 80003c2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c6:	fb00 f707 	mul.w	r7, r0, r7
 80003ca:	429f      	cmp	r7, r3
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x148>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x146>
 80003d8:	429f      	cmp	r7, r3
 80003da:	f200 80b0 	bhi.w	800053e <__udivmoddi4+0x2a6>
 80003de:	4620      	mov	r0, r4
 80003e0:	1bdb      	subs	r3, r3, r7
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0x9c>
 80003e8:	f1c1 0620 	rsb	r6, r1, #32
 80003ec:	408b      	lsls	r3, r1
 80003ee:	fa22 f706 	lsr.w	r7, r2, r6
 80003f2:	431f      	orrs	r7, r3
 80003f4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f8:	fa04 f301 	lsl.w	r3, r4, r1
 80003fc:	ea43 030c 	orr.w	r3, r3, ip
 8000400:	40f4      	lsrs	r4, r6
 8000402:	fa00 f801 	lsl.w	r8, r0, r1
 8000406:	0c38      	lsrs	r0, r7, #16
 8000408:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800040c:	fbb4 fef0 	udiv	lr, r4, r0
 8000410:	fa1f fc87 	uxth.w	ip, r7
 8000414:	fb00 441e 	mls	r4, r0, lr, r4
 8000418:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800041c:	fb0e f90c 	mul.w	r9, lr, ip
 8000420:	45a1      	cmp	r9, r4
 8000422:	fa02 f201 	lsl.w	r2, r2, r1
 8000426:	d90a      	bls.n	800043e <__udivmoddi4+0x1a6>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042e:	f080 8084 	bcs.w	800053a <__udivmoddi4+0x2a2>
 8000432:	45a1      	cmp	r9, r4
 8000434:	f240 8081 	bls.w	800053a <__udivmoddi4+0x2a2>
 8000438:	f1ae 0e02 	sub.w	lr, lr, #2
 800043c:	443c      	add	r4, r7
 800043e:	eba4 0409 	sub.w	r4, r4, r9
 8000442:	fa1f f983 	uxth.w	r9, r3
 8000446:	fbb4 f3f0 	udiv	r3, r4, r0
 800044a:	fb00 4413 	mls	r4, r0, r3, r4
 800044e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000452:	fb03 fc0c 	mul.w	ip, r3, ip
 8000456:	45a4      	cmp	ip, r4
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x1d2>
 800045a:	193c      	adds	r4, r7, r4
 800045c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000460:	d267      	bcs.n	8000532 <__udivmoddi4+0x29a>
 8000462:	45a4      	cmp	ip, r4
 8000464:	d965      	bls.n	8000532 <__udivmoddi4+0x29a>
 8000466:	3b02      	subs	r3, #2
 8000468:	443c      	add	r4, r7
 800046a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046e:	fba0 9302 	umull	r9, r3, r0, r2
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	429c      	cmp	r4, r3
 8000478:	46ce      	mov	lr, r9
 800047a:	469c      	mov	ip, r3
 800047c:	d351      	bcc.n	8000522 <__udivmoddi4+0x28a>
 800047e:	d04e      	beq.n	800051e <__udivmoddi4+0x286>
 8000480:	b155      	cbz	r5, 8000498 <__udivmoddi4+0x200>
 8000482:	ebb8 030e 	subs.w	r3, r8, lr
 8000486:	eb64 040c 	sbc.w	r4, r4, ip
 800048a:	fa04 f606 	lsl.w	r6, r4, r6
 800048e:	40cb      	lsrs	r3, r1
 8000490:	431e      	orrs	r6, r3
 8000492:	40cc      	lsrs	r4, r1
 8000494:	e9c5 6400 	strd	r6, r4, [r5]
 8000498:	2100      	movs	r1, #0
 800049a:	e750      	b.n	800033e <__udivmoddi4+0xa6>
 800049c:	f1c2 0320 	rsb	r3, r2, #32
 80004a0:	fa20 f103 	lsr.w	r1, r0, r3
 80004a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a8:	fa24 f303 	lsr.w	r3, r4, r3
 80004ac:	4094      	lsls	r4, r2
 80004ae:	430c      	orrs	r4, r1
 80004b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b4:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b8:	fa1f f78c 	uxth.w	r7, ip
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3110 	mls	r1, r8, r0, r3
 80004c4:	0c23      	lsrs	r3, r4, #16
 80004c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ca:	fb00 f107 	mul.w	r1, r0, r7
 80004ce:	4299      	cmp	r1, r3
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x24c>
 80004d2:	eb1c 0303 	adds.w	r3, ip, r3
 80004d6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004da:	d22c      	bcs.n	8000536 <__udivmoddi4+0x29e>
 80004dc:	4299      	cmp	r1, r3
 80004de:	d92a      	bls.n	8000536 <__udivmoddi4+0x29e>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a5b      	subs	r3, r3, r1
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004ec:	fb08 3311 	mls	r3, r8, r1, r3
 80004f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f4:	fb01 f307 	mul.w	r3, r1, r7
 80004f8:	42a3      	cmp	r3, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x276>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f101 36ff 	add.w	r6, r1, #4294967295
 8000504:	d213      	bcs.n	800052e <__udivmoddi4+0x296>
 8000506:	42a3      	cmp	r3, r4
 8000508:	d911      	bls.n	800052e <__udivmoddi4+0x296>
 800050a:	3902      	subs	r1, #2
 800050c:	4464      	add	r4, ip
 800050e:	1ae4      	subs	r4, r4, r3
 8000510:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000514:	e739      	b.n	800038a <__udivmoddi4+0xf2>
 8000516:	4604      	mov	r4, r0
 8000518:	e6f0      	b.n	80002fc <__udivmoddi4+0x64>
 800051a:	4608      	mov	r0, r1
 800051c:	e706      	b.n	800032c <__udivmoddi4+0x94>
 800051e:	45c8      	cmp	r8, r9
 8000520:	d2ae      	bcs.n	8000480 <__udivmoddi4+0x1e8>
 8000522:	ebb9 0e02 	subs.w	lr, r9, r2
 8000526:	eb63 0c07 	sbc.w	ip, r3, r7
 800052a:	3801      	subs	r0, #1
 800052c:	e7a8      	b.n	8000480 <__udivmoddi4+0x1e8>
 800052e:	4631      	mov	r1, r6
 8000530:	e7ed      	b.n	800050e <__udivmoddi4+0x276>
 8000532:	4603      	mov	r3, r0
 8000534:	e799      	b.n	800046a <__udivmoddi4+0x1d2>
 8000536:	4630      	mov	r0, r6
 8000538:	e7d4      	b.n	80004e4 <__udivmoddi4+0x24c>
 800053a:	46d6      	mov	lr, sl
 800053c:	e77f      	b.n	800043e <__udivmoddi4+0x1a6>
 800053e:	4463      	add	r3, ip
 8000540:	3802      	subs	r0, #2
 8000542:	e74d      	b.n	80003e0 <__udivmoddi4+0x148>
 8000544:	4606      	mov	r6, r0
 8000546:	4623      	mov	r3, r4
 8000548:	4608      	mov	r0, r1
 800054a:	e70f      	b.n	800036c <__udivmoddi4+0xd4>
 800054c:	3e02      	subs	r6, #2
 800054e:	4463      	add	r3, ip
 8000550:	e730      	b.n	80003b4 <__udivmoddi4+0x11c>
 8000552:	bf00      	nop

08000554 <__aeabi_idiv0>:
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop

08000558 <AvarageFilter_Init>:
 */
#include "AvarageFilter.h"

AvarageFilterParam_T AvarageFilter_MPU6050_X, AvarageFilter_MPU6050_Y, AvarageFilter_MPU6050_Z;

void AvarageFilter_Init(AvarageFilterParam_T *handle, uint8_t FilterBufferSize){
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	460b      	mov	r3, r1
 8000562:	70fb      	strb	r3, [r7, #3]
	handle->FilterBufferSize = FilterBufferSize;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	78fa      	ldrb	r2, [r7, #3]
 8000568:	701a      	strb	r2, [r3, #0]
	handle->DataCounter = 0;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2200      	movs	r2, #0
 800056e:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
	handle->sum = 0;
 8000572:	6879      	ldr	r1, [r7, #4]
 8000574:	f04f 0200 	mov.w	r2, #0
 8000578:	f04f 0300 	mov.w	r3, #0
 800057c:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88

}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <AvarageFilter>:

uint8_t AvarageFilter(AvarageFilterParam_T *handle, int16_t data){
 800058c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000590:	b084      	sub	sp, #16
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
 8000596:	460b      	mov	r3, r1
 8000598:	807b      	strh	r3, [r7, #2]

	if(handle->DataCounter == handle->FilterBufferSize){
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d164      	bne.n	8000672 <AvarageFilter+0xe6>
		for(int i = 0; i <= handle->DataCounter; i++ ){
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	e016      	b.n	80005dc <AvarageFilter+0x50>
			handle->sum +=  handle->buffer[i];
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	68f9      	ldr	r1, [r7, #12]
 80005b8:	0049      	lsls	r1, r1, #1
 80005ba:	4401      	add	r1, r0
 80005bc:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80005c0:	b209      	sxth	r1, r1
 80005c2:	17c8      	asrs	r0, r1, #31
 80005c4:	460c      	mov	r4, r1
 80005c6:	4605      	mov	r5, r0
 80005c8:	eb12 0804 	adds.w	r8, r2, r4
 80005cc:	eb43 0905 	adc.w	r9, r3, r5
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	e9c3 8922 	strd	r8, r9, [r3, #136]	@ 0x88
		for(int i = 0; i <= handle->DataCounter; i++ ){
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	3301      	adds	r3, #1
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 80005e2:	461a      	mov	r2, r3
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	4293      	cmp	r3, r2
 80005e8:	dde1      	ble.n	80005ae <AvarageFilter+0x22>
		}
		handle->Avarage = handle->sum / handle->FilterBufferSize;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	@ 0x88
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	2200      	movs	r2, #0
 80005f8:	469a      	mov	sl, r3
 80005fa:	4693      	mov	fp, r2
 80005fc:	4652      	mov	r2, sl
 80005fe:	465b      	mov	r3, fp
 8000600:	f7ff fde2 	bl	80001c8 <__aeabi_ldivmod>
 8000604:	4602      	mov	r2, r0
 8000606:	460b      	mov	r3, r1
 8000608:	b212      	sxth	r2, r2
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
		handle->sum = 0;
 8000610:	6879      	ldr	r1, [r7, #4]
 8000612:	f04f 0200 	mov.w	r2, #0
 8000616:	f04f 0300 	mov.w	r3, #0
 800061a:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
		for(int i = 0; i <=handle->DataCounter; i++ ){
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	e017      	b.n	8000654 <AvarageFilter+0xc8>
			handle->buffer[i] = handle->buffer[i+1];
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	3301      	adds	r3, #1
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	4413      	add	r3, r2
 800062e:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	4413      	add	r3, r2
 800063a:	460a      	mov	r2, r1
 800063c:	805a      	strh	r2, [r3, #2]
			handle->buffer[handle->DataCounter] = 0;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	4413      	add	r3, r2
 800064a:	2200      	movs	r2, #0
 800064c:	805a      	strh	r2, [r3, #2]
		for(int i = 0; i <=handle->DataCounter; i++ ){
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	3301      	adds	r3, #1
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800065a:	461a      	mov	r2, r3
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	4293      	cmp	r3, r2
 8000660:	dde0      	ble.n	8000624 <AvarageFilter+0x98>
		}
	handle->DataCounter = handle->FilterBufferSize-2;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	3b02      	subs	r3, #2
 8000668:	b2da      	uxtb	r2, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
 8000670:	e00f      	b.n	8000692 <AvarageFilter+0x106>
	}else{
		handle->buffer[handle->DataCounter] = data;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	4413      	add	r3, r2
 800067e:	887a      	ldrh	r2, [r7, #2]
 8000680:	805a      	strh	r2, [r3, #2]
		++handle->DataCounter;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8000688:	3301      	adds	r3, #1
 800068a:	b2da      	uxtb	r2, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
	}

}
 8000692:	bf00      	nop
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800069e <I2C_Init>:
 * GLOBAL FUNCTIONS
 ********************************************************/
/** Brief description which ends at this dot. Details follow
 *  here.
 */
void I2C_Init(void *handle, uint8_t I2CNo){
 800069e:	b580      	push	{r7, lr}
 80006a0:	b084      	sub	sp, #16
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
 80006a6:	460b      	mov	r3, r1
 80006a8:	70fb      	strb	r3, [r7, #3]
	I2C_HandleTypeDef_T *i2c;
	i2c = I2C_GetModule(I2CNo);
 80006aa:	78fb      	ldrb	r3, [r7, #3]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 f857 	bl	8000760 <I2C_GetModule>
 80006b2:	60f8      	str	r0, [r7, #12]
    i2c->handle = handle;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	601a      	str	r2, [r3, #0]
}
 80006ba:	bf00      	nop
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <I2C_ReadWrite>:


/** Brief description which ends at this dot. Details follow
 *  here.
 */
I2C_ReturnTypeDef_T I2C_ReadWrite(uint8_t I2CNo, uint8_t DevAddress, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b084      	sub	sp, #16
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	603a      	str	r2, [r7, #0]
 80006ca:	461a      	mov	r2, r3
 80006cc:	4603      	mov	r3, r0
 80006ce:	71fb      	strb	r3, [r7, #7]
 80006d0:	460b      	mov	r3, r1
 80006d2:	71bb      	strb	r3, [r7, #6]
 80006d4:	4613      	mov	r3, r2
 80006d6:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef_T *i2c;
	HAL_StatusTypeDef res;
	i2c = I2C_GetModule(I2CNo);
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 f840 	bl	8000760 <I2C_GetModule>
 80006e0:	60f8      	str	r0, [r7, #12]
	if(rxLenght == 0){
 80006e2:	7f3b      	ldrb	r3, [r7, #28]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d115      	bne.n	8000714 <I2C_ReadWrite+0x52>
		res = HAL_I2C_Master_Transmit_IT(i2c->handle , DevAddress, txBuff, txLenght);
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	6818      	ldr	r0, [r3, #0]
 80006ec:	79bb      	ldrb	r3, [r7, #6]
 80006ee:	b299      	uxth	r1, r3
 80006f0:	797b      	ldrb	r3, [r7, #5]
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	683a      	ldr	r2, [r7, #0]
 80006f6:	f001 fab3 	bl	8001c60 <HAL_I2C_Master_Transmit_IT>
 80006fa:	4603      	mov	r3, r0
 80006fc:	72fb      	strb	r3, [r7, #11]
		I2C_WaitFlag(I2CNo);
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	4618      	mov	r0, r3
 8000702:	f000 f84f 	bl	80007a4 <I2C_WaitFlag>
		return res == I2C_ERROR;
 8000706:	7afb      	ldrb	r3, [r7, #11]
 8000708:	2b01      	cmp	r3, #1
 800070a:	bf0c      	ite	eq
 800070c:	2301      	moveq	r3, #1
 800070e:	2300      	movne	r3, #0
 8000710:	b2db      	uxtb	r3, r3
 8000712:	e021      	b.n	8000758 <I2C_ReadWrite+0x96>
	}else{
		HAL_I2C_Master_Transmit_IT(i2c->handle , DevAddress, txBuff, txLenght);
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	6818      	ldr	r0, [r3, #0]
 8000718:	79bb      	ldrb	r3, [r7, #6]
 800071a:	b299      	uxth	r1, r3
 800071c:	797b      	ldrb	r3, [r7, #5]
 800071e:	b29b      	uxth	r3, r3
 8000720:	683a      	ldr	r2, [r7, #0]
 8000722:	f001 fa9d 	bl	8001c60 <HAL_I2C_Master_Transmit_IT>
		I2C_WaitFlag(I2CNo);
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	4618      	mov	r0, r3
 800072a:	f000 f83b 	bl	80007a4 <I2C_WaitFlag>
		res = HAL_I2C_Master_Receive_IT(i2c->handle, DevAddress, rxBuff, rxLenght);
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	6818      	ldr	r0, [r3, #0]
 8000732:	79bb      	ldrb	r3, [r7, #6]
 8000734:	b299      	uxth	r1, r3
 8000736:	7f3b      	ldrb	r3, [r7, #28]
 8000738:	b29b      	uxth	r3, r3
 800073a:	69ba      	ldr	r2, [r7, #24]
 800073c:	f001 fb32 	bl	8001da4 <HAL_I2C_Master_Receive_IT>
 8000740:	4603      	mov	r3, r0
 8000742:	72fb      	strb	r3, [r7, #11]
		I2C_WaitFlag(I2CNo);
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	4618      	mov	r0, r3
 8000748:	f000 f82c 	bl	80007a4 <I2C_WaitFlag>
		return res == I2C_ERROR;
 800074c:	7afb      	ldrb	r3, [r7, #11]
 800074e:	2b01      	cmp	r3, #1
 8000750:	bf0c      	ite	eq
 8000752:	2301      	moveq	r3, #1
 8000754:	2300      	movne	r3, #0
 8000756:	b2db      	uxtb	r3, r3
	}
}
 8000758:	4618      	mov	r0, r3
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <I2C_GetModule>:
 * PRIVATE FUNCTIONS
 *********************************************************/
/** Brief description which ends at this dot. Details follow
 *  here.
 */
I2C_HandleTypeDef_T* I2C_GetModule(uint8_t I2CNo){
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
	switch(I2CNo){
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	2b03      	cmp	r3, #3
 800076e:	d00a      	beq.n	8000786 <I2C_GetModule+0x26>
 8000770:	2b03      	cmp	r3, #3
 8000772:	dc0a      	bgt.n	800078a <I2C_GetModule+0x2a>
 8000774:	2b01      	cmp	r3, #1
 8000776:	d002      	beq.n	800077e <I2C_GetModule+0x1e>
 8000778:	2b02      	cmp	r3, #2
 800077a:	d002      	beq.n	8000782 <I2C_GetModule+0x22>
 800077c:	e005      	b.n	800078a <I2C_GetModule+0x2a>
		case I2CNO_1 : return &I2C_1; break;
 800077e:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <I2C_GetModule+0x38>)
 8000780:	e004      	b.n	800078c <I2C_GetModule+0x2c>
		case I2CNO_2 : return &I2C_2; break;
 8000782:	4b06      	ldr	r3, [pc, #24]	@ (800079c <I2C_GetModule+0x3c>)
 8000784:	e002      	b.n	800078c <I2C_GetModule+0x2c>
		case I2CNO_3 : return &I2C_3; break;
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <I2C_GetModule+0x40>)
 8000788:	e000      	b.n	800078c <I2C_GetModule+0x2c>
		default : return NULL; break;
 800078a:	2300      	movs	r3, #0
	}
}
 800078c:	4618      	mov	r0, r3
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	200001f8 	.word	0x200001f8
 800079c:	20000200 	.word	0x20000200
 80007a0:	20000208 	.word	0x20000208

080007a4 <I2C_WaitFlag>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
void I2C_WaitFlag(uint8_t I2CNo){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
	I2C_HandleTypeDef_T *i2c;
	uint8_t i=0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	73fb      	strb	r3, [r7, #15]
	i2c = I2C_GetModule(I2CNo);
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ffd3 	bl	8000760 <I2C_GetModule>
 80007ba:	60b8      	str	r0, [r7, #8]
	while((!i2c->flag) & (i<20)){
 80007bc:	e005      	b.n	80007ca <I2C_WaitFlag+0x26>
		HAL_Delay(1);
 80007be:	2001      	movs	r0, #1
 80007c0:	f000 fdd8 	bl	8001374 <HAL_Delay>
		i++;
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	3301      	adds	r3, #1
 80007c8:	73fb      	strb	r3, [r7, #15]
	while((!i2c->flag) & (i<20)){
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	791b      	ldrb	r3, [r3, #4]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	bf0c      	ite	eq
 80007d4:	2301      	moveq	r3, #1
 80007d6:	2300      	movne	r3, #0
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	2b13      	cmp	r3, #19
 80007de:	bf94      	ite	ls
 80007e0:	2301      	movls	r3, #1
 80007e2:	2300      	movhi	r3, #0
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	4013      	ands	r3, r2
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d1e7      	bne.n	80007be <I2C_WaitFlag+0x1a>
	}
	i2c->flag = 0;
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	2200      	movs	r2, #0
 80007f2:	711a      	strb	r2, [r3, #4]
}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <HAL_I2C_MasterTxCpltCallback>:
 *********************************************************/
/** Brief description which ends at this dot. Details follow
 *  here.
 */
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  if(I2C_1.handle == hi2c)
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <HAL_I2C_MasterTxCpltCallback+0x48>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	429a      	cmp	r2, r3
 800080c:	d103      	bne.n	8000816 <HAL_I2C_MasterTxCpltCallback+0x1a>
	  I2C_1.flag = 1;
 800080e:	4b0d      	ldr	r3, [pc, #52]	@ (8000844 <HAL_I2C_MasterTxCpltCallback+0x48>)
 8000810:	2201      	movs	r2, #1
 8000812:	711a      	strb	r2, [r3, #4]
  else if(I2C_3.handle == hi2c)
  	  I2C_3.flag = 1;
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8000814:	e010      	b.n	8000838 <HAL_I2C_MasterTxCpltCallback+0x3c>
  else if(I2C_2.handle == hi2c)
 8000816:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <HAL_I2C_MasterTxCpltCallback+0x4c>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	429a      	cmp	r2, r3
 800081e:	d103      	bne.n	8000828 <HAL_I2C_MasterTxCpltCallback+0x2c>
  	  I2C_2.flag = 1;
 8000820:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <HAL_I2C_MasterTxCpltCallback+0x4c>)
 8000822:	2201      	movs	r2, #1
 8000824:	711a      	strb	r2, [r3, #4]
}
 8000826:	e007      	b.n	8000838 <HAL_I2C_MasterTxCpltCallback+0x3c>
  else if(I2C_3.handle == hi2c)
 8000828:	4b08      	ldr	r3, [pc, #32]	@ (800084c <HAL_I2C_MasterTxCpltCallback+0x50>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	429a      	cmp	r2, r3
 8000830:	d102      	bne.n	8000838 <HAL_I2C_MasterTxCpltCallback+0x3c>
  	  I2C_3.flag = 1;
 8000832:	4b06      	ldr	r3, [pc, #24]	@ (800084c <HAL_I2C_MasterTxCpltCallback+0x50>)
 8000834:	2201      	movs	r2, #1
 8000836:	711a      	strb	r2, [r3, #4]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	200001f8 	.word	0x200001f8
 8000848:	20000200 	.word	0x20000200
 800084c:	20000208 	.word	0x20000208

08000850 <HAL_I2C_MasterRxCpltCallback>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	if(I2C_1.handle == hi2c)
 8000858:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <HAL_I2C_MasterRxCpltCallback+0x48>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	429a      	cmp	r2, r3
 8000860:	d103      	bne.n	800086a <HAL_I2C_MasterRxCpltCallback+0x1a>
		I2C_1.flag = 1;
 8000862:	4b0d      	ldr	r3, [pc, #52]	@ (8000898 <HAL_I2C_MasterRxCpltCallback+0x48>)
 8000864:	2201      	movs	r2, #1
 8000866:	711a      	strb	r2, [r3, #4]
	  	I2C_3.flag = 1;

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8000868:	e010      	b.n	800088c <HAL_I2C_MasterRxCpltCallback+0x3c>
	else if(I2C_2.handle == hi2c)
 800086a:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <HAL_I2C_MasterRxCpltCallback+0x4c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	429a      	cmp	r2, r3
 8000872:	d103      	bne.n	800087c <HAL_I2C_MasterRxCpltCallback+0x2c>
	  	I2C_2.flag = 1;
 8000874:	4b09      	ldr	r3, [pc, #36]	@ (800089c <HAL_I2C_MasterRxCpltCallback+0x4c>)
 8000876:	2201      	movs	r2, #1
 8000878:	711a      	strb	r2, [r3, #4]
}
 800087a:	e007      	b.n	800088c <HAL_I2C_MasterRxCpltCallback+0x3c>
	else if(I2C_3.handle == hi2c)
 800087c:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <HAL_I2C_MasterRxCpltCallback+0x50>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	429a      	cmp	r2, r3
 8000884:	d102      	bne.n	800088c <HAL_I2C_MasterRxCpltCallback+0x3c>
	  	I2C_3.flag = 1;
 8000886:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <HAL_I2C_MasterRxCpltCallback+0x50>)
 8000888:	2201      	movs	r2, #1
 800088a:	711a      	strb	r2, [r3, #4]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	200001f8 	.word	0x200001f8
 800089c:	20000200 	.word	0x20000200
 80008a0:	20000208 	.word	0x20000208

080008a4 <MPU6050_DeviceReset>:
MPU6050_Sensor_T MPU6050_1;

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_DeviceReset(MPU6050_Sensor_T *handle){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	return MPU6050_Write(handle, MPU6050_REGISTER_PWR_MGMT_1, MPU6050_DATA_DEVICE_RESET);
 80008ac:	2280      	movs	r2, #128	@ 0x80
 80008ae:	216b      	movs	r1, #107	@ 0x6b
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f000 f915 	bl	8000ae0 <MPU6050_Write>
 80008b6:	4603      	mov	r3, r0
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <MPU6050_AllSignalPathReset>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_AllSignalPathReset(MPU6050_Sensor_T *handle){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	return MPU6050_Write(handle, MPU6050_REGISTER_SIGNAL_PATH_RESET, MPU6050_DATA_ALL_SIGNALPATH_RESET);
 80008c8:	2207      	movs	r2, #7
 80008ca:	2168      	movs	r1, #104	@ 0x68
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f000 f907 	bl	8000ae0 <MPU6050_Write>
 80008d2:	4603      	mov	r3, r0
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <MPU6050_DeviceStartCycle>:
}

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_DeviceStartCycle(MPU6050_Sensor_T *handle){
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	return MPU6050_Write(handle, MPU6050_REGISTER_PWR_MGMT_1, MPU6050_DATA_DEVICE_CYCLE);
 80008e4:	2220      	movs	r2, #32
 80008e6:	216b      	movs	r1, #107	@ 0x6b
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f000 f8f9 	bl	8000ae0 <MPU6050_Write>
 80008ee:	4603      	mov	r3, r0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <MPU6050_Init>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_Init(MPU6050_Sensor_T *handle, uint8_t I2C_No, uint8_t DevAddress){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	460b      	mov	r3, r1
 8000902:	70fb      	strb	r3, [r7, #3]
 8000904:	4613      	mov	r3, r2
 8000906:	70bb      	strb	r3, [r7, #2]
	handle->devParam.I2C_No = I2C_No;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	78fa      	ldrb	r2, [r7, #3]
 800090c:	701a      	strb	r2, [r3, #0]
	handle->devParam.DevAdress = DevAddress;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	78ba      	ldrb	r2, [r7, #2]
 8000912:	705a      	strb	r2, [r3, #1]
	while(MPU6050_DeviceReset(handle))
 8000914:	e002      	b.n	800091c <MPU6050_Init+0x24>
		HAL_Delay(1);
 8000916:	2001      	movs	r0, #1
 8000918:	f000 fd2c 	bl	8001374 <HAL_Delay>
	while(MPU6050_DeviceReset(handle))
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff ffc1 	bl	80008a4 <MPU6050_DeviceReset>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d1f6      	bne.n	8000916 <MPU6050_Init+0x1e>
	HAL_Delay(10);
 8000928:	200a      	movs	r0, #10
 800092a:	f000 fd23 	bl	8001374 <HAL_Delay>
	MPU6050_AllSignalPathReset(handle);
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f7ff ffc6 	bl	80008c0 <MPU6050_AllSignalPathReset>
    if(!MP6050_Get_WhoIAm_Data(handle)){
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f000 f822 	bl	800097e <MP6050_Get_WhoIAm_Data>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d119      	bne.n	8000974 <MPU6050_Init+0x7c>
    	MPU6050_Set_ConfigRegister(handle, MPU6050_DATA_SAMPLERATE_94, 0);
 8000940:	2200      	movs	r2, #0
 8000942:	2102      	movs	r1, #2
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f000 f82f 	bl	80009a8 <MPU6050_Set_ConfigRegister>
		MPU6050_Set_GYROConfigRegister(handle, MPU6050_DATA_GYRO_SCALERANGE_250, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2100      	movs	r1, #0
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f000 f844 	bl	80009dc <MPU6050_Set_GYROConfigRegister>
		MPU6050_Set_ACCELConfigRegister(handle, MPU6050_DATA_ACCEL_SCALERANGE_2, 0); //MPU6050_DATA_ACCEL_ST_XAXIS_ENABLED | MPU6050_DATA_ACCEL_ST_YAXIS_ENABLED | MPU6050_DATA_ACCEL_ST_ZAXIS_ENABLED);
 8000954:	2200      	movs	r2, #0
 8000956:	2100      	movs	r1, #0
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f000 f859 	bl	8000a10 <MPU6050_Set_ACCELConfigRegister>
		HAL_Delay(10);
 800095e:	200a      	movs	r0, #10
 8000960:	f000 fd08 	bl	8001374 <HAL_Delay>
		MPU6050_DeviceStartCycle(handle);
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f7ff ffb9 	bl	80008dc <MPU6050_DeviceStartCycle>
		HAL_Delay(100);
 800096a:	2064      	movs	r0, #100	@ 0x64
 800096c:	f000 fd02 	bl	8001374 <HAL_Delay>
		return MPU6050_OK;
 8000970:	2300      	movs	r3, #0
 8000972:	e000      	b.n	8000976 <MPU6050_Init+0x7e>
    }
    return MPU6050_ERROR;
 8000974:	2301      	movs	r3, #1
}
 8000976:	4618      	mov	r0, r3
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <MP6050_Get_WhoIAm_Data>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MP6050_Get_WhoIAm_Data(MPU6050_Sensor_T *handle){
 800097e:	b580      	push	{r7, lr}
 8000980:	b084      	sub	sp, #16
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
	uint8_t RxBuff[2];
	MPU6050_Read(handle, MPU6050_REGISTER_WHOIAM, RxBuff);
 8000986:	f107 030c 	add.w	r3, r7, #12
 800098a:	461a      	mov	r2, r3
 800098c:	2175      	movs	r1, #117	@ 0x75
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f000 f8cb 	bl	8000b2a <MPU6050_Read>
	if(RxBuff[0] == MPU6050_DATA_WHOIAM)
 8000994:	7b3b      	ldrb	r3, [r7, #12]
 8000996:	2b68      	cmp	r3, #104	@ 0x68
 8000998:	d101      	bne.n	800099e <MP6050_Get_WhoIAm_Data+0x20>
		return MPU6050_OK;
 800099a:	2300      	movs	r3, #0
 800099c:	e000      	b.n	80009a0 <MP6050_Get_WhoIAm_Data+0x22>
	return MPU6050_ERROR;
 800099e:	2301      	movs	r3, #1
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <MPU6050_Set_ConfigRegister>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_Set_ConfigRegister(MPU6050_Sensor_T *handle, uint8_t sampleRate, uint8_t ExtSyncSet){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	460b      	mov	r3, r1
 80009b2:	70fb      	strb	r3, [r7, #3]
 80009b4:	4613      	mov	r3, r2
 80009b6:	70bb      	strb	r3, [r7, #2]
	handle->RegGroup_Config.ConfigRegister = sampleRate | ExtSyncSet;
 80009b8:	78fa      	ldrb	r2, [r7, #3]
 80009ba:	78bb      	ldrb	r3, [r7, #2]
 80009bc:	4313      	orrs	r3, r2
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	709a      	strb	r2, [r3, #2]
	return MPU6050_Write(handle, MPU6050_REGISTER_CONFIG, handle->RegGroup_Config.ConfigRegister);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	789b      	ldrb	r3, [r3, #2]
 80009c8:	461a      	mov	r2, r3
 80009ca:	211a      	movs	r1, #26
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f000 f887 	bl	8000ae0 <MPU6050_Write>
 80009d2:	4603      	mov	r3, r0
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <MPU6050_Set_GYROConfigRegister>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_Set_GYROConfigRegister(MPU6050_Sensor_T *handle, uint8_t scaleRange, uint8_t STaxisEnabled){
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	460b      	mov	r3, r1
 80009e6:	70fb      	strb	r3, [r7, #3]
 80009e8:	4613      	mov	r3, r2
 80009ea:	70bb      	strb	r3, [r7, #2]
	handle->RegGroup_Config.GYRO_ConfigRegister = scaleRange | STaxisEnabled;
 80009ec:	78fa      	ldrb	r2, [r7, #3]
 80009ee:	78bb      	ldrb	r3, [r7, #2]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	70da      	strb	r2, [r3, #3]
	return MPU6050_Write(handle, MPU6050_REGISTER_GYRO_CONFIG, handle->RegGroup_Config.GYRO_ConfigRegister);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	78db      	ldrb	r3, [r3, #3]
 80009fc:	461a      	mov	r2, r3
 80009fe:	211b      	movs	r1, #27
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f000 f86d 	bl	8000ae0 <MPU6050_Write>
 8000a06:	4603      	mov	r3, r0
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <MPU6050_Set_ACCELConfigRegister>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_Set_ACCELConfigRegister(MPU6050_Sensor_T *handle, uint8_t scaleRange, uint8_t STaxisEnabled){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	460b      	mov	r3, r1
 8000a1a:	70fb      	strb	r3, [r7, #3]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	70bb      	strb	r3, [r7, #2]
	handle->RegGroup_Config.ACCEL_ConfigRegister = scaleRange | STaxisEnabled;
 8000a20:	78fa      	ldrb	r2, [r7, #3]
 8000a22:	78bb      	ldrb	r3, [r7, #2]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	711a      	strb	r2, [r3, #4]
	return MPU6050_Write(handle, MPU6050_REGISTER_ACCEL_CONFIG , handle->RegGroup_Config.ACCEL_ConfigRegister);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	791b      	ldrb	r3, [r3, #4]
 8000a30:	461a      	mov	r2, r3
 8000a32:	211c      	movs	r1, #28
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f000 f853 	bl	8000ae0 <MPU6050_Write>
 8000a3a:	4603      	mov	r3, r0
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <MPU6050_Read_ACCEL_Data>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_Read_ACCEL_Data(MPU6050_Sensor_T *handle){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
//	handle->RegGroup_Data.ACCEL_Axis_X_Data = (int16_t)((Data[0]<<8) | Data[1]);
//	handle->RegGroup_Data.ACCEL_Axis_Y_Data = (int16_t)((Data[2]<<8) | Data[3]);
//	handle->RegGroup_Data.ACCEL_Axis_Z_Data = (int16_t)((Data[4]<<8) | Data[5]);
//	return MPU6050_OK;
	uint8_t DataH[1], DataL[1] ;
	MPU6050_Read(handle, MPU6050_REGISTER_ACCEL_OUT_X_H, DataH);
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	461a      	mov	r2, r3
 8000a52:	213b      	movs	r1, #59	@ 0x3b
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f000 f868 	bl	8000b2a <MPU6050_Read>
	MPU6050_Read(handle, MPU6050_REGISTER_ACCEL_OUT_X_L, DataL);
 8000a5a:	f107 0308 	add.w	r3, r7, #8
 8000a5e:	461a      	mov	r2, r3
 8000a60:	213c      	movs	r1, #60	@ 0x3c
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f000 f861 	bl	8000b2a <MPU6050_Read>
	handle->RegGroup_Data.ACCEL_Axis_X_Data = (int16_t)((DataH[0]<<8) | DataL[0]);
 8000a68:	7b3b      	ldrb	r3, [r7, #12]
 8000a6a:	021b      	lsls	r3, r3, #8
 8000a6c:	b21a      	sxth	r2, r3
 8000a6e:	7a3b      	ldrb	r3, [r7, #8]
 8000a70:	b21b      	sxth	r3, r3
 8000a72:	4313      	orrs	r3, r2
 8000a74:	b21a      	sxth	r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	80da      	strh	r2, [r3, #6]

	MPU6050_Read(handle, MPU6050_REGISTER_ACCEL_OUT_Y_H, DataH);
 8000a7a:	f107 030c 	add.w	r3, r7, #12
 8000a7e:	461a      	mov	r2, r3
 8000a80:	213d      	movs	r1, #61	@ 0x3d
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f000 f851 	bl	8000b2a <MPU6050_Read>
	MPU6050_Read(handle, MPU6050_REGISTER_ACCEL_OUT_Y_L, DataL);
 8000a88:	f107 0308 	add.w	r3, r7, #8
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	213e      	movs	r1, #62	@ 0x3e
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f000 f84a 	bl	8000b2a <MPU6050_Read>
	handle->RegGroup_Data.ACCEL_Axis_Y_Data = (int16_t)(DataH[0]<<8) | DataL[0];
 8000a96:	7b3b      	ldrb	r3, [r7, #12]
 8000a98:	021b      	lsls	r3, r3, #8
 8000a9a:	b21a      	sxth	r2, r3
 8000a9c:	7a3b      	ldrb	r3, [r7, #8]
 8000a9e:	b21b      	sxth	r3, r3
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	b21a      	sxth	r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	811a      	strh	r2, [r3, #8]

	MPU6050_Read(handle, MPU6050_REGISTER_ACCEL_OUT_Z_H, DataH);
 8000aa8:	f107 030c 	add.w	r3, r7, #12
 8000aac:	461a      	mov	r2, r3
 8000aae:	213f      	movs	r1, #63	@ 0x3f
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f000 f83a 	bl	8000b2a <MPU6050_Read>
	MPU6050_Read(handle, MPU6050_REGISTER_ACCEL_OUT_Z_L, DataL);
 8000ab6:	f107 0308 	add.w	r3, r7, #8
 8000aba:	461a      	mov	r2, r3
 8000abc:	2140      	movs	r1, #64	@ 0x40
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f000 f833 	bl	8000b2a <MPU6050_Read>
	handle->RegGroup_Data.ACCEL_Axis_Z_Data = (int16_t)((DataH[0]<<8) | DataL[0]);
 8000ac4:	7b3b      	ldrb	r3, [r7, #12]
 8000ac6:	021b      	lsls	r3, r3, #8
 8000ac8:	b21a      	sxth	r2, r3
 8000aca:	7a3b      	ldrb	r3, [r7, #8]
 8000acc:	b21b      	sxth	r3, r3
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	b21a      	sxth	r2, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	815a      	strh	r2, [r3, #10]
	return MPU6050_OK;
 8000ad6:	2300      	movs	r3, #0
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <MPU6050_Write>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_Write(MPU6050_Sensor_T *handle, uint8_t Register, uint8_t Data){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af02      	add	r7, sp, #8
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	70fb      	strb	r3, [r7, #3]
 8000aec:	4613      	mov	r3, r2
 8000aee:	70bb      	strb	r3, [r7, #2]
	MPU6050_ReturnTypeDef_T res;
	uint8_t TxBuff[2];
	TxBuff[0] = Register;
 8000af0:	78fb      	ldrb	r3, [r7, #3]
 8000af2:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = Data;
 8000af4:	78bb      	ldrb	r3, [r7, #2]
 8000af6:	737b      	strb	r3, [r7, #13]
	res = MPU6050_SendReceive(handle->devParam.I2C_No, handle->devParam.DevAdress, TxBuff, 2, 0, 0);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	7818      	ldrb	r0, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	7859      	ldrb	r1, [r3, #1]
 8000b00:	f107 020c 	add.w	r2, r7, #12
 8000b04:	2300      	movs	r3, #0
 8000b06:	9301      	str	r3, [sp, #4]
 8000b08:	2300      	movs	r3, #0
 8000b0a:	9300      	str	r3, [sp, #0]
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	f000 f82e 	bl	8000b6e <MPU6050_SendReceive>
 8000b12:	4603      	mov	r3, r0
 8000b14:	73fb      	strb	r3, [r7, #15]
	if(res == MPU6050_OK)
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d101      	bne.n	8000b20 <MPU6050_Write+0x40>
		return MPU6050_OK;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	e000      	b.n	8000b22 <MPU6050_Write+0x42>
	else
		return MPU6050_ERROR;
 8000b20:	2301      	movs	r3, #1
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <MPU6050_Read>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_Read(MPU6050_Sensor_T *handle, uint8_t Register, uint8_t *RxBuff){
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b088      	sub	sp, #32
 8000b2e:	af02      	add	r7, sp, #8
 8000b30:	60f8      	str	r0, [r7, #12]
 8000b32:	460b      	mov	r3, r1
 8000b34:	607a      	str	r2, [r7, #4]
 8000b36:	72fb      	strb	r3, [r7, #11]
	MPU6050_ReturnTypeDef_T res;
	uint8_t TxBuff[1];
	TxBuff[0] = Register;
 8000b38:	7afb      	ldrb	r3, [r7, #11]
 8000b3a:	753b      	strb	r3, [r7, #20]
	res = MPU6050_SendReceive(handle->devParam.I2C_No, handle->devParam.DevAdress, TxBuff, 1, RxBuff, 1);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	7818      	ldrb	r0, [r3, #0]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	7859      	ldrb	r1, [r3, #1]
 8000b44:	f107 0214 	add.w	r2, r7, #20
 8000b48:	2301      	movs	r3, #1
 8000b4a:	9301      	str	r3, [sp, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	2301      	movs	r3, #1
 8000b52:	f000 f80c 	bl	8000b6e <MPU6050_SendReceive>
 8000b56:	4603      	mov	r3, r0
 8000b58:	75fb      	strb	r3, [r7, #23]
	if(res == MPU6050_OK)
 8000b5a:	7dfb      	ldrb	r3, [r7, #23]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d101      	bne.n	8000b64 <MPU6050_Read+0x3a>
		return MPU6050_OK;
 8000b60:	2300      	movs	r3, #0
 8000b62:	e000      	b.n	8000b66 <MPU6050_Read+0x3c>
	else
		return MPU6050_ERROR;
 8000b64:	2301      	movs	r3, #1
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <MPU6050_SendReceive>:
 *      Author: esenk
 */

#include "I2C.h"

uint8_t MPU6050_SendReceive(uint8_t I2CNo, uint8_t DevAddress, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b084      	sub	sp, #16
 8000b72:	af02      	add	r7, sp, #8
 8000b74:	603a      	str	r2, [r7, #0]
 8000b76:	461a      	mov	r2, r3
 8000b78:	4603      	mov	r3, r0
 8000b7a:	71fb      	strb	r3, [r7, #7]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	71bb      	strb	r3, [r7, #6]
 8000b80:	4613      	mov	r3, r2
 8000b82:	717b      	strb	r3, [r7, #5]
	HAL_Delay(5);
 8000b84:	2005      	movs	r0, #5
 8000b86:	f000 fbf5 	bl	8001374 <HAL_Delay>
	return I2C_ReadWrite(I2CNo, DevAddress, txBuff, txLenght, rxBuff, rxLenght);
 8000b8a:	797a      	ldrb	r2, [r7, #5]
 8000b8c:	79b9      	ldrb	r1, [r7, #6]
 8000b8e:	79f8      	ldrb	r0, [r7, #7]
 8000b90:	7d3b      	ldrb	r3, [r7, #20]
 8000b92:	9301      	str	r3, [sp, #4]
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	683a      	ldr	r2, [r7, #0]
 8000b9c:	f7ff fd91 	bl	80006c2 <I2C_ReadWrite>
 8000ba0:	4603      	mov	r3, r0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <MPU6050_MATH_Calculate_mG_Value>:
#include "MPU6050.h"
#include "MPU6050_Math.h"
/** Brief description which ends at this dot. Details follow
 *  here.
 */
void MPU6050_MATH_Calculate_mG_Value(MPU6050_Sensor_T *handle){
 8000bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000bb0:	b08c      	sub	sp, #48	@ 0x30
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	61f8      	str	r0, [r7, #28]
	int64_t tempValue;
	uint16_t MPU_Accel_LSB_Value = MPU6050_MATH_Get_LSB_Value(handle);
 8000bb6:	69f8      	ldr	r0, [r7, #28]
 8000bb8:	f000 f85e 	bl	8000c78 <MPU6050_MATH_Get_LSB_Value>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	tempValue = (int64_t)(MPU6050_1.FilteredValues.ACCEL_Axis_X_Filtered*1000);
 8000bc0:	4b2c      	ldr	r3, [pc, #176]	@ (8000c74 <MPU6050_MATH_Calculate_mG_Value+0xc8>)
 8000bc2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bcc:	fb02 f303 	mul.w	r3, r2, r3
 8000bd0:	17da      	asrs	r2, r3, #31
 8000bd2:	461c      	mov	r4, r3
 8000bd4:	4615      	mov	r5, r2
 8000bd6:	e9c7 4508 	strd	r4, r5, [r7, #32]
	handle->CalculatedValues.ACCEL_Axis_X_Mg = tempValue / MPU_Accel_LSB_Value;
 8000bda:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000bdc:	2200      	movs	r2, #0
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	617a      	str	r2, [r7, #20]
 8000be2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000be6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000bea:	f7ff faed 	bl	80001c8 <__aeabi_ldivmod>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	b212      	sxth	r2, r2
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	831a      	strh	r2, [r3, #24]

	tempValue = MPU6050_1.FilteredValues.ACCEL_Axis_Y_Filtered*1000;
 8000bf8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c74 <MPU6050_MATH_Calculate_mG_Value+0xc8>)
 8000bfa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c04:	fb02 f303 	mul.w	r3, r2, r3
 8000c08:	17da      	asrs	r2, r3, #31
 8000c0a:	469a      	mov	sl, r3
 8000c0c:	4693      	mov	fp, r2
 8000c0e:	e9c7 ab08 	strd	sl, fp, [r7, #32]
	handle->CalculatedValues.ACCEL_Axis_Y_Mg = tempValue / MPU_Accel_LSB_Value;
 8000c12:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000c14:	2200      	movs	r2, #0
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	60fa      	str	r2, [r7, #12]
 8000c1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000c1e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000c22:	f7ff fad1 	bl	80001c8 <__aeabi_ldivmod>
 8000c26:	4602      	mov	r2, r0
 8000c28:	460b      	mov	r3, r1
 8000c2a:	b212      	sxth	r2, r2
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	835a      	strh	r2, [r3, #26]

	tempValue = MPU6050_1.FilteredValues.ACCEL_Axis_Z_Filtered*1000;
 8000c30:	4b10      	ldr	r3, [pc, #64]	@ (8000c74 <MPU6050_MATH_Calculate_mG_Value+0xc8>)
 8000c32:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000c36:	461a      	mov	r2, r3
 8000c38:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c3c:	fb02 f303 	mul.w	r3, r2, r3
 8000c40:	17da      	asrs	r2, r3, #31
 8000c42:	4698      	mov	r8, r3
 8000c44:	4691      	mov	r9, r2
 8000c46:	e9c7 8908 	strd	r8, r9, [r7, #32]
	handle->CalculatedValues.ACCEL_Axis_Z_Mg = tempValue / MPU_Accel_LSB_Value;
 8000c4a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	607a      	str	r2, [r7, #4]
 8000c52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000c56:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000c5a:	f7ff fab5 	bl	80001c8 <__aeabi_ldivmod>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	460b      	mov	r3, r1
 8000c62:	b212      	sxth	r2, r2
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	839a      	strh	r2, [r3, #28]
}
 8000c68:	bf00      	nop
 8000c6a:	3730      	adds	r7, #48	@ 0x30
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000c72:	bf00      	nop
 8000c74:	20000210 	.word	0x20000210

08000c78 <MPU6050_MATH_Get_LSB_Value>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
uint16_t MPU6050_MATH_Get_LSB_Value(MPU6050_Sensor_T *handle){
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	switch(handle->RegGroup_Config.ACCEL_ConfigRegister>>3){
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	791b      	ldrb	r3, [r3, #4]
 8000c84:	08db      	lsrs	r3, r3, #3
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b18      	cmp	r3, #24
 8000c8a:	d841      	bhi.n	8000d10 <MPU6050_MATH_Get_LSB_Value+0x98>
 8000c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8000c94 <MPU6050_MATH_Get_LSB_Value+0x1c>)
 8000c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c92:	bf00      	nop
 8000c94:	08000cf9 	.word	0x08000cf9
 8000c98:	08000d11 	.word	0x08000d11
 8000c9c:	08000d11 	.word	0x08000d11
 8000ca0:	08000d11 	.word	0x08000d11
 8000ca4:	08000d11 	.word	0x08000d11
 8000ca8:	08000d11 	.word	0x08000d11
 8000cac:	08000d11 	.word	0x08000d11
 8000cb0:	08000d11 	.word	0x08000d11
 8000cb4:	08000cff 	.word	0x08000cff
 8000cb8:	08000d11 	.word	0x08000d11
 8000cbc:	08000d11 	.word	0x08000d11
 8000cc0:	08000d11 	.word	0x08000d11
 8000cc4:	08000d11 	.word	0x08000d11
 8000cc8:	08000d11 	.word	0x08000d11
 8000ccc:	08000d11 	.word	0x08000d11
 8000cd0:	08000d11 	.word	0x08000d11
 8000cd4:	08000d05 	.word	0x08000d05
 8000cd8:	08000d11 	.word	0x08000d11
 8000cdc:	08000d11 	.word	0x08000d11
 8000ce0:	08000d11 	.word	0x08000d11
 8000ce4:	08000d11 	.word	0x08000d11
 8000ce8:	08000d11 	.word	0x08000d11
 8000cec:	08000d11 	.word	0x08000d11
 8000cf0:	08000d11 	.word	0x08000d11
 8000cf4:	08000d0b 	.word	0x08000d0b
		case  MPU6050_DATA_ACCEL_SCALERANGE_2 : return MPU6050_2G_LSB_VALUE ;
 8000cf8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000cfc:	e009      	b.n	8000d12 <MPU6050_MATH_Get_LSB_Value+0x9a>
		break;
		case  MPU6050_DATA_ACCEL_SCALERANGE_4 : return MPU6050_4G_LSB_VALUE ;
 8000cfe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d02:	e006      	b.n	8000d12 <MPU6050_MATH_Get_LSB_Value+0x9a>
		break;
		case  MPU6050_DATA_ACCEL_SCALERANGE_8 : return MPU6050_8G_LSB_VALUE ;
 8000d04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d08:	e003      	b.n	8000d12 <MPU6050_MATH_Get_LSB_Value+0x9a>
		break;
		case  MPU6050_DATA_ACCEL_SCALERANGE_16 :return MPU6050_16G_LSB_VALUE ;
 8000d0a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d0e:	e000      	b.n	8000d12 <MPU6050_MATH_Get_LSB_Value+0x9a>
		break;
		default : return 0;
 8000d10:	2300      	movs	r3, #0
	}
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop

08000d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d24:	f000 fab4 	bl	8001290 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d28:	f000 f850 	bl	8000dcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d2c:	f000 f8ea 	bl	8000f04 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000d30:	f000 f8b6 	bl	8000ea0 <MX_I2C2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  MPU6050_Init(&MPU6050_1, I2CNO_2, MPU6050_DEVICE_ADDRESS);
 8000d34:	22d0      	movs	r2, #208	@ 0xd0
 8000d36:	2102      	movs	r1, #2
 8000d38:	4820      	ldr	r0, [pc, #128]	@ (8000dbc <main+0x9c>)
 8000d3a:	f7ff fddd 	bl	80008f8 <MPU6050_Init>
  HAL_Delay(500);
 8000d3e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d42:	f000 fb17 	bl	8001374 <HAL_Delay>
  AvarageFilter_Init(&AvarageFilter_MPU6050_X, 5);
 8000d46:	2105      	movs	r1, #5
 8000d48:	481d      	ldr	r0, [pc, #116]	@ (8000dc0 <main+0xa0>)
 8000d4a:	f7ff fc05 	bl	8000558 <AvarageFilter_Init>
  AvarageFilter_Init(&AvarageFilter_MPU6050_Y, 5);
 8000d4e:	2105      	movs	r1, #5
 8000d50:	481c      	ldr	r0, [pc, #112]	@ (8000dc4 <main+0xa4>)
 8000d52:	f7ff fc01 	bl	8000558 <AvarageFilter_Init>
  AvarageFilter_Init(&AvarageFilter_MPU6050_Z, 5);
 8000d56:	2105      	movs	r1, #5
 8000d58:	481b      	ldr	r0, [pc, #108]	@ (8000dc8 <main+0xa8>)
 8000d5a:	f7ff fbfd 	bl	8000558 <AvarageFilter_Init>
while (1)
{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	MPU6050_Read_ACCEL_Data(&MPU6050_1);
 8000d5e:	4817      	ldr	r0, [pc, #92]	@ (8000dbc <main+0x9c>)
 8000d60:	f7ff fe70 	bl	8000a44 <MPU6050_Read_ACCEL_Data>
	AvarageFilter(&AvarageFilter_MPU6050_X, MPU6050_1.RegGroup_Data.ACCEL_Axis_X_Data);
 8000d64:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <main+0x9c>)
 8000d66:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4814      	ldr	r0, [pc, #80]	@ (8000dc0 <main+0xa0>)
 8000d6e:	f7ff fc0d 	bl	800058c <AvarageFilter>
	AvarageFilter(&AvarageFilter_MPU6050_Y, MPU6050_1.RegGroup_Data.ACCEL_Axis_Y_Data);
 8000d72:	4b12      	ldr	r3, [pc, #72]	@ (8000dbc <main+0x9c>)
 8000d74:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4812      	ldr	r0, [pc, #72]	@ (8000dc4 <main+0xa4>)
 8000d7c:	f7ff fc06 	bl	800058c <AvarageFilter>
	AvarageFilter(&AvarageFilter_MPU6050_Z, MPU6050_1.RegGroup_Data.ACCEL_Axis_Z_Data);
 8000d80:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <main+0x9c>)
 8000d82:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d86:	4619      	mov	r1, r3
 8000d88:	480f      	ldr	r0, [pc, #60]	@ (8000dc8 <main+0xa8>)
 8000d8a:	f7ff fbff 	bl	800058c <AvarageFilter>
	MPU6050_1.FilteredValues.ACCEL_Axis_X_Filtered = AvarageFilter_MPU6050_X.Avarage;
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <main+0xa0>)
 8000d90:	f9b3 2090 	ldrsh.w	r2, [r3, #144]	@ 0x90
 8000d94:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <main+0x9c>)
 8000d96:	825a      	strh	r2, [r3, #18]
	MPU6050_1.FilteredValues.ACCEL_Axis_Y_Filtered = AvarageFilter_MPU6050_Y.Avarage;
 8000d98:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc4 <main+0xa4>)
 8000d9a:	f9b3 2090 	ldrsh.w	r2, [r3, #144]	@ 0x90
 8000d9e:	4b07      	ldr	r3, [pc, #28]	@ (8000dbc <main+0x9c>)
 8000da0:	829a      	strh	r2, [r3, #20]
	MPU6050_1.FilteredValues.ACCEL_Axis_Z_Filtered = AvarageFilter_MPU6050_Z.Avarage;
 8000da2:	4b09      	ldr	r3, [pc, #36]	@ (8000dc8 <main+0xa8>)
 8000da4:	f9b3 2090 	ldrsh.w	r2, [r3, #144]	@ 0x90
 8000da8:	4b04      	ldr	r3, [pc, #16]	@ (8000dbc <main+0x9c>)
 8000daa:	82da      	strh	r2, [r3, #22]
	MPU6050_MATH_Calculate_mG_Value(&MPU6050_1);
 8000dac:	4803      	ldr	r0, [pc, #12]	@ (8000dbc <main+0x9c>)
 8000dae:	f7ff fefd 	bl	8000bac <MPU6050_MATH_Calculate_mG_Value>
	HAL_Delay(10);
 8000db2:	200a      	movs	r0, #10
 8000db4:	f000 fade 	bl	8001374 <HAL_Delay>
	MPU6050_Read_ACCEL_Data(&MPU6050_1);
 8000db8:	bf00      	nop
 8000dba:	e7d0      	b.n	8000d5e <main+0x3e>
 8000dbc:	20000210 	.word	0x20000210
 8000dc0:	20000030 	.word	0x20000030
 8000dc4:	200000c8 	.word	0x200000c8
 8000dc8:	20000160 	.word	0x20000160

08000dcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b094      	sub	sp, #80	@ 0x50
 8000dd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd2:	f107 0320 	add.w	r3, r7, #32
 8000dd6:	2230      	movs	r2, #48	@ 0x30
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f003 f9d0 	bl	8004180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df0:	2300      	movs	r3, #0
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	4b28      	ldr	r3, [pc, #160]	@ (8000e98 <SystemClock_Config+0xcc>)
 8000df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df8:	4a27      	ldr	r2, [pc, #156]	@ (8000e98 <SystemClock_Config+0xcc>)
 8000dfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dfe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e00:	4b25      	ldr	r3, [pc, #148]	@ (8000e98 <SystemClock_Config+0xcc>)
 8000e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	4b22      	ldr	r3, [pc, #136]	@ (8000e9c <SystemClock_Config+0xd0>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a21      	ldr	r2, [pc, #132]	@ (8000e9c <SystemClock_Config+0xd0>)
 8000e16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e1a:	6013      	str	r3, [r2, #0]
 8000e1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000e9c <SystemClock_Config+0xd0>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e30:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e32:	2302      	movs	r3, #2
 8000e34:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e36:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e3c:	2308      	movs	r3, #8
 8000e3e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e40:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000e44:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e46:	2302      	movs	r3, #2
 8000e48:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e4a:	2307      	movs	r3, #7
 8000e4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e4e:	f107 0320 	add.w	r3, r7, #32
 8000e52:	4618      	mov	r0, r3
 8000e54:	f002 fd10 	bl	8003878 <HAL_RCC_OscConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e5e:	f000 f911 	bl	8001084 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e62:	230f      	movs	r3, #15
 8000e64:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e66:	2302      	movs	r3, #2
 8000e68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e6e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e78:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e7a:	f107 030c 	add.w	r3, r7, #12
 8000e7e:	2105      	movs	r1, #5
 8000e80:	4618      	mov	r0, r3
 8000e82:	f002 ff71 	bl	8003d68 <HAL_RCC_ClockConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e8c:	f000 f8fa 	bl	8001084 <Error_Handler>
  }
}
 8000e90:	bf00      	nop
 8000e92:	3750      	adds	r7, #80	@ 0x50
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40007000 	.word	0x40007000

08000ea0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ea4:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <MX_I2C2_Init+0x58>)
 8000ea6:	4a15      	ldr	r2, [pc, #84]	@ (8000efc <MX_I2C2_Init+0x5c>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	@ (8000ef8 <MX_I2C2_Init+0x58>)
 8000eac:	4a14      	ldr	r2, [pc, #80]	@ (8000f00 <MX_I2C2_Init+0x60>)
 8000eae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <MX_I2C2_Init+0x58>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000eb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <MX_I2C2_Init+0x58>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <MX_I2C2_Init+0x58>)
 8000ebe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ec2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <MX_I2C2_Init+0x58>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <MX_I2C2_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ed0:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <MX_I2C2_Init+0x58>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <MX_I2C2_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000edc:	4806      	ldr	r0, [pc, #24]	@ (8000ef8 <MX_I2C2_Init+0x58>)
 8000ede:	f000 fd65 	bl	80019ac <HAL_I2C_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ee8:	f000 f8cc 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  I2C_Init(&hi2c2, 2);
 8000eec:	2102      	movs	r1, #2
 8000eee:	4802      	ldr	r0, [pc, #8]	@ (8000ef8 <MX_I2C2_Init+0x58>)
 8000ef0:	f7ff fbd5 	bl	800069e <I2C_Init>
  /* USER CODE END I2C2_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000230 	.word	0x20000230
 8000efc:	40005800 	.word	0x40005800
 8000f00:	000186a0 	.word	0x000186a0

08000f04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08c      	sub	sp, #48	@ 0x30
 8000f08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
 8000f1e:	4b53      	ldr	r3, [pc, #332]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	4a52      	ldr	r2, [pc, #328]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2a:	4b50      	ldr	r3, [pc, #320]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	61bb      	str	r3, [r7, #24]
 8000f34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
 8000f3a:	4b4c      	ldr	r3, [pc, #304]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	4a4b      	ldr	r2, [pc, #300]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f46:	4b49      	ldr	r3, [pc, #292]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	4b45      	ldr	r3, [pc, #276]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	4a44      	ldr	r2, [pc, #272]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f62:	4b42      	ldr	r3, [pc, #264]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b3e      	ldr	r3, [pc, #248]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	4a3d      	ldr	r2, [pc, #244]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f78:	f043 0310 	orr.w	r3, r3, #16
 8000f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7e:	4b3b      	ldr	r3, [pc, #236]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	f003 0310 	and.w	r3, r3, #16
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	4b37      	ldr	r3, [pc, #220]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	4a36      	ldr	r2, [pc, #216]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f94:	f043 0308 	orr.w	r3, r3, #8
 8000f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9a:	4b34      	ldr	r3, [pc, #208]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	f003 0308 	and.w	r3, r3, #8
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	4b30      	ldr	r3, [pc, #192]	@ (800106c <MX_GPIO_Init+0x168>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	4a2f      	ldr	r2, [pc, #188]	@ (800106c <MX_GPIO_Init+0x168>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb6:	4b2d      	ldr	r3, [pc, #180]	@ (800106c <MX_GPIO_Init+0x168>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fc8:	4829      	ldr	r0, [pc, #164]	@ (8001070 <MX_GPIO_Init+0x16c>)
 8000fca:	f000 fcd5 	bl	8001978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000fd4:	4827      	ldr	r0, [pc, #156]	@ (8001074 <MX_GPIO_Init+0x170>)
 8000fd6:	f000 fccf 	bl	8001978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fde:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fe2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe8:	f107 031c 	add.w	r3, r7, #28
 8000fec:	4619      	mov	r1, r3
 8000fee:	4822      	ldr	r0, [pc, #136]	@ (8001078 <MX_GPIO_Init+0x174>)
 8000ff0:	f000 fb26 	bl	8001640 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4619      	mov	r1, r3
 8001006:	481d      	ldr	r0, [pc, #116]	@ (800107c <MX_GPIO_Init+0x178>)
 8001008:	f000 fb1a 	bl	8001640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800100c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001012:	2301      	movs	r3, #1
 8001014:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	4619      	mov	r1, r3
 8001024:	4812      	ldr	r0, [pc, #72]	@ (8001070 <MX_GPIO_Init+0x16c>)
 8001026:	f000 fb0b 	bl	8001640 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 800102a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800102e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	4619      	mov	r1, r3
 8001042:	480c      	ldr	r0, [pc, #48]	@ (8001074 <MX_GPIO_Init+0x170>)
 8001044:	f000 fafc 	bl	8001640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001048:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800104c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800104e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001052:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	4619      	mov	r1, r3
 800105e:	4808      	ldr	r0, [pc, #32]	@ (8001080 <MX_GPIO_Init+0x17c>)
 8001060:	f000 faee 	bl	8001640 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001064:	bf00      	nop
 8001066:	3730      	adds	r7, #48	@ 0x30
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40023800 	.word	0x40023800
 8001070:	40021000 	.word	0x40021000
 8001074:	40020c00 	.word	0x40020c00
 8001078:	40020800 	.word	0x40020800
 800107c:	40020400 	.word	0x40020400
 8001080:	40020000 	.word	0x40020000

08001084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001088:	b672      	cpsid	i
}
 800108a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <Error_Handler+0x8>

08001090 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	4b10      	ldr	r3, [pc, #64]	@ (80010dc <HAL_MspInit+0x4c>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800109e:	4a0f      	ldr	r2, [pc, #60]	@ (80010dc <HAL_MspInit+0x4c>)
 80010a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010a6:	4b0d      	ldr	r3, [pc, #52]	@ (80010dc <HAL_MspInit+0x4c>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	603b      	str	r3, [r7, #0]
 80010b6:	4b09      	ldr	r3, [pc, #36]	@ (80010dc <HAL_MspInit+0x4c>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ba:	4a08      	ldr	r2, [pc, #32]	@ (80010dc <HAL_MspInit+0x4c>)
 80010bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010c2:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <HAL_MspInit+0x4c>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010ce:	2007      	movs	r0, #7
 80010d0:	f000 fa44 	bl	800155c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40023800 	.word	0x40023800

080010e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	@ 0x28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a21      	ldr	r2, [pc, #132]	@ (8001184 <HAL_I2C_MspInit+0xa4>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d13c      	bne.n	800117c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	4b20      	ldr	r3, [pc, #128]	@ (8001188 <HAL_I2C_MspInit+0xa8>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	4a1f      	ldr	r2, [pc, #124]	@ (8001188 <HAL_I2C_MspInit+0xa8>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	6313      	str	r3, [r2, #48]	@ 0x30
 8001112:	4b1d      	ldr	r3, [pc, #116]	@ (8001188 <HAL_I2C_MspInit+0xa8>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800111e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001124:	2312      	movs	r3, #18
 8001126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112c:	2303      	movs	r3, #3
 800112e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001130:	2304      	movs	r3, #4
 8001132:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4619      	mov	r1, r3
 800113a:	4814      	ldr	r0, [pc, #80]	@ (800118c <HAL_I2C_MspInit+0xac>)
 800113c:	f000 fa80 	bl	8001640 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	4b10      	ldr	r3, [pc, #64]	@ (8001188 <HAL_I2C_MspInit+0xa8>)
 8001146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001148:	4a0f      	ldr	r2, [pc, #60]	@ (8001188 <HAL_I2C_MspInit+0xa8>)
 800114a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800114e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001150:	4b0d      	ldr	r3, [pc, #52]	@ (8001188 <HAL_I2C_MspInit+0xa8>)
 8001152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001154:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	2021      	movs	r0, #33	@ 0x21
 8001162:	f000 fa06 	bl	8001572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001166:	2021      	movs	r0, #33	@ 0x21
 8001168:	f000 fa1f 	bl	80015aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2100      	movs	r1, #0
 8001170:	2022      	movs	r0, #34	@ 0x22
 8001172:	f000 f9fe 	bl	8001572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001176:	2022      	movs	r0, #34	@ 0x22
 8001178:	f000 fa17 	bl	80015aa <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800117c:	bf00      	nop
 800117e:	3728      	adds	r7, #40	@ 0x28
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40005800 	.word	0x40005800
 8001188:	40023800 	.word	0x40023800
 800118c:	40020400 	.word	0x40020400

08001190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <NMI_Handler+0x4>

08001198 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <HardFault_Handler+0x4>

080011a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <MemManage_Handler+0x4>

080011a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <BusFault_Handler+0x4>

080011b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <UsageFault_Handler+0x4>

080011b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e6:	f000 f8a5 	bl	8001334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80011f4:	4802      	ldr	r0, [pc, #8]	@ (8001200 <I2C2_EV_IRQHandler+0x10>)
 80011f6:	f000 fe7f 	bl	8001ef8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000230 	.word	0x20000230

08001204 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001208:	4802      	ldr	r0, [pc, #8]	@ (8001214 <I2C2_ER_IRQHandler+0x10>)
 800120a:	f000 ffc8 	bl	800219e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000230 	.word	0x20000230

08001218 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800121c:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <SystemInit+0x20>)
 800121e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001222:	4a05      	ldr	r2, [pc, #20]	@ (8001238 <SystemInit+0x20>)
 8001224:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001228:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800123c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001274 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001240:	f7ff ffea 	bl	8001218 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001244:	480c      	ldr	r0, [pc, #48]	@ (8001278 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001246:	490d      	ldr	r1, [pc, #52]	@ (800127c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001248:	4a0d      	ldr	r2, [pc, #52]	@ (8001280 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800124c:	e002      	b.n	8001254 <LoopCopyDataInit>

0800124e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001252:	3304      	adds	r3, #4

08001254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001258:	d3f9      	bcc.n	800124e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125a:	4a0a      	ldr	r2, [pc, #40]	@ (8001284 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800125c:	4c0a      	ldr	r4, [pc, #40]	@ (8001288 <LoopFillZerobss+0x22>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001260:	e001      	b.n	8001266 <LoopFillZerobss>

08001262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001264:	3204      	adds	r2, #4

08001266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001268:	d3fb      	bcc.n	8001262 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800126a:	f002 ff91 	bl	8004190 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800126e:	f7ff fd57 	bl	8000d20 <main>
  bx  lr    
 8001272:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001274:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800127c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001280:	08004218 	.word	0x08004218
  ldr r2, =_sbss
 8001284:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001288:	20000288 	.word	0x20000288

0800128c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800128c:	e7fe      	b.n	800128c <ADC_IRQHandler>
	...

08001290 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001294:	4b0e      	ldr	r3, [pc, #56]	@ (80012d0 <HAL_Init+0x40>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0d      	ldr	r2, [pc, #52]	@ (80012d0 <HAL_Init+0x40>)
 800129a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800129e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012a0:	4b0b      	ldr	r3, [pc, #44]	@ (80012d0 <HAL_Init+0x40>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a0a      	ldr	r2, [pc, #40]	@ (80012d0 <HAL_Init+0x40>)
 80012a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ac:	4b08      	ldr	r3, [pc, #32]	@ (80012d0 <HAL_Init+0x40>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a07      	ldr	r2, [pc, #28]	@ (80012d0 <HAL_Init+0x40>)
 80012b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b8:	2003      	movs	r0, #3
 80012ba:	f000 f94f 	bl	800155c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012be:	2000      	movs	r0, #0
 80012c0:	f000 f808 	bl	80012d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012c4:	f7ff fee4 	bl	8001090 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023c00 	.word	0x40023c00

080012d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012dc:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <HAL_InitTick+0x54>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b12      	ldr	r3, [pc, #72]	@ (800132c <HAL_InitTick+0x58>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4619      	mov	r1, r3
 80012e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f967 	bl	80015c6 <HAL_SYSTICK_Config>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e00e      	b.n	8001320 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b0f      	cmp	r3, #15
 8001306:	d80a      	bhi.n	800131e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001308:	2200      	movs	r2, #0
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f000 f92f 	bl	8001572 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001314:	4a06      	ldr	r2, [pc, #24]	@ (8001330 <HAL_InitTick+0x5c>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	e000      	b.n	8001320 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000000 	.word	0x20000000
 800132c:	20000008 	.word	0x20000008
 8001330:	20000004 	.word	0x20000004

08001334 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001338:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <HAL_IncTick+0x20>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <HAL_IncTick+0x24>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4413      	add	r3, r2
 8001344:	4a04      	ldr	r2, [pc, #16]	@ (8001358 <HAL_IncTick+0x24>)
 8001346:	6013      	str	r3, [r2, #0]
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	20000008 	.word	0x20000008
 8001358:	20000284 	.word	0x20000284

0800135c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return uwTick;
 8001360:	4b03      	ldr	r3, [pc, #12]	@ (8001370 <HAL_GetTick+0x14>)
 8001362:	681b      	ldr	r3, [r3, #0]
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000284 	.word	0x20000284

08001374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800137c:	f7ff ffee 	bl	800135c <HAL_GetTick>
 8001380:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800138c:	d005      	beq.n	800139a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800138e:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <HAL_Delay+0x44>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4413      	add	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800139a:	bf00      	nop
 800139c:	f7ff ffde 	bl	800135c <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d8f7      	bhi.n	800139c <HAL_Delay+0x28>
  {
  }
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000008 	.word	0x20000008

080013bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001400 <__NVIC_SetPriorityGrouping+0x44>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013d8:	4013      	ands	r3, r2
 80013da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ee:	4a04      	ldr	r2, [pc, #16]	@ (8001400 <__NVIC_SetPriorityGrouping+0x44>)
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	60d3      	str	r3, [r2, #12]
}
 80013f4:	bf00      	nop
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001408:	4b04      	ldr	r3, [pc, #16]	@ (800141c <__NVIC_GetPriorityGrouping+0x18>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	0a1b      	lsrs	r3, r3, #8
 800140e:	f003 0307 	and.w	r3, r3, #7
}
 8001412:	4618      	mov	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	2b00      	cmp	r3, #0
 8001430:	db0b      	blt.n	800144a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	f003 021f 	and.w	r2, r3, #31
 8001438:	4907      	ldr	r1, [pc, #28]	@ (8001458 <__NVIC_EnableIRQ+0x38>)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	095b      	lsrs	r3, r3, #5
 8001440:	2001      	movs	r0, #1
 8001442:	fa00 f202 	lsl.w	r2, r0, r2
 8001446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000e100 	.word	0xe000e100

0800145c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	6039      	str	r1, [r7, #0]
 8001466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146c:	2b00      	cmp	r3, #0
 800146e:	db0a      	blt.n	8001486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	b2da      	uxtb	r2, r3
 8001474:	490c      	ldr	r1, [pc, #48]	@ (80014a8 <__NVIC_SetPriority+0x4c>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	0112      	lsls	r2, r2, #4
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	440b      	add	r3, r1
 8001480:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001484:	e00a      	b.n	800149c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4908      	ldr	r1, [pc, #32]	@ (80014ac <__NVIC_SetPriority+0x50>)
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	f003 030f 	and.w	r3, r3, #15
 8001492:	3b04      	subs	r3, #4
 8001494:	0112      	lsls	r2, r2, #4
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	440b      	add	r3, r1
 800149a:	761a      	strb	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000e100 	.word	0xe000e100
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b089      	sub	sp, #36	@ 0x24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f1c3 0307 	rsb	r3, r3, #7
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	bf28      	it	cs
 80014ce:	2304      	movcs	r3, #4
 80014d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3304      	adds	r3, #4
 80014d6:	2b06      	cmp	r3, #6
 80014d8:	d902      	bls.n	80014e0 <NVIC_EncodePriority+0x30>
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3b03      	subs	r3, #3
 80014de:	e000      	b.n	80014e2 <NVIC_EncodePriority+0x32>
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e4:	f04f 32ff 	mov.w	r2, #4294967295
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43da      	mvns	r2, r3
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	401a      	ands	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f8:	f04f 31ff 	mov.w	r1, #4294967295
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001502:	43d9      	mvns	r1, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	4313      	orrs	r3, r2
         );
}
 800150a:	4618      	mov	r0, r3
 800150c:	3724      	adds	r7, #36	@ 0x24
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3b01      	subs	r3, #1
 8001524:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001528:	d301      	bcc.n	800152e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152a:	2301      	movs	r3, #1
 800152c:	e00f      	b.n	800154e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152e:	4a0a      	ldr	r2, [pc, #40]	@ (8001558 <SysTick_Config+0x40>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001536:	210f      	movs	r1, #15
 8001538:	f04f 30ff 	mov.w	r0, #4294967295
 800153c:	f7ff ff8e 	bl	800145c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001540:	4b05      	ldr	r3, [pc, #20]	@ (8001558 <SysTick_Config+0x40>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001546:	4b04      	ldr	r3, [pc, #16]	@ (8001558 <SysTick_Config+0x40>)
 8001548:	2207      	movs	r2, #7
 800154a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	e000e010 	.word	0xe000e010

0800155c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ff29 	bl	80013bc <__NVIC_SetPriorityGrouping>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001572:	b580      	push	{r7, lr}
 8001574:	b086      	sub	sp, #24
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
 800157e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001584:	f7ff ff3e 	bl	8001404 <__NVIC_GetPriorityGrouping>
 8001588:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	68b9      	ldr	r1, [r7, #8]
 800158e:	6978      	ldr	r0, [r7, #20]
 8001590:	f7ff ff8e 	bl	80014b0 <NVIC_EncodePriority>
 8001594:	4602      	mov	r2, r0
 8001596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff5d 	bl	800145c <__NVIC_SetPriority>
}
 80015a2:	bf00      	nop
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff31 	bl	8001420 <__NVIC_EnableIRQ>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff ffa2 	bl	8001518 <SysTick_Config>
 80015d4:	4603      	mov	r3, r0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d004      	beq.n	80015fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2280      	movs	r2, #128	@ 0x80
 80015f6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e00c      	b.n	8001616 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2205      	movs	r2, #5
 8001600:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 0201 	bic.w	r2, r2, #1
 8001612:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001630:	b2db      	uxtb	r3, r3
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001640:	b480      	push	{r7}
 8001642:	b089      	sub	sp, #36	@ 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001652:	2300      	movs	r3, #0
 8001654:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	e16b      	b.n	8001934 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800165c:	2201      	movs	r2, #1
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	4013      	ands	r3, r2
 800166e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	429a      	cmp	r2, r3
 8001676:	f040 815a 	bne.w	800192e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 0303 	and.w	r3, r3, #3
 8001682:	2b01      	cmp	r3, #1
 8001684:	d005      	beq.n	8001692 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800168e:	2b02      	cmp	r3, #2
 8001690:	d130      	bne.n	80016f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	2203      	movs	r2, #3
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43db      	mvns	r3, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4013      	ands	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	68da      	ldr	r2, [r3, #12]
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016c8:	2201      	movs	r2, #1
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	091b      	lsrs	r3, r3, #4
 80016de:	f003 0201 	and.w	r2, r3, #1
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	d017      	beq.n	8001730 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	2203      	movs	r2, #3
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4013      	ands	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d123      	bne.n	8001784 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	08da      	lsrs	r2, r3, #3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3208      	adds	r2, #8
 8001744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001748:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	220f      	movs	r2, #15
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	691a      	ldr	r2, [r3, #16]
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	08da      	lsrs	r2, r3, #3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3208      	adds	r2, #8
 800177e:	69b9      	ldr	r1, [r7, #24]
 8001780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	2203      	movs	r2, #3
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 0203 	and.w	r2, r3, #3
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f000 80b4 	beq.w	800192e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	4b60      	ldr	r3, [pc, #384]	@ (800194c <HAL_GPIO_Init+0x30c>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ce:	4a5f      	ldr	r2, [pc, #380]	@ (800194c <HAL_GPIO_Init+0x30c>)
 80017d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017d6:	4b5d      	ldr	r3, [pc, #372]	@ (800194c <HAL_GPIO_Init+0x30c>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017e2:	4a5b      	ldr	r2, [pc, #364]	@ (8001950 <HAL_GPIO_Init+0x310>)
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	089b      	lsrs	r3, r3, #2
 80017e8:	3302      	adds	r3, #2
 80017ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	220f      	movs	r2, #15
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4013      	ands	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a52      	ldr	r2, [pc, #328]	@ (8001954 <HAL_GPIO_Init+0x314>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d02b      	beq.n	8001866 <HAL_GPIO_Init+0x226>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a51      	ldr	r2, [pc, #324]	@ (8001958 <HAL_GPIO_Init+0x318>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d025      	beq.n	8001862 <HAL_GPIO_Init+0x222>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a50      	ldr	r2, [pc, #320]	@ (800195c <HAL_GPIO_Init+0x31c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d01f      	beq.n	800185e <HAL_GPIO_Init+0x21e>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a4f      	ldr	r2, [pc, #316]	@ (8001960 <HAL_GPIO_Init+0x320>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d019      	beq.n	800185a <HAL_GPIO_Init+0x21a>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4e      	ldr	r2, [pc, #312]	@ (8001964 <HAL_GPIO_Init+0x324>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d013      	beq.n	8001856 <HAL_GPIO_Init+0x216>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a4d      	ldr	r2, [pc, #308]	@ (8001968 <HAL_GPIO_Init+0x328>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d00d      	beq.n	8001852 <HAL_GPIO_Init+0x212>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a4c      	ldr	r2, [pc, #304]	@ (800196c <HAL_GPIO_Init+0x32c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d007      	beq.n	800184e <HAL_GPIO_Init+0x20e>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a4b      	ldr	r2, [pc, #300]	@ (8001970 <HAL_GPIO_Init+0x330>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d101      	bne.n	800184a <HAL_GPIO_Init+0x20a>
 8001846:	2307      	movs	r3, #7
 8001848:	e00e      	b.n	8001868 <HAL_GPIO_Init+0x228>
 800184a:	2308      	movs	r3, #8
 800184c:	e00c      	b.n	8001868 <HAL_GPIO_Init+0x228>
 800184e:	2306      	movs	r3, #6
 8001850:	e00a      	b.n	8001868 <HAL_GPIO_Init+0x228>
 8001852:	2305      	movs	r3, #5
 8001854:	e008      	b.n	8001868 <HAL_GPIO_Init+0x228>
 8001856:	2304      	movs	r3, #4
 8001858:	e006      	b.n	8001868 <HAL_GPIO_Init+0x228>
 800185a:	2303      	movs	r3, #3
 800185c:	e004      	b.n	8001868 <HAL_GPIO_Init+0x228>
 800185e:	2302      	movs	r3, #2
 8001860:	e002      	b.n	8001868 <HAL_GPIO_Init+0x228>
 8001862:	2301      	movs	r3, #1
 8001864:	e000      	b.n	8001868 <HAL_GPIO_Init+0x228>
 8001866:	2300      	movs	r3, #0
 8001868:	69fa      	ldr	r2, [r7, #28]
 800186a:	f002 0203 	and.w	r2, r2, #3
 800186e:	0092      	lsls	r2, r2, #2
 8001870:	4093      	lsls	r3, r2
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001878:	4935      	ldr	r1, [pc, #212]	@ (8001950 <HAL_GPIO_Init+0x310>)
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	089b      	lsrs	r3, r3, #2
 800187e:	3302      	adds	r3, #2
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001886:	4b3b      	ldr	r3, [pc, #236]	@ (8001974 <HAL_GPIO_Init+0x334>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018aa:	4a32      	ldr	r2, [pc, #200]	@ (8001974 <HAL_GPIO_Init+0x334>)
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018b0:	4b30      	ldr	r3, [pc, #192]	@ (8001974 <HAL_GPIO_Init+0x334>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018d4:	4a27      	ldr	r2, [pc, #156]	@ (8001974 <HAL_GPIO_Init+0x334>)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018da:	4b26      	ldr	r3, [pc, #152]	@ (8001974 <HAL_GPIO_Init+0x334>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018fe:	4a1d      	ldr	r2, [pc, #116]	@ (8001974 <HAL_GPIO_Init+0x334>)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001904:	4b1b      	ldr	r3, [pc, #108]	@ (8001974 <HAL_GPIO_Init+0x334>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001928:	4a12      	ldr	r2, [pc, #72]	@ (8001974 <HAL_GPIO_Init+0x334>)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3301      	adds	r3, #1
 8001932:	61fb      	str	r3, [r7, #28]
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	2b0f      	cmp	r3, #15
 8001938:	f67f ae90 	bls.w	800165c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	3724      	adds	r7, #36	@ 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800
 8001950:	40013800 	.word	0x40013800
 8001954:	40020000 	.word	0x40020000
 8001958:	40020400 	.word	0x40020400
 800195c:	40020800 	.word	0x40020800
 8001960:	40020c00 	.word	0x40020c00
 8001964:	40021000 	.word	0x40021000
 8001968:	40021400 	.word	0x40021400
 800196c:	40021800 	.word	0x40021800
 8001970:	40021c00 	.word	0x40021c00
 8001974:	40013c00 	.word	0x40013c00

08001978 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	807b      	strh	r3, [r7, #2]
 8001984:	4613      	mov	r3, r2
 8001986:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001988:	787b      	ldrb	r3, [r7, #1]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800198e:	887a      	ldrh	r2, [r7, #2]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001994:	e003      	b.n	800199e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001996:	887b      	ldrh	r3, [r7, #2]
 8001998:	041a      	lsls	r2, r3, #16
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	619a      	str	r2, [r3, #24]
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e12b      	b.n	8001c16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d106      	bne.n	80019d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff fb84 	bl	80010e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2224      	movs	r2, #36	@ 0x24
 80019dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0201 	bic.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a10:	f002 fba2 	bl	8004158 <HAL_RCC_GetPCLK1Freq>
 8001a14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	4a81      	ldr	r2, [pc, #516]	@ (8001c20 <HAL_I2C_Init+0x274>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d807      	bhi.n	8001a30 <HAL_I2C_Init+0x84>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4a80      	ldr	r2, [pc, #512]	@ (8001c24 <HAL_I2C_Init+0x278>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	bf94      	ite	ls
 8001a28:	2301      	movls	r3, #1
 8001a2a:	2300      	movhi	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	e006      	b.n	8001a3e <HAL_I2C_Init+0x92>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4a7d      	ldr	r2, [pc, #500]	@ (8001c28 <HAL_I2C_Init+0x27c>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	bf94      	ite	ls
 8001a38:	2301      	movls	r3, #1
 8001a3a:	2300      	movhi	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e0e7      	b.n	8001c16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4a78      	ldr	r2, [pc, #480]	@ (8001c2c <HAL_I2C_Init+0x280>)
 8001a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4e:	0c9b      	lsrs	r3, r3, #18
 8001a50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68ba      	ldr	r2, [r7, #8]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	4a6a      	ldr	r2, [pc, #424]	@ (8001c20 <HAL_I2C_Init+0x274>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d802      	bhi.n	8001a80 <HAL_I2C_Init+0xd4>
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	e009      	b.n	8001a94 <HAL_I2C_Init+0xe8>
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a86:	fb02 f303 	mul.w	r3, r2, r3
 8001a8a:	4a69      	ldr	r2, [pc, #420]	@ (8001c30 <HAL_I2C_Init+0x284>)
 8001a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a90:	099b      	lsrs	r3, r3, #6
 8001a92:	3301      	adds	r3, #1
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	430b      	orrs	r3, r1
 8001a9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001aa6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	495c      	ldr	r1, [pc, #368]	@ (8001c20 <HAL_I2C_Init+0x274>)
 8001ab0:	428b      	cmp	r3, r1
 8001ab2:	d819      	bhi.n	8001ae8 <HAL_I2C_Init+0x13c>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	1e59      	subs	r1, r3, #1
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ac2:	1c59      	adds	r1, r3, #1
 8001ac4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ac8:	400b      	ands	r3, r1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00a      	beq.n	8001ae4 <HAL_I2C_Init+0x138>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	1e59      	subs	r1, r3, #1
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001adc:	3301      	adds	r3, #1
 8001ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ae2:	e051      	b.n	8001b88 <HAL_I2C_Init+0x1dc>
 8001ae4:	2304      	movs	r3, #4
 8001ae6:	e04f      	b.n	8001b88 <HAL_I2C_Init+0x1dc>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d111      	bne.n	8001b14 <HAL_I2C_Init+0x168>
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	1e58      	subs	r0, r3, #1
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6859      	ldr	r1, [r3, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	440b      	add	r3, r1
 8001afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b02:	3301      	adds	r3, #1
 8001b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	bf0c      	ite	eq
 8001b0c:	2301      	moveq	r3, #1
 8001b0e:	2300      	movne	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	e012      	b.n	8001b3a <HAL_I2C_Init+0x18e>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	1e58      	subs	r0, r3, #1
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6859      	ldr	r1, [r3, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	440b      	add	r3, r1
 8001b22:	0099      	lsls	r1, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	bf0c      	ite	eq
 8001b34:	2301      	moveq	r3, #1
 8001b36:	2300      	movne	r3, #0
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_I2C_Init+0x196>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e022      	b.n	8001b88 <HAL_I2C_Init+0x1dc>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10e      	bne.n	8001b68 <HAL_I2C_Init+0x1bc>
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	1e58      	subs	r0, r3, #1
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6859      	ldr	r1, [r3, #4]
 8001b52:	460b      	mov	r3, r1
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	440b      	add	r3, r1
 8001b58:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b66:	e00f      	b.n	8001b88 <HAL_I2C_Init+0x1dc>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	1e58      	subs	r0, r3, #1
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6859      	ldr	r1, [r3, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	440b      	add	r3, r1
 8001b76:	0099      	lsls	r1, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b7e:	3301      	adds	r3, #1
 8001b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	6809      	ldr	r1, [r1, #0]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69da      	ldr	r2, [r3, #28]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001bb6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6911      	ldr	r1, [r2, #16]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	68d2      	ldr	r2, [r2, #12]
 8001bc2:	4311      	orrs	r1, r2
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	430b      	orrs	r3, r1
 8001bca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	695a      	ldr	r2, [r3, #20]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2220      	movs	r2, #32
 8001c02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	000186a0 	.word	0x000186a0
 8001c24:	001e847f 	.word	0x001e847f
 8001c28:	003d08ff 	.word	0x003d08ff
 8001c2c:	431bde83 	.word	0x431bde83
 8001c30:	10624dd3 	.word	0x10624dd3

08001c34 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c46:	2b80      	cmp	r3, #128	@ 0x80
 8001c48:	d103      	bne.n	8001c52 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	611a      	str	r2, [r3, #16]
  }
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	607a      	str	r2, [r7, #4]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	817b      	strh	r3, [r7, #10]
 8001c70:	4613      	mov	r3, r2
 8001c72:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b20      	cmp	r3, #32
 8001c82:	f040 8081 	bne.w	8001d88 <HAL_I2C_Master_Transmit_IT+0x128>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001c86:	4b44      	ldr	r3, [pc, #272]	@ (8001d98 <HAL_I2C_Master_Transmit_IT+0x138>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	08db      	lsrs	r3, r3, #3
 8001c8c:	4a43      	ldr	r2, [pc, #268]	@ (8001d9c <HAL_I2C_Master_Transmit_IT+0x13c>)
 8001c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c92:	0a1a      	lsrs	r2, r3, #8
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	009a      	lsls	r2, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d112      	bne.n	8001cd2 <HAL_I2C_Master_Transmit_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2220      	movs	r2, #32
 8001cb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	f043 0220 	orr.w	r2, r3, #32
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e05b      	b.n	8001d8a <HAL_I2C_Master_Transmit_IT+0x12a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d0df      	beq.n	8001ca0 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d101      	bne.n	8001cee <HAL_I2C_Master_Transmit_IT+0x8e>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e04d      	b.n	8001d8a <HAL_I2C_Master_Transmit_IT+0x12a>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d007      	beq.n	8001d14 <HAL_I2C_Master_Transmit_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0201 	orr.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2221      	movs	r2, #33	@ 0x21
 8001d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2210      	movs	r2, #16
 8001d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	893a      	ldrh	r2, [r7, #8]
 8001d44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4a13      	ldr	r2, [pc, #76]	@ (8001da0 <HAL_I2C_Master_Transmit_IT+0x140>)
 8001d54:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8001d56:	897a      	ldrh	r2, [r7, #10]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8001d72:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d82:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	e000      	b.n	8001d8a <HAL_I2C_Master_Transmit_IT+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001d88:	2302      	movs	r3, #2
  }
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	371c      	adds	r7, #28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	20000000 	.word	0x20000000
 8001d9c:	14f8b589 	.word	0x14f8b589
 8001da0:	ffff0000 	.word	0xffff0000

08001da4 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b087      	sub	sp, #28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	461a      	mov	r2, r3
 8001db0:	460b      	mov	r3, r1
 8001db2:	817b      	strh	r3, [r7, #10]
 8001db4:	4613      	mov	r3, r2
 8001db6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b20      	cmp	r3, #32
 8001dc6:	f040 8089 	bne.w	8001edc <HAL_I2C_Master_Receive_IT+0x138>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001dca:	4b48      	ldr	r3, [pc, #288]	@ (8001eec <HAL_I2C_Master_Receive_IT+0x148>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	08db      	lsrs	r3, r3, #3
 8001dd0:	4a47      	ldr	r2, [pc, #284]	@ (8001ef0 <HAL_I2C_Master_Receive_IT+0x14c>)
 8001dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd6:	0a1a      	lsrs	r2, r3, #8
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	009a      	lsls	r2, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d112      	bne.n	8001e16 <HAL_I2C_Master_Receive_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2220      	movs	r2, #32
 8001dfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	f043 0220 	orr.w	r2, r3, #32
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8001e12:	2302      	movs	r3, #2
 8001e14:	e063      	b.n	8001ede <HAL_I2C_Master_Receive_IT+0x13a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d0df      	beq.n	8001de4 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <HAL_I2C_Master_Receive_IT+0x8e>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e055      	b.n	8001ede <HAL_I2C_Master_Receive_IT+0x13a>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d007      	beq.n	8001e58 <HAL_I2C_Master_Receive_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0201 	orr.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2222      	movs	r2, #34	@ 0x22
 8001e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2210      	movs	r2, #16
 8001e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	893a      	ldrh	r2, [r7, #8]
 8001e88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4a17      	ldr	r2, [pc, #92]	@ (8001ef4 <HAL_I2C_Master_Receive_IT+0x150>)
 8001e98:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8001e9a:	897a      	ldrh	r2, [r7, #10]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	645a      	str	r2, [r3, #68]	@ 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8001eb6:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ec6:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ed6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	e000      	b.n	8001ede <HAL_I2C_Master_Receive_IT+0x13a>
  }
  else
  {
    return HAL_BUSY;
 8001edc:	2302      	movs	r3, #2
  }
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	371c      	adds	r7, #28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	20000000 	.word	0x20000000
 8001ef0:	14f8b589 	.word	0x14f8b589
 8001ef4:	ffff0000 	.word	0xffff0000

08001ef8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f10:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f18:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f20:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
 8001f24:	2b10      	cmp	r3, #16
 8001f26:	d003      	beq.n	8001f30 <HAL_I2C_EV_IRQHandler+0x38>
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
 8001f2a:	2b40      	cmp	r3, #64	@ 0x40
 8001f2c:	f040 80b1 	bne.w	8002092 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10d      	bne.n	8001f66 <HAL_I2C_EV_IRQHandler+0x6e>
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001f50:	d003      	beq.n	8001f5a <HAL_I2C_EV_IRQHandler+0x62>
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001f58:	d101      	bne.n	8001f5e <HAL_I2C_EV_IRQHandler+0x66>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <HAL_I2C_EV_IRQHandler+0x68>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	f000 8114 	beq.w	800218e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00b      	beq.n	8001f88 <HAL_I2C_EV_IRQHandler+0x90>
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d006      	beq.n	8001f88 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f001 fc60 	bl	8003840 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 fd66 	bl	8002a52 <I2C_Master_SB>
 8001f86:	e083      	b.n	8002090 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d008      	beq.n	8001fa4 <HAL_I2C_EV_IRQHandler+0xac>
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 fdde 	bl	8002b5e <I2C_Master_ADD10>
 8001fa2:	e075      	b.n	8002090 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d008      	beq.n	8001fc0 <HAL_I2C_EV_IRQHandler+0xc8>
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 fdfa 	bl	8002bb2 <I2C_Master_ADDR>
 8001fbe:	e067      	b.n	8002090 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d036      	beq.n	8002038 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001fd8:	f000 80db 	beq.w	8002192 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00d      	beq.n	8002002 <HAL_I2C_EV_IRQHandler+0x10a>
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d008      	beq.n	8002002 <HAL_I2C_EV_IRQHandler+0x10a>
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d103      	bne.n	8002002 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f9c2 	bl	8002384 <I2C_MasterTransmit_TXE>
 8002000:	e046      	b.n	8002090 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	f000 80c2 	beq.w	8002192 <HAL_I2C_EV_IRQHandler+0x29a>
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 80bc 	beq.w	8002192 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800201a:	7bbb      	ldrb	r3, [r7, #14]
 800201c:	2b21      	cmp	r3, #33	@ 0x21
 800201e:	d103      	bne.n	8002028 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 fa4b 	bl	80024bc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002026:	e0b4      	b.n	8002192 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	2b40      	cmp	r3, #64	@ 0x40
 800202c:	f040 80b1 	bne.w	8002192 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 fab9 	bl	80025a8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002036:	e0ac      	b.n	8002192 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002042:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002046:	f000 80a4 	beq.w	8002192 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00d      	beq.n	8002070 <HAL_I2C_EV_IRQHandler+0x178>
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800205a:	2b00      	cmp	r3, #0
 800205c:	d008      	beq.n	8002070 <HAL_I2C_EV_IRQHandler+0x178>
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d103      	bne.n	8002070 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 fb35 	bl	80026d8 <I2C_MasterReceive_RXNE>
 800206e:	e00f      	b.n	8002090 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 808b 	beq.w	8002192 <HAL_I2C_EV_IRQHandler+0x29a>
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 8085 	beq.w	8002192 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 fbed 	bl	8002868 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800208e:	e080      	b.n	8002192 <HAL_I2C_EV_IRQHandler+0x29a>
 8002090:	e07f      	b.n	8002192 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	2b00      	cmp	r3, #0
 8002098:	d004      	beq.n	80020a4 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	e007      	b.n	80020b4 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d011      	beq.n	80020e2 <HAL_I2C_EV_IRQHandler+0x1ea>
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00c      	beq.n	80020e2 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80020d8:	69b9      	ldr	r1, [r7, #24]
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 ffb8 	bl	8003050 <I2C_Slave_ADDR>
 80020e0:	e05a      	b.n	8002198 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	f003 0310 	and.w	r3, r3, #16
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <HAL_I2C_EV_IRQHandler+0x206>
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 fff2 	bl	80030e0 <I2C_Slave_STOPF>
 80020fc:	e04c      	b.n	8002198 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80020fe:	7bbb      	ldrb	r3, [r7, #14]
 8002100:	2b21      	cmp	r3, #33	@ 0x21
 8002102:	d002      	beq.n	800210a <HAL_I2C_EV_IRQHandler+0x212>
 8002104:	7bbb      	ldrb	r3, [r7, #14]
 8002106:	2b29      	cmp	r3, #41	@ 0x29
 8002108:	d120      	bne.n	800214c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00d      	beq.n	8002130 <HAL_I2C_EV_IRQHandler+0x238>
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800211a:	2b00      	cmp	r3, #0
 800211c:	d008      	beq.n	8002130 <HAL_I2C_EV_IRQHandler+0x238>
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d103      	bne.n	8002130 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 fed3 	bl	8002ed4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800212e:	e032      	b.n	8002196 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	2b00      	cmp	r3, #0
 8002138:	d02d      	beq.n	8002196 <HAL_I2C_EV_IRQHandler+0x29e>
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002140:	2b00      	cmp	r3, #0
 8002142:	d028      	beq.n	8002196 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 ff02 	bl	8002f4e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800214a:	e024      	b.n	8002196 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00d      	beq.n	8002172 <HAL_I2C_EV_IRQHandler+0x27a>
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <HAL_I2C_EV_IRQHandler+0x27a>
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	2b00      	cmp	r3, #0
 8002168:	d103      	bne.n	8002172 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 ff10 	bl	8002f90 <I2C_SlaveReceive_RXNE>
 8002170:	e012      	b.n	8002198 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00d      	beq.n	8002198 <HAL_I2C_EV_IRQHandler+0x2a0>
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002182:	2b00      	cmp	r3, #0
 8002184:	d008      	beq.n	8002198 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 ff40 	bl	800300c <I2C_SlaveReceive_BTF>
 800218c:	e004      	b.n	8002198 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800218e:	bf00      	nop
 8002190:	e002      	b.n	8002198 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002192:	bf00      	nop
 8002194:	e000      	b.n	8002198 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002196:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002198:	3720      	adds	r7, #32
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b08a      	sub	sp, #40	@ 0x28
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80021c0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00d      	beq.n	80021e8 <HAL_I2C_ER_IRQHandler+0x4a>
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d008      	beq.n	80021e8 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80021d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80021e6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80021e8:	6a3b      	ldr	r3, [r7, #32]
 80021ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00d      	beq.n	800220e <HAL_I2C_ER_IRQHandler+0x70>
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d008      	beq.n	800220e <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80021fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fe:	f043 0302 	orr.w	r3, r3, #2
 8002202:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800220c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800220e:	6a3b      	ldr	r3, [r7, #32]
 8002210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002214:	2b00      	cmp	r3, #0
 8002216:	d03e      	beq.n	8002296 <HAL_I2C_ER_IRQHandler+0xf8>
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800221e:	2b00      	cmp	r3, #0
 8002220:	d039      	beq.n	8002296 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8002222:	7efb      	ldrb	r3, [r7, #27]
 8002224:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800222a:	b29b      	uxth	r3, r3
 800222c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002234:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800223c:	7ebb      	ldrb	r3, [r7, #26]
 800223e:	2b20      	cmp	r3, #32
 8002240:	d112      	bne.n	8002268 <HAL_I2C_ER_IRQHandler+0xca>
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10f      	bne.n	8002268 <HAL_I2C_ER_IRQHandler+0xca>
 8002248:	7cfb      	ldrb	r3, [r7, #19]
 800224a:	2b21      	cmp	r3, #33	@ 0x21
 800224c:	d008      	beq.n	8002260 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800224e:	7cfb      	ldrb	r3, [r7, #19]
 8002250:	2b29      	cmp	r3, #41	@ 0x29
 8002252:	d005      	beq.n	8002260 <HAL_I2C_ER_IRQHandler+0xc2>
 8002254:	7cfb      	ldrb	r3, [r7, #19]
 8002256:	2b28      	cmp	r3, #40	@ 0x28
 8002258:	d106      	bne.n	8002268 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2b21      	cmp	r3, #33	@ 0x21
 800225e:	d103      	bne.n	8002268 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f001 f86d 	bl	8003340 <I2C_Slave_AF>
 8002266:	e016      	b.n	8002296 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002270:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002274:	f043 0304 	orr.w	r3, r3, #4
 8002278:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800227a:	7efb      	ldrb	r3, [r7, #27]
 800227c:	2b10      	cmp	r3, #16
 800227e:	d002      	beq.n	8002286 <HAL_I2C_ER_IRQHandler+0xe8>
 8002280:	7efb      	ldrb	r3, [r7, #27]
 8002282:	2b40      	cmp	r3, #64	@ 0x40
 8002284:	d107      	bne.n	8002296 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002294:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00d      	beq.n	80022bc <HAL_I2C_ER_IRQHandler+0x11e>
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d008      	beq.n	80022bc <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80022aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ac:	f043 0308 	orr.w	r3, r3, #8
 80022b0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80022ba:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80022bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d008      	beq.n	80022d4 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f001 f8aa 	bl	8003428 <I2C_ITError>
  }
}
 80022d4:	bf00      	nop
 80022d6:	3728      	adds	r7, #40	@ 0x28
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	70fb      	strb	r3, [r7, #3]
 8002310:	4613      	mov	r3, r2
 8002312:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002392:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800239a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d150      	bne.n	800244c <I2C_MasterTransmit_TXE+0xc8>
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	2b21      	cmp	r3, #33	@ 0x21
 80023ae:	d14d      	bne.n	800244c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	d01d      	beq.n	80023f2 <I2C_MasterTransmit_TXE+0x6e>
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2b20      	cmp	r3, #32
 80023ba:	d01a      	beq.n	80023f2 <I2C_MasterTransmit_TXE+0x6e>
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80023c2:	d016      	beq.n	80023f2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80023d2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2211      	movs	r2, #17
 80023d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2220      	movs	r2, #32
 80023e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7fe fa06 	bl	80007fc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80023f0:	e060      	b.n	80024b4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002400:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002410:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2220      	movs	r2, #32
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b40      	cmp	r3, #64	@ 0x40
 800242a:	d107      	bne.n	800243c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff ff7d 	bl	8002334 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800243a:	e03b      	b.n	80024b4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7fe f9d9 	bl	80007fc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800244a:	e033      	b.n	80024b4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	2b21      	cmp	r3, #33	@ 0x21
 8002450:	d005      	beq.n	800245e <I2C_MasterTransmit_TXE+0xda>
 8002452:	7bbb      	ldrb	r3, [r7, #14]
 8002454:	2b40      	cmp	r3, #64	@ 0x40
 8002456:	d12d      	bne.n	80024b4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	2b22      	cmp	r3, #34	@ 0x22
 800245c:	d12a      	bne.n	80024b4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002462:	b29b      	uxth	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d108      	bne.n	800247a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002476:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002478:	e01c      	b.n	80024b4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b40      	cmp	r3, #64	@ 0x40
 8002484:	d103      	bne.n	800248e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f88e 	bl	80025a8 <I2C_MemoryTransmit_TXE_BTF>
}
 800248c:	e012      	b.n	80024b4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002492:	781a      	ldrb	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249e:	1c5a      	adds	r2, r3, #1
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	3b01      	subs	r3, #1
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80024b2:	e7ff      	b.n	80024b4 <I2C_MasterTransmit_TXE+0x130>
 80024b4:	bf00      	nop
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b21      	cmp	r3, #33	@ 0x21
 80024d4:	d164      	bne.n	80025a0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024da:	b29b      	uxth	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d012      	beq.n	8002506 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e4:	781a      	ldrb	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f0:	1c5a      	adds	r2, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	3b01      	subs	r3, #1
 80024fe:	b29a      	uxth	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002504:	e04c      	b.n	80025a0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2b08      	cmp	r3, #8
 800250a:	d01d      	beq.n	8002548 <I2C_MasterTransmit_BTF+0x8c>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b20      	cmp	r3, #32
 8002510:	d01a      	beq.n	8002548 <I2C_MasterTransmit_BTF+0x8c>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002518:	d016      	beq.n	8002548 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002528:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2211      	movs	r2, #17
 800252e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2220      	movs	r2, #32
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7fe f95b 	bl	80007fc <HAL_I2C_MasterTxCpltCallback>
}
 8002546:	e02b      	b.n	80025a0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002556:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002566:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b40      	cmp	r3, #64	@ 0x40
 8002580:	d107      	bne.n	8002592 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff fed2 	bl	8002334 <HAL_I2C_MemTxCpltCallback>
}
 8002590:	e006      	b.n	80025a0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7fe f92e 	bl	80007fc <HAL_I2C_MasterTxCpltCallback>
}
 80025a0:	bf00      	nop
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025b6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d11d      	bne.n	80025fc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d10b      	bne.n	80025e0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025d8:	1c9a      	adds	r2, r3, #2
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80025de:	e077      	b.n	80026d0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	121b      	asrs	r3, r3, #8
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80025fa:	e069      	b.n	80026d0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002600:	2b01      	cmp	r3, #1
 8002602:	d10b      	bne.n	800261c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002608:	b2da      	uxtb	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002614:	1c5a      	adds	r2, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800261a:	e059      	b.n	80026d0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002620:	2b02      	cmp	r3, #2
 8002622:	d152      	bne.n	80026ca <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002624:	7bfb      	ldrb	r3, [r7, #15]
 8002626:	2b22      	cmp	r3, #34	@ 0x22
 8002628:	d10d      	bne.n	8002646 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002638:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002644:	e044      	b.n	80026d0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800264a:	b29b      	uxth	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d015      	beq.n	800267c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	2b21      	cmp	r3, #33	@ 0x21
 8002654:	d112      	bne.n	800267c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265a:	781a      	ldrb	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002670:	b29b      	uxth	r3, r3
 8002672:	3b01      	subs	r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800267a:	e029      	b.n	80026d0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002680:	b29b      	uxth	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d124      	bne.n	80026d0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	2b21      	cmp	r3, #33	@ 0x21
 800268a:	d121      	bne.n	80026d0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800269a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026aa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2220      	movs	r2, #32
 80026b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7ff fe36 	bl	8002334 <HAL_I2C_MemTxCpltCallback>
}
 80026c8:	e002      	b.n	80026d0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff fab2 	bl	8001c34 <I2C_Flush_DR>
}
 80026d0:	bf00      	nop
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b22      	cmp	r3, #34	@ 0x22
 80026ea:	f040 80b9 	bne.w	8002860 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f2:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2b03      	cmp	r3, #3
 8002700:	d921      	bls.n	8002746 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002714:	1c5a      	adds	r2, r3, #1
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800271e:	b29b      	uxth	r3, r3
 8002720:	3b01      	subs	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800272c:	b29b      	uxth	r3, r3
 800272e:	2b03      	cmp	r3, #3
 8002730:	f040 8096 	bne.w	8002860 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002742:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002744:	e08c      	b.n	8002860 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274a:	2b02      	cmp	r3, #2
 800274c:	d07f      	beq.n	800284e <I2C_MasterReceive_RXNE+0x176>
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d002      	beq.n	800275a <I2C_MasterReceive_RXNE+0x82>
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d179      	bne.n	800284e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f001 f83e 	bl	80037dc <I2C_WaitOnSTOPRequestThroughIT>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d14c      	bne.n	8002800 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002774:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002784:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b40      	cmp	r3, #64	@ 0x40
 80027be:	d10a      	bne.n	80027d6 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff fdba 	bl	8002348 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80027d4:	e044      	b.n	8002860 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d002      	beq.n	80027ea <I2C_MasterReceive_RXNE+0x112>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2b20      	cmp	r3, #32
 80027e8:	d103      	bne.n	80027f2 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80027f0:	e002      	b.n	80027f8 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2212      	movs	r2, #18
 80027f6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7fe f829 	bl	8000850 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80027fe:	e02f      	b.n	8002860 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800280e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691a      	ldr	r2, [r3, #16]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002822:	1c5a      	adds	r2, r3, #1
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800282c:	b29b      	uxth	r3, r3
 800282e:	3b01      	subs	r3, #1
 8002830:	b29a      	uxth	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2220      	movs	r2, #32
 800283a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff fd88 	bl	800235c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800284c:	e008      	b.n	8002860 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800285c:	605a      	str	r2, [r3, #4]
}
 800285e:	e7ff      	b.n	8002860 <I2C_MasterReceive_RXNE+0x188>
 8002860:	bf00      	nop
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002874:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800287a:	b29b      	uxth	r3, r3
 800287c:	2b04      	cmp	r3, #4
 800287e:	d11b      	bne.n	80028b8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800288e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	691a      	ldr	r2, [r3, #16]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80028b6:	e0c8      	b.n	8002a4a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d129      	bne.n	8002916 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028d0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d00a      	beq.n	80028ee <I2C_MasterReceive_BTF+0x86>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d007      	beq.n	80028ee <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028ec:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800290a:	b29b      	uxth	r3, r3
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002914:	e099      	b.n	8002a4a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800291a:	b29b      	uxth	r3, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	f040 8081 	bne.w	8002a24 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d002      	beq.n	800292e <I2C_MasterReceive_BTF+0xc6>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2b10      	cmp	r3, #16
 800292c:	d108      	bne.n	8002940 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	e019      	b.n	8002974 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b04      	cmp	r3, #4
 8002944:	d002      	beq.n	800294c <I2C_MasterReceive_BTF+0xe4>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d108      	bne.n	800295e <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	e00a      	b.n	8002974 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2b10      	cmp	r3, #16
 8002962:	d007      	beq.n	8002974 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002972:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	691a      	ldr	r2, [r3, #16]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002986:	1c5a      	adds	r2, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002990:	b29b      	uxth	r3, r3
 8002992:	3b01      	subs	r3, #1
 8002994:	b29a      	uxth	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80029ce:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2220      	movs	r2, #32
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b40      	cmp	r3, #64	@ 0x40
 80029e2:	d10a      	bne.n	80029fa <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7ff fca8 	bl	8002348 <HAL_I2C_MemRxCpltCallback>
}
 80029f8:	e027      	b.n	8002a4a <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d002      	beq.n	8002a0e <I2C_MasterReceive_BTF+0x1a6>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2b20      	cmp	r3, #32
 8002a0c:	d103      	bne.n	8002a16 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a14:	e002      	b.n	8002a1c <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2212      	movs	r2, #18
 8002a1a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7fd ff17 	bl	8000850 <HAL_I2C_MasterRxCpltCallback>
}
 8002a22:	e012      	b.n	8002a4a <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	691a      	ldr	r2, [r3, #16]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002a4a:	bf00      	nop
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b40      	cmp	r3, #64	@ 0x40
 8002a64:	d117      	bne.n	8002a96 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d109      	bne.n	8002a82 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	461a      	mov	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a7e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002a80:	e067      	b.n	8002b52 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	611a      	str	r2, [r3, #16]
}
 8002a94:	e05d      	b.n	8002b52 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a9e:	d133      	bne.n	8002b08 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b21      	cmp	r3, #33	@ 0x21
 8002aaa:	d109      	bne.n	8002ac0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002abc:	611a      	str	r2, [r3, #16]
 8002abe:	e008      	b.n	8002ad2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d004      	beq.n	8002ae4 <I2C_Master_SB+0x92>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d108      	bne.n	8002af6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d032      	beq.n	8002b52 <I2C_Master_SB+0x100>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d02d      	beq.n	8002b52 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b04:	605a      	str	r2, [r3, #4]
}
 8002b06:	e024      	b.n	8002b52 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10e      	bne.n	8002b2e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	11db      	asrs	r3, r3, #7
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	f003 0306 	and.w	r3, r3, #6
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	f063 030f 	orn	r3, r3, #15
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	611a      	str	r2, [r3, #16]
}
 8002b2c:	e011      	b.n	8002b52 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d10d      	bne.n	8002b52 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	11db      	asrs	r3, r3, #7
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	f003 0306 	and.w	r3, r3, #6
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	f063 030e 	orn	r3, r3, #14
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	611a      	str	r2, [r3, #16]
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d004      	beq.n	8002b84 <I2C_Master_ADD10+0x26>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d108      	bne.n	8002b96 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00c      	beq.n	8002ba6 <I2C_Master_ADD10+0x48>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d007      	beq.n	8002ba6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ba4:	605a      	str	r2, [r3, #4]
  }
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b091      	sub	sp, #68	@ 0x44
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002bc0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bce:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b22      	cmp	r3, #34	@ 0x22
 8002bda:	f040 8169 	bne.w	8002eb0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10f      	bne.n	8002c06 <I2C_Master_ADDR+0x54>
 8002be6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002bea:	2b40      	cmp	r3, #64	@ 0x40
 8002bec:	d10b      	bne.n	8002c06 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bee:	2300      	movs	r3, #0
 8002bf0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c04:	e160      	b.n	8002ec8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d11d      	bne.n	8002c4a <I2C_Master_ADDR+0x98>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002c16:	d118      	bne.n	8002c4a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c18:	2300      	movs	r3, #0
 8002c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c3c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c48:	e13e      	b.n	8002ec8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d113      	bne.n	8002c7c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c54:	2300      	movs	r3, #0
 8002c56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	e115      	b.n	8002ea8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	f040 808a 	bne.w	8002d9c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c8a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c8e:	d137      	bne.n	8002d00 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c9e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002caa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cae:	d113      	bne.n	8002cd8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cbe:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd6:	e0e7      	b.n	8002ea8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd8:	2300      	movs	r3, #0
 8002cda:	623b      	str	r3, [r7, #32]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	623b      	str	r3, [r7, #32]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	623b      	str	r3, [r7, #32]
 8002cec:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	e0d3      	b.n	8002ea8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d02e      	beq.n	8002d64 <I2C_Master_ADDR+0x1b2>
 8002d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d08:	2b20      	cmp	r3, #32
 8002d0a:	d02b      	beq.n	8002d64 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d0e:	2b12      	cmp	r3, #18
 8002d10:	d102      	bne.n	8002d18 <I2C_Master_ADDR+0x166>
 8002d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d125      	bne.n	8002d64 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d00e      	beq.n	8002d3c <I2C_Master_ADDR+0x18a>
 8002d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d00b      	beq.n	8002d3c <I2C_Master_ADDR+0x18a>
 8002d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d26:	2b10      	cmp	r3, #16
 8002d28:	d008      	beq.n	8002d3c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	e007      	b.n	8002d4c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d4a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61fb      	str	r3, [r7, #28]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	61fb      	str	r3, [r7, #28]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	61fb      	str	r3, [r7, #28]
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	e0a1      	b.n	8002ea8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d72:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d74:	2300      	movs	r3, #0
 8002d76:	61bb      	str	r3, [r7, #24]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	61bb      	str	r3, [r7, #24]
 8002d88:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	e085      	b.n	8002ea8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d14d      	bne.n	8002e42 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da8:	2b04      	cmp	r3, #4
 8002daa:	d016      	beq.n	8002dda <I2C_Master_ADDR+0x228>
 8002dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d013      	beq.n	8002dda <I2C_Master_ADDR+0x228>
 8002db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db4:	2b10      	cmp	r3, #16
 8002db6:	d010      	beq.n	8002dda <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dc6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	e007      	b.n	8002dea <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002de8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002df4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002df8:	d117      	bne.n	8002e2a <I2C_Master_ADDR+0x278>
 8002dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dfc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e00:	d00b      	beq.n	8002e1a <I2C_Master_ADDR+0x268>
 8002e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d008      	beq.n	8002e1a <I2C_Master_ADDR+0x268>
 8002e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e0a:	2b08      	cmp	r3, #8
 8002e0c:	d005      	beq.n	8002e1a <I2C_Master_ADDR+0x268>
 8002e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e10:	2b10      	cmp	r3, #16
 8002e12:	d002      	beq.n	8002e1a <I2C_Master_ADDR+0x268>
 8002e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e16:	2b20      	cmp	r3, #32
 8002e18:	d107      	bne.n	8002e2a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002e28:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	e032      	b.n	8002ea8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e50:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e60:	d117      	bne.n	8002e92 <I2C_Master_ADDR+0x2e0>
 8002e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e64:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e68:	d00b      	beq.n	8002e82 <I2C_Master_ADDR+0x2d0>
 8002e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d008      	beq.n	8002e82 <I2C_Master_ADDR+0x2d0>
 8002e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d005      	beq.n	8002e82 <I2C_Master_ADDR+0x2d0>
 8002e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e78:	2b10      	cmp	r3, #16
 8002e7a:	d002      	beq.n	8002e82 <I2C_Master_ADDR+0x2d0>
 8002e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e7e:	2b20      	cmp	r3, #32
 8002e80:	d107      	bne.n	8002e92 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002e90:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e92:	2300      	movs	r3, #0
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002eae:	e00b      	b.n	8002ec8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
}
 8002ec6:	e7ff      	b.n	8002ec8 <I2C_Master_ADDR+0x316>
 8002ec8:	bf00      	nop
 8002eca:	3744      	adds	r7, #68	@ 0x44
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ee2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d02b      	beq.n	8002f46 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef2:	781a      	ldrb	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efe:	1c5a      	adds	r2, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d114      	bne.n	8002f46 <I2C_SlaveTransmit_TXE+0x72>
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	2b29      	cmp	r3, #41	@ 0x29
 8002f20:	d111      	bne.n	8002f46 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f30:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2221      	movs	r2, #33	@ 0x21
 8002f36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2228      	movs	r2, #40	@ 0x28
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7ff f9cb 	bl	80022dc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002f46:	bf00      	nop
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d011      	beq.n	8002f84 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f64:	781a      	ldrb	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f9e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d02c      	beq.n	8003004 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	691a      	ldr	r2, [r3, #16]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d114      	bne.n	8003004 <I2C_SlaveReceive_RXNE+0x74>
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
 8002fdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fde:	d111      	bne.n	8003004 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fee:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2222      	movs	r2, #34	@ 0x22
 8002ff4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2228      	movs	r2, #40	@ 0x28
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7ff f976 	bl	80022f0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003004:	bf00      	nop
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003018:	b29b      	uxth	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d012      	beq.n	8003044 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303a:	b29b      	uxth	r3, r3
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800305a:	2300      	movs	r3, #0
 800305c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003064:	b2db      	uxtb	r3, r3
 8003066:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800306a:	2b28      	cmp	r3, #40	@ 0x28
 800306c:	d125      	bne.n	80030ba <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800307c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003088:	2301      	movs	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003092:	2b00      	cmp	r3, #0
 8003094:	d103      	bne.n	800309e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	81bb      	strh	r3, [r7, #12]
 800309c:	e002      	b.n	80030a4 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80030ac:	89ba      	ldrh	r2, [r7, #12]
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
 80030b0:	4619      	mov	r1, r3
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff f926 	bl	8002304 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80030b8:	e00e      	b.n	80030d8 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ba:	2300      	movs	r3, #0
 80030bc:	60bb      	str	r3, [r7, #8]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80030d8:	bf00      	nop
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80030fe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003100:	2300      	movs	r3, #0
 8003102:	60bb      	str	r3, [r7, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	60bb      	str	r3, [r7, #8]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0201 	orr.w	r2, r2, #1
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800312c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003138:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800313c:	d172      	bne.n	8003224 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	2b22      	cmp	r3, #34	@ 0x22
 8003142:	d002      	beq.n	800314a <I2C_Slave_STOPF+0x6a>
 8003144:	7bfb      	ldrb	r3, [r7, #15]
 8003146:	2b2a      	cmp	r3, #42	@ 0x2a
 8003148:	d135      	bne.n	80031b6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	b29a      	uxth	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800315c:	b29b      	uxth	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d005      	beq.n	800316e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003166:	f043 0204 	orr.w	r2, r3, #4
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800317c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003182:	4618      	mov	r0, r3
 8003184:	f7fe fa4d 	bl	8001622 <HAL_DMA_GetState>
 8003188:	4603      	mov	r3, r0
 800318a:	2b01      	cmp	r3, #1
 800318c:	d049      	beq.n	8003222 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003192:	4a69      	ldr	r2, [pc, #420]	@ (8003338 <I2C_Slave_STOPF+0x258>)
 8003194:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800319a:	4618      	mov	r0, r3
 800319c:	f7fe fa1f 	bl	80015de <HAL_DMA_Abort_IT>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d03d      	beq.n	8003222 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80031b0:	4610      	mov	r0, r2
 80031b2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031b4:	e035      	b.n	8003222 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	b29a      	uxth	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d005      	beq.n	80031da <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d2:	f043 0204 	orr.w	r2, r3, #4
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fe fa17 	bl	8001622 <HAL_DMA_GetState>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d014      	beq.n	8003224 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031fe:	4a4e      	ldr	r2, [pc, #312]	@ (8003338 <I2C_Slave_STOPF+0x258>)
 8003200:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003206:	4618      	mov	r0, r3
 8003208:	f7fe f9e9 	bl	80015de <HAL_DMA_Abort_IT>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d008      	beq.n	8003224 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800321c:	4610      	mov	r0, r2
 800321e:	4798      	blx	r3
 8003220:	e000      	b.n	8003224 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003222:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003228:	b29b      	uxth	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d03e      	beq.n	80032ac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b04      	cmp	r3, #4
 800323a:	d112      	bne.n	8003262 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691a      	ldr	r2, [r3, #16]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003258:	b29b      	uxth	r3, r3
 800325a:	3b01      	subs	r3, #1
 800325c:	b29a      	uxth	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800326c:	2b40      	cmp	r3, #64	@ 0x40
 800326e:	d112      	bne.n	8003296 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800328c:	b29b      	uxth	r3, r3
 800328e:	3b01      	subs	r3, #1
 8003290:	b29a      	uxth	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800329a:	b29b      	uxth	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d005      	beq.n	80032ac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a4:	f043 0204 	orr.w	r2, r3, #4
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f8b7 	bl	8003428 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80032ba:	e039      	b.n	8003330 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
 80032be:	2b2a      	cmp	r3, #42	@ 0x2a
 80032c0:	d109      	bne.n	80032d6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2228      	movs	r2, #40	@ 0x28
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff f80d 	bl	80022f0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b28      	cmp	r3, #40	@ 0x28
 80032e0:	d111      	bne.n	8003306 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a15      	ldr	r2, [pc, #84]	@ (800333c <I2C_Slave_STOPF+0x25c>)
 80032e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2220      	movs	r2, #32
 80032f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff f80e 	bl	8002320 <HAL_I2C_ListenCpltCallback>
}
 8003304:	e014      	b.n	8003330 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330a:	2b22      	cmp	r3, #34	@ 0x22
 800330c:	d002      	beq.n	8003314 <I2C_Slave_STOPF+0x234>
 800330e:	7bfb      	ldrb	r3, [r7, #15]
 8003310:	2b22      	cmp	r3, #34	@ 0x22
 8003312:	d10d      	bne.n	8003330 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2220      	movs	r2, #32
 800331e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7fe ffe0 	bl	80022f0 <HAL_I2C_SlaveRxCpltCallback>
}
 8003330:	bf00      	nop
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	0800368d 	.word	0x0800368d
 800333c:	ffff0000 	.word	0xffff0000

08003340 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800334e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003354:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b08      	cmp	r3, #8
 800335a:	d002      	beq.n	8003362 <I2C_Slave_AF+0x22>
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2b20      	cmp	r3, #32
 8003360:	d129      	bne.n	80033b6 <I2C_Slave_AF+0x76>
 8003362:	7bfb      	ldrb	r3, [r7, #15]
 8003364:	2b28      	cmp	r3, #40	@ 0x28
 8003366:	d126      	bne.n	80033b6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a2e      	ldr	r2, [pc, #184]	@ (8003424 <I2C_Slave_AF+0xe4>)
 800336c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800337c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003386:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003396:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2220      	movs	r2, #32
 80033a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7fe ffb6 	bl	8002320 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80033b4:	e031      	b.n	800341a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
 80033b8:	2b21      	cmp	r3, #33	@ 0x21
 80033ba:	d129      	bne.n	8003410 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a19      	ldr	r2, [pc, #100]	@ (8003424 <I2C_Slave_AF+0xe4>)
 80033c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2221      	movs	r2, #33	@ 0x21
 80033c6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80033e6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80033f0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003400:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7fe fc16 	bl	8001c34 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7fe ff67 	bl	80022dc <HAL_I2C_SlaveTxCpltCallback>
}
 800340e:	e004      	b.n	800341a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003418:	615a      	str	r2, [r3, #20]
}
 800341a:	bf00      	nop
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	ffff0000 	.word	0xffff0000

08003428 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003436:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800343e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003440:	7bbb      	ldrb	r3, [r7, #14]
 8003442:	2b10      	cmp	r3, #16
 8003444:	d002      	beq.n	800344c <I2C_ITError+0x24>
 8003446:	7bbb      	ldrb	r3, [r7, #14]
 8003448:	2b40      	cmp	r3, #64	@ 0x40
 800344a:	d10a      	bne.n	8003462 <I2C_ITError+0x3a>
 800344c:	7bfb      	ldrb	r3, [r7, #15]
 800344e:	2b22      	cmp	r3, #34	@ 0x22
 8003450:	d107      	bne.n	8003462 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003460:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003462:	7bfb      	ldrb	r3, [r7, #15]
 8003464:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003468:	2b28      	cmp	r3, #40	@ 0x28
 800346a:	d107      	bne.n	800347c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2228      	movs	r2, #40	@ 0x28
 8003476:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800347a:	e015      	b.n	80034a8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003486:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800348a:	d00a      	beq.n	80034a2 <I2C_ITError+0x7a>
 800348c:	7bfb      	ldrb	r3, [r7, #15]
 800348e:	2b60      	cmp	r3, #96	@ 0x60
 8003490:	d007      	beq.n	80034a2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2220      	movs	r2, #32
 8003496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034b6:	d162      	bne.n	800357e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034c6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d020      	beq.n	8003518 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034da:	4a6a      	ldr	r2, [pc, #424]	@ (8003684 <I2C_ITError+0x25c>)
 80034dc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe f87b 	bl	80015de <HAL_DMA_Abort_IT>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 8089 	beq.w	8003602 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0201 	bic.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800350c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003512:	4610      	mov	r0, r2
 8003514:	4798      	blx	r3
 8003516:	e074      	b.n	8003602 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800351c:	4a59      	ldr	r2, [pc, #356]	@ (8003684 <I2C_ITError+0x25c>)
 800351e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003524:	4618      	mov	r0, r3
 8003526:	f7fe f85a 	bl	80015de <HAL_DMA_Abort_IT>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d068      	beq.n	8003602 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800353a:	2b40      	cmp	r3, #64	@ 0x40
 800353c:	d10b      	bne.n	8003556 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0201 	bic.w	r2, r2, #1
 8003564:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2220      	movs	r2, #32
 800356a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003578:	4610      	mov	r0, r2
 800357a:	4798      	blx	r3
 800357c:	e041      	b.n	8003602 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b60      	cmp	r3, #96	@ 0x60
 8003588:	d125      	bne.n	80035d6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035a2:	2b40      	cmp	r3, #64	@ 0x40
 80035a4:	d10b      	bne.n	80035be <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0201 	bic.w	r2, r2, #1
 80035cc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fe fece 	bl	8002370 <HAL_I2C_AbortCpltCallback>
 80035d4:	e015      	b.n	8003602 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e0:	2b40      	cmp	r3, #64	@ 0x40
 80035e2:	d10b      	bne.n	80035fc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7fe fead 	bl	800235c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003606:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10e      	bne.n	8003630 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003618:	2b00      	cmp	r3, #0
 800361a:	d109      	bne.n	8003630 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003622:	2b00      	cmp	r3, #0
 8003624:	d104      	bne.n	8003630 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800362c:	2b00      	cmp	r3, #0
 800362e:	d007      	beq.n	8003640 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800363e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003646:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b04      	cmp	r3, #4
 8003652:	d113      	bne.n	800367c <I2C_ITError+0x254>
 8003654:	7bfb      	ldrb	r3, [r7, #15]
 8003656:	2b28      	cmp	r3, #40	@ 0x28
 8003658:	d110      	bne.n	800367c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a0a      	ldr	r2, [pc, #40]	@ (8003688 <I2C_ITError+0x260>)
 800365e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7fe fe52 	bl	8002320 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800367c:	bf00      	nop
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	0800368d 	.word	0x0800368d
 8003688:	ffff0000 	.word	0xffff0000

0800368c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800369c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036a4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80036a6:	4b4b      	ldr	r3, [pc, #300]	@ (80037d4 <I2C_DMAAbort+0x148>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	08db      	lsrs	r3, r3, #3
 80036ac:	4a4a      	ldr	r2, [pc, #296]	@ (80037d8 <I2C_DMAAbort+0x14c>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	0a1a      	lsrs	r2, r3, #8
 80036b4:	4613      	mov	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	00da      	lsls	r2, r3, #3
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d106      	bne.n	80036d4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ca:	f043 0220 	orr.w	r2, r3, #32
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80036d2:	e00a      	b.n	80036ea <I2C_DMAAbort+0x5e>
    }
    count--;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036e8:	d0ea      	beq.n	80036c0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036f6:	2200      	movs	r2, #0
 80036f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003706:	2200      	movs	r2, #0
 8003708:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003718:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2200      	movs	r2, #0
 800371e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800372c:	2200      	movs	r2, #0
 800372e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800373c:	2200      	movs	r2, #0
 800373e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0201 	bic.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b60      	cmp	r3, #96	@ 0x60
 800375a:	d10e      	bne.n	800377a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	2200      	movs	r2, #0
 8003770:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003772:	6978      	ldr	r0, [r7, #20]
 8003774:	f7fe fdfc 	bl	8002370 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003778:	e027      	b.n	80037ca <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800377a:	7cfb      	ldrb	r3, [r7, #19]
 800377c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003780:	2b28      	cmp	r3, #40	@ 0x28
 8003782:	d117      	bne.n	80037b4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0201 	orr.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80037a2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	2200      	movs	r2, #0
 80037a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2228      	movs	r2, #40	@ 0x28
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80037b2:	e007      	b.n	80037c4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80037c4:	6978      	ldr	r0, [r7, #20]
 80037c6:	f7fe fdc9 	bl	800235c <HAL_I2C_ErrorCallback>
}
 80037ca:	bf00      	nop
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20000000 	.word	0x20000000
 80037d8:	14f8b589 	.word	0x14f8b589

080037dc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80037e4:	2300      	movs	r3, #0
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80037e8:	4b13      	ldr	r3, [pc, #76]	@ (8003838 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	08db      	lsrs	r3, r3, #3
 80037ee:	4a13      	ldr	r2, [pc, #76]	@ (800383c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80037f0:	fba2 2303 	umull	r2, r3, r2, r3
 80037f4:	0a1a      	lsrs	r2, r3, #8
 80037f6:	4613      	mov	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	3b01      	subs	r3, #1
 8003802:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d107      	bne.n	800381a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380e:	f043 0220 	orr.w	r2, r3, #32
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e008      	b.n	800382c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003824:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003828:	d0e9      	beq.n	80037fe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	20000000 	.word	0x20000000
 800383c:	14f8b589 	.word	0x14f8b589

08003840 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003850:	d103      	bne.n	800385a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003858:	e007      	b.n	800386a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800385e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003862:	d102      	bne.n	800386a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2208      	movs	r2, #8
 8003868:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
	...

08003878 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e267      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d075      	beq.n	8003982 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003896:	4b88      	ldr	r3, [pc, #544]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d00c      	beq.n	80038bc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038a2:	4b85      	ldr	r3, [pc, #532]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d112      	bne.n	80038d4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ae:	4b82      	ldr	r3, [pc, #520]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038ba:	d10b      	bne.n	80038d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038bc:	4b7e      	ldr	r3, [pc, #504]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d05b      	beq.n	8003980 <HAL_RCC_OscConfig+0x108>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d157      	bne.n	8003980 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e242      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038dc:	d106      	bne.n	80038ec <HAL_RCC_OscConfig+0x74>
 80038de:	4b76      	ldr	r3, [pc, #472]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a75      	ldr	r2, [pc, #468]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80038e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	e01d      	b.n	8003928 <HAL_RCC_OscConfig+0xb0>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038f4:	d10c      	bne.n	8003910 <HAL_RCC_OscConfig+0x98>
 80038f6:	4b70      	ldr	r3, [pc, #448]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a6f      	ldr	r2, [pc, #444]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80038fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003900:	6013      	str	r3, [r2, #0]
 8003902:	4b6d      	ldr	r3, [pc, #436]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a6c      	ldr	r2, [pc, #432]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003908:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800390c:	6013      	str	r3, [r2, #0]
 800390e:	e00b      	b.n	8003928 <HAL_RCC_OscConfig+0xb0>
 8003910:	4b69      	ldr	r3, [pc, #420]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a68      	ldr	r2, [pc, #416]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003916:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	4b66      	ldr	r3, [pc, #408]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a65      	ldr	r2, [pc, #404]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003922:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003926:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d013      	beq.n	8003958 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003930:	f7fd fd14 	bl	800135c <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003938:	f7fd fd10 	bl	800135c <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b64      	cmp	r3, #100	@ 0x64
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e207      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800394a:	4b5b      	ldr	r3, [pc, #364]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0f0      	beq.n	8003938 <HAL_RCC_OscConfig+0xc0>
 8003956:	e014      	b.n	8003982 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003958:	f7fd fd00 	bl	800135c <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003960:	f7fd fcfc 	bl	800135c <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b64      	cmp	r3, #100	@ 0x64
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e1f3      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003972:	4b51      	ldr	r3, [pc, #324]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <HAL_RCC_OscConfig+0xe8>
 800397e:	e000      	b.n	8003982 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d063      	beq.n	8003a56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800398e:	4b4a      	ldr	r3, [pc, #296]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 030c 	and.w	r3, r3, #12
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00b      	beq.n	80039b2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800399a:	4b47      	ldr	r3, [pc, #284]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d11c      	bne.n	80039e0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039a6:	4b44      	ldr	r3, [pc, #272]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d116      	bne.n	80039e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039b2:	4b41      	ldr	r3, [pc, #260]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d005      	beq.n	80039ca <HAL_RCC_OscConfig+0x152>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d001      	beq.n	80039ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e1c7      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ca:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	4937      	ldr	r1, [pc, #220]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039de:	e03a      	b.n	8003a56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d020      	beq.n	8003a2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039e8:	4b34      	ldr	r3, [pc, #208]	@ (8003abc <HAL_RCC_OscConfig+0x244>)
 80039ea:	2201      	movs	r2, #1
 80039ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ee:	f7fd fcb5 	bl	800135c <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f4:	e008      	b.n	8003a08 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f6:	f7fd fcb1 	bl	800135c <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e1a8      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a08:	4b2b      	ldr	r3, [pc, #172]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0f0      	beq.n	80039f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a14:	4b28      	ldr	r3, [pc, #160]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	4925      	ldr	r1, [pc, #148]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	600b      	str	r3, [r1, #0]
 8003a28:	e015      	b.n	8003a56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a2a:	4b24      	ldr	r3, [pc, #144]	@ (8003abc <HAL_RCC_OscConfig+0x244>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a30:	f7fd fc94 	bl	800135c <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a38:	f7fd fc90 	bl	800135c <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e187      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f0      	bne.n	8003a38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d036      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d016      	beq.n	8003a98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a6a:	4b15      	ldr	r3, [pc, #84]	@ (8003ac0 <HAL_RCC_OscConfig+0x248>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a70:	f7fd fc74 	bl	800135c <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a78:	f7fd fc70 	bl	800135c <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e167      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003a8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCC_OscConfig+0x200>
 8003a96:	e01b      	b.n	8003ad0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a98:	4b09      	ldr	r3, [pc, #36]	@ (8003ac0 <HAL_RCC_OscConfig+0x248>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9e:	f7fd fc5d 	bl	800135c <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aa4:	e00e      	b.n	8003ac4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aa6:	f7fd fc59 	bl	800135c <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d907      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e150      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	42470000 	.word	0x42470000
 8003ac0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ac4:	4b88      	ldr	r3, [pc, #544]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003ac6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1ea      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 8097 	beq.w	8003c0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ae2:	4b81      	ldr	r3, [pc, #516]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10f      	bne.n	8003b0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aee:	2300      	movs	r3, #0
 8003af0:	60bb      	str	r3, [r7, #8]
 8003af2:	4b7d      	ldr	r3, [pc, #500]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af6:	4a7c      	ldr	r2, [pc, #496]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003af8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003afc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003afe:	4b7a      	ldr	r3, [pc, #488]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b06:	60bb      	str	r3, [r7, #8]
 8003b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0e:	4b77      	ldr	r3, [pc, #476]	@ (8003cec <HAL_RCC_OscConfig+0x474>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d118      	bne.n	8003b4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b1a:	4b74      	ldr	r3, [pc, #464]	@ (8003cec <HAL_RCC_OscConfig+0x474>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a73      	ldr	r2, [pc, #460]	@ (8003cec <HAL_RCC_OscConfig+0x474>)
 8003b20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b26:	f7fd fc19 	bl	800135c <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b2e:	f7fd fc15 	bl	800135c <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e10c      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b40:	4b6a      	ldr	r3, [pc, #424]	@ (8003cec <HAL_RCC_OscConfig+0x474>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0f0      	beq.n	8003b2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d106      	bne.n	8003b62 <HAL_RCC_OscConfig+0x2ea>
 8003b54:	4b64      	ldr	r3, [pc, #400]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b58:	4a63      	ldr	r2, [pc, #396]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b5a:	f043 0301 	orr.w	r3, r3, #1
 8003b5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b60:	e01c      	b.n	8003b9c <HAL_RCC_OscConfig+0x324>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	2b05      	cmp	r3, #5
 8003b68:	d10c      	bne.n	8003b84 <HAL_RCC_OscConfig+0x30c>
 8003b6a:	4b5f      	ldr	r3, [pc, #380]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6e:	4a5e      	ldr	r2, [pc, #376]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b70:	f043 0304 	orr.w	r3, r3, #4
 8003b74:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b76:	4b5c      	ldr	r3, [pc, #368]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b7a:	4a5b      	ldr	r2, [pc, #364]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b7c:	f043 0301 	orr.w	r3, r3, #1
 8003b80:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b82:	e00b      	b.n	8003b9c <HAL_RCC_OscConfig+0x324>
 8003b84:	4b58      	ldr	r3, [pc, #352]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b88:	4a57      	ldr	r2, [pc, #348]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b8a:	f023 0301 	bic.w	r3, r3, #1
 8003b8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b90:	4b55      	ldr	r3, [pc, #340]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b94:	4a54      	ldr	r2, [pc, #336]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b96:	f023 0304 	bic.w	r3, r3, #4
 8003b9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d015      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba4:	f7fd fbda 	bl	800135c <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003baa:	e00a      	b.n	8003bc2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bac:	f7fd fbd6 	bl	800135c <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e0cb      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc2:	4b49      	ldr	r3, [pc, #292]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0ee      	beq.n	8003bac <HAL_RCC_OscConfig+0x334>
 8003bce:	e014      	b.n	8003bfa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd0:	f7fd fbc4 	bl	800135c <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd6:	e00a      	b.n	8003bee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd8:	f7fd fbc0 	bl	800135c <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e0b5      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bee:	4b3e      	ldr	r3, [pc, #248]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1ee      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bfa:	7dfb      	ldrb	r3, [r7, #23]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d105      	bne.n	8003c0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c00:	4b39      	ldr	r3, [pc, #228]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c04:	4a38      	ldr	r2, [pc, #224]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003c06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c0a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 80a1 	beq.w	8003d58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c16:	4b34      	ldr	r3, [pc, #208]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 030c 	and.w	r3, r3, #12
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d05c      	beq.n	8003cdc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d141      	bne.n	8003cae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c2a:	4b31      	ldr	r3, [pc, #196]	@ (8003cf0 <HAL_RCC_OscConfig+0x478>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c30:	f7fd fb94 	bl	800135c <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c38:	f7fd fb90 	bl	800135c <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e087      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c4a:	4b27      	ldr	r3, [pc, #156]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1f0      	bne.n	8003c38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69da      	ldr	r2, [r3, #28]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c64:	019b      	lsls	r3, r3, #6
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c6c:	085b      	lsrs	r3, r3, #1
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	041b      	lsls	r3, r3, #16
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c78:	061b      	lsls	r3, r3, #24
 8003c7a:	491b      	ldr	r1, [pc, #108]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c80:	4b1b      	ldr	r3, [pc, #108]	@ (8003cf0 <HAL_RCC_OscConfig+0x478>)
 8003c82:	2201      	movs	r2, #1
 8003c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c86:	f7fd fb69 	bl	800135c <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c8c:	e008      	b.n	8003ca0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c8e:	f7fd fb65 	bl	800135c <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e05c      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ca0:	4b11      	ldr	r3, [pc, #68]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0f0      	beq.n	8003c8e <HAL_RCC_OscConfig+0x416>
 8003cac:	e054      	b.n	8003d58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cae:	4b10      	ldr	r3, [pc, #64]	@ (8003cf0 <HAL_RCC_OscConfig+0x478>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb4:	f7fd fb52 	bl	800135c <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cbc:	f7fd fb4e 	bl	800135c <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e045      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cce:	4b06      	ldr	r3, [pc, #24]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1f0      	bne.n	8003cbc <HAL_RCC_OscConfig+0x444>
 8003cda:	e03d      	b.n	8003d58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d107      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e038      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	40007000 	.word	0x40007000
 8003cf0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d64 <HAL_RCC_OscConfig+0x4ec>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d028      	beq.n	8003d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d121      	bne.n	8003d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d11a      	bne.n	8003d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d24:	4013      	ands	r3, r2
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d111      	bne.n	8003d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3a:	085b      	lsrs	r3, r3, #1
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d107      	bne.n	8003d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d001      	beq.n	8003d58 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e000      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3718      	adds	r7, #24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	40023800 	.word	0x40023800

08003d68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e0cc      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d7c:	4b68      	ldr	r3, [pc, #416]	@ (8003f20 <HAL_RCC_ClockConfig+0x1b8>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d90c      	bls.n	8003da4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8a:	4b65      	ldr	r3, [pc, #404]	@ (8003f20 <HAL_RCC_ClockConfig+0x1b8>)
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d92:	4b63      	ldr	r3, [pc, #396]	@ (8003f20 <HAL_RCC_ClockConfig+0x1b8>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d001      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e0b8      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d020      	beq.n	8003df2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d005      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dbc:	4b59      	ldr	r3, [pc, #356]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	4a58      	ldr	r2, [pc, #352]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003dc6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0308 	and.w	r3, r3, #8
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d005      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dd4:	4b53      	ldr	r3, [pc, #332]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	4a52      	ldr	r2, [pc, #328]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003dde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003de0:	4b50      	ldr	r3, [pc, #320]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	494d      	ldr	r1, [pc, #308]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d044      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d107      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e06:	4b47      	ldr	r3, [pc, #284]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d119      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e07f      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d003      	beq.n	8003e26 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d107      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e26:	4b3f      	ldr	r3, [pc, #252]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d109      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e06f      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e36:	4b3b      	ldr	r3, [pc, #236]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e067      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e46:	4b37      	ldr	r3, [pc, #220]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f023 0203 	bic.w	r2, r3, #3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	4934      	ldr	r1, [pc, #208]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e58:	f7fd fa80 	bl	800135c <HAL_GetTick>
 8003e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e5e:	e00a      	b.n	8003e76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e60:	f7fd fa7c 	bl	800135c <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e04f      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e76:	4b2b      	ldr	r3, [pc, #172]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f003 020c 	and.w	r2, r3, #12
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d1eb      	bne.n	8003e60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e88:	4b25      	ldr	r3, [pc, #148]	@ (8003f20 <HAL_RCC_ClockConfig+0x1b8>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d20c      	bcs.n	8003eb0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e96:	4b22      	ldr	r3, [pc, #136]	@ (8003f20 <HAL_RCC_ClockConfig+0x1b8>)
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9e:	4b20      	ldr	r3, [pc, #128]	@ (8003f20 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d001      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e032      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d008      	beq.n	8003ece <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ebc:	4b19      	ldr	r3, [pc, #100]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	4916      	ldr	r1, [pc, #88]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d009      	beq.n	8003eee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eda:	4b12      	ldr	r3, [pc, #72]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	490e      	ldr	r1, [pc, #56]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eee:	f000 f821 	bl	8003f34 <HAL_RCC_GetSysClockFreq>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	091b      	lsrs	r3, r3, #4
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	490a      	ldr	r1, [pc, #40]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c0>)
 8003f00:	5ccb      	ldrb	r3, [r1, r3]
 8003f02:	fa22 f303 	lsr.w	r3, r2, r3
 8003f06:	4a09      	ldr	r2, [pc, #36]	@ (8003f2c <HAL_RCC_ClockConfig+0x1c4>)
 8003f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003f0a:	4b09      	ldr	r3, [pc, #36]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fd f9e0 	bl	80012d4 <HAL_InitTick>

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	40023c00 	.word	0x40023c00
 8003f24:	40023800 	.word	0x40023800
 8003f28:	080041f0 	.word	0x080041f0
 8003f2c:	20000000 	.word	0x20000000
 8003f30:	20000004 	.word	0x20000004

08003f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f38:	b094      	sub	sp, #80	@ 0x50
 8003f3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f4c:	4b79      	ldr	r3, [pc, #484]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 030c 	and.w	r3, r3, #12
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	d00d      	beq.n	8003f74 <HAL_RCC_GetSysClockFreq+0x40>
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	f200 80e1 	bhi.w	8004120 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <HAL_RCC_GetSysClockFreq+0x34>
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d003      	beq.n	8003f6e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f66:	e0db      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f68:	4b73      	ldr	r3, [pc, #460]	@ (8004138 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f6c:	e0db      	b.n	8004126 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f6e:	4b73      	ldr	r3, [pc, #460]	@ (800413c <HAL_RCC_GetSysClockFreq+0x208>)
 8003f70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f72:	e0d8      	b.n	8004126 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f74:	4b6f      	ldr	r3, [pc, #444]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f7c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f7e:	4b6d      	ldr	r3, [pc, #436]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d063      	beq.n	8004052 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f8a:	4b6a      	ldr	r3, [pc, #424]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	099b      	lsrs	r3, r3, #6
 8003f90:	2200      	movs	r2, #0
 8003f92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f94:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fa2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003fa6:	4622      	mov	r2, r4
 8003fa8:	462b      	mov	r3, r5
 8003faa:	f04f 0000 	mov.w	r0, #0
 8003fae:	f04f 0100 	mov.w	r1, #0
 8003fb2:	0159      	lsls	r1, r3, #5
 8003fb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fb8:	0150      	lsls	r0, r2, #5
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4621      	mov	r1, r4
 8003fc0:	1a51      	subs	r1, r2, r1
 8003fc2:	6139      	str	r1, [r7, #16]
 8003fc4:	4629      	mov	r1, r5
 8003fc6:	eb63 0301 	sbc.w	r3, r3, r1
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fd8:	4659      	mov	r1, fp
 8003fda:	018b      	lsls	r3, r1, #6
 8003fdc:	4651      	mov	r1, sl
 8003fde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fe2:	4651      	mov	r1, sl
 8003fe4:	018a      	lsls	r2, r1, #6
 8003fe6:	4651      	mov	r1, sl
 8003fe8:	ebb2 0801 	subs.w	r8, r2, r1
 8003fec:	4659      	mov	r1, fp
 8003fee:	eb63 0901 	sbc.w	r9, r3, r1
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	f04f 0300 	mov.w	r3, #0
 8003ffa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ffe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004002:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004006:	4690      	mov	r8, r2
 8004008:	4699      	mov	r9, r3
 800400a:	4623      	mov	r3, r4
 800400c:	eb18 0303 	adds.w	r3, r8, r3
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	462b      	mov	r3, r5
 8004014:	eb49 0303 	adc.w	r3, r9, r3
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	f04f 0200 	mov.w	r2, #0
 800401e:	f04f 0300 	mov.w	r3, #0
 8004022:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004026:	4629      	mov	r1, r5
 8004028:	024b      	lsls	r3, r1, #9
 800402a:	4621      	mov	r1, r4
 800402c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004030:	4621      	mov	r1, r4
 8004032:	024a      	lsls	r2, r1, #9
 8004034:	4610      	mov	r0, r2
 8004036:	4619      	mov	r1, r3
 8004038:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800403a:	2200      	movs	r2, #0
 800403c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800403e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004040:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004044:	f7fc f910 	bl	8000268 <__aeabi_uldivmod>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	4613      	mov	r3, r2
 800404e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004050:	e058      	b.n	8004104 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004052:	4b38      	ldr	r3, [pc, #224]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x200>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	099b      	lsrs	r3, r3, #6
 8004058:	2200      	movs	r2, #0
 800405a:	4618      	mov	r0, r3
 800405c:	4611      	mov	r1, r2
 800405e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004062:	623b      	str	r3, [r7, #32]
 8004064:	2300      	movs	r3, #0
 8004066:	627b      	str	r3, [r7, #36]	@ 0x24
 8004068:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800406c:	4642      	mov	r2, r8
 800406e:	464b      	mov	r3, r9
 8004070:	f04f 0000 	mov.w	r0, #0
 8004074:	f04f 0100 	mov.w	r1, #0
 8004078:	0159      	lsls	r1, r3, #5
 800407a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800407e:	0150      	lsls	r0, r2, #5
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	4641      	mov	r1, r8
 8004086:	ebb2 0a01 	subs.w	sl, r2, r1
 800408a:	4649      	mov	r1, r9
 800408c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800409c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040a4:	ebb2 040a 	subs.w	r4, r2, sl
 80040a8:	eb63 050b 	sbc.w	r5, r3, fp
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	00eb      	lsls	r3, r5, #3
 80040b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040ba:	00e2      	lsls	r2, r4, #3
 80040bc:	4614      	mov	r4, r2
 80040be:	461d      	mov	r5, r3
 80040c0:	4643      	mov	r3, r8
 80040c2:	18e3      	adds	r3, r4, r3
 80040c4:	603b      	str	r3, [r7, #0]
 80040c6:	464b      	mov	r3, r9
 80040c8:	eb45 0303 	adc.w	r3, r5, r3
 80040cc:	607b      	str	r3, [r7, #4]
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040da:	4629      	mov	r1, r5
 80040dc:	028b      	lsls	r3, r1, #10
 80040de:	4621      	mov	r1, r4
 80040e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040e4:	4621      	mov	r1, r4
 80040e6:	028a      	lsls	r2, r1, #10
 80040e8:	4610      	mov	r0, r2
 80040ea:	4619      	mov	r1, r3
 80040ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040ee:	2200      	movs	r2, #0
 80040f0:	61bb      	str	r3, [r7, #24]
 80040f2:	61fa      	str	r2, [r7, #28]
 80040f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040f8:	f7fc f8b6 	bl	8000268 <__aeabi_uldivmod>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4613      	mov	r3, r2
 8004102:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004104:	4b0b      	ldr	r3, [pc, #44]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x200>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	0c1b      	lsrs	r3, r3, #16
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	3301      	adds	r3, #1
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004114:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004116:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004118:	fbb2 f3f3 	udiv	r3, r2, r3
 800411c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800411e:	e002      	b.n	8004126 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004120:	4b05      	ldr	r3, [pc, #20]	@ (8004138 <HAL_RCC_GetSysClockFreq+0x204>)
 8004122:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004126:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004128:	4618      	mov	r0, r3
 800412a:	3750      	adds	r7, #80	@ 0x50
 800412c:	46bd      	mov	sp, r7
 800412e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004132:	bf00      	nop
 8004134:	40023800 	.word	0x40023800
 8004138:	00f42400 	.word	0x00f42400
 800413c:	007a1200 	.word	0x007a1200

08004140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004144:	4b03      	ldr	r3, [pc, #12]	@ (8004154 <HAL_RCC_GetHCLKFreq+0x14>)
 8004146:	681b      	ldr	r3, [r3, #0]
}
 8004148:	4618      	mov	r0, r3
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	20000000 	.word	0x20000000

08004158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800415c:	f7ff fff0 	bl	8004140 <HAL_RCC_GetHCLKFreq>
 8004160:	4602      	mov	r2, r0
 8004162:	4b05      	ldr	r3, [pc, #20]	@ (8004178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	0a9b      	lsrs	r3, r3, #10
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	4903      	ldr	r1, [pc, #12]	@ (800417c <HAL_RCC_GetPCLK1Freq+0x24>)
 800416e:	5ccb      	ldrb	r3, [r1, r3]
 8004170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004174:	4618      	mov	r0, r3
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40023800 	.word	0x40023800
 800417c:	08004200 	.word	0x08004200

08004180 <memset>:
 8004180:	4402      	add	r2, r0
 8004182:	4603      	mov	r3, r0
 8004184:	4293      	cmp	r3, r2
 8004186:	d100      	bne.n	800418a <memset+0xa>
 8004188:	4770      	bx	lr
 800418a:	f803 1b01 	strb.w	r1, [r3], #1
 800418e:	e7f9      	b.n	8004184 <memset+0x4>

08004190 <__libc_init_array>:
 8004190:	b570      	push	{r4, r5, r6, lr}
 8004192:	4d0d      	ldr	r5, [pc, #52]	@ (80041c8 <__libc_init_array+0x38>)
 8004194:	4c0d      	ldr	r4, [pc, #52]	@ (80041cc <__libc_init_array+0x3c>)
 8004196:	1b64      	subs	r4, r4, r5
 8004198:	10a4      	asrs	r4, r4, #2
 800419a:	2600      	movs	r6, #0
 800419c:	42a6      	cmp	r6, r4
 800419e:	d109      	bne.n	80041b4 <__libc_init_array+0x24>
 80041a0:	4d0b      	ldr	r5, [pc, #44]	@ (80041d0 <__libc_init_array+0x40>)
 80041a2:	4c0c      	ldr	r4, [pc, #48]	@ (80041d4 <__libc_init_array+0x44>)
 80041a4:	f000 f818 	bl	80041d8 <_init>
 80041a8:	1b64      	subs	r4, r4, r5
 80041aa:	10a4      	asrs	r4, r4, #2
 80041ac:	2600      	movs	r6, #0
 80041ae:	42a6      	cmp	r6, r4
 80041b0:	d105      	bne.n	80041be <__libc_init_array+0x2e>
 80041b2:	bd70      	pop	{r4, r5, r6, pc}
 80041b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80041b8:	4798      	blx	r3
 80041ba:	3601      	adds	r6, #1
 80041bc:	e7ee      	b.n	800419c <__libc_init_array+0xc>
 80041be:	f855 3b04 	ldr.w	r3, [r5], #4
 80041c2:	4798      	blx	r3
 80041c4:	3601      	adds	r6, #1
 80041c6:	e7f2      	b.n	80041ae <__libc_init_array+0x1e>
 80041c8:	08004210 	.word	0x08004210
 80041cc:	08004210 	.word	0x08004210
 80041d0:	08004210 	.word	0x08004210
 80041d4:	08004214 	.word	0x08004214

080041d8 <_init>:
 80041d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041da:	bf00      	nop
 80041dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041de:	bc08      	pop	{r3}
 80041e0:	469e      	mov	lr, r3
 80041e2:	4770      	bx	lr

080041e4 <_fini>:
 80041e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e6:	bf00      	nop
 80041e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ea:	bc08      	pop	{r3}
 80041ec:	469e      	mov	lr, r3
 80041ee:	4770      	bx	lr
