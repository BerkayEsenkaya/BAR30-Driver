
BAR30-F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f1c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080050a4  080050a4  000060a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050c4  080050c4  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  080050c4  080050c4  000060c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050cc  080050cc  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050cc  080050cc  000060cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050d0  080050d0  000060d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080050d4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          00000504  20000010  20000010  00007010  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000514  20000514  00007010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009783  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cac  00000000  00000000  000107bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000918  00000000  00000000  00012470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006e5  00000000  00000000  00012d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fd23  00000000  00000000  0001346d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000be09  00000000  00000000  00033190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0ae6  00000000  00000000  0003ef99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ffa7f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000242c  00000000  00000000  000ffac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00101ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800508c 	.word	0x0800508c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	0800508c 	.word	0x0800508c

080001c8 <__aeabi_ldivmod>:
 80001c8:	b97b      	cbnz	r3, 80001ea <__aeabi_ldivmod+0x22>
 80001ca:	b972      	cbnz	r2, 80001ea <__aeabi_ldivmod+0x22>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bfbe      	ittt	lt
 80001d0:	2000      	movlt	r0, #0
 80001d2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80001d6:	e006      	blt.n	80001e6 <__aeabi_ldivmod+0x1e>
 80001d8:	bf08      	it	eq
 80001da:	2800      	cmpeq	r0, #0
 80001dc:	bf1c      	itt	ne
 80001de:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80001e2:	f04f 30ff 	movne.w	r0, #4294967295
 80001e6:	f000 b9b5 	b.w	8000554 <__aeabi_idiv0>
 80001ea:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f2:	2900      	cmp	r1, #0
 80001f4:	db09      	blt.n	800020a <__aeabi_ldivmod+0x42>
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	db1a      	blt.n	8000230 <__aeabi_ldivmod+0x68>
 80001fa:	f000 f84d 	bl	8000298 <__udivmoddi4>
 80001fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000206:	b004      	add	sp, #16
 8000208:	4770      	bx	lr
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	2b00      	cmp	r3, #0
 8000212:	db1b      	blt.n	800024c <__aeabi_ldivmod+0x84>
 8000214:	f000 f840 	bl	8000298 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4240      	negs	r0, r0
 8000224:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000228:	4252      	negs	r2, r2
 800022a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800022e:	4770      	bx	lr
 8000230:	4252      	negs	r2, r2
 8000232:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000236:	f000 f82f 	bl	8000298 <__udivmoddi4>
 800023a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000242:	b004      	add	sp, #16
 8000244:	4240      	negs	r0, r0
 8000246:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024a:	4770      	bx	lr
 800024c:	4252      	negs	r2, r2
 800024e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000252:	f000 f821 	bl	8000298 <__udivmoddi4>
 8000256:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025e:	b004      	add	sp, #16
 8000260:	4252      	negs	r2, r2
 8000262:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000266:	4770      	bx	lr

08000268 <__aeabi_uldivmod>:
 8000268:	b953      	cbnz	r3, 8000280 <__aeabi_uldivmod+0x18>
 800026a:	b94a      	cbnz	r2, 8000280 <__aeabi_uldivmod+0x18>
 800026c:	2900      	cmp	r1, #0
 800026e:	bf08      	it	eq
 8000270:	2800      	cmpeq	r0, #0
 8000272:	bf1c      	itt	ne
 8000274:	f04f 31ff 	movne.w	r1, #4294967295
 8000278:	f04f 30ff 	movne.w	r0, #4294967295
 800027c:	f000 b96a 	b.w	8000554 <__aeabi_idiv0>
 8000280:	f1ad 0c08 	sub.w	ip, sp, #8
 8000284:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000288:	f000 f806 	bl	8000298 <__udivmoddi4>
 800028c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000294:	b004      	add	sp, #16
 8000296:	4770      	bx	lr

08000298 <__udivmoddi4>:
 8000298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800029c:	9d08      	ldr	r5, [sp, #32]
 800029e:	460c      	mov	r4, r1
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d14e      	bne.n	8000342 <__udivmoddi4+0xaa>
 80002a4:	4694      	mov	ip, r2
 80002a6:	458c      	cmp	ip, r1
 80002a8:	4686      	mov	lr, r0
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	d962      	bls.n	8000376 <__udivmoddi4+0xde>
 80002b0:	b14a      	cbz	r2, 80002c6 <__udivmoddi4+0x2e>
 80002b2:	f1c2 0320 	rsb	r3, r2, #32
 80002b6:	4091      	lsls	r1, r2
 80002b8:	fa20 f303 	lsr.w	r3, r0, r3
 80002bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c0:	4319      	orrs	r1, r3
 80002c2:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ca:	fa1f f68c 	uxth.w	r6, ip
 80002ce:	fbb1 f4f7 	udiv	r4, r1, r7
 80002d2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d6:	fb07 1114 	mls	r1, r7, r4, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb04 f106 	mul.w	r1, r4, r6
 80002e2:	4299      	cmp	r1, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x64>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ee:	f080 8112 	bcs.w	8000516 <__udivmoddi4+0x27e>
 80002f2:	4299      	cmp	r1, r3
 80002f4:	f240 810f 	bls.w	8000516 <__udivmoddi4+0x27e>
 80002f8:	3c02      	subs	r4, #2
 80002fa:	4463      	add	r3, ip
 80002fc:	1a59      	subs	r1, r3, r1
 80002fe:	fa1f f38e 	uxth.w	r3, lr
 8000302:	fbb1 f0f7 	udiv	r0, r1, r7
 8000306:	fb07 1110 	mls	r1, r7, r0, r1
 800030a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030e:	fb00 f606 	mul.w	r6, r0, r6
 8000312:	429e      	cmp	r6, r3
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x94>
 8000316:	eb1c 0303 	adds.w	r3, ip, r3
 800031a:	f100 31ff 	add.w	r1, r0, #4294967295
 800031e:	f080 80fc 	bcs.w	800051a <__udivmoddi4+0x282>
 8000322:	429e      	cmp	r6, r3
 8000324:	f240 80f9 	bls.w	800051a <__udivmoddi4+0x282>
 8000328:	4463      	add	r3, ip
 800032a:	3802      	subs	r0, #2
 800032c:	1b9b      	subs	r3, r3, r6
 800032e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000332:	2100      	movs	r1, #0
 8000334:	b11d      	cbz	r5, 800033e <__udivmoddi4+0xa6>
 8000336:	40d3      	lsrs	r3, r2
 8000338:	2200      	movs	r2, #0
 800033a:	e9c5 3200 	strd	r3, r2, [r5]
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	428b      	cmp	r3, r1
 8000344:	d905      	bls.n	8000352 <__udivmoddi4+0xba>
 8000346:	b10d      	cbz	r5, 800034c <__udivmoddi4+0xb4>
 8000348:	e9c5 0100 	strd	r0, r1, [r5]
 800034c:	2100      	movs	r1, #0
 800034e:	4608      	mov	r0, r1
 8000350:	e7f5      	b.n	800033e <__udivmoddi4+0xa6>
 8000352:	fab3 f183 	clz	r1, r3
 8000356:	2900      	cmp	r1, #0
 8000358:	d146      	bne.n	80003e8 <__udivmoddi4+0x150>
 800035a:	42a3      	cmp	r3, r4
 800035c:	d302      	bcc.n	8000364 <__udivmoddi4+0xcc>
 800035e:	4290      	cmp	r0, r2
 8000360:	f0c0 80f0 	bcc.w	8000544 <__udivmoddi4+0x2ac>
 8000364:	1a86      	subs	r6, r0, r2
 8000366:	eb64 0303 	sbc.w	r3, r4, r3
 800036a:	2001      	movs	r0, #1
 800036c:	2d00      	cmp	r5, #0
 800036e:	d0e6      	beq.n	800033e <__udivmoddi4+0xa6>
 8000370:	e9c5 6300 	strd	r6, r3, [r5]
 8000374:	e7e3      	b.n	800033e <__udivmoddi4+0xa6>
 8000376:	2a00      	cmp	r2, #0
 8000378:	f040 8090 	bne.w	800049c <__udivmoddi4+0x204>
 800037c:	eba1 040c 	sub.w	r4, r1, ip
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	fa1f f78c 	uxth.w	r7, ip
 8000388:	2101      	movs	r1, #1
 800038a:	fbb4 f6f8 	udiv	r6, r4, r8
 800038e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000392:	fb08 4416 	mls	r4, r8, r6, r4
 8000396:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039a:	fb07 f006 	mul.w	r0, r7, r6
 800039e:	4298      	cmp	r0, r3
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0x11c>
 80003a2:	eb1c 0303 	adds.w	r3, ip, r3
 80003a6:	f106 34ff 	add.w	r4, r6, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x11a>
 80003ac:	4298      	cmp	r0, r3
 80003ae:	f200 80cd 	bhi.w	800054c <__udivmoddi4+0x2b4>
 80003b2:	4626      	mov	r6, r4
 80003b4:	1a1c      	subs	r4, r3, r0
 80003b6:	fa1f f38e 	uxth.w	r3, lr
 80003ba:	fbb4 f0f8 	udiv	r0, r4, r8
 80003be:	fb08 4410 	mls	r4, r8, r0, r4
 80003c2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c6:	fb00 f707 	mul.w	r7, r0, r7
 80003ca:	429f      	cmp	r7, r3
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x148>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x146>
 80003d8:	429f      	cmp	r7, r3
 80003da:	f200 80b0 	bhi.w	800053e <__udivmoddi4+0x2a6>
 80003de:	4620      	mov	r0, r4
 80003e0:	1bdb      	subs	r3, r3, r7
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0x9c>
 80003e8:	f1c1 0620 	rsb	r6, r1, #32
 80003ec:	408b      	lsls	r3, r1
 80003ee:	fa22 f706 	lsr.w	r7, r2, r6
 80003f2:	431f      	orrs	r7, r3
 80003f4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f8:	fa04 f301 	lsl.w	r3, r4, r1
 80003fc:	ea43 030c 	orr.w	r3, r3, ip
 8000400:	40f4      	lsrs	r4, r6
 8000402:	fa00 f801 	lsl.w	r8, r0, r1
 8000406:	0c38      	lsrs	r0, r7, #16
 8000408:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800040c:	fbb4 fef0 	udiv	lr, r4, r0
 8000410:	fa1f fc87 	uxth.w	ip, r7
 8000414:	fb00 441e 	mls	r4, r0, lr, r4
 8000418:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800041c:	fb0e f90c 	mul.w	r9, lr, ip
 8000420:	45a1      	cmp	r9, r4
 8000422:	fa02 f201 	lsl.w	r2, r2, r1
 8000426:	d90a      	bls.n	800043e <__udivmoddi4+0x1a6>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042e:	f080 8084 	bcs.w	800053a <__udivmoddi4+0x2a2>
 8000432:	45a1      	cmp	r9, r4
 8000434:	f240 8081 	bls.w	800053a <__udivmoddi4+0x2a2>
 8000438:	f1ae 0e02 	sub.w	lr, lr, #2
 800043c:	443c      	add	r4, r7
 800043e:	eba4 0409 	sub.w	r4, r4, r9
 8000442:	fa1f f983 	uxth.w	r9, r3
 8000446:	fbb4 f3f0 	udiv	r3, r4, r0
 800044a:	fb00 4413 	mls	r4, r0, r3, r4
 800044e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000452:	fb03 fc0c 	mul.w	ip, r3, ip
 8000456:	45a4      	cmp	ip, r4
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x1d2>
 800045a:	193c      	adds	r4, r7, r4
 800045c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000460:	d267      	bcs.n	8000532 <__udivmoddi4+0x29a>
 8000462:	45a4      	cmp	ip, r4
 8000464:	d965      	bls.n	8000532 <__udivmoddi4+0x29a>
 8000466:	3b02      	subs	r3, #2
 8000468:	443c      	add	r4, r7
 800046a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046e:	fba0 9302 	umull	r9, r3, r0, r2
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	429c      	cmp	r4, r3
 8000478:	46ce      	mov	lr, r9
 800047a:	469c      	mov	ip, r3
 800047c:	d351      	bcc.n	8000522 <__udivmoddi4+0x28a>
 800047e:	d04e      	beq.n	800051e <__udivmoddi4+0x286>
 8000480:	b155      	cbz	r5, 8000498 <__udivmoddi4+0x200>
 8000482:	ebb8 030e 	subs.w	r3, r8, lr
 8000486:	eb64 040c 	sbc.w	r4, r4, ip
 800048a:	fa04 f606 	lsl.w	r6, r4, r6
 800048e:	40cb      	lsrs	r3, r1
 8000490:	431e      	orrs	r6, r3
 8000492:	40cc      	lsrs	r4, r1
 8000494:	e9c5 6400 	strd	r6, r4, [r5]
 8000498:	2100      	movs	r1, #0
 800049a:	e750      	b.n	800033e <__udivmoddi4+0xa6>
 800049c:	f1c2 0320 	rsb	r3, r2, #32
 80004a0:	fa20 f103 	lsr.w	r1, r0, r3
 80004a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a8:	fa24 f303 	lsr.w	r3, r4, r3
 80004ac:	4094      	lsls	r4, r2
 80004ae:	430c      	orrs	r4, r1
 80004b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b4:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b8:	fa1f f78c 	uxth.w	r7, ip
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3110 	mls	r1, r8, r0, r3
 80004c4:	0c23      	lsrs	r3, r4, #16
 80004c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ca:	fb00 f107 	mul.w	r1, r0, r7
 80004ce:	4299      	cmp	r1, r3
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x24c>
 80004d2:	eb1c 0303 	adds.w	r3, ip, r3
 80004d6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004da:	d22c      	bcs.n	8000536 <__udivmoddi4+0x29e>
 80004dc:	4299      	cmp	r1, r3
 80004de:	d92a      	bls.n	8000536 <__udivmoddi4+0x29e>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a5b      	subs	r3, r3, r1
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004ec:	fb08 3311 	mls	r3, r8, r1, r3
 80004f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f4:	fb01 f307 	mul.w	r3, r1, r7
 80004f8:	42a3      	cmp	r3, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x276>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f101 36ff 	add.w	r6, r1, #4294967295
 8000504:	d213      	bcs.n	800052e <__udivmoddi4+0x296>
 8000506:	42a3      	cmp	r3, r4
 8000508:	d911      	bls.n	800052e <__udivmoddi4+0x296>
 800050a:	3902      	subs	r1, #2
 800050c:	4464      	add	r4, ip
 800050e:	1ae4      	subs	r4, r4, r3
 8000510:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000514:	e739      	b.n	800038a <__udivmoddi4+0xf2>
 8000516:	4604      	mov	r4, r0
 8000518:	e6f0      	b.n	80002fc <__udivmoddi4+0x64>
 800051a:	4608      	mov	r0, r1
 800051c:	e706      	b.n	800032c <__udivmoddi4+0x94>
 800051e:	45c8      	cmp	r8, r9
 8000520:	d2ae      	bcs.n	8000480 <__udivmoddi4+0x1e8>
 8000522:	ebb9 0e02 	subs.w	lr, r9, r2
 8000526:	eb63 0c07 	sbc.w	ip, r3, r7
 800052a:	3801      	subs	r0, #1
 800052c:	e7a8      	b.n	8000480 <__udivmoddi4+0x1e8>
 800052e:	4631      	mov	r1, r6
 8000530:	e7ed      	b.n	800050e <__udivmoddi4+0x276>
 8000532:	4603      	mov	r3, r0
 8000534:	e799      	b.n	800046a <__udivmoddi4+0x1d2>
 8000536:	4630      	mov	r0, r6
 8000538:	e7d4      	b.n	80004e4 <__udivmoddi4+0x24c>
 800053a:	46d6      	mov	lr, sl
 800053c:	e77f      	b.n	800043e <__udivmoddi4+0x1a6>
 800053e:	4463      	add	r3, ip
 8000540:	3802      	subs	r0, #2
 8000542:	e74d      	b.n	80003e0 <__udivmoddi4+0x148>
 8000544:	4606      	mov	r6, r0
 8000546:	4623      	mov	r3, r4
 8000548:	4608      	mov	r0, r1
 800054a:	e70f      	b.n	800036c <__udivmoddi4+0xd4>
 800054c:	3e02      	subs	r6, #2
 800054e:	4463      	add	r3, ip
 8000550:	e730      	b.n	80003b4 <__udivmoddi4+0x11c>
 8000552:	bf00      	nop

08000554 <__aeabi_idiv0>:
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop

08000558 <AvarageFilter_Init>:
 */
#include "AvarageFilter.h"

AvarageFilterParam_T AvarageFilter_MPU6050_ACCEL_X, AvarageFilter_MPU6050_ACCEL_Y, AvarageFilter_MPU6050_ACCEL_Z,
AvarageFilter_MPU6050_GYRO_X, AvarageFilter_MPU6050_GYRO_Y, AvarageFilter_MPU6050_GYRO_Z;
void AvarageFilter_Init(AvarageFilterParam_T *handle, uint8_t FilterBufferSize){
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	460b      	mov	r3, r1
 8000562:	70fb      	strb	r3, [r7, #3]
	handle->FilterBufferSize = FilterBufferSize;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	78fa      	ldrb	r2, [r7, #3]
 8000568:	701a      	strb	r2, [r3, #0]
	handle->DataCounter = 0;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2200      	movs	r2, #0
 800056e:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
	handle->sum = 0;
 8000572:	6879      	ldr	r1, [r7, #4]
 8000574:	f04f 0200 	mov.w	r2, #0
 8000578:	f04f 0300 	mov.w	r3, #0
 800057c:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88

}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <AvarageFilter2>:
		++handle->DataCounter;
		return AvaragePeriodContinue;
	}
}

uint8_t AvarageFilter2(AvarageFilterParam_T *handle, int16_t data){
 800058c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000590:	b084      	sub	sp, #16
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
 8000596:	460b      	mov	r3, r1
 8000598:	807b      	strh	r3, [r7, #2]

	if(handle->DataCounter == handle->FilterBufferSize){
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d153      	bne.n	8000650 <AvarageFilter2+0xc4>
		for(int i = 0; i <= handle->DataCounter; i++ ){
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	e016      	b.n	80005dc <AvarageFilter2+0x50>
			handle->sum +=  handle->buffer[i];
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	68f9      	ldr	r1, [r7, #12]
 80005b8:	0049      	lsls	r1, r1, #1
 80005ba:	4401      	add	r1, r0
 80005bc:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80005c0:	b209      	sxth	r1, r1
 80005c2:	17c8      	asrs	r0, r1, #31
 80005c4:	460c      	mov	r4, r1
 80005c6:	4605      	mov	r5, r0
 80005c8:	eb12 0804 	adds.w	r8, r2, r4
 80005cc:	eb43 0905 	adc.w	r9, r3, r5
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	e9c3 8922 	strd	r8, r9, [r3, #136]	@ 0x88
		for(int i = 0; i <= handle->DataCounter; i++ ){
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	3301      	adds	r3, #1
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 80005e2:	461a      	mov	r2, r3
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	4293      	cmp	r3, r2
 80005e8:	dde1      	ble.n	80005ae <AvarageFilter2+0x22>
		}
		handle->Avarage = handle->sum / handle->FilterBufferSize;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	@ 0x88
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	2200      	movs	r2, #0
 80005f8:	469a      	mov	sl, r3
 80005fa:	4693      	mov	fp, r2
 80005fc:	4652      	mov	r2, sl
 80005fe:	465b      	mov	r3, fp
 8000600:	f7ff fde2 	bl	80001c8 <__aeabi_ldivmod>
 8000604:	4602      	mov	r2, r0
 8000606:	460b      	mov	r3, r1
 8000608:	b212      	sxth	r2, r2
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
		handle->sum = 0;
 8000610:	6879      	ldr	r1, [r7, #4]
 8000612:	f04f 0200 	mov.w	r2, #0
 8000616:	f04f 0300 	mov.w	r3, #0
 800061a:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
		for(int i = 0; i <=handle->DataCounter; i++ ){
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	e008      	b.n	8000636 <AvarageFilter2+0xaa>
			handle->buffer[i] = 0;
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	4413      	add	r3, r2
 800062c:	2200      	movs	r2, #0
 800062e:	805a      	strh	r2, [r3, #2]
		for(int i = 0; i <=handle->DataCounter; i++ ){
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	3301      	adds	r3, #1
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800063c:	461a      	mov	r2, r3
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	4293      	cmp	r3, r2
 8000642:	ddef      	ble.n	8000624 <AvarageFilter2+0x98>
		}
	handle->DataCounter = 0;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2200      	movs	r2, #0
 8000648:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
    return AvaragePeriodDone;
 800064c:	2300      	movs	r3, #0
 800064e:	e010      	b.n	8000672 <AvarageFilter2+0xe6>
	}else{
		handle->buffer[handle->DataCounter] = data;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	887a      	ldrh	r2, [r7, #2]
 800065e:	805a      	strh	r2, [r3, #2]
		++handle->DataCounter;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8000666:	3301      	adds	r3, #1
 8000668:	b2da      	uxtb	r2, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
		return AvaragePeriodContinue;
 8000670:	2301      	movs	r3, #1
	}

}
 8000672:	4618      	mov	r0, r3
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800067c <I2C_Init>:
 * GLOBAL FUNCTIONS
 ********************************************************/
/** Brief description which ends at this dot. Details follow
 *  here.
 */
void I2C_Init(void *handle, uint8_t I2CNo){
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	460b      	mov	r3, r1
 8000686:	70fb      	strb	r3, [r7, #3]
	I2C_HandleTypeDef_T *i2c;
	i2c = I2C_GetModule(I2CNo);
 8000688:	78fb      	ldrb	r3, [r7, #3]
 800068a:	4618      	mov	r0, r3
 800068c:	f000 f858 	bl	8000740 <I2C_GetModule>
 8000690:	60f8      	str	r0, [r7, #12]
    i2c->handle = handle;
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	601a      	str	r2, [r3, #0]
}
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <I2C_ReadWrite_DMA>:
}

/** Brief description which ends at this dot. Details follow
 *  here.
 */
I2C_ReturnTypeDef_T I2C_ReadWrite_DMA(uint8_t I2CNo, uint8_t DevAddress, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	603a      	str	r2, [r7, #0]
 80006a8:	461a      	mov	r2, r3
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
 80006ae:	460b      	mov	r3, r1
 80006b0:	71bb      	strb	r3, [r7, #6]
 80006b2:	4613      	mov	r3, r2
 80006b4:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef_T *i2c;
	HAL_StatusTypeDef res;
	i2c = I2C_GetModule(I2CNo);
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 f841 	bl	8000740 <I2C_GetModule>
 80006be:	60f8      	str	r0, [r7, #12]
	if(rxLenght == 0){
 80006c0:	7f3b      	ldrb	r3, [r7, #28]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d115      	bne.n	80006f2 <I2C_ReadWrite_DMA+0x52>
		res = HAL_I2C_Master_Transmit_DMA(i2c->handle , DevAddress, txBuff, txLenght);
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	6818      	ldr	r0, [r3, #0]
 80006ca:	79bb      	ldrb	r3, [r7, #6]
 80006cc:	b299      	uxth	r1, r3
 80006ce:	797b      	ldrb	r3, [r7, #5]
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	683a      	ldr	r2, [r7, #0]
 80006d4:	f001 fff6 	bl	80026c4 <HAL_I2C_Master_Transmit_DMA>
 80006d8:	4603      	mov	r3, r0
 80006da:	72fb      	strb	r3, [r7, #11]
		I2C_WaitFlag(I2CNo);
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 f850 	bl	8000784 <I2C_WaitFlag>
		return res == I2C_ERROR;
 80006e4:	7afb      	ldrb	r3, [r7, #11]
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	bf0c      	ite	eq
 80006ea:	2301      	moveq	r3, #1
 80006ec:	2300      	movne	r3, #0
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	e021      	b.n	8000736 <I2C_ReadWrite_DMA+0x96>
	}else{
		HAL_I2C_Master_Transmit_DMA(i2c->handle , DevAddress, txBuff, txLenght);
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	6818      	ldr	r0, [r3, #0]
 80006f6:	79bb      	ldrb	r3, [r7, #6]
 80006f8:	b299      	uxth	r1, r3
 80006fa:	797b      	ldrb	r3, [r7, #5]
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	683a      	ldr	r2, [r7, #0]
 8000700:	f001 ffe0 	bl	80026c4 <HAL_I2C_Master_Transmit_DMA>
		I2C_WaitFlag(I2CNo);
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	4618      	mov	r0, r3
 8000708:	f000 f83c 	bl	8000784 <I2C_WaitFlag>
		res = HAL_I2C_Master_Receive_DMA(i2c->handle, DevAddress, rxBuff, rxLenght);
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	6818      	ldr	r0, [r3, #0]
 8000710:	79bb      	ldrb	r3, [r7, #6]
 8000712:	b299      	uxth	r1, r3
 8000714:	7f3b      	ldrb	r3, [r7, #28]
 8000716:	b29b      	uxth	r3, r3
 8000718:	69ba      	ldr	r2, [r7, #24]
 800071a:	f002 f8ff 	bl	800291c <HAL_I2C_Master_Receive_DMA>
 800071e:	4603      	mov	r3, r0
 8000720:	72fb      	strb	r3, [r7, #11]
		I2C_WaitFlag(I2CNo);
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	4618      	mov	r0, r3
 8000726:	f000 f82d 	bl	8000784 <I2C_WaitFlag>
		return res == I2C_ERROR;
 800072a:	7afb      	ldrb	r3, [r7, #11]
 800072c:	2b01      	cmp	r3, #1
 800072e:	bf0c      	ite	eq
 8000730:	2301      	moveq	r3, #1
 8000732:	2300      	movne	r3, #0
 8000734:	b2db      	uxtb	r3, r3
	}
}
 8000736:	4618      	mov	r0, r3
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <I2C_GetModule>:
 * PRIVATE FUNCTIONS
 *********************************************************/
/** Brief description which ends at this dot. Details follow
 *  here.
 */
I2C_HandleTypeDef_T* I2C_GetModule(uint8_t I2CNo){
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
	switch(I2CNo){
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	2b03      	cmp	r3, #3
 800074e:	d00a      	beq.n	8000766 <I2C_GetModule+0x26>
 8000750:	2b03      	cmp	r3, #3
 8000752:	dc0a      	bgt.n	800076a <I2C_GetModule+0x2a>
 8000754:	2b01      	cmp	r3, #1
 8000756:	d002      	beq.n	800075e <I2C_GetModule+0x1e>
 8000758:	2b02      	cmp	r3, #2
 800075a:	d002      	beq.n	8000762 <I2C_GetModule+0x22>
 800075c:	e005      	b.n	800076a <I2C_GetModule+0x2a>
		case I2CNO_1 : return &I2C_1; break;
 800075e:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <I2C_GetModule+0x38>)
 8000760:	e004      	b.n	800076c <I2C_GetModule+0x2c>
		case I2CNO_2 : return &I2C_2; break;
 8000762:	4b06      	ldr	r3, [pc, #24]	@ (800077c <I2C_GetModule+0x3c>)
 8000764:	e002      	b.n	800076c <I2C_GetModule+0x2c>
		case I2CNO_3 : return &I2C_3; break;
 8000766:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <I2C_GetModule+0x40>)
 8000768:	e000      	b.n	800076c <I2C_GetModule+0x2c>
		default : return NULL; break;
 800076a:	2300      	movs	r3, #0
	}
}
 800076c:	4618      	mov	r0, r3
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	200003c0 	.word	0x200003c0
 800077c:	200003c8 	.word	0x200003c8
 8000780:	200003d0 	.word	0x200003d0

08000784 <I2C_WaitFlag>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
void I2C_WaitFlag(uint8_t I2CNo){
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
	I2C_HandleTypeDef_T *i2c;
	uint8_t i=0;
 800078e:	2300      	movs	r3, #0
 8000790:	73fb      	strb	r3, [r7, #15]
	i2c = I2C_GetModule(I2CNo);
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ffd3 	bl	8000740 <I2C_GetModule>
 800079a:	60b8      	str	r0, [r7, #8]
	while((!i2c->flag) & (i<5)){
 800079c:	e005      	b.n	80007aa <I2C_WaitFlag+0x26>
		HAL_Delay(1);
 800079e:	2001      	movs	r0, #1
 80007a0:	f000 ff86 	bl	80016b0 <HAL_Delay>
		i++;
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	3301      	adds	r3, #1
 80007a8:	73fb      	strb	r3, [r7, #15]
	while((!i2c->flag) & (i<5)){
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	791b      	ldrb	r3, [r3, #4]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	bf0c      	ite	eq
 80007b4:	2301      	moveq	r3, #1
 80007b6:	2300      	movne	r3, #0
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
 80007bc:	2b04      	cmp	r3, #4
 80007be:	bf94      	ite	ls
 80007c0:	2301      	movls	r3, #1
 80007c2:	2300      	movhi	r3, #0
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	4013      	ands	r3, r2
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d1e7      	bne.n	800079e <I2C_WaitFlag+0x1a>
	}
	i2c->flag = 0;
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	2200      	movs	r2, #0
 80007d2:	711a      	strb	r2, [r3, #4]
}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <HAL_I2C_MasterTxCpltCallback>:
 *********************************************************/
/** Brief description which ends at this dot. Details follow
 *  here.
 */
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  if(I2C_1.handle == hi2c)
 80007e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <HAL_I2C_MasterTxCpltCallback+0x48>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d103      	bne.n	80007f6 <HAL_I2C_MasterTxCpltCallback+0x1a>
	  I2C_1.flag = 1;
 80007ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000824 <HAL_I2C_MasterTxCpltCallback+0x48>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	711a      	strb	r2, [r3, #4]
  else if(I2C_3.handle == hi2c)
  	  I2C_3.flag = 1;
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80007f4:	e010      	b.n	8000818 <HAL_I2C_MasterTxCpltCallback+0x3c>
  else if(I2C_2.handle == hi2c)
 80007f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <HAL_I2C_MasterTxCpltCallback+0x4c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d103      	bne.n	8000808 <HAL_I2C_MasterTxCpltCallback+0x2c>
  	  I2C_2.flag = 1;
 8000800:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <HAL_I2C_MasterTxCpltCallback+0x4c>)
 8000802:	2201      	movs	r2, #1
 8000804:	711a      	strb	r2, [r3, #4]
}
 8000806:	e007      	b.n	8000818 <HAL_I2C_MasterTxCpltCallback+0x3c>
  else if(I2C_3.handle == hi2c)
 8000808:	4b08      	ldr	r3, [pc, #32]	@ (800082c <HAL_I2C_MasterTxCpltCallback+0x50>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	429a      	cmp	r2, r3
 8000810:	d102      	bne.n	8000818 <HAL_I2C_MasterTxCpltCallback+0x3c>
  	  I2C_3.flag = 1;
 8000812:	4b06      	ldr	r3, [pc, #24]	@ (800082c <HAL_I2C_MasterTxCpltCallback+0x50>)
 8000814:	2201      	movs	r2, #1
 8000816:	711a      	strb	r2, [r3, #4]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	200003c0 	.word	0x200003c0
 8000828:	200003c8 	.word	0x200003c8
 800082c:	200003d0 	.word	0x200003d0

08000830 <HAL_I2C_MasterRxCpltCallback>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	if(I2C_1.handle == hi2c)
 8000838:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <HAL_I2C_MasterRxCpltCallback+0x48>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	429a      	cmp	r2, r3
 8000840:	d103      	bne.n	800084a <HAL_I2C_MasterRxCpltCallback+0x1a>
		I2C_1.flag = 1;
 8000842:	4b0d      	ldr	r3, [pc, #52]	@ (8000878 <HAL_I2C_MasterRxCpltCallback+0x48>)
 8000844:	2201      	movs	r2, #1
 8000846:	711a      	strb	r2, [r3, #4]
	  	I2C_3.flag = 1;

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8000848:	e010      	b.n	800086c <HAL_I2C_MasterRxCpltCallback+0x3c>
	else if(I2C_2.handle == hi2c)
 800084a:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <HAL_I2C_MasterRxCpltCallback+0x4c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	429a      	cmp	r2, r3
 8000852:	d103      	bne.n	800085c <HAL_I2C_MasterRxCpltCallback+0x2c>
	  	I2C_2.flag = 1;
 8000854:	4b09      	ldr	r3, [pc, #36]	@ (800087c <HAL_I2C_MasterRxCpltCallback+0x4c>)
 8000856:	2201      	movs	r2, #1
 8000858:	711a      	strb	r2, [r3, #4]
}
 800085a:	e007      	b.n	800086c <HAL_I2C_MasterRxCpltCallback+0x3c>
	else if(I2C_3.handle == hi2c)
 800085c:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <HAL_I2C_MasterRxCpltCallback+0x50>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	429a      	cmp	r2, r3
 8000864:	d102      	bne.n	800086c <HAL_I2C_MasterRxCpltCallback+0x3c>
	  	I2C_3.flag = 1;
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <HAL_I2C_MasterRxCpltCallback+0x50>)
 8000868:	2201      	movs	r2, #1
 800086a:	711a      	strb	r2, [r3, #4]
}
 800086c:	bf00      	nop
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	200003c0 	.word	0x200003c0
 800087c:	200003c8 	.word	0x200003c8
 8000880:	200003d0 	.word	0x200003d0

08000884 <MPU6050_DeviceReset>:
MPU6050_Sensor_T MPU6050_1;

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_DeviceReset(MPU6050_Sensor_T *handle){
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	return MPU6050_Write(handle, MPU6050_REGISTER_PWR_MGMT_1, MPU6050_DATA_DEVICE_RESET);
 800088c:	2280      	movs	r2, #128	@ 0x80
 800088e:	216b      	movs	r1, #107	@ 0x6b
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f000 f9b4 	bl	8000bfe <MPU6050_Write>
 8000896:	4603      	mov	r3, r0
}
 8000898:	4618      	mov	r0, r3
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <MPU6050_AllSignalPathReset>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_AllSignalPathReset(MPU6050_Sensor_T *handle){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	return MPU6050_Write(handle, MPU6050_REGISTER_SIGNAL_PATH_RESET, MPU6050_DATA_ALL_SIGNALPATH_RESET);
 80008a8:	2207      	movs	r2, #7
 80008aa:	2168      	movs	r1, #104	@ 0x68
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f000 f9a6 	bl	8000bfe <MPU6050_Write>
 80008b2:	4603      	mov	r3, r0
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <MPU6050_DeviceModeNormal>:
}

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_DeviceModeNormal(MPU6050_Sensor_T *handle){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	return MPU6050_Write(handle, MPU6050_REGISTER_PWR_MGMT_1, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	216b      	movs	r1, #107	@ 0x6b
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f000 f998 	bl	8000bfe <MPU6050_Write>
 80008ce:	4603      	mov	r3, r0
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <MPU6050_Init>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_Init(MPU6050_Sensor_T *handle, uint8_t I2C_No, uint8_t DevAddress){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	460b      	mov	r3, r1
 80008e2:	70fb      	strb	r3, [r7, #3]
 80008e4:	4613      	mov	r3, r2
 80008e6:	70bb      	strb	r3, [r7, #2]
	handle->devParam.I2C_No = I2C_No;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	78fa      	ldrb	r2, [r7, #3]
 80008ec:	705a      	strb	r2, [r3, #1]
	handle->devParam.DevAdress = DevAddress;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	78ba      	ldrb	r2, [r7, #2]
 80008f2:	709a      	strb	r2, [r3, #2]
	uint8_t rx[1];
	while(MPU6050_DeviceReset(handle))
 80008f4:	e002      	b.n	80008fc <MPU6050_Init+0x24>
		HAL_Delay(1);
 80008f6:	2001      	movs	r0, #1
 80008f8:	f000 feda 	bl	80016b0 <HAL_Delay>
	while(MPU6050_DeviceReset(handle))
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff ffc1 	bl	8000884 <MPU6050_DeviceReset>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d1f6      	bne.n	80008f6 <MPU6050_Init+0x1e>
	HAL_Delay(10);
 8000908:	200a      	movs	r0, #10
 800090a:	f000 fed1 	bl	80016b0 <HAL_Delay>
	MPU6050_DeviceModeNormal(handle);
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff ffd4 	bl	80008bc <MPU6050_DeviceModeNormal>
	MPU6050_AllSignalPathReset(handle);
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff ffc3 	bl	80008a0 <MPU6050_AllSignalPathReset>
    if(!MP6050_Get_WhoIAm_Data(handle)){
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f000 f82c 	bl	8000978 <MP6050_Get_WhoIAm_Data>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d123      	bne.n	800096e <MPU6050_Init+0x96>
    	MPU6050_Set_ConfigRegister(handle, MPU6050_DATA_SAMPLERATE_184, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2101      	movs	r1, #1
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f000 f84a 	bl	80009c4 <MPU6050_Set_ConfigRegister>
    	MPU6050_Interrupt_Pin_Config(handle, MPU6050_DATA_INT_LEVEL_ACTIVE_HIGH | MPU6050_DATA_INT_PUSHPULL | MPU6050_DATA_INT_LATCH_DISABLE | MPU6050_DATA_INT_OTO_CLEAR);
 8000930:	2190      	movs	r1, #144	@ 0x90
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f000 f941 	bl	8000bba <MPU6050_Interrupt_Pin_Config>
    	MPU6050_Interrupt_Config(handle, MPU6050_DATA_INT_DATA_RDY_ENABLE);
 8000938:	2101      	movs	r1, #1
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f000 f94e 	bl	8000bdc <MPU6050_Interrupt_Config>
    	MPU6050_Set_SampleRateDivider(handle, 0);
 8000940:	2100      	movs	r1, #0
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f000 f82d 	bl	80009a2 <MPU6050_Set_SampleRateDivider>
    	MPU6050_Select_FIFO_Members(handle, 0);
 8000948:	2100      	movs	r1, #0
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f000 f888 	bl	8000a60 <MPU6050_Select_FIFO_Members>
		MPU6050_Set_GYROConfigRegister(handle, MPU6050_DATA_GYRO_SCALERANGE_250, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	2100      	movs	r1, #0
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f000 f84f 	bl	80009f8 <MPU6050_Set_GYROConfigRegister>
		MPU6050_Set_ACCELConfigRegister(handle, MPU6050_DATA_ACCEL_SCALERANGE_2, 0); //MPU6050_DATA_ACCEL_ST_XAXIS_ENABLED | MPU6050_DATA_ACCEL_ST_YAXIS_ENABLED | MPU6050_DATA_ACCEL_ST_ZAXIS_ENABLED);
 800095a:	2200      	movs	r2, #0
 800095c:	2100      	movs	r1, #0
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f000 f864 	bl	8000a2c <MPU6050_Set_ACCELConfigRegister>
		HAL_Delay(10);
 8000964:	200a      	movs	r0, #10
 8000966:	f000 fea3 	bl	80016b0 <HAL_Delay>
//		MPU6050_DeviceModeCycle(handle);
//		MPU6050_AccelLowPowerMode(handle, MPU6050_DATA_LP_WU_FREQUENCY_20);
		return MPU6050_OK;
 800096a:	2300      	movs	r3, #0
 800096c:	e000      	b.n	8000970 <MPU6050_Init+0x98>
    }
    return MPU6050_ERROR;
 800096e:	2301      	movs	r3, #1
}
 8000970:	4618      	mov	r0, r3
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <MP6050_Get_WhoIAm_Data>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MP6050_Get_WhoIAm_Data(MPU6050_Sensor_T *handle){
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	uint8_t RxBuff[1];
	MPU6050_Read(handle, MPU6050_REGISTER_WHOIAM, RxBuff);
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	461a      	mov	r2, r3
 8000986:	2175      	movs	r1, #117	@ 0x75
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f000 f95d 	bl	8000c48 <MPU6050_Read>
	if(RxBuff[0] == MPU6050_DATA_WHOIAM)
 800098e:	7b3b      	ldrb	r3, [r7, #12]
 8000990:	2b68      	cmp	r3, #104	@ 0x68
 8000992:	d101      	bne.n	8000998 <MP6050_Get_WhoIAm_Data+0x20>
		return MPU6050_OK;
 8000994:	2300      	movs	r3, #0
 8000996:	e000      	b.n	800099a <MP6050_Get_WhoIAm_Data+0x22>
	return MPU6050_ERROR;
 8000998:	2301      	movs	r3, #1
}
 800099a:	4618      	mov	r0, r3
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <MPU6050_Set_SampleRateDivider>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_Set_SampleRateDivider(MPU6050_Sensor_T *handle, uint8_t divider){
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
 80009aa:	460b      	mov	r3, r1
 80009ac:	70fb      	strb	r3, [r7, #3]
	return MPU6050_Write(handle, MPU6050_REGISTER_SAMPLERATE_DIV, divider);
 80009ae:	78fb      	ldrb	r3, [r7, #3]
 80009b0:	461a      	mov	r2, r3
 80009b2:	2119      	movs	r1, #25
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f000 f922 	bl	8000bfe <MPU6050_Write>
 80009ba:	4603      	mov	r3, r0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <MPU6050_Set_ConfigRegister>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_Set_ConfigRegister(MPU6050_Sensor_T *handle, uint8_t sampleRate, uint8_t ExtSyncSet){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	460b      	mov	r3, r1
 80009ce:	70fb      	strb	r3, [r7, #3]
 80009d0:	4613      	mov	r3, r2
 80009d2:	70bb      	strb	r3, [r7, #2]
	handle->RegGroup_Config.ConfigRegister = sampleRate | ExtSyncSet;
 80009d4:	78fa      	ldrb	r2, [r7, #3]
 80009d6:	78bb      	ldrb	r3, [r7, #2]
 80009d8:	4313      	orrs	r3, r2
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	70da      	strb	r2, [r3, #3]
	return MPU6050_Write(handle, MPU6050_REGISTER_CONFIG, handle->RegGroup_Config.ConfigRegister);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	78db      	ldrb	r3, [r3, #3]
 80009e4:	461a      	mov	r2, r3
 80009e6:	211a      	movs	r1, #26
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f000 f908 	bl	8000bfe <MPU6050_Write>
 80009ee:	4603      	mov	r3, r0
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <MPU6050_Set_GYROConfigRegister>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_Set_GYROConfigRegister(MPU6050_Sensor_T *handle, uint8_t scaleRange, uint8_t STaxisEnabled){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	460b      	mov	r3, r1
 8000a02:	70fb      	strb	r3, [r7, #3]
 8000a04:	4613      	mov	r3, r2
 8000a06:	70bb      	strb	r3, [r7, #2]
	handle->RegGroup_Config.GYRO_ConfigRegister = scaleRange | STaxisEnabled;
 8000a08:	78fa      	ldrb	r2, [r7, #3]
 8000a0a:	78bb      	ldrb	r3, [r7, #2]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	711a      	strb	r2, [r3, #4]
	return MPU6050_Write(handle, MPU6050_REGISTER_GYRO_CONFIG, handle->RegGroup_Config.GYRO_ConfigRegister);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	791b      	ldrb	r3, [r3, #4]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	211b      	movs	r1, #27
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f000 f8ee 	bl	8000bfe <MPU6050_Write>
 8000a22:	4603      	mov	r3, r0
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <MPU6050_Set_ACCELConfigRegister>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_Set_ACCELConfigRegister(MPU6050_Sensor_T *handle, uint8_t scaleRange, uint8_t STaxisEnabled){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	460b      	mov	r3, r1
 8000a36:	70fb      	strb	r3, [r7, #3]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	70bb      	strb	r3, [r7, #2]
	handle->RegGroup_Config.ACCEL_ConfigRegister = scaleRange | STaxisEnabled;
 8000a3c:	78fa      	ldrb	r2, [r7, #3]
 8000a3e:	78bb      	ldrb	r3, [r7, #2]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	715a      	strb	r2, [r3, #5]
	return MPU6050_Write(handle, MPU6050_REGISTER_ACCEL_CONFIG , handle->RegGroup_Config.ACCEL_ConfigRegister);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	795b      	ldrb	r3, [r3, #5]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	211c      	movs	r1, #28
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f000 f8d4 	bl	8000bfe <MPU6050_Write>
 8000a56:	4603      	mov	r3, r0
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <MPU6050_Select_FIFO_Members>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_Select_FIFO_Members(MPU6050_Sensor_T *handle, uint8_t members){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	460b      	mov	r3, r1
 8000a6a:	70fb      	strb	r3, [r7, #3]
	return MPU6050_Write(handle, MPU6050_REGISTER_FIFO_ENABLE, members);
 8000a6c:	78fb      	ldrb	r3, [r7, #3]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	2123      	movs	r1, #35	@ 0x23
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f000 f8c3 	bl	8000bfe <MPU6050_Write>
 8000a78:	4603      	mov	r3, r0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <MPU6050_Read_ACCEL_Data>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_Read_ACCEL_Data(MPU6050_Sensor_T *handle){
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b084      	sub	sp, #16
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
	uint8_t DataH[1], DataL[1] ;
	MPU6050_Read(handle, MPU6050_REGISTER_ACCEL_OUT_X_H, DataH);
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	461a      	mov	r2, r3
 8000a90:	213b      	movs	r1, #59	@ 0x3b
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f000 f8d8 	bl	8000c48 <MPU6050_Read>
	MPU6050_Read(handle, MPU6050_REGISTER_ACCEL_OUT_X_L, DataL);
 8000a98:	f107 0308 	add.w	r3, r7, #8
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	213c      	movs	r1, #60	@ 0x3c
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f000 f8d1 	bl	8000c48 <MPU6050_Read>
	handle->RegGroup_Data.ACCEL_Axis_X_Data = (int16_t)((DataH[0]<<8) | DataL[0]);
 8000aa6:	7b3b      	ldrb	r3, [r7, #12]
 8000aa8:	021b      	lsls	r3, r3, #8
 8000aaa:	b21a      	sxth	r2, r3
 8000aac:	7a3b      	ldrb	r3, [r7, #8]
 8000aae:	b21b      	sxth	r3, r3
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	b21a      	sxth	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	80da      	strh	r2, [r3, #6]

	MPU6050_Read(handle, MPU6050_REGISTER_ACCEL_OUT_Y_H, DataH);
 8000ab8:	f107 030c 	add.w	r3, r7, #12
 8000abc:	461a      	mov	r2, r3
 8000abe:	213d      	movs	r1, #61	@ 0x3d
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f000 f8c1 	bl	8000c48 <MPU6050_Read>
	MPU6050_Read(handle, MPU6050_REGISTER_ACCEL_OUT_Y_L, DataL);
 8000ac6:	f107 0308 	add.w	r3, r7, #8
 8000aca:	461a      	mov	r2, r3
 8000acc:	213e      	movs	r1, #62	@ 0x3e
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f000 f8ba 	bl	8000c48 <MPU6050_Read>
	handle->RegGroup_Data.ACCEL_Axis_Y_Data = (int16_t)(DataH[0]<<8) | DataL[0];
 8000ad4:	7b3b      	ldrb	r3, [r7, #12]
 8000ad6:	021b      	lsls	r3, r3, #8
 8000ad8:	b21a      	sxth	r2, r3
 8000ada:	7a3b      	ldrb	r3, [r7, #8]
 8000adc:	b21b      	sxth	r3, r3
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	b21a      	sxth	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	811a      	strh	r2, [r3, #8]

	MPU6050_Read(handle, MPU6050_REGISTER_ACCEL_OUT_Z_H, DataH);
 8000ae6:	f107 030c 	add.w	r3, r7, #12
 8000aea:	461a      	mov	r2, r3
 8000aec:	213f      	movs	r1, #63	@ 0x3f
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 f8aa 	bl	8000c48 <MPU6050_Read>
	MPU6050_Read(handle, MPU6050_REGISTER_ACCEL_OUT_Z_L, DataL);
 8000af4:	f107 0308 	add.w	r3, r7, #8
 8000af8:	461a      	mov	r2, r3
 8000afa:	2140      	movs	r1, #64	@ 0x40
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f000 f8a3 	bl	8000c48 <MPU6050_Read>
	handle->RegGroup_Data.ACCEL_Axis_Z_Data = (int16_t)((DataH[0]<<8) | DataL[0]);
 8000b02:	7b3b      	ldrb	r3, [r7, #12]
 8000b04:	021b      	lsls	r3, r3, #8
 8000b06:	b21a      	sxth	r2, r3
 8000b08:	7a3b      	ldrb	r3, [r7, #8]
 8000b0a:	b21b      	sxth	r3, r3
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	b21a      	sxth	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	815a      	strh	r2, [r3, #10]
	return MPU6050_OK;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <MPU6050_Read_GYRO_Data>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_Read_GYRO_Data(MPU6050_Sensor_T *handle){
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b084      	sub	sp, #16
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
	uint8_t DataH[1], DataL[1] ;
	MPU6050_Read(handle, MPU6050_REGISTER_GYRO_OUT_X_H, DataH);
 8000b26:	f107 030c 	add.w	r3, r7, #12
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	2143      	movs	r1, #67	@ 0x43
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f000 f88a 	bl	8000c48 <MPU6050_Read>
	MPU6050_Read(handle, MPU6050_REGISTER_GYRO_OUT_X_L, DataL);
 8000b34:	f107 0308 	add.w	r3, r7, #8
 8000b38:	461a      	mov	r2, r3
 8000b3a:	2144      	movs	r1, #68	@ 0x44
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f000 f883 	bl	8000c48 <MPU6050_Read>
	handle->RegGroup_Data.GYRO_Axis_X_Data = (int16_t)((DataH[0]<<8) | DataL[0]);
 8000b42:	7b3b      	ldrb	r3, [r7, #12]
 8000b44:	021b      	lsls	r3, r3, #8
 8000b46:	b21a      	sxth	r2, r3
 8000b48:	7a3b      	ldrb	r3, [r7, #8]
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	b21a      	sxth	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	819a      	strh	r2, [r3, #12]

	MPU6050_Read(handle, MPU6050_REGISTER_GYRO_OUT_Y_H, DataH);
 8000b54:	f107 030c 	add.w	r3, r7, #12
 8000b58:	461a      	mov	r2, r3
 8000b5a:	2145      	movs	r1, #69	@ 0x45
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f000 f873 	bl	8000c48 <MPU6050_Read>
	MPU6050_Read(handle, MPU6050_REGISTER_GYRO_OUT_Y_L, DataL);
 8000b62:	f107 0308 	add.w	r3, r7, #8
 8000b66:	461a      	mov	r2, r3
 8000b68:	2146      	movs	r1, #70	@ 0x46
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f000 f86c 	bl	8000c48 <MPU6050_Read>
	handle->RegGroup_Data.GYRO_Axis_Y_Data = (int16_t)(DataH[0]<<8) | DataL[0];
 8000b70:	7b3b      	ldrb	r3, [r7, #12]
 8000b72:	021b      	lsls	r3, r3, #8
 8000b74:	b21a      	sxth	r2, r3
 8000b76:	7a3b      	ldrb	r3, [r7, #8]
 8000b78:	b21b      	sxth	r3, r3
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	b21a      	sxth	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	81da      	strh	r2, [r3, #14]

	MPU6050_Read(handle, MPU6050_REGISTER_GYRO_OUT_Z_H, DataH);
 8000b82:	f107 030c 	add.w	r3, r7, #12
 8000b86:	461a      	mov	r2, r3
 8000b88:	2147      	movs	r1, #71	@ 0x47
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f000 f85c 	bl	8000c48 <MPU6050_Read>
	MPU6050_Read(handle, MPU6050_REGISTER_GYRO_OUT_Z_L, DataL);
 8000b90:	f107 0308 	add.w	r3, r7, #8
 8000b94:	461a      	mov	r2, r3
 8000b96:	2148      	movs	r1, #72	@ 0x48
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f000 f855 	bl	8000c48 <MPU6050_Read>
	handle->RegGroup_Data.GYRO_Axis_Z_Data = (int16_t)((DataH[0]<<8) | DataL[0]);
 8000b9e:	7b3b      	ldrb	r3, [r7, #12]
 8000ba0:	021b      	lsls	r3, r3, #8
 8000ba2:	b21a      	sxth	r2, r3
 8000ba4:	7a3b      	ldrb	r3, [r7, #8]
 8000ba6:	b21b      	sxth	r3, r3
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	b21a      	sxth	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	821a      	strh	r2, [r3, #16]
	return MPU6050_OK;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <MPU6050_Interrupt_Pin_Config>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_Interrupt_Pin_Config(MPU6050_Sensor_T *handle, uint8_t data){
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	70fb      	strb	r3, [r7, #3]
	return MPU6050_Write(handle, MPU6050_REGISTER_INTERRUPT_PIN_CONFIG , data);
 8000bc6:	78fb      	ldrb	r3, [r7, #3]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	2137      	movs	r1, #55	@ 0x37
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f000 f816 	bl	8000bfe <MPU6050_Write>
 8000bd2:	4603      	mov	r3, r0
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <MPU6050_Interrupt_Config>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_Interrupt_Config(MPU6050_Sensor_T *handle, uint8_t data){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	460b      	mov	r3, r1
 8000be6:	70fb      	strb	r3, [r7, #3]
	return MPU6050_Write(handle, MPU6050_REGISTER_INTERRUPT_ENABLE , data);
 8000be8:	78fb      	ldrb	r3, [r7, #3]
 8000bea:	461a      	mov	r2, r3
 8000bec:	2138      	movs	r1, #56	@ 0x38
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f000 f805 	bl	8000bfe <MPU6050_Write>
 8000bf4:	4603      	mov	r3, r0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <MPU6050_Write>:
}

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_Write(MPU6050_Sensor_T *handle, uint8_t Register, uint8_t Data){
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b086      	sub	sp, #24
 8000c02:	af02      	add	r7, sp, #8
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	460b      	mov	r3, r1
 8000c08:	70fb      	strb	r3, [r7, #3]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	70bb      	strb	r3, [r7, #2]
	MPU6050_ReturnTypeDef_T res;
	uint8_t TxBuff[2];
	TxBuff[0] = Register;
 8000c0e:	78fb      	ldrb	r3, [r7, #3]
 8000c10:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = Data;
 8000c12:	78bb      	ldrb	r3, [r7, #2]
 8000c14:	737b      	strb	r3, [r7, #13]
	res = MPU6050_SendReceive(handle->devParam.I2C_No, handle->devParam.DevAdress, TxBuff, 2, 0, 0);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	7858      	ldrb	r0, [r3, #1]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	7899      	ldrb	r1, [r3, #2]
 8000c1e:	f107 020c 	add.w	r2, r7, #12
 8000c22:	2300      	movs	r3, #0
 8000c24:	9301      	str	r3, [sp, #4]
 8000c26:	2300      	movs	r3, #0
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	f000 f82e 	bl	8000c8c <MPU6050_SendReceive>
 8000c30:	4603      	mov	r3, r0
 8000c32:	73fb      	strb	r3, [r7, #15]
	if(res == MPU6050_OK)
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d101      	bne.n	8000c3e <MPU6050_Write+0x40>
		return MPU6050_OK;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	e000      	b.n	8000c40 <MPU6050_Write+0x42>
	else
		return MPU6050_ERROR;
 8000c3e:	2301      	movs	r3, #1
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <MPU6050_Read>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_Read(MPU6050_Sensor_T *handle, uint8_t Register, uint8_t *RxBuff){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af02      	add	r7, sp, #8
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	460b      	mov	r3, r1
 8000c52:	607a      	str	r2, [r7, #4]
 8000c54:	72fb      	strb	r3, [r7, #11]
	MPU6050_ReturnTypeDef_T res;
	uint8_t TxBuff[1];
	TxBuff[0] = Register;
 8000c56:	7afb      	ldrb	r3, [r7, #11]
 8000c58:	753b      	strb	r3, [r7, #20]
	res = MPU6050_SendReceive(handle->devParam.I2C_No, handle->devParam.DevAdress, TxBuff, 1, RxBuff, 1);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	7858      	ldrb	r0, [r3, #1]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	7899      	ldrb	r1, [r3, #2]
 8000c62:	f107 0214 	add.w	r2, r7, #20
 8000c66:	2301      	movs	r3, #1
 8000c68:	9301      	str	r3, [sp, #4]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2301      	movs	r3, #1
 8000c70:	f000 f80c 	bl	8000c8c <MPU6050_SendReceive>
 8000c74:	4603      	mov	r3, r0
 8000c76:	75fb      	strb	r3, [r7, #23]
	if(res == MPU6050_OK)
 8000c78:	7dfb      	ldrb	r3, [r7, #23]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d101      	bne.n	8000c82 <MPU6050_Read+0x3a>
		return MPU6050_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e000      	b.n	8000c84 <MPU6050_Read+0x3c>
	else
		return MPU6050_ERROR;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <MPU6050_SendReceive>:
 *      Author: esenk
 */

#include "I2C.h"

uint8_t MPU6050_SendReceive(uint8_t I2CNo, uint8_t DevAddress, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af02      	add	r7, sp, #8
 8000c92:	603a      	str	r2, [r7, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	71bb      	strb	r3, [r7, #6]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	717b      	strb	r3, [r7, #5]
	HAL_Delay(1);
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f000 fd04 	bl	80016b0 <HAL_Delay>
	return I2C_ReadWrite_DMA(I2CNo, DevAddress, txBuff, txLenght, rxBuff, rxLenght);
 8000ca8:	797a      	ldrb	r2, [r7, #5]
 8000caa:	79b9      	ldrb	r1, [r7, #6]
 8000cac:	79f8      	ldrb	r0, [r7, #7]
 8000cae:	7d3b      	ldrb	r3, [r7, #20]
 8000cb0:	9301      	str	r3, [sp, #4]
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	683a      	ldr	r2, [r7, #0]
 8000cba:	f7ff fcf1 	bl	80006a0 <I2C_ReadWrite_DMA>
 8000cbe:	4603      	mov	r3, r0
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <MPU6050_MATH_Calculate_mG_Value>:
#include "MPU6050.h"
#include "MPU6050_Math.h"
/** Brief description which ends at this dot. Details follow
 *  here.
 */
void MPU6050_MATH_Calculate_mG_Value(MPU6050_Sensor_T *handle){
 8000cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ccc:	b08c      	sub	sp, #48	@ 0x30
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	61f8      	str	r0, [r7, #28]
	int64_t tempValue;
	uint16_t MPU_Accel_LSB_Value = MPU6050_MATH_Get_LSB_Value(handle);
 8000cd2:	69f8      	ldr	r0, [r7, #28]
 8000cd4:	f000 f85e 	bl	8000d94 <MPU6050_MATH_Get_LSB_Value>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	tempValue = (int64_t)(MPU6050_1.FilteredValues.ACCEL_Axis_X_Filtered*1000);
 8000cdc:	4b2c      	ldr	r3, [pc, #176]	@ (8000d90 <MPU6050_MATH_Calculate_mG_Value+0xc8>)
 8000cde:	8a5b      	ldrh	r3, [r3, #18]
 8000ce0:	b21b      	sxth	r3, r3
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ce8:	fb02 f303 	mul.w	r3, r2, r3
 8000cec:	17da      	asrs	r2, r3, #31
 8000cee:	461c      	mov	r4, r3
 8000cf0:	4615      	mov	r5, r2
 8000cf2:	e9c7 4508 	strd	r4, r5, [r7, #32]
	handle->CalculatedValues.ACCEL_Axis_X_Mg = tempValue / MPU_Accel_LSB_Value;
 8000cf6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	617a      	str	r2, [r7, #20]
 8000cfe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000d02:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000d06:	f7ff fa5f 	bl	80001c8 <__aeabi_ldivmod>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	b212      	sxth	r2, r2
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	83da      	strh	r2, [r3, #30]

	tempValue = MPU6050_1.FilteredValues.ACCEL_Axis_Y_Filtered*1000;
 8000d14:	4b1e      	ldr	r3, [pc, #120]	@ (8000d90 <MPU6050_MATH_Calculate_mG_Value+0xc8>)
 8000d16:	8a9b      	ldrh	r3, [r3, #20]
 8000d18:	b21b      	sxth	r3, r3
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d20:	fb02 f303 	mul.w	r3, r2, r3
 8000d24:	17da      	asrs	r2, r3, #31
 8000d26:	469a      	mov	sl, r3
 8000d28:	4693      	mov	fp, r2
 8000d2a:	e9c7 ab08 	strd	sl, fp, [r7, #32]
	handle->CalculatedValues.ACCEL_Axis_Y_Mg = tempValue / MPU_Accel_LSB_Value;
 8000d2e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000d30:	2200      	movs	r2, #0
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	60fa      	str	r2, [r7, #12]
 8000d36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d3a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000d3e:	f7ff fa43 	bl	80001c8 <__aeabi_ldivmod>
 8000d42:	4602      	mov	r2, r0
 8000d44:	460b      	mov	r3, r1
 8000d46:	b212      	sxth	r2, r2
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	841a      	strh	r2, [r3, #32]

	tempValue = MPU6050_1.FilteredValues.ACCEL_Axis_Z_Filtered*1000;
 8000d4c:	4b10      	ldr	r3, [pc, #64]	@ (8000d90 <MPU6050_MATH_Calculate_mG_Value+0xc8>)
 8000d4e:	8adb      	ldrh	r3, [r3, #22]
 8000d50:	b21b      	sxth	r3, r3
 8000d52:	461a      	mov	r2, r3
 8000d54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d58:	fb02 f303 	mul.w	r3, r2, r3
 8000d5c:	17da      	asrs	r2, r3, #31
 8000d5e:	4698      	mov	r8, r3
 8000d60:	4691      	mov	r9, r2
 8000d62:	e9c7 8908 	strd	r8, r9, [r7, #32]
	handle->CalculatedValues.ACCEL_Axis_Z_Mg = tempValue / MPU_Accel_LSB_Value;
 8000d66:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000d68:	2200      	movs	r2, #0
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d72:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000d76:	f7ff fa27 	bl	80001c8 <__aeabi_ldivmod>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	b212      	sxth	r2, r2
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	845a      	strh	r2, [r3, #34]	@ 0x22
}
 8000d84:	bf00      	nop
 8000d86:	3730      	adds	r7, #48	@ 0x30
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000d8e:	bf00      	nop
 8000d90:	200003d8 	.word	0x200003d8

08000d94 <MPU6050_MATH_Get_LSB_Value>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
uint16_t MPU6050_MATH_Get_LSB_Value(MPU6050_Sensor_T *handle){
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
	switch(handle->RegGroup_Config.ACCEL_ConfigRegister>>3){
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	795b      	ldrb	r3, [r3, #5]
 8000da0:	08db      	lsrs	r3, r3, #3
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	2b18      	cmp	r3, #24
 8000da6:	d841      	bhi.n	8000e2c <MPU6050_MATH_Get_LSB_Value+0x98>
 8000da8:	a201      	add	r2, pc, #4	@ (adr r2, 8000db0 <MPU6050_MATH_Get_LSB_Value+0x1c>)
 8000daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dae:	bf00      	nop
 8000db0:	08000e15 	.word	0x08000e15
 8000db4:	08000e2d 	.word	0x08000e2d
 8000db8:	08000e2d 	.word	0x08000e2d
 8000dbc:	08000e2d 	.word	0x08000e2d
 8000dc0:	08000e2d 	.word	0x08000e2d
 8000dc4:	08000e2d 	.word	0x08000e2d
 8000dc8:	08000e2d 	.word	0x08000e2d
 8000dcc:	08000e2d 	.word	0x08000e2d
 8000dd0:	08000e1b 	.word	0x08000e1b
 8000dd4:	08000e2d 	.word	0x08000e2d
 8000dd8:	08000e2d 	.word	0x08000e2d
 8000ddc:	08000e2d 	.word	0x08000e2d
 8000de0:	08000e2d 	.word	0x08000e2d
 8000de4:	08000e2d 	.word	0x08000e2d
 8000de8:	08000e2d 	.word	0x08000e2d
 8000dec:	08000e2d 	.word	0x08000e2d
 8000df0:	08000e21 	.word	0x08000e21
 8000df4:	08000e2d 	.word	0x08000e2d
 8000df8:	08000e2d 	.word	0x08000e2d
 8000dfc:	08000e2d 	.word	0x08000e2d
 8000e00:	08000e2d 	.word	0x08000e2d
 8000e04:	08000e2d 	.word	0x08000e2d
 8000e08:	08000e2d 	.word	0x08000e2d
 8000e0c:	08000e2d 	.word	0x08000e2d
 8000e10:	08000e27 	.word	0x08000e27
		case  MPU6050_DATA_ACCEL_SCALERANGE_2 : return MPU6050_2G_LSB_VALUE ;
 8000e14:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e18:	e009      	b.n	8000e2e <MPU6050_MATH_Get_LSB_Value+0x9a>
		break;
		case  MPU6050_DATA_ACCEL_SCALERANGE_4 : return MPU6050_4G_LSB_VALUE ;
 8000e1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e1e:	e006      	b.n	8000e2e <MPU6050_MATH_Get_LSB_Value+0x9a>
		break;
		case  MPU6050_DATA_ACCEL_SCALERANGE_8 : return MPU6050_8G_LSB_VALUE ;
 8000e20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e24:	e003      	b.n	8000e2e <MPU6050_MATH_Get_LSB_Value+0x9a>
		break;
		case  MPU6050_DATA_ACCEL_SCALERANGE_16 :return MPU6050_16G_LSB_VALUE ;
 8000e26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e2a:	e000      	b.n	8000e2e <MPU6050_MATH_Get_LSB_Value+0x9a>
		break;
		default : return 0;
 8000e2c:	2300      	movs	r3, #0
	}
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e40:	f000 fbc4 	bl	80015cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e44:	f000 f8a4 	bl	8000f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e48:	f000 f966 	bl	8001118 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e4c:	f000 f93c 	bl	80010c8 <MX_DMA_Init>
  MX_I2C2_Init();
 8000e50:	f000 f908 	bl	8001064 <MX_I2C2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  MPU6050_Init(&MPU6050_1, I2CNO_2, MPU6050_DEVICE_ADDRESS);
 8000e54:	22d0      	movs	r2, #208	@ 0xd0
 8000e56:	2102      	movs	r1, #2
 8000e58:	4846      	ldr	r0, [pc, #280]	@ (8000f74 <main+0x138>)
 8000e5a:	f7ff fd3d 	bl	80008d8 <MPU6050_Init>
  HAL_Delay(100);
 8000e5e:	2064      	movs	r0, #100	@ 0x64
 8000e60:	f000 fc26 	bl	80016b0 <HAL_Delay>
  AvarageFilter_Init(&AvarageFilter_MPU6050_ACCEL_X, 5);
 8000e64:	2105      	movs	r1, #5
 8000e66:	4844      	ldr	r0, [pc, #272]	@ (8000f78 <main+0x13c>)
 8000e68:	f7ff fb76 	bl	8000558 <AvarageFilter_Init>
  AvarageFilter_Init(&AvarageFilter_MPU6050_ACCEL_Y, 5);
 8000e6c:	2105      	movs	r1, #5
 8000e6e:	4843      	ldr	r0, [pc, #268]	@ (8000f7c <main+0x140>)
 8000e70:	f7ff fb72 	bl	8000558 <AvarageFilter_Init>
  AvarageFilter_Init(&AvarageFilter_MPU6050_ACCEL_Z, 5);
 8000e74:	2105      	movs	r1, #5
 8000e76:	4842      	ldr	r0, [pc, #264]	@ (8000f80 <main+0x144>)
 8000e78:	f7ff fb6e 	bl	8000558 <AvarageFilter_Init>
  AvarageFilter_Init(&AvarageFilter_MPU6050_GYRO_X, 5);
 8000e7c:	2105      	movs	r1, #5
 8000e7e:	4841      	ldr	r0, [pc, #260]	@ (8000f84 <main+0x148>)
 8000e80:	f7ff fb6a 	bl	8000558 <AvarageFilter_Init>
  AvarageFilter_Init(&AvarageFilter_MPU6050_GYRO_Y, 5);
 8000e84:	2105      	movs	r1, #5
 8000e86:	4840      	ldr	r0, [pc, #256]	@ (8000f88 <main+0x14c>)
 8000e88:	f7ff fb66 	bl	8000558 <AvarageFilter_Init>
  AvarageFilter_Init(&AvarageFilter_MPU6050_GYRO_Z, 5);
 8000e8c:	2105      	movs	r1, #5
 8000e8e:	483f      	ldr	r0, [pc, #252]	@ (8000f8c <main+0x150>)
 8000e90:	f7ff fb62 	bl	8000558 <AvarageFilter_Init>
while (1)
{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(MPU6050_1.dataReadyFlag){
 8000e94:	4b37      	ldr	r3, [pc, #220]	@ (8000f74 <main+0x138>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d005      	beq.n	8000eaa <main+0x6e>
		MPU6050_1.dataReadyFlag = 0;
 8000e9e:	4b35      	ldr	r3, [pc, #212]	@ (8000f74 <main+0x138>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
		MPU6050_Read_ACCEL_Data(&MPU6050_1);
 8000ea4:	4833      	ldr	r0, [pc, #204]	@ (8000f74 <main+0x138>)
 8000ea6:	f7ff fdec 	bl	8000a82 <MPU6050_Read_ACCEL_Data>
	}
		MPU6050_Read_GYRO_Data(&MPU6050_1);
 8000eaa:	4832      	ldr	r0, [pc, #200]	@ (8000f74 <main+0x138>)
 8000eac:	f7ff fe37 	bl	8000b1e <MPU6050_Read_GYRO_Data>
		if(!AvarageFilter2(&AvarageFilter_MPU6050_ACCEL_X, MPU6050_1.RegGroup_Data.ACCEL_Axis_X_Data))
 8000eb0:	4b30      	ldr	r3, [pc, #192]	@ (8000f74 <main+0x138>)
 8000eb2:	88db      	ldrh	r3, [r3, #6]
 8000eb4:	b21b      	sxth	r3, r3
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	482f      	ldr	r0, [pc, #188]	@ (8000f78 <main+0x13c>)
 8000eba:	f7ff fb67 	bl	800058c <AvarageFilter2>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d104      	bne.n	8000ece <main+0x92>
			MPU6050_1.FilteredValues.ACCEL_Axis_X_Filtered = AvarageFilter_MPU6050_ACCEL_X.Avarage;
 8000ec4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f78 <main+0x13c>)
 8000ec6:	f9b3 2090 	ldrsh.w	r2, [r3, #144]	@ 0x90
 8000eca:	4b2a      	ldr	r3, [pc, #168]	@ (8000f74 <main+0x138>)
 8000ecc:	825a      	strh	r2, [r3, #18]
		if(!AvarageFilter2(&AvarageFilter_MPU6050_ACCEL_Y, MPU6050_1.RegGroup_Data.ACCEL_Axis_Y_Data))
 8000ece:	4b29      	ldr	r3, [pc, #164]	@ (8000f74 <main+0x138>)
 8000ed0:	891b      	ldrh	r3, [r3, #8]
 8000ed2:	b21b      	sxth	r3, r3
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4829      	ldr	r0, [pc, #164]	@ (8000f7c <main+0x140>)
 8000ed8:	f7ff fb58 	bl	800058c <AvarageFilter2>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d104      	bne.n	8000eec <main+0xb0>
			MPU6050_1.FilteredValues.ACCEL_Axis_Y_Filtered = AvarageFilter_MPU6050_ACCEL_Y.Avarage;
 8000ee2:	4b26      	ldr	r3, [pc, #152]	@ (8000f7c <main+0x140>)
 8000ee4:	f9b3 2090 	ldrsh.w	r2, [r3, #144]	@ 0x90
 8000ee8:	4b22      	ldr	r3, [pc, #136]	@ (8000f74 <main+0x138>)
 8000eea:	829a      	strh	r2, [r3, #20]
		if(!AvarageFilter2(&AvarageFilter_MPU6050_ACCEL_Z, MPU6050_1.RegGroup_Data.ACCEL_Axis_Z_Data))
 8000eec:	4b21      	ldr	r3, [pc, #132]	@ (8000f74 <main+0x138>)
 8000eee:	895b      	ldrh	r3, [r3, #10]
 8000ef0:	b21b      	sxth	r3, r3
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4822      	ldr	r0, [pc, #136]	@ (8000f80 <main+0x144>)
 8000ef6:	f7ff fb49 	bl	800058c <AvarageFilter2>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d104      	bne.n	8000f0a <main+0xce>
			MPU6050_1.FilteredValues.ACCEL_Axis_Z_Filtered = AvarageFilter_MPU6050_ACCEL_Z.Avarage;
 8000f00:	4b1f      	ldr	r3, [pc, #124]	@ (8000f80 <main+0x144>)
 8000f02:	f9b3 2090 	ldrsh.w	r2, [r3, #144]	@ 0x90
 8000f06:	4b1b      	ldr	r3, [pc, #108]	@ (8000f74 <main+0x138>)
 8000f08:	82da      	strh	r2, [r3, #22]
		if(!AvarageFilter2(&AvarageFilter_MPU6050_GYRO_X, MPU6050_1.RegGroup_Data.GYRO_Axis_X_Data))
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f74 <main+0x138>)
 8000f0c:	899b      	ldrh	r3, [r3, #12]
 8000f0e:	b21b      	sxth	r3, r3
 8000f10:	4619      	mov	r1, r3
 8000f12:	481c      	ldr	r0, [pc, #112]	@ (8000f84 <main+0x148>)
 8000f14:	f7ff fb3a 	bl	800058c <AvarageFilter2>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d104      	bne.n	8000f28 <main+0xec>
			MPU6050_1.FilteredValues.GYRO_Axis_X_Filtered = AvarageFilter_MPU6050_GYRO_X.Avarage;
 8000f1e:	4b19      	ldr	r3, [pc, #100]	@ (8000f84 <main+0x148>)
 8000f20:	f9b3 2090 	ldrsh.w	r2, [r3, #144]	@ 0x90
 8000f24:	4b13      	ldr	r3, [pc, #76]	@ (8000f74 <main+0x138>)
 8000f26:	831a      	strh	r2, [r3, #24]
		if(!AvarageFilter2(&AvarageFilter_MPU6050_GYRO_Y, MPU6050_1.RegGroup_Data.GYRO_Axis_Y_Data))
 8000f28:	4b12      	ldr	r3, [pc, #72]	@ (8000f74 <main+0x138>)
 8000f2a:	89db      	ldrh	r3, [r3, #14]
 8000f2c:	b21b      	sxth	r3, r3
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4815      	ldr	r0, [pc, #84]	@ (8000f88 <main+0x14c>)
 8000f32:	f7ff fb2b 	bl	800058c <AvarageFilter2>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d104      	bne.n	8000f46 <main+0x10a>
			MPU6050_1.FilteredValues.GYRO_Axis_Y_Filtered = AvarageFilter_MPU6050_GYRO_Y.Avarage;
 8000f3c:	4b12      	ldr	r3, [pc, #72]	@ (8000f88 <main+0x14c>)
 8000f3e:	f9b3 2090 	ldrsh.w	r2, [r3, #144]	@ 0x90
 8000f42:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <main+0x138>)
 8000f44:	835a      	strh	r2, [r3, #26]
		if(!AvarageFilter2(&AvarageFilter_MPU6050_GYRO_Z, MPU6050_1.RegGroup_Data.GYRO_Axis_Z_Data))
 8000f46:	4b0b      	ldr	r3, [pc, #44]	@ (8000f74 <main+0x138>)
 8000f48:	8a1b      	ldrh	r3, [r3, #16]
 8000f4a:	b21b      	sxth	r3, r3
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	480f      	ldr	r0, [pc, #60]	@ (8000f8c <main+0x150>)
 8000f50:	f7ff fb1c 	bl	800058c <AvarageFilter2>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d104      	bne.n	8000f64 <main+0x128>
			MPU6050_1.FilteredValues.GYRO_Axis_Z_Filtered = AvarageFilter_MPU6050_GYRO_Z.Avarage;
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <main+0x150>)
 8000f5c:	f9b3 2090 	ldrsh.w	r2, [r3, #144]	@ 0x90
 8000f60:	4b04      	ldr	r3, [pc, #16]	@ (8000f74 <main+0x138>)
 8000f62:	839a      	strh	r2, [r3, #28]
		MPU6050_MATH_Calculate_mG_Value(&MPU6050_1);
 8000f64:	4803      	ldr	r0, [pc, #12]	@ (8000f74 <main+0x138>)
 8000f66:	f7ff feaf 	bl	8000cc8 <MPU6050_MATH_Calculate_mG_Value>
  HAL_Delay(1);
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f000 fba0 	bl	80016b0 <HAL_Delay>
	if(MPU6050_1.dataReadyFlag){
 8000f70:	e790      	b.n	8000e94 <main+0x58>
 8000f72:	bf00      	nop
 8000f74:	200003d8 	.word	0x200003d8
 8000f78:	20000030 	.word	0x20000030
 8000f7c:	200000c8 	.word	0x200000c8
 8000f80:	20000160 	.word	0x20000160
 8000f84:	200001f8 	.word	0x200001f8
 8000f88:	20000290 	.word	0x20000290
 8000f8c:	20000328 	.word	0x20000328

08000f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b094      	sub	sp, #80	@ 0x50
 8000f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f96:	f107 0320 	add.w	r3, r7, #32
 8000f9a:	2230      	movs	r2, #48	@ 0x30
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f004 f848 	bl	8005034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	4b28      	ldr	r3, [pc, #160]	@ (800105c <SystemClock_Config+0xcc>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbc:	4a27      	ldr	r2, [pc, #156]	@ (800105c <SystemClock_Config+0xcc>)
 8000fbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc4:	4b25      	ldr	r3, [pc, #148]	@ (800105c <SystemClock_Config+0xcc>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	4b22      	ldr	r3, [pc, #136]	@ (8001060 <SystemClock_Config+0xd0>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a21      	ldr	r2, [pc, #132]	@ (8001060 <SystemClock_Config+0xd0>)
 8000fda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8001060 <SystemClock_Config+0xd0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fec:	2301      	movs	r3, #1
 8000fee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ff0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ffa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001000:	2308      	movs	r3, #8
 8001002:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001004:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001008:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800100a:	2302      	movs	r3, #2
 800100c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800100e:	2307      	movs	r3, #7
 8001010:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001012:	f107 0320 	add.w	r3, r7, #32
 8001016:	4618      	mov	r0, r3
 8001018:	f003 fb88 	bl	800472c <HAL_RCC_OscConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001022:	f000 f94b 	bl	80012bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001026:	230f      	movs	r3, #15
 8001028:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102a:	2302      	movs	r3, #2
 800102c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001032:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001036:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001038:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800103c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	2105      	movs	r1, #5
 8001044:	4618      	mov	r0, r3
 8001046:	f003 fde9 	bl	8004c1c <HAL_RCC_ClockConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001050:	f000 f934 	bl	80012bc <Error_Handler>
  }
}
 8001054:	bf00      	nop
 8001056:	3750      	adds	r7, #80	@ 0x50
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40023800 	.word	0x40023800
 8001060:	40007000 	.word	0x40007000

08001064 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001068:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <MX_I2C2_Init+0x58>)
 800106a:	4a15      	ldr	r2, [pc, #84]	@ (80010c0 <MX_I2C2_Init+0x5c>)
 800106c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800106e:	4b13      	ldr	r3, [pc, #76]	@ (80010bc <MX_I2C2_Init+0x58>)
 8001070:	4a14      	ldr	r2, [pc, #80]	@ (80010c4 <MX_I2C2_Init+0x60>)
 8001072:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001074:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <MX_I2C2_Init+0x58>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800107a:	4b10      	ldr	r3, [pc, #64]	@ (80010bc <MX_I2C2_Init+0x58>)
 800107c:	2200      	movs	r2, #0
 800107e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001080:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <MX_I2C2_Init+0x58>)
 8001082:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001086:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001088:	4b0c      	ldr	r3, [pc, #48]	@ (80010bc <MX_I2C2_Init+0x58>)
 800108a:	2200      	movs	r2, #0
 800108c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800108e:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <MX_I2C2_Init+0x58>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001094:	4b09      	ldr	r3, [pc, #36]	@ (80010bc <MX_I2C2_Init+0x58>)
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800109a:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <MX_I2C2_Init+0x58>)
 800109c:	2200      	movs	r2, #0
 800109e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010a0:	4806      	ldr	r0, [pc, #24]	@ (80010bc <MX_I2C2_Init+0x58>)
 80010a2:	f001 f9b5 	bl	8002410 <HAL_I2C_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80010ac:	f000 f906 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  I2C_Init(&hi2c2, 2);
 80010b0:	2102      	movs	r1, #2
 80010b2:	4802      	ldr	r0, [pc, #8]	@ (80010bc <MX_I2C2_Init+0x58>)
 80010b4:	f7ff fae2 	bl	800067c <I2C_Init>
  /* USER CODE END I2C2_Init 2 */

}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200003fc 	.word	0x200003fc
 80010c0:	40005800 	.word	0x40005800
 80010c4:	00061a80 	.word	0x00061a80

080010c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	4b10      	ldr	r3, [pc, #64]	@ (8001114 <MX_DMA_Init+0x4c>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001114 <MX_DMA_Init+0x4c>)
 80010d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010de:	4b0d      	ldr	r3, [pc, #52]	@ (8001114 <MX_DMA_Init+0x4c>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2100      	movs	r1, #0
 80010ee:	200d      	movs	r0, #13
 80010f0:	f000 fbdd 	bl	80018ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80010f4:	200d      	movs	r0, #13
 80010f6:	f000 fbf6 	bl	80018e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2100      	movs	r1, #0
 80010fe:	202f      	movs	r0, #47	@ 0x2f
 8001100:	f000 fbd5 	bl	80018ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001104:	202f      	movs	r0, #47	@ 0x2f
 8001106:	f000 fbee 	bl	80018e6 <HAL_NVIC_EnableIRQ>

}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800

08001118 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08c      	sub	sp, #48	@ 0x30
 800111c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
 8001132:	4b54      	ldr	r3, [pc, #336]	@ (8001284 <MX_GPIO_Init+0x16c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	4a53      	ldr	r2, [pc, #332]	@ (8001284 <MX_GPIO_Init+0x16c>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	6313      	str	r3, [r2, #48]	@ 0x30
 800113e:	4b51      	ldr	r3, [pc, #324]	@ (8001284 <MX_GPIO_Init+0x16c>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	61bb      	str	r3, [r7, #24]
 8001148:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	4b4d      	ldr	r3, [pc, #308]	@ (8001284 <MX_GPIO_Init+0x16c>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a4c      	ldr	r2, [pc, #304]	@ (8001284 <MX_GPIO_Init+0x16c>)
 8001154:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b4a      	ldr	r3, [pc, #296]	@ (8001284 <MX_GPIO_Init+0x16c>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b46      	ldr	r3, [pc, #280]	@ (8001284 <MX_GPIO_Init+0x16c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a45      	ldr	r2, [pc, #276]	@ (8001284 <MX_GPIO_Init+0x16c>)
 8001170:	f043 0302 	orr.w	r3, r3, #2
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b43      	ldr	r3, [pc, #268]	@ (8001284 <MX_GPIO_Init+0x16c>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b3f      	ldr	r3, [pc, #252]	@ (8001284 <MX_GPIO_Init+0x16c>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a3e      	ldr	r2, [pc, #248]	@ (8001284 <MX_GPIO_Init+0x16c>)
 800118c:	f043 0310 	orr.w	r3, r3, #16
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b3c      	ldr	r3, [pc, #240]	@ (8001284 <MX_GPIO_Init+0x16c>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f003 0310 	and.w	r3, r3, #16
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	4b38      	ldr	r3, [pc, #224]	@ (8001284 <MX_GPIO_Init+0x16c>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	4a37      	ldr	r2, [pc, #220]	@ (8001284 <MX_GPIO_Init+0x16c>)
 80011a8:	f043 0308 	orr.w	r3, r3, #8
 80011ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ae:	4b35      	ldr	r3, [pc, #212]	@ (8001284 <MX_GPIO_Init+0x16c>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	f003 0308 	and.w	r3, r3, #8
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	4b31      	ldr	r3, [pc, #196]	@ (8001284 <MX_GPIO_Init+0x16c>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a30      	ldr	r2, [pc, #192]	@ (8001284 <MX_GPIO_Init+0x16c>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001284 <MX_GPIO_Init+0x16c>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80011dc:	482a      	ldr	r0, [pc, #168]	@ (8001288 <MX_GPIO_Init+0x170>)
 80011de:	f001 f8e5 	bl	80023ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011e2:	2301      	movs	r3, #1
 80011e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011e6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	4619      	mov	r1, r3
 80011f6:	4825      	ldr	r0, [pc, #148]	@ (800128c <MX_GPIO_Init+0x174>)
 80011f8:	f000 ff3c 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80011fc:	2304      	movs	r3, #4
 80011fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	4619      	mov	r1, r3
 800120e:	4820      	ldr	r0, [pc, #128]	@ (8001290 <MX_GPIO_Init+0x178>)
 8001210:	f000 ff30 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001214:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800121a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800121e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001220:	2302      	movs	r3, #2
 8001222:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001224:	f107 031c 	add.w	r3, r7, #28
 8001228:	4619      	mov	r1, r3
 800122a:	481a      	ldr	r0, [pc, #104]	@ (8001294 <MX_GPIO_Init+0x17c>)
 800122c:	f000 ff22 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8001230:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001236:	2301      	movs	r3, #1
 8001238:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001242:	f107 031c 	add.w	r3, r7, #28
 8001246:	4619      	mov	r1, r3
 8001248:	480f      	ldr	r0, [pc, #60]	@ (8001288 <MX_GPIO_Init+0x170>)
 800124a:	f000 ff13 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800124e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001254:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001258:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125e:	f107 031c 	add.w	r3, r7, #28
 8001262:	4619      	mov	r1, r3
 8001264:	480c      	ldr	r0, [pc, #48]	@ (8001298 <MX_GPIO_Init+0x180>)
 8001266:	f000 ff05 	bl	8002074 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	2017      	movs	r0, #23
 8001270:	f000 fb1d 	bl	80018ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001274:	2017      	movs	r0, #23
 8001276:	f000 fb36 	bl	80018e6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800127a:	bf00      	nop
 800127c:	3730      	adds	r7, #48	@ 0x30
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800
 8001288:	40020c00 	.word	0x40020c00
 800128c:	40020800 	.word	0x40020800
 8001290:	40020400 	.word	0x40020400
 8001294:	40021000 	.word	0x40021000
 8001298:	40020000 	.word	0x40020000

0800129c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  if(GPIO_PIN_9)
	  MPU6050_1.dataReadyFlag = 1;
 80012a6:	4b04      	ldr	r3, [pc, #16]	@ (80012b8 <HAL_GPIO_EXTI_Callback+0x1c>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	701a      	strb	r2, [r3, #0]
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	200003d8 	.word	0x200003d8

080012bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c0:	b672      	cpsid	i
}
 80012c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <Error_Handler+0x8>

080012c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <HAL_MspInit+0x4c>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001314 <HAL_MspInit+0x4c>)
 80012d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012de:	4b0d      	ldr	r3, [pc, #52]	@ (8001314 <HAL_MspInit+0x4c>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	603b      	str	r3, [r7, #0]
 80012ee:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <HAL_MspInit+0x4c>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	4a08      	ldr	r2, [pc, #32]	@ (8001314 <HAL_MspInit+0x4c>)
 80012f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012fa:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <HAL_MspInit+0x4c>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001306:	2007      	movs	r0, #7
 8001308:	f000 fac6 	bl	8001898 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40023800 	.word	0x40023800

08001318 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	@ 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a50      	ldr	r2, [pc, #320]	@ (8001478 <HAL_I2C_MspInit+0x160>)
 8001336:	4293      	cmp	r3, r2
 8001338:	f040 8099 	bne.w	800146e <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133c:	2300      	movs	r3, #0
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	4b4e      	ldr	r3, [pc, #312]	@ (800147c <HAL_I2C_MspInit+0x164>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001344:	4a4d      	ldr	r2, [pc, #308]	@ (800147c <HAL_I2C_MspInit+0x164>)
 8001346:	f043 0302 	orr.w	r3, r3, #2
 800134a:	6313      	str	r3, [r2, #48]	@ 0x30
 800134c:	4b4b      	ldr	r3, [pc, #300]	@ (800147c <HAL_I2C_MspInit+0x164>)
 800134e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001358:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800135c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800135e:	2312      	movs	r3, #18
 8001360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001366:	2303      	movs	r3, #3
 8001368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800136a:	2304      	movs	r3, #4
 800136c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	4842      	ldr	r0, [pc, #264]	@ (8001480 <HAL_I2C_MspInit+0x168>)
 8001376:	f000 fe7d 	bl	8002074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b3f      	ldr	r3, [pc, #252]	@ (800147c <HAL_I2C_MspInit+0x164>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001382:	4a3e      	ldr	r2, [pc, #248]	@ (800147c <HAL_I2C_MspInit+0x164>)
 8001384:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001388:	6413      	str	r3, [r2, #64]	@ 0x40
 800138a:	4b3c      	ldr	r3, [pc, #240]	@ (800147c <HAL_I2C_MspInit+0x164>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8001396:	4b3b      	ldr	r3, [pc, #236]	@ (8001484 <HAL_I2C_MspInit+0x16c>)
 8001398:	4a3b      	ldr	r2, [pc, #236]	@ (8001488 <HAL_I2C_MspInit+0x170>)
 800139a:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 800139c:	4b39      	ldr	r3, [pc, #228]	@ (8001484 <HAL_I2C_MspInit+0x16c>)
 800139e:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80013a2:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013a4:	4b37      	ldr	r3, [pc, #220]	@ (8001484 <HAL_I2C_MspInit+0x16c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013aa:	4b36      	ldr	r3, [pc, #216]	@ (8001484 <HAL_I2C_MspInit+0x16c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013b0:	4b34      	ldr	r3, [pc, #208]	@ (8001484 <HAL_I2C_MspInit+0x16c>)
 80013b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013b6:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013b8:	4b32      	ldr	r3, [pc, #200]	@ (8001484 <HAL_I2C_MspInit+0x16c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013be:	4b31      	ldr	r3, [pc, #196]	@ (8001484 <HAL_I2C_MspInit+0x16c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80013c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001484 <HAL_I2C_MspInit+0x16c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001484 <HAL_I2C_MspInit+0x16c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001484 <HAL_I2C_MspInit+0x16c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80013d6:	482b      	ldr	r0, [pc, #172]	@ (8001484 <HAL_I2C_MspInit+0x16c>)
 80013d8:	f000 faa0 	bl	800191c <HAL_DMA_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 80013e2:	f7ff ff6b 	bl	80012bc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a26      	ldr	r2, [pc, #152]	@ (8001484 <HAL_I2C_MspInit+0x16c>)
 80013ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80013ec:	4a25      	ldr	r2, [pc, #148]	@ (8001484 <HAL_I2C_MspInit+0x16c>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 80013f2:	4b26      	ldr	r3, [pc, #152]	@ (800148c <HAL_I2C_MspInit+0x174>)
 80013f4:	4a26      	ldr	r2, [pc, #152]	@ (8001490 <HAL_I2C_MspInit+0x178>)
 80013f6:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 80013f8:	4b24      	ldr	r3, [pc, #144]	@ (800148c <HAL_I2C_MspInit+0x174>)
 80013fa:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80013fe:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001400:	4b22      	ldr	r3, [pc, #136]	@ (800148c <HAL_I2C_MspInit+0x174>)
 8001402:	2240      	movs	r2, #64	@ 0x40
 8001404:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001406:	4b21      	ldr	r3, [pc, #132]	@ (800148c <HAL_I2C_MspInit+0x174>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800140c:	4b1f      	ldr	r3, [pc, #124]	@ (800148c <HAL_I2C_MspInit+0x174>)
 800140e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001412:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001414:	4b1d      	ldr	r3, [pc, #116]	@ (800148c <HAL_I2C_MspInit+0x174>)
 8001416:	2200      	movs	r2, #0
 8001418:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800141a:	4b1c      	ldr	r3, [pc, #112]	@ (800148c <HAL_I2C_MspInit+0x174>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001420:	4b1a      	ldr	r3, [pc, #104]	@ (800148c <HAL_I2C_MspInit+0x174>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001426:	4b19      	ldr	r3, [pc, #100]	@ (800148c <HAL_I2C_MspInit+0x174>)
 8001428:	2200      	movs	r2, #0
 800142a:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800142c:	4b17      	ldr	r3, [pc, #92]	@ (800148c <HAL_I2C_MspInit+0x174>)
 800142e:	2200      	movs	r2, #0
 8001430:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001432:	4816      	ldr	r0, [pc, #88]	@ (800148c <HAL_I2C_MspInit+0x174>)
 8001434:	f000 fa72 	bl	800191c <HAL_DMA_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 800143e:	f7ff ff3d 	bl	80012bc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a11      	ldr	r2, [pc, #68]	@ (800148c <HAL_I2C_MspInit+0x174>)
 8001446:	635a      	str	r2, [r3, #52]	@ 0x34
 8001448:	4a10      	ldr	r2, [pc, #64]	@ (800148c <HAL_I2C_MspInit+0x174>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	2021      	movs	r0, #33	@ 0x21
 8001454:	f000 fa2b 	bl	80018ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001458:	2021      	movs	r0, #33	@ 0x21
 800145a:	f000 fa44 	bl	80018e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	2022      	movs	r0, #34	@ 0x22
 8001464:	f000 fa23 	bl	80018ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001468:	2022      	movs	r0, #34	@ 0x22
 800146a:	f000 fa3c 	bl	80018e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800146e:	bf00      	nop
 8001470:	3728      	adds	r7, #40	@ 0x28
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40005800 	.word	0x40005800
 800147c:	40023800 	.word	0x40023800
 8001480:	40020400 	.word	0x40020400
 8001484:	20000450 	.word	0x20000450
 8001488:	40026040 	.word	0x40026040
 800148c:	200004b0 	.word	0x200004b0
 8001490:	400260b8 	.word	0x400260b8

08001494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <NMI_Handler+0x4>

0800149c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <HardFault_Handler+0x4>

080014a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <MemManage_Handler+0x4>

080014ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <BusFault_Handler+0x4>

080014b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <UsageFault_Handler+0x4>

080014bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ea:	f000 f8c1 	bl	8001670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80014f8:	4802      	ldr	r0, [pc, #8]	@ (8001504 <DMA1_Stream2_IRQHandler+0x10>)
 80014fa:	f000 fb37 	bl	8001b6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000450 	.word	0x20000450

08001508 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800150c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001510:	f000 ff66 	bl	80023e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}

08001518 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800151c:	4802      	ldr	r0, [pc, #8]	@ (8001528 <I2C2_EV_IRQHandler+0x10>)
 800151e:	f001 fb29 	bl	8002b74 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200003fc 	.word	0x200003fc

0800152c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001530:	4802      	ldr	r0, [pc, #8]	@ (800153c <I2C2_ER_IRQHandler+0x10>)
 8001532:	f001 fc72 	bl	8002e1a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200003fc 	.word	0x200003fc

08001540 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001544:	4802      	ldr	r0, [pc, #8]	@ (8001550 <DMA1_Stream7_IRQHandler+0x10>)
 8001546:	f000 fb11 	bl	8001b6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200004b0 	.word	0x200004b0

08001554 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <SystemInit+0x20>)
 800155a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800155e:	4a05      	ldr	r2, [pc, #20]	@ (8001574 <SystemInit+0x20>)
 8001560:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001564:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001578:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800157c:	f7ff ffea 	bl	8001554 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001580:	480c      	ldr	r0, [pc, #48]	@ (80015b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001582:	490d      	ldr	r1, [pc, #52]	@ (80015b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001584:	4a0d      	ldr	r2, [pc, #52]	@ (80015bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001588:	e002      	b.n	8001590 <LoopCopyDataInit>

0800158a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800158c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158e:	3304      	adds	r3, #4

08001590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001594:	d3f9      	bcc.n	800158a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001596:	4a0a      	ldr	r2, [pc, #40]	@ (80015c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001598:	4c0a      	ldr	r4, [pc, #40]	@ (80015c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800159c:	e001      	b.n	80015a2 <LoopFillZerobss>

0800159e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a0:	3204      	adds	r2, #4

080015a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a4:	d3fb      	bcc.n	800159e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015a6:	f003 fd4d 	bl	8005044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015aa:	f7ff fc47 	bl	8000e3c <main>
  bx  lr    
 80015ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015bc:	080050d4 	.word	0x080050d4
  ldr r2, =_sbss
 80015c0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80015c4:	20000514 	.word	0x20000514

080015c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c8:	e7fe      	b.n	80015c8 <ADC_IRQHandler>
	...

080015cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015d0:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <HAL_Init+0x40>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0d      	ldr	r2, [pc, #52]	@ (800160c <HAL_Init+0x40>)
 80015d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015dc:	4b0b      	ldr	r3, [pc, #44]	@ (800160c <HAL_Init+0x40>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0a      	ldr	r2, [pc, #40]	@ (800160c <HAL_Init+0x40>)
 80015e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e8:	4b08      	ldr	r3, [pc, #32]	@ (800160c <HAL_Init+0x40>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a07      	ldr	r2, [pc, #28]	@ (800160c <HAL_Init+0x40>)
 80015ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f4:	2003      	movs	r0, #3
 80015f6:	f000 f94f 	bl	8001898 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015fa:	2000      	movs	r0, #0
 80015fc:	f000 f808 	bl	8001610 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001600:	f7ff fe62 	bl	80012c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023c00 	.word	0x40023c00

08001610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001618:	4b12      	ldr	r3, [pc, #72]	@ (8001664 <HAL_InitTick+0x54>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <HAL_InitTick+0x58>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	4619      	mov	r1, r3
 8001622:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001626:	fbb3 f3f1 	udiv	r3, r3, r1
 800162a:	fbb2 f3f3 	udiv	r3, r2, r3
 800162e:	4618      	mov	r0, r3
 8001630:	f000 f967 	bl	8001902 <HAL_SYSTICK_Config>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e00e      	b.n	800165c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b0f      	cmp	r3, #15
 8001642:	d80a      	bhi.n	800165a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001644:	2200      	movs	r2, #0
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	f04f 30ff 	mov.w	r0, #4294967295
 800164c:	f000 f92f 	bl	80018ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001650:	4a06      	ldr	r2, [pc, #24]	@ (800166c <HAL_InitTick+0x5c>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	e000      	b.n	800165c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000000 	.word	0x20000000
 8001668:	20000008 	.word	0x20000008
 800166c:	20000004 	.word	0x20000004

08001670 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001674:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <HAL_IncTick+0x20>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <HAL_IncTick+0x24>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4413      	add	r3, r2
 8001680:	4a04      	ldr	r2, [pc, #16]	@ (8001694 <HAL_IncTick+0x24>)
 8001682:	6013      	str	r3, [r2, #0]
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	20000008 	.word	0x20000008
 8001694:	20000510 	.word	0x20000510

08001698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return uwTick;
 800169c:	4b03      	ldr	r3, [pc, #12]	@ (80016ac <HAL_GetTick+0x14>)
 800169e:	681b      	ldr	r3, [r3, #0]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	20000510 	.word	0x20000510

080016b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016b8:	f7ff ffee 	bl	8001698 <HAL_GetTick>
 80016bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c8:	d005      	beq.n	80016d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ca:	4b0a      	ldr	r3, [pc, #40]	@ (80016f4 <HAL_Delay+0x44>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4413      	add	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016d6:	bf00      	nop
 80016d8:	f7ff ffde 	bl	8001698 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d8f7      	bhi.n	80016d8 <HAL_Delay+0x28>
  {
  }
}
 80016e8:	bf00      	nop
 80016ea:	bf00      	nop
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000008 	.word	0x20000008

080016f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001708:	4b0c      	ldr	r3, [pc, #48]	@ (800173c <__NVIC_SetPriorityGrouping+0x44>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001714:	4013      	ands	r3, r2
 8001716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001720:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001724:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800172a:	4a04      	ldr	r2, [pc, #16]	@ (800173c <__NVIC_SetPriorityGrouping+0x44>)
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	60d3      	str	r3, [r2, #12]
}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001744:	4b04      	ldr	r3, [pc, #16]	@ (8001758 <__NVIC_GetPriorityGrouping+0x18>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	0a1b      	lsrs	r3, r3, #8
 800174a:	f003 0307 	and.w	r3, r3, #7
}
 800174e:	4618      	mov	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	2b00      	cmp	r3, #0
 800176c:	db0b      	blt.n	8001786 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	f003 021f 	and.w	r2, r3, #31
 8001774:	4907      	ldr	r1, [pc, #28]	@ (8001794 <__NVIC_EnableIRQ+0x38>)
 8001776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177a:	095b      	lsrs	r3, r3, #5
 800177c:	2001      	movs	r0, #1
 800177e:	fa00 f202 	lsl.w	r2, r0, r2
 8001782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000e100 	.word	0xe000e100

08001798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	6039      	str	r1, [r7, #0]
 80017a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	db0a      	blt.n	80017c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	490c      	ldr	r1, [pc, #48]	@ (80017e4 <__NVIC_SetPriority+0x4c>)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	0112      	lsls	r2, r2, #4
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	440b      	add	r3, r1
 80017bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c0:	e00a      	b.n	80017d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	4908      	ldr	r1, [pc, #32]	@ (80017e8 <__NVIC_SetPriority+0x50>)
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	3b04      	subs	r3, #4
 80017d0:	0112      	lsls	r2, r2, #4
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	440b      	add	r3, r1
 80017d6:	761a      	strb	r2, [r3, #24]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000e100 	.word	0xe000e100
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b089      	sub	sp, #36	@ 0x24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	f1c3 0307 	rsb	r3, r3, #7
 8001806:	2b04      	cmp	r3, #4
 8001808:	bf28      	it	cs
 800180a:	2304      	movcs	r3, #4
 800180c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3304      	adds	r3, #4
 8001812:	2b06      	cmp	r3, #6
 8001814:	d902      	bls.n	800181c <NVIC_EncodePriority+0x30>
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3b03      	subs	r3, #3
 800181a:	e000      	b.n	800181e <NVIC_EncodePriority+0x32>
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001820:	f04f 32ff 	mov.w	r2, #4294967295
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43da      	mvns	r2, r3
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	401a      	ands	r2, r3
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001834:	f04f 31ff 	mov.w	r1, #4294967295
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	fa01 f303 	lsl.w	r3, r1, r3
 800183e:	43d9      	mvns	r1, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001844:	4313      	orrs	r3, r2
         );
}
 8001846:	4618      	mov	r0, r3
 8001848:	3724      	adds	r7, #36	@ 0x24
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
	...

08001854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3b01      	subs	r3, #1
 8001860:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001864:	d301      	bcc.n	800186a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001866:	2301      	movs	r3, #1
 8001868:	e00f      	b.n	800188a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800186a:	4a0a      	ldr	r2, [pc, #40]	@ (8001894 <SysTick_Config+0x40>)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3b01      	subs	r3, #1
 8001870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001872:	210f      	movs	r1, #15
 8001874:	f04f 30ff 	mov.w	r0, #4294967295
 8001878:	f7ff ff8e 	bl	8001798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800187c:	4b05      	ldr	r3, [pc, #20]	@ (8001894 <SysTick_Config+0x40>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001882:	4b04      	ldr	r3, [pc, #16]	@ (8001894 <SysTick_Config+0x40>)
 8001884:	2207      	movs	r2, #7
 8001886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	e000e010 	.word	0xe000e010

08001898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff ff29 	bl	80016f8 <__NVIC_SetPriorityGrouping>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b086      	sub	sp, #24
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4603      	mov	r3, r0
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
 80018ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018c0:	f7ff ff3e 	bl	8001740 <__NVIC_GetPriorityGrouping>
 80018c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	68b9      	ldr	r1, [r7, #8]
 80018ca:	6978      	ldr	r0, [r7, #20]
 80018cc:	f7ff ff8e 	bl	80017ec <NVIC_EncodePriority>
 80018d0:	4602      	mov	r2, r0
 80018d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d6:	4611      	mov	r1, r2
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff5d 	bl	8001798 <__NVIC_SetPriority>
}
 80018de:	bf00      	nop
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4603      	mov	r3, r0
 80018ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ff31 	bl	800175c <__NVIC_EnableIRQ>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ffa2 	bl	8001854 <SysTick_Config>
 8001910:	4603      	mov	r3, r0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001928:	f7ff feb6 	bl	8001698 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e099      	b.n	8001a6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2202      	movs	r2, #2
 800193c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0201 	bic.w	r2, r2, #1
 8001956:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001958:	e00f      	b.n	800197a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800195a:	f7ff fe9d 	bl	8001698 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b05      	cmp	r3, #5
 8001966:	d908      	bls.n	800197a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2220      	movs	r2, #32
 800196c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2203      	movs	r2, #3
 8001972:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e078      	b.n	8001a6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1e8      	bne.n	800195a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	4b38      	ldr	r3, [pc, #224]	@ (8001a74 <HAL_DMA_Init+0x158>)
 8001994:	4013      	ands	r3, r2
 8001996:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d107      	bne.n	80019e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019dc:	4313      	orrs	r3, r2
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f023 0307 	bic.w	r3, r3, #7
 80019fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	d117      	bne.n	8001a3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00e      	beq.n	8001a3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 faab 	bl	8001f7c <DMA_CheckFifoParam>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d008      	beq.n	8001a3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2240      	movs	r2, #64	@ 0x40
 8001a30:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e016      	b.n	8001a6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 fa62 	bl	8001f10 <DMA_CalcBaseAndBitshift>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a54:	223f      	movs	r2, #63	@ 0x3f
 8001a56:	409a      	lsls	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	f010803f 	.word	0xf010803f

08001a78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
 8001a84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d101      	bne.n	8001a9e <HAL_DMA_Start_IT+0x26>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e040      	b.n	8001b20 <HAL_DMA_Start_IT+0xa8>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d12f      	bne.n	8001b12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2200      	movs	r2, #0
 8001abe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 f9f4 	bl	8001eb4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad0:	223f      	movs	r2, #63	@ 0x3f
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 0216 	orr.w	r2, r2, #22
 8001ae6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d007      	beq.n	8001b00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0208 	orr.w	r2, r2, #8
 8001afe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0201 	orr.w	r2, r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	e005      	b.n	8001b1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d004      	beq.n	8001b46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2280      	movs	r2, #128	@ 0x80
 8001b40:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e00c      	b.n	8001b60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2205      	movs	r2, #5
 8001b4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0201 	bic.w	r2, r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b78:	4b8e      	ldr	r3, [pc, #568]	@ (8001db4 <HAL_DMA_IRQHandler+0x248>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a8e      	ldr	r2, [pc, #568]	@ (8001db8 <HAL_DMA_IRQHandler+0x24c>)
 8001b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b82:	0a9b      	lsrs	r3, r3, #10
 8001b84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b96:	2208      	movs	r2, #8
 8001b98:	409a      	lsls	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d01a      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d013      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0204 	bic.w	r2, r2, #4
 8001bbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bc4:	2208      	movs	r2, #8
 8001bc6:	409a      	lsls	r2, r3
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bd0:	f043 0201 	orr.w	r2, r3, #1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bdc:	2201      	movs	r2, #1
 8001bde:	409a      	lsls	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4013      	ands	r3, r2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d012      	beq.n	8001c0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00b      	beq.n	8001c0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	409a      	lsls	r2, r3
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c06:	f043 0202 	orr.w	r2, r3, #2
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c12:	2204      	movs	r2, #4
 8001c14:	409a      	lsls	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d012      	beq.n	8001c44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00b      	beq.n	8001c44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c30:	2204      	movs	r2, #4
 8001c32:	409a      	lsls	r2, r3
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c3c:	f043 0204 	orr.w	r2, r3, #4
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c48:	2210      	movs	r2, #16
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d043      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d03c      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c66:	2210      	movs	r2, #16
 8001c68:	409a      	lsls	r2, r3
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d018      	beq.n	8001cae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d108      	bne.n	8001c9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d024      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	4798      	blx	r3
 8001c9a:	e01f      	b.n	8001cdc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d01b      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	4798      	blx	r3
 8001cac:	e016      	b.n	8001cdc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d107      	bne.n	8001ccc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0208 	bic.w	r2, r2, #8
 8001cca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce0:	2220      	movs	r2, #32
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 808f 	beq.w	8001e0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0310 	and.w	r3, r3, #16
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 8087 	beq.w	8001e0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d02:	2220      	movs	r2, #32
 8001d04:	409a      	lsls	r2, r3
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b05      	cmp	r3, #5
 8001d14:	d136      	bne.n	8001d84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0216 	bic.w	r2, r2, #22
 8001d24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	695a      	ldr	r2, [r3, #20]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d103      	bne.n	8001d46 <HAL_DMA_IRQHandler+0x1da>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d007      	beq.n	8001d56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0208 	bic.w	r2, r2, #8
 8001d54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d5a:	223f      	movs	r2, #63	@ 0x3f
 8001d5c:	409a      	lsls	r2, r3
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d07e      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	4798      	blx	r3
        }
        return;
 8001d82:	e079      	b.n	8001e78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d01d      	beq.n	8001dce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d10d      	bne.n	8001dbc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d031      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	4798      	blx	r3
 8001db0:	e02c      	b.n	8001e0c <HAL_DMA_IRQHandler+0x2a0>
 8001db2:	bf00      	nop
 8001db4:	20000000 	.word	0x20000000
 8001db8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d023      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	4798      	blx	r3
 8001dcc:	e01e      	b.n	8001e0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10f      	bne.n	8001dfc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0210 	bic.w	r2, r2, #16
 8001dea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d032      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d022      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2205      	movs	r2, #5
 8001e24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0201 	bic.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d307      	bcc.n	8001e54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f2      	bne.n	8001e38 <HAL_DMA_IRQHandler+0x2cc>
 8001e52:	e000      	b.n	8001e56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e54:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d005      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	4798      	blx	r3
 8001e76:	e000      	b.n	8001e7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e78:	bf00      	nop
    }
  }
}
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e8e:	b2db      	uxtb	r3, r3
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
 8001ec0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001ed0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b40      	cmp	r3, #64	@ 0x40
 8001ee0:	d108      	bne.n	8001ef4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ef2:	e007      	b.n	8001f04 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68ba      	ldr	r2, [r7, #8]
 8001efa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	60da      	str	r2, [r3, #12]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	3b10      	subs	r3, #16
 8001f20:	4a14      	ldr	r2, [pc, #80]	@ (8001f74 <DMA_CalcBaseAndBitshift+0x64>)
 8001f22:	fba2 2303 	umull	r2, r3, r2, r3
 8001f26:	091b      	lsrs	r3, r3, #4
 8001f28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f2a:	4a13      	ldr	r2, [pc, #76]	@ (8001f78 <DMA_CalcBaseAndBitshift+0x68>)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4413      	add	r3, r2
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	461a      	mov	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d909      	bls.n	8001f52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f46:	f023 0303 	bic.w	r3, r3, #3
 8001f4a:	1d1a      	adds	r2, r3, #4
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f50:	e007      	b.n	8001f62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f5a:	f023 0303 	bic.w	r3, r3, #3
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	aaaaaaab 	.word	0xaaaaaaab
 8001f78:	080050bc 	.word	0x080050bc

08001f7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d11f      	bne.n	8001fd6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	d856      	bhi.n	800204a <DMA_CheckFifoParam+0xce>
 8001f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8001fa4 <DMA_CheckFifoParam+0x28>)
 8001f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa2:	bf00      	nop
 8001fa4:	08001fb5 	.word	0x08001fb5
 8001fa8:	08001fc7 	.word	0x08001fc7
 8001fac:	08001fb5 	.word	0x08001fb5
 8001fb0:	0800204b 	.word	0x0800204b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d046      	beq.n	800204e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fc4:	e043      	b.n	800204e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001fce:	d140      	bne.n	8002052 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fd4:	e03d      	b.n	8002052 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fde:	d121      	bne.n	8002024 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d837      	bhi.n	8002056 <DMA_CheckFifoParam+0xda>
 8001fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8001fec <DMA_CheckFifoParam+0x70>)
 8001fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fec:	08001ffd 	.word	0x08001ffd
 8001ff0:	08002003 	.word	0x08002003
 8001ff4:	08001ffd 	.word	0x08001ffd
 8001ff8:	08002015 	.word	0x08002015
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8002000:	e030      	b.n	8002064 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002006:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d025      	beq.n	800205a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002012:	e022      	b.n	800205a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002018:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800201c:	d11f      	bne.n	800205e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002022:	e01c      	b.n	800205e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2b02      	cmp	r3, #2
 8002028:	d903      	bls.n	8002032 <DMA_CheckFifoParam+0xb6>
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2b03      	cmp	r3, #3
 800202e:	d003      	beq.n	8002038 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002030:	e018      	b.n	8002064 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	73fb      	strb	r3, [r7, #15]
      break;
 8002036:	e015      	b.n	8002064 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800203c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00e      	beq.n	8002062 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	73fb      	strb	r3, [r7, #15]
      break;
 8002048:	e00b      	b.n	8002062 <DMA_CheckFifoParam+0xe6>
      break;
 800204a:	bf00      	nop
 800204c:	e00a      	b.n	8002064 <DMA_CheckFifoParam+0xe8>
      break;
 800204e:	bf00      	nop
 8002050:	e008      	b.n	8002064 <DMA_CheckFifoParam+0xe8>
      break;
 8002052:	bf00      	nop
 8002054:	e006      	b.n	8002064 <DMA_CheckFifoParam+0xe8>
      break;
 8002056:	bf00      	nop
 8002058:	e004      	b.n	8002064 <DMA_CheckFifoParam+0xe8>
      break;
 800205a:	bf00      	nop
 800205c:	e002      	b.n	8002064 <DMA_CheckFifoParam+0xe8>
      break;   
 800205e:	bf00      	nop
 8002060:	e000      	b.n	8002064 <DMA_CheckFifoParam+0xe8>
      break;
 8002062:	bf00      	nop
    }
  } 
  
  return status; 
 8002064:	7bfb      	ldrb	r3, [r7, #15]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop

08002074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002074:	b480      	push	{r7}
 8002076:	b089      	sub	sp, #36	@ 0x24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002086:	2300      	movs	r3, #0
 8002088:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
 800208e:	e16b      	b.n	8002368 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002090:	2201      	movs	r2, #1
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	f040 815a 	bne.w	8002362 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d005      	beq.n	80020c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d130      	bne.n	8002128 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	2203      	movs	r2, #3
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020fc:	2201      	movs	r2, #1
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	091b      	lsrs	r3, r3, #4
 8002112:	f003 0201 	and.w	r2, r3, #1
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b03      	cmp	r3, #3
 8002132:	d017      	beq.n	8002164 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	2203      	movs	r2, #3
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d123      	bne.n	80021b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	08da      	lsrs	r2, r3, #3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3208      	adds	r2, #8
 8002178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	220f      	movs	r2, #15
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	08da      	lsrs	r2, r3, #3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3208      	adds	r2, #8
 80021b2:	69b9      	ldr	r1, [r7, #24]
 80021b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	2203      	movs	r2, #3
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0203 	and.w	r2, r3, #3
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80b4 	beq.w	8002362 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	4b60      	ldr	r3, [pc, #384]	@ (8002380 <HAL_GPIO_Init+0x30c>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002202:	4a5f      	ldr	r2, [pc, #380]	@ (8002380 <HAL_GPIO_Init+0x30c>)
 8002204:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002208:	6453      	str	r3, [r2, #68]	@ 0x44
 800220a:	4b5d      	ldr	r3, [pc, #372]	@ (8002380 <HAL_GPIO_Init+0x30c>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002216:	4a5b      	ldr	r2, [pc, #364]	@ (8002384 <HAL_GPIO_Init+0x310>)
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	089b      	lsrs	r3, r3, #2
 800221c:	3302      	adds	r3, #2
 800221e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	220f      	movs	r2, #15
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a52      	ldr	r2, [pc, #328]	@ (8002388 <HAL_GPIO_Init+0x314>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d02b      	beq.n	800229a <HAL_GPIO_Init+0x226>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a51      	ldr	r2, [pc, #324]	@ (800238c <HAL_GPIO_Init+0x318>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d025      	beq.n	8002296 <HAL_GPIO_Init+0x222>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a50      	ldr	r2, [pc, #320]	@ (8002390 <HAL_GPIO_Init+0x31c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d01f      	beq.n	8002292 <HAL_GPIO_Init+0x21e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a4f      	ldr	r2, [pc, #316]	@ (8002394 <HAL_GPIO_Init+0x320>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d019      	beq.n	800228e <HAL_GPIO_Init+0x21a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a4e      	ldr	r2, [pc, #312]	@ (8002398 <HAL_GPIO_Init+0x324>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d013      	beq.n	800228a <HAL_GPIO_Init+0x216>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a4d      	ldr	r2, [pc, #308]	@ (800239c <HAL_GPIO_Init+0x328>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d00d      	beq.n	8002286 <HAL_GPIO_Init+0x212>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a4c      	ldr	r2, [pc, #304]	@ (80023a0 <HAL_GPIO_Init+0x32c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d007      	beq.n	8002282 <HAL_GPIO_Init+0x20e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a4b      	ldr	r2, [pc, #300]	@ (80023a4 <HAL_GPIO_Init+0x330>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d101      	bne.n	800227e <HAL_GPIO_Init+0x20a>
 800227a:	2307      	movs	r3, #7
 800227c:	e00e      	b.n	800229c <HAL_GPIO_Init+0x228>
 800227e:	2308      	movs	r3, #8
 8002280:	e00c      	b.n	800229c <HAL_GPIO_Init+0x228>
 8002282:	2306      	movs	r3, #6
 8002284:	e00a      	b.n	800229c <HAL_GPIO_Init+0x228>
 8002286:	2305      	movs	r3, #5
 8002288:	e008      	b.n	800229c <HAL_GPIO_Init+0x228>
 800228a:	2304      	movs	r3, #4
 800228c:	e006      	b.n	800229c <HAL_GPIO_Init+0x228>
 800228e:	2303      	movs	r3, #3
 8002290:	e004      	b.n	800229c <HAL_GPIO_Init+0x228>
 8002292:	2302      	movs	r3, #2
 8002294:	e002      	b.n	800229c <HAL_GPIO_Init+0x228>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_GPIO_Init+0x228>
 800229a:	2300      	movs	r3, #0
 800229c:	69fa      	ldr	r2, [r7, #28]
 800229e:	f002 0203 	and.w	r2, r2, #3
 80022a2:	0092      	lsls	r2, r2, #2
 80022a4:	4093      	lsls	r3, r2
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022ac:	4935      	ldr	r1, [pc, #212]	@ (8002384 <HAL_GPIO_Init+0x310>)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	089b      	lsrs	r3, r3, #2
 80022b2:	3302      	adds	r3, #2
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ba:	4b3b      	ldr	r3, [pc, #236]	@ (80023a8 <HAL_GPIO_Init+0x334>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022de:	4a32      	ldr	r2, [pc, #200]	@ (80023a8 <HAL_GPIO_Init+0x334>)
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022e4:	4b30      	ldr	r3, [pc, #192]	@ (80023a8 <HAL_GPIO_Init+0x334>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002308:	4a27      	ldr	r2, [pc, #156]	@ (80023a8 <HAL_GPIO_Init+0x334>)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800230e:	4b26      	ldr	r3, [pc, #152]	@ (80023a8 <HAL_GPIO_Init+0x334>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002332:	4a1d      	ldr	r2, [pc, #116]	@ (80023a8 <HAL_GPIO_Init+0x334>)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002338:	4b1b      	ldr	r3, [pc, #108]	@ (80023a8 <HAL_GPIO_Init+0x334>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800235c:	4a12      	ldr	r2, [pc, #72]	@ (80023a8 <HAL_GPIO_Init+0x334>)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3301      	adds	r3, #1
 8002366:	61fb      	str	r3, [r7, #28]
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	2b0f      	cmp	r3, #15
 800236c:	f67f ae90 	bls.w	8002090 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	3724      	adds	r7, #36	@ 0x24
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800
 8002384:	40013800 	.word	0x40013800
 8002388:	40020000 	.word	0x40020000
 800238c:	40020400 	.word	0x40020400
 8002390:	40020800 	.word	0x40020800
 8002394:	40020c00 	.word	0x40020c00
 8002398:	40021000 	.word	0x40021000
 800239c:	40021400 	.word	0x40021400
 80023a0:	40021800 	.word	0x40021800
 80023a4:	40021c00 	.word	0x40021c00
 80023a8:	40013c00 	.word	0x40013c00

080023ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	807b      	strh	r3, [r7, #2]
 80023b8:	4613      	mov	r3, r2
 80023ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023bc:	787b      	ldrb	r3, [r7, #1]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023c2:	887a      	ldrh	r2, [r7, #2]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023c8:	e003      	b.n	80023d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023ca:	887b      	ldrh	r3, [r7, #2]
 80023cc:	041a      	lsls	r2, r3, #16
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	619a      	str	r2, [r3, #24]
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80023ea:	4b08      	ldr	r3, [pc, #32]	@ (800240c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023ec:	695a      	ldr	r2, [r3, #20]
 80023ee:	88fb      	ldrh	r3, [r7, #6]
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d006      	beq.n	8002404 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023f6:	4a05      	ldr	r2, [pc, #20]	@ (800240c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023f8:	88fb      	ldrh	r3, [r7, #6]
 80023fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023fc:	88fb      	ldrh	r3, [r7, #6]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe ff4c 	bl	800129c <HAL_GPIO_EXTI_Callback>
  }
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40013c00 	.word	0x40013c00

08002410 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e12b      	b.n	800267a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d106      	bne.n	800243c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7fe ff6e 	bl	8001318 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2224      	movs	r2, #36	@ 0x24
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0201 	bic.w	r2, r2, #1
 8002452:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002462:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002472:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002474:	f002 fdca 	bl	800500c <HAL_RCC_GetPCLK1Freq>
 8002478:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	4a81      	ldr	r2, [pc, #516]	@ (8002684 <HAL_I2C_Init+0x274>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d807      	bhi.n	8002494 <HAL_I2C_Init+0x84>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4a80      	ldr	r2, [pc, #512]	@ (8002688 <HAL_I2C_Init+0x278>)
 8002488:	4293      	cmp	r3, r2
 800248a:	bf94      	ite	ls
 800248c:	2301      	movls	r3, #1
 800248e:	2300      	movhi	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	e006      	b.n	80024a2 <HAL_I2C_Init+0x92>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4a7d      	ldr	r2, [pc, #500]	@ (800268c <HAL_I2C_Init+0x27c>)
 8002498:	4293      	cmp	r3, r2
 800249a:	bf94      	ite	ls
 800249c:	2301      	movls	r3, #1
 800249e:	2300      	movhi	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e0e7      	b.n	800267a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	4a78      	ldr	r2, [pc, #480]	@ (8002690 <HAL_I2C_Init+0x280>)
 80024ae:	fba2 2303 	umull	r2, r3, r2, r3
 80024b2:	0c9b      	lsrs	r3, r3, #18
 80024b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	4a6a      	ldr	r2, [pc, #424]	@ (8002684 <HAL_I2C_Init+0x274>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d802      	bhi.n	80024e4 <HAL_I2C_Init+0xd4>
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	3301      	adds	r3, #1
 80024e2:	e009      	b.n	80024f8 <HAL_I2C_Init+0xe8>
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80024ea:	fb02 f303 	mul.w	r3, r2, r3
 80024ee:	4a69      	ldr	r2, [pc, #420]	@ (8002694 <HAL_I2C_Init+0x284>)
 80024f0:	fba2 2303 	umull	r2, r3, r2, r3
 80024f4:	099b      	lsrs	r3, r3, #6
 80024f6:	3301      	adds	r3, #1
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6812      	ldr	r2, [r2, #0]
 80024fc:	430b      	orrs	r3, r1
 80024fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800250a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	495c      	ldr	r1, [pc, #368]	@ (8002684 <HAL_I2C_Init+0x274>)
 8002514:	428b      	cmp	r3, r1
 8002516:	d819      	bhi.n	800254c <HAL_I2C_Init+0x13c>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	1e59      	subs	r1, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	fbb1 f3f3 	udiv	r3, r1, r3
 8002526:	1c59      	adds	r1, r3, #1
 8002528:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800252c:	400b      	ands	r3, r1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00a      	beq.n	8002548 <HAL_I2C_Init+0x138>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	1e59      	subs	r1, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002540:	3301      	adds	r3, #1
 8002542:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002546:	e051      	b.n	80025ec <HAL_I2C_Init+0x1dc>
 8002548:	2304      	movs	r3, #4
 800254a:	e04f      	b.n	80025ec <HAL_I2C_Init+0x1dc>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d111      	bne.n	8002578 <HAL_I2C_Init+0x168>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	1e58      	subs	r0, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6859      	ldr	r1, [r3, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	440b      	add	r3, r1
 8002562:	fbb0 f3f3 	udiv	r3, r0, r3
 8002566:	3301      	adds	r3, #1
 8002568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800256c:	2b00      	cmp	r3, #0
 800256e:	bf0c      	ite	eq
 8002570:	2301      	moveq	r3, #1
 8002572:	2300      	movne	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	e012      	b.n	800259e <HAL_I2C_Init+0x18e>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	1e58      	subs	r0, r3, #1
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6859      	ldr	r1, [r3, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	0099      	lsls	r1, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	fbb0 f3f3 	udiv	r3, r0, r3
 800258e:	3301      	adds	r3, #1
 8002590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002594:	2b00      	cmp	r3, #0
 8002596:	bf0c      	ite	eq
 8002598:	2301      	moveq	r3, #1
 800259a:	2300      	movne	r3, #0
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_I2C_Init+0x196>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e022      	b.n	80025ec <HAL_I2C_Init+0x1dc>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10e      	bne.n	80025cc <HAL_I2C_Init+0x1bc>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	1e58      	subs	r0, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6859      	ldr	r1, [r3, #4]
 80025b6:	460b      	mov	r3, r1
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	440b      	add	r3, r1
 80025bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80025c0:	3301      	adds	r3, #1
 80025c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025ca:	e00f      	b.n	80025ec <HAL_I2C_Init+0x1dc>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	1e58      	subs	r0, r3, #1
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6859      	ldr	r1, [r3, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	0099      	lsls	r1, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	fbb0 f3f3 	udiv	r3, r0, r3
 80025e2:	3301      	adds	r3, #1
 80025e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	6809      	ldr	r1, [r1, #0]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69da      	ldr	r2, [r3, #28]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800261a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6911      	ldr	r1, [r2, #16]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	68d2      	ldr	r2, [r2, #12]
 8002626:	4311      	orrs	r1, r2
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6812      	ldr	r2, [r2, #0]
 800262c:	430b      	orrs	r3, r1
 800262e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	695a      	ldr	r2, [r3, #20]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 0201 	orr.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2220      	movs	r2, #32
 8002666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	000186a0 	.word	0x000186a0
 8002688:	001e847f 	.word	0x001e847f
 800268c:	003d08ff 	.word	0x003d08ff
 8002690:	431bde83 	.word	0x431bde83
 8002694:	10624dd3 	.word	0x10624dd3

08002698 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026aa:	2b80      	cmp	r3, #128	@ 0x80
 80026ac:	d103      	bne.n	80026b6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2200      	movs	r2, #0
 80026b4:	611a      	str	r2, [r3, #16]
  }
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	607a      	str	r2, [r7, #4]
 80026ce:	461a      	mov	r2, r3
 80026d0:	460b      	mov	r3, r1
 80026d2:	817b      	strh	r3, [r7, #10]
 80026d4:	4613      	mov	r3, r2
 80026d6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b20      	cmp	r3, #32
 80026e6:	f040 8109 	bne.w	80028fc <HAL_I2C_Master_Transmit_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80026ea:	4b87      	ldr	r3, [pc, #540]	@ (8002908 <HAL_I2C_Master_Transmit_DMA+0x244>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	08db      	lsrs	r3, r3, #3
 80026f0:	4a86      	ldr	r2, [pc, #536]	@ (800290c <HAL_I2C_Master_Transmit_DMA+0x248>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	0a1a      	lsrs	r2, r3, #8
 80026f8:	4613      	mov	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	009a      	lsls	r2, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	3b01      	subs	r3, #1
 8002708:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d112      	bne.n	8002736 <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2220      	movs	r2, #32
 800271a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272a:	f043 0220 	orr.w	r2, r3, #32
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8002732:	2302      	movs	r3, #2
 8002734:	e0e3      	b.n	80028fe <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b02      	cmp	r3, #2
 8002742:	d0df      	beq.n	8002704 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_I2C_Master_Transmit_DMA+0x8e>
 800274e:	2302      	movs	r3, #2
 8002750:	e0d5      	b.n	80028fe <HAL_I2C_Master_Transmit_DMA+0x23a>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b01      	cmp	r3, #1
 8002766:	d007      	beq.n	8002778 <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0201 	orr.w	r2, r2, #1
 8002776:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002786:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2221      	movs	r2, #33	@ 0x21
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2210      	movs	r2, #16
 8002794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	893a      	ldrh	r2, [r7, #8]
 80027a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4a56      	ldr	r2, [pc, #344]	@ (8002910 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 80027b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80027ba:	897a      	ldrh	r2, [r7, #10]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d07b      	beq.n	80028c0 <HAL_I2C_Master_Transmit_DMA+0x1fc>
    {
      if (hi2c->hdmatx != NULL)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d02a      	beq.n	8002826 <HAL_I2C_Master_Transmit_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027d4:	4a4f      	ldr	r2, [pc, #316]	@ (8002914 <HAL_I2C_Master_Transmit_DMA+0x250>)
 80027d6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027dc:	4a4e      	ldr	r2, [pc, #312]	@ (8002918 <HAL_I2C_Master_Transmit_DMA+0x254>)
 80027de:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027e4:	2200      	movs	r2, #0
 80027e6:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ec:	2200      	movs	r2, #0
 80027ee:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027f4:	2200      	movs	r2, #0
 80027f6:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027fc:	2200      	movs	r2, #0
 80027fe:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002808:	4619      	mov	r1, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	3310      	adds	r3, #16
 8002810:	461a      	mov	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002816:	f7ff f92f 	bl	8001a78 <HAL_DMA_Start_IT>
 800281a:	4603      	mov	r3, r0
 800281c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800281e:	7dfb      	ldrb	r3, [r7, #23]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d139      	bne.n	8002898 <HAL_I2C_Master_Transmit_DMA+0x1d4>
 8002824:	e013      	b.n	800284e <HAL_I2C_Master_Transmit_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2220      	movs	r2, #32
 800282a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e057      	b.n	80028fe <HAL_I2C_Master_Transmit_DMA+0x23a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002864:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002874:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002884:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	e02f      	b.n	80028f8 <HAL_I2C_Master_Transmit_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ac:	f043 0210 	orr.w	r2, r3, #16
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e01e      	b.n	80028fe <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028ce:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028de:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80028f6:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80028f8:	2300      	movs	r3, #0
 80028fa:	e000      	b.n	80028fe <HAL_I2C_Master_Transmit_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 80028fc:	2302      	movs	r3, #2
  }
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000000 	.word	0x20000000
 800290c:	14f8b589 	.word	0x14f8b589
 8002910:	ffff0000 	.word	0xffff0000
 8002914:	08004309 	.word	0x08004309
 8002918:	080044c7 	.word	0x080044c7

0800291c <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	607a      	str	r2, [r7, #4]
 8002926:	461a      	mov	r2, r3
 8002928:	460b      	mov	r3, r1
 800292a:	817b      	strh	r3, [r7, #10]
 800292c:	4613      	mov	r3, r2
 800292e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b20      	cmp	r3, #32
 800293e:	f040 8109 	bne.w	8002b54 <HAL_I2C_Master_Receive_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002942:	4b87      	ldr	r3, [pc, #540]	@ (8002b60 <HAL_I2C_Master_Receive_DMA+0x244>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	08db      	lsrs	r3, r3, #3
 8002948:	4a86      	ldr	r2, [pc, #536]	@ (8002b64 <HAL_I2C_Master_Receive_DMA+0x248>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	0a1a      	lsrs	r2, r3, #8
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	009a      	lsls	r2, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	3b01      	subs	r3, #1
 8002960:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d112      	bne.n	800298e <HAL_I2C_Master_Receive_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002982:	f043 0220 	orr.w	r2, r3, #32
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800298a:	2302      	movs	r3, #2
 800298c:	e0e3      	b.n	8002b56 <HAL_I2C_Master_Receive_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b02      	cmp	r3, #2
 800299a:	d0df      	beq.n	800295c <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <HAL_I2C_Master_Receive_DMA+0x8e>
 80029a6:	2302      	movs	r3, #2
 80029a8:	e0d5      	b.n	8002b56 <HAL_I2C_Master_Receive_DMA+0x23a>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d007      	beq.n	80029d0 <HAL_I2C_Master_Receive_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0201 	orr.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2222      	movs	r2, #34	@ 0x22
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2210      	movs	r2, #16
 80029ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	893a      	ldrh	r2, [r7, #8]
 8002a00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4a56      	ldr	r2, [pc, #344]	@ (8002b68 <HAL_I2C_Master_Receive_DMA+0x24c>)
 8002a10:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002a12:	897a      	ldrh	r2, [r7, #10]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d07b      	beq.n	8002b18 <HAL_I2C_Master_Receive_DMA+0x1fc>
    {
      if (hi2c->hdmarx != NULL)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d02a      	beq.n	8002a7e <HAL_I2C_Master_Receive_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a2c:	4a4f      	ldr	r2, [pc, #316]	@ (8002b6c <HAL_I2C_Master_Receive_DMA+0x250>)
 8002a2e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a34:	4a4e      	ldr	r2, [pc, #312]	@ (8002b70 <HAL_I2C_Master_Receive_DMA+0x254>)
 8002a36:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a44:	2200      	movs	r2, #0
 8002a46:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a54:	2200      	movs	r2, #0
 8002a56:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	3310      	adds	r3, #16
 8002a62:	4619      	mov	r1, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a68:	461a      	mov	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a6e:	f7ff f803 	bl	8001a78 <HAL_DMA_Start_IT>
 8002a72:	4603      	mov	r3, r0
 8002a74:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002a76:	7dfb      	ldrb	r3, [r7, #23]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d139      	bne.n	8002af0 <HAL_I2C_Master_Receive_DMA+0x1d4>
 8002a7c:	e013      	b.n	8002aa6 <HAL_I2C_Master_Receive_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2220      	movs	r2, #32
 8002a82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a92:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e057      	b.n	8002b56 <HAL_I2C_Master_Receive_DMA+0x23a>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ab4:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ac4:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002adc:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	e02f      	b.n	8002b50 <HAL_I2C_Master_Receive_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b04:	f043 0210 	orr.w	r2, r3, #16
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e01e      	b.n	8002b56 <HAL_I2C_Master_Receive_DMA+0x23a>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002b2e:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b3e:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b4e:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	e000      	b.n	8002b56 <HAL_I2C_Master_Receive_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8002b54:	2302      	movs	r3, #2
  }
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000000 	.word	0x20000000
 8002b64:	14f8b589 	.word	0x14f8b589
 8002b68:	ffff0000 	.word	0xffff0000
 8002b6c:	08004309 	.word	0x08004309
 8002b70:	080044c7 	.word	0x080044c7

08002b74 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b94:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b9c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	2b10      	cmp	r3, #16
 8002ba2:	d003      	beq.n	8002bac <HAL_I2C_EV_IRQHandler+0x38>
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	2b40      	cmp	r3, #64	@ 0x40
 8002ba8:	f040 80b1 	bne.w	8002d0e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10d      	bne.n	8002be2 <HAL_I2C_EV_IRQHandler+0x6e>
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002bcc:	d003      	beq.n	8002bd6 <HAL_I2C_EV_IRQHandler+0x62>
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002bd4:	d101      	bne.n	8002bda <HAL_I2C_EV_IRQHandler+0x66>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <HAL_I2C_EV_IRQHandler+0x68>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	f000 8114 	beq.w	8002e0a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00b      	beq.n	8002c04 <HAL_I2C_EV_IRQHandler+0x90>
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d006      	beq.n	8002c04 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f001 fd7c 	bl	80046f4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fd66 	bl	80036ce <I2C_Master_SB>
 8002c02:	e083      	b.n	8002d0c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d008      	beq.n	8002c20 <HAL_I2C_EV_IRQHandler+0xac>
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 fdde 	bl	80037da <I2C_Master_ADD10>
 8002c1e:	e075      	b.n	8002d0c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d008      	beq.n	8002c3c <HAL_I2C_EV_IRQHandler+0xc8>
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 fdfa 	bl	800382e <I2C_Master_ADDR>
 8002c3a:	e067      	b.n	8002d0c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d036      	beq.n	8002cb4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c54:	f000 80db 	beq.w	8002e0e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00d      	beq.n	8002c7e <HAL_I2C_EV_IRQHandler+0x10a>
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d008      	beq.n	8002c7e <HAL_I2C_EV_IRQHandler+0x10a>
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d103      	bne.n	8002c7e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f9c2 	bl	8003000 <I2C_MasterTransmit_TXE>
 8002c7c:	e046      	b.n	8002d0c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 80c2 	beq.w	8002e0e <HAL_I2C_EV_IRQHandler+0x29a>
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 80bc 	beq.w	8002e0e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002c96:	7bbb      	ldrb	r3, [r7, #14]
 8002c98:	2b21      	cmp	r3, #33	@ 0x21
 8002c9a:	d103      	bne.n	8002ca4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 fa4b 	bl	8003138 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ca2:	e0b4      	b.n	8002e0e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	2b40      	cmp	r3, #64	@ 0x40
 8002ca8:	f040 80b1 	bne.w	8002e0e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 fab9 	bl	8003224 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cb2:	e0ac      	b.n	8002e0e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cc2:	f000 80a4 	beq.w	8002e0e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00d      	beq.n	8002cec <HAL_I2C_EV_IRQHandler+0x178>
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d008      	beq.n	8002cec <HAL_I2C_EV_IRQHandler+0x178>
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d103      	bne.n	8002cec <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 fb35 	bl	8003354 <I2C_MasterReceive_RXNE>
 8002cea:	e00f      	b.n	8002d0c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f003 0304 	and.w	r3, r3, #4
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 808b 	beq.w	8002e0e <HAL_I2C_EV_IRQHandler+0x29a>
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 8085 	beq.w	8002e0e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 fbed 	bl	80034e4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d0a:	e080      	b.n	8002e0e <HAL_I2C_EV_IRQHandler+0x29a>
 8002d0c:	e07f      	b.n	8002e0e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d004      	beq.n	8002d20 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	61fb      	str	r3, [r7, #28]
 8002d1e:	e007      	b.n	8002d30 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d011      	beq.n	8002d5e <HAL_I2C_EV_IRQHandler+0x1ea>
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00c      	beq.n	8002d5e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002d54:	69b9      	ldr	r1, [r7, #24]
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 ffb8 	bl	8003ccc <I2C_Slave_ADDR>
 8002d5c:	e05a      	b.n	8002e14 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d008      	beq.n	8002d7a <HAL_I2C_EV_IRQHandler+0x206>
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 fff2 	bl	8003d5c <I2C_Slave_STOPF>
 8002d78:	e04c      	b.n	8002e14 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d7a:	7bbb      	ldrb	r3, [r7, #14]
 8002d7c:	2b21      	cmp	r3, #33	@ 0x21
 8002d7e:	d002      	beq.n	8002d86 <HAL_I2C_EV_IRQHandler+0x212>
 8002d80:	7bbb      	ldrb	r3, [r7, #14]
 8002d82:	2b29      	cmp	r3, #41	@ 0x29
 8002d84:	d120      	bne.n	8002dc8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00d      	beq.n	8002dac <HAL_I2C_EV_IRQHandler+0x238>
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d008      	beq.n	8002dac <HAL_I2C_EV_IRQHandler+0x238>
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d103      	bne.n	8002dac <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 fed3 	bl	8003b50 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002daa:	e032      	b.n	8002e12 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d02d      	beq.n	8002e12 <HAL_I2C_EV_IRQHandler+0x29e>
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d028      	beq.n	8002e12 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 ff02 	bl	8003bca <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002dc6:	e024      	b.n	8002e12 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00d      	beq.n	8002dee <HAL_I2C_EV_IRQHandler+0x27a>
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_I2C_EV_IRQHandler+0x27a>
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d103      	bne.n	8002dee <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 ff10 	bl	8003c0c <I2C_SlaveReceive_RXNE>
 8002dec:	e012      	b.n	8002e14 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00d      	beq.n	8002e14 <HAL_I2C_EV_IRQHandler+0x2a0>
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d008      	beq.n	8002e14 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 ff40 	bl	8003c88 <I2C_SlaveReceive_BTF>
 8002e08:	e004      	b.n	8002e14 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002e0a:	bf00      	nop
 8002e0c:	e002      	b.n	8002e14 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e0e:	bf00      	nop
 8002e10:	e000      	b.n	8002e14 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e12:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002e14:	3720      	adds	r7, #32
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b08a      	sub	sp, #40	@ 0x28
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002e32:	2300      	movs	r3, #0
 8002e34:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e3c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00d      	beq.n	8002e64 <HAL_I2C_ER_IRQHandler+0x4a>
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d008      	beq.n	8002e64 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002e62:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00d      	beq.n	8002e8a <HAL_I2C_ER_IRQHandler+0x70>
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d008      	beq.n	8002e8a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7a:	f043 0302 	orr.w	r3, r3, #2
 8002e7e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002e88:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d03e      	beq.n	8002f12 <HAL_I2C_ER_IRQHandler+0xf8>
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d039      	beq.n	8002f12 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8002e9e:	7efb      	ldrb	r3, [r7, #27]
 8002ea0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eb0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002eb8:	7ebb      	ldrb	r3, [r7, #26]
 8002eba:	2b20      	cmp	r3, #32
 8002ebc:	d112      	bne.n	8002ee4 <HAL_I2C_ER_IRQHandler+0xca>
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10f      	bne.n	8002ee4 <HAL_I2C_ER_IRQHandler+0xca>
 8002ec4:	7cfb      	ldrb	r3, [r7, #19]
 8002ec6:	2b21      	cmp	r3, #33	@ 0x21
 8002ec8:	d008      	beq.n	8002edc <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002eca:	7cfb      	ldrb	r3, [r7, #19]
 8002ecc:	2b29      	cmp	r3, #41	@ 0x29
 8002ece:	d005      	beq.n	8002edc <HAL_I2C_ER_IRQHandler+0xc2>
 8002ed0:	7cfb      	ldrb	r3, [r7, #19]
 8002ed2:	2b28      	cmp	r3, #40	@ 0x28
 8002ed4:	d106      	bne.n	8002ee4 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2b21      	cmp	r3, #33	@ 0x21
 8002eda:	d103      	bne.n	8002ee4 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f001 f86d 	bl	8003fbc <I2C_Slave_AF>
 8002ee2:	e016      	b.n	8002f12 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002eec:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef0:	f043 0304 	orr.w	r3, r3, #4
 8002ef4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002ef6:	7efb      	ldrb	r3, [r7, #27]
 8002ef8:	2b10      	cmp	r3, #16
 8002efa:	d002      	beq.n	8002f02 <HAL_I2C_ER_IRQHandler+0xe8>
 8002efc:	7efb      	ldrb	r3, [r7, #27]
 8002efe:	2b40      	cmp	r3, #64	@ 0x40
 8002f00:	d107      	bne.n	8002f12 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f10:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00d      	beq.n	8002f38 <HAL_I2C_ER_IRQHandler+0x11e>
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d008      	beq.n	8002f38 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f28:	f043 0308 	orr.w	r3, r3, #8
 8002f2c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002f36:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d008      	beq.n	8002f50 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f44:	431a      	orrs	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f001 f8aa 	bl	80040a4 <I2C_ITError>
  }
}
 8002f50:	bf00      	nop
 8002f52:	3728      	adds	r7, #40	@ 0x28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	70fb      	strb	r3, [r7, #3]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800300e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003016:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003022:	2b00      	cmp	r3, #0
 8003024:	d150      	bne.n	80030c8 <I2C_MasterTransmit_TXE+0xc8>
 8003026:	7bfb      	ldrb	r3, [r7, #15]
 8003028:	2b21      	cmp	r3, #33	@ 0x21
 800302a:	d14d      	bne.n	80030c8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2b08      	cmp	r3, #8
 8003030:	d01d      	beq.n	800306e <I2C_MasterTransmit_TXE+0x6e>
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b20      	cmp	r3, #32
 8003036:	d01a      	beq.n	800306e <I2C_MasterTransmit_TXE+0x6e>
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800303e:	d016      	beq.n	800306e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800304e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2211      	movs	r2, #17
 8003054:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7fd fbb8 	bl	80007dc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800306c:	e060      	b.n	8003130 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800307c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800308c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b40      	cmp	r3, #64	@ 0x40
 80030a6:	d107      	bne.n	80030b8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff ff7d 	bl	8002fb0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030b6:	e03b      	b.n	8003130 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7fd fb8b 	bl	80007dc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030c6:	e033      	b.n	8003130 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	2b21      	cmp	r3, #33	@ 0x21
 80030cc:	d005      	beq.n	80030da <I2C_MasterTransmit_TXE+0xda>
 80030ce:	7bbb      	ldrb	r3, [r7, #14]
 80030d0:	2b40      	cmp	r3, #64	@ 0x40
 80030d2:	d12d      	bne.n	8003130 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
 80030d6:	2b22      	cmp	r3, #34	@ 0x22
 80030d8:	d12a      	bne.n	8003130 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d108      	bne.n	80030f6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030f2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80030f4:	e01c      	b.n	8003130 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b40      	cmp	r3, #64	@ 0x40
 8003100:	d103      	bne.n	800310a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f88e 	bl	8003224 <I2C_MemoryTransmit_TXE_BTF>
}
 8003108:	e012      	b.n	8003130 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310e:	781a      	ldrb	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311a:	1c5a      	adds	r2, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003124:	b29b      	uxth	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800312e:	e7ff      	b.n	8003130 <I2C_MasterTransmit_TXE+0x130>
 8003130:	bf00      	nop
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003144:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b21      	cmp	r3, #33	@ 0x21
 8003150:	d164      	bne.n	800321c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003156:	b29b      	uxth	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	d012      	beq.n	8003182 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003160:	781a      	ldrb	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003176:	b29b      	uxth	r3, r3
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003180:	e04c      	b.n	800321c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d01d      	beq.n	80031c4 <I2C_MasterTransmit_BTF+0x8c>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2b20      	cmp	r3, #32
 800318c:	d01a      	beq.n	80031c4 <I2C_MasterTransmit_BTF+0x8c>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003194:	d016      	beq.n	80031c4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80031a4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2211      	movs	r2, #17
 80031aa:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7fd fb0d 	bl	80007dc <HAL_I2C_MasterTxCpltCallback>
}
 80031c2:	e02b      	b.n	800321c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80031d2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031e2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b40      	cmp	r3, #64	@ 0x40
 80031fc:	d107      	bne.n	800320e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7ff fed2 	bl	8002fb0 <HAL_I2C_MemTxCpltCallback>
}
 800320c:	e006      	b.n	800321c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7fd fae0 	bl	80007dc <HAL_I2C_MasterTxCpltCallback>
}
 800321c:	bf00      	nop
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003232:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003238:	2b00      	cmp	r3, #0
 800323a:	d11d      	bne.n	8003278 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003240:	2b01      	cmp	r3, #1
 8003242:	d10b      	bne.n	800325c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003248:	b2da      	uxtb	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003254:	1c9a      	adds	r2, r3, #2
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800325a:	e077      	b.n	800334c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003260:	b29b      	uxth	r3, r3
 8003262:	121b      	asrs	r3, r3, #8
 8003264:	b2da      	uxtb	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003276:	e069      	b.n	800334c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800327c:	2b01      	cmp	r3, #1
 800327e:	d10b      	bne.n	8003298 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003284:	b2da      	uxtb	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003296:	e059      	b.n	800334c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800329c:	2b02      	cmp	r3, #2
 800329e:	d152      	bne.n	8003346 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	2b22      	cmp	r3, #34	@ 0x22
 80032a4:	d10d      	bne.n	80032c2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032b4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80032c0:	e044      	b.n	800334c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d015      	beq.n	80032f8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
 80032ce:	2b21      	cmp	r3, #33	@ 0x21
 80032d0:	d112      	bne.n	80032f8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d6:	781a      	ldrb	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80032f6:	e029      	b.n	800334c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d124      	bne.n	800334c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003302:	7bfb      	ldrb	r3, [r7, #15]
 8003304:	2b21      	cmp	r3, #33	@ 0x21
 8003306:	d121      	bne.n	800334c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003316:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003326:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2220      	movs	r2, #32
 8003332:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff fe36 	bl	8002fb0 <HAL_I2C_MemTxCpltCallback>
}
 8003344:	e002      	b.n	800334c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7ff f9a6 	bl	8002698 <I2C_Flush_DR>
}
 800334c:	bf00      	nop
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b22      	cmp	r3, #34	@ 0x22
 8003366:	f040 80b9 	bne.w	80034dc <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800336e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003374:	b29b      	uxth	r3, r3
 8003376:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	2b03      	cmp	r3, #3
 800337c:	d921      	bls.n	80033c2 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003388:	b2d2      	uxtb	r2, r2
 800338a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800339a:	b29b      	uxth	r3, r3
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2b03      	cmp	r3, #3
 80033ac:	f040 8096 	bne.w	80034dc <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033be:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80033c0:	e08c      	b.n	80034dc <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d07f      	beq.n	80034ca <I2C_MasterReceive_RXNE+0x176>
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d002      	beq.n	80033d6 <I2C_MasterReceive_RXNE+0x82>
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d179      	bne.n	80034ca <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f001 f95a 	bl	8004690 <I2C_WaitOnSTOPRequestThroughIT>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d14c      	bne.n	800347c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033f0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003400:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	691a      	ldr	r2, [r3, #16]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800341e:	b29b      	uxth	r3, r3
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b40      	cmp	r3, #64	@ 0x40
 800343a:	d10a      	bne.n	8003452 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7ff fdba 	bl	8002fc4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003450:	e044      	b.n	80034dc <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2b08      	cmp	r3, #8
 800345e:	d002      	beq.n	8003466 <I2C_MasterReceive_RXNE+0x112>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b20      	cmp	r3, #32
 8003464:	d103      	bne.n	800346e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	631a      	str	r2, [r3, #48]	@ 0x30
 800346c:	e002      	b.n	8003474 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2212      	movs	r2, #18
 8003472:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7fd f9db 	bl	8000830 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800347a:	e02f      	b.n	80034dc <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800348a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691a      	ldr	r2, [r3, #16]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	3b01      	subs	r3, #1
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7ff fd88 	bl	8002fd8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80034c8:	e008      	b.n	80034dc <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034d8:	605a      	str	r2, [r3, #4]
}
 80034da:	e7ff      	b.n	80034dc <I2C_MasterReceive_RXNE+0x188>
 80034dc:	bf00      	nop
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d11b      	bne.n	8003534 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800350a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691a      	ldr	r2, [r3, #16]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003532:	e0c8      	b.n	80036c6 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003538:	b29b      	uxth	r3, r3
 800353a:	2b03      	cmp	r3, #3
 800353c:	d129      	bne.n	8003592 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800354c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2b04      	cmp	r3, #4
 8003552:	d00a      	beq.n	800356a <I2C_MasterReceive_BTF+0x86>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b02      	cmp	r3, #2
 8003558:	d007      	beq.n	800356a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003568:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	691a      	ldr	r2, [r3, #16]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003574:	b2d2      	uxtb	r2, r2
 8003576:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003586:	b29b      	uxth	r3, r3
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003590:	e099      	b.n	80036c6 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003596:	b29b      	uxth	r3, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	f040 8081 	bne.w	80036a0 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d002      	beq.n	80035aa <I2C_MasterReceive_BTF+0xc6>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2b10      	cmp	r3, #16
 80035a8:	d108      	bne.n	80035bc <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	e019      	b.n	80035f0 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d002      	beq.n	80035c8 <I2C_MasterReceive_BTF+0xe4>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d108      	bne.n	80035da <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	e00a      	b.n	80035f0 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2b10      	cmp	r3, #16
 80035de:	d007      	beq.n	80035f0 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035ee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691a      	ldr	r2, [r3, #16]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003632:	b29b      	uxth	r3, r3
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800364a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b40      	cmp	r3, #64	@ 0x40
 800365e:	d10a      	bne.n	8003676 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff fca8 	bl	8002fc4 <HAL_I2C_MemRxCpltCallback>
}
 8003674:	e027      	b.n	80036c6 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2b08      	cmp	r3, #8
 8003682:	d002      	beq.n	800368a <I2C_MasterReceive_BTF+0x1a6>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2b20      	cmp	r3, #32
 8003688:	d103      	bne.n	8003692 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003690:	e002      	b.n	8003698 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2212      	movs	r2, #18
 8003696:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7fd f8c9 	bl	8000830 <HAL_I2C_MasterRxCpltCallback>
}
 800369e:	e012      	b.n	80036c6 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691a      	ldr	r2, [r3, #16]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036bc:	b29b      	uxth	r3, r3
 80036be:	3b01      	subs	r3, #1
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80036c6:	bf00      	nop
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b40      	cmp	r3, #64	@ 0x40
 80036e0:	d117      	bne.n	8003712 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d109      	bne.n	80036fe <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	461a      	mov	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80036fa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80036fc:	e067      	b.n	80037ce <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003702:	b2db      	uxtb	r3, r3
 8003704:	f043 0301 	orr.w	r3, r3, #1
 8003708:	b2da      	uxtb	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	611a      	str	r2, [r3, #16]
}
 8003710:	e05d      	b.n	80037ce <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800371a:	d133      	bne.n	8003784 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b21      	cmp	r3, #33	@ 0x21
 8003726:	d109      	bne.n	800373c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372c:	b2db      	uxtb	r3, r3
 800372e:	461a      	mov	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003738:	611a      	str	r2, [r3, #16]
 800373a:	e008      	b.n	800374e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003740:	b2db      	uxtb	r3, r3
 8003742:	f043 0301 	orr.w	r3, r3, #1
 8003746:	b2da      	uxtb	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003752:	2b00      	cmp	r3, #0
 8003754:	d004      	beq.n	8003760 <I2C_Master_SB+0x92>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800375a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800375c:	2b00      	cmp	r3, #0
 800375e:	d108      	bne.n	8003772 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003764:	2b00      	cmp	r3, #0
 8003766:	d032      	beq.n	80037ce <I2C_Master_SB+0x100>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800376c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800376e:	2b00      	cmp	r3, #0
 8003770:	d02d      	beq.n	80037ce <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003780:	605a      	str	r2, [r3, #4]
}
 8003782:	e024      	b.n	80037ce <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10e      	bne.n	80037aa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003790:	b29b      	uxth	r3, r3
 8003792:	11db      	asrs	r3, r3, #7
 8003794:	b2db      	uxtb	r3, r3
 8003796:	f003 0306 	and.w	r3, r3, #6
 800379a:	b2db      	uxtb	r3, r3
 800379c:	f063 030f 	orn	r3, r3, #15
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	611a      	str	r2, [r3, #16]
}
 80037a8:	e011      	b.n	80037ce <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d10d      	bne.n	80037ce <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	11db      	asrs	r3, r3, #7
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	f003 0306 	and.w	r3, r3, #6
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	f063 030e 	orn	r3, r3, #14
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	611a      	str	r2, [r3, #16]
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d004      	beq.n	8003800 <I2C_Master_ADD10+0x26>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d108      	bne.n	8003812 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00c      	beq.n	8003822 <I2C_Master_ADD10+0x48>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800380e:	2b00      	cmp	r3, #0
 8003810:	d007      	beq.n	8003822 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003820:	605a      	str	r2, [r3, #4]
  }
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800382e:	b480      	push	{r7}
 8003830:	b091      	sub	sp, #68	@ 0x44
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800383c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003844:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b22      	cmp	r3, #34	@ 0x22
 8003856:	f040 8169 	bne.w	8003b2c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10f      	bne.n	8003882 <I2C_Master_ADDR+0x54>
 8003862:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003866:	2b40      	cmp	r3, #64	@ 0x40
 8003868:	d10b      	bne.n	8003882 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800386a:	2300      	movs	r3, #0
 800386c:	633b      	str	r3, [r7, #48]	@ 0x30
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	633b      	str	r3, [r7, #48]	@ 0x30
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	633b      	str	r3, [r7, #48]	@ 0x30
 800387e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003880:	e160      	b.n	8003b44 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003886:	2b00      	cmp	r3, #0
 8003888:	d11d      	bne.n	80038c6 <I2C_Master_ADDR+0x98>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003892:	d118      	bne.n	80038c6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003894:	2300      	movs	r3, #0
 8003896:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038b8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038be:	1c5a      	adds	r2, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	651a      	str	r2, [r3, #80]	@ 0x50
 80038c4:	e13e      	b.n	8003b44 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d113      	bne.n	80038f8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d0:	2300      	movs	r3, #0
 80038d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	e115      	b.n	8003b24 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b01      	cmp	r3, #1
 8003900:	f040 808a 	bne.w	8003a18 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003906:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800390a:	d137      	bne.n	800397c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800391a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003926:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800392a:	d113      	bne.n	8003954 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800393a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800393c:	2300      	movs	r3, #0
 800393e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	627b      	str	r3, [r7, #36]	@ 0x24
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003952:	e0e7      	b.n	8003b24 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003954:	2300      	movs	r3, #0
 8003956:	623b      	str	r3, [r7, #32]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	623b      	str	r3, [r7, #32]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	623b      	str	r3, [r7, #32]
 8003968:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	e0d3      	b.n	8003b24 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800397c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800397e:	2b08      	cmp	r3, #8
 8003980:	d02e      	beq.n	80039e0 <I2C_Master_ADDR+0x1b2>
 8003982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003984:	2b20      	cmp	r3, #32
 8003986:	d02b      	beq.n	80039e0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800398a:	2b12      	cmp	r3, #18
 800398c:	d102      	bne.n	8003994 <I2C_Master_ADDR+0x166>
 800398e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003990:	2b01      	cmp	r3, #1
 8003992:	d125      	bne.n	80039e0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003996:	2b04      	cmp	r3, #4
 8003998:	d00e      	beq.n	80039b8 <I2C_Master_ADDR+0x18a>
 800399a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800399c:	2b02      	cmp	r3, #2
 800399e:	d00b      	beq.n	80039b8 <I2C_Master_ADDR+0x18a>
 80039a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a2:	2b10      	cmp	r3, #16
 80039a4:	d008      	beq.n	80039b8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	e007      	b.n	80039c8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039c6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039c8:	2300      	movs	r3, #0
 80039ca:	61fb      	str	r3, [r7, #28]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	61fb      	str	r3, [r7, #28]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	61fb      	str	r3, [r7, #28]
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	e0a1      	b.n	8003b24 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039ee:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f0:	2300      	movs	r3, #0
 80039f2:	61bb      	str	r3, [r7, #24]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	61bb      	str	r3, [r7, #24]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	61bb      	str	r3, [r7, #24]
 8003a04:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	e085      	b.n	8003b24 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d14d      	bne.n	8003abe <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d016      	beq.n	8003a56 <I2C_Master_ADDR+0x228>
 8003a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d013      	beq.n	8003a56 <I2C_Master_ADDR+0x228>
 8003a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a30:	2b10      	cmp	r3, #16
 8003a32:	d010      	beq.n	8003a56 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a42:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	e007      	b.n	8003a66 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a64:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a74:	d117      	bne.n	8003aa6 <I2C_Master_ADDR+0x278>
 8003a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a78:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a7c:	d00b      	beq.n	8003a96 <I2C_Master_ADDR+0x268>
 8003a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d008      	beq.n	8003a96 <I2C_Master_ADDR+0x268>
 8003a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d005      	beq.n	8003a96 <I2C_Master_ADDR+0x268>
 8003a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a8c:	2b10      	cmp	r3, #16
 8003a8e:	d002      	beq.n	8003a96 <I2C_Master_ADDR+0x268>
 8003a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a92:	2b20      	cmp	r3, #32
 8003a94:	d107      	bne.n	8003aa6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003aa4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	617b      	str	r3, [r7, #20]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	617b      	str	r3, [r7, #20]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	617b      	str	r3, [r7, #20]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	e032      	b.n	8003b24 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003acc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ad8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003adc:	d117      	bne.n	8003b0e <I2C_Master_ADDR+0x2e0>
 8003ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ae4:	d00b      	beq.n	8003afe <I2C_Master_ADDR+0x2d0>
 8003ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d008      	beq.n	8003afe <I2C_Master_ADDR+0x2d0>
 8003aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d005      	beq.n	8003afe <I2C_Master_ADDR+0x2d0>
 8003af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af4:	2b10      	cmp	r3, #16
 8003af6:	d002      	beq.n	8003afe <I2C_Master_ADDR+0x2d0>
 8003af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003afa:	2b20      	cmp	r3, #32
 8003afc:	d107      	bne.n	8003b0e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b0c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b0e:	2300      	movs	r3, #0
 8003b10:	613b      	str	r3, [r7, #16]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	613b      	str	r3, [r7, #16]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	613b      	str	r3, [r7, #16]
 8003b22:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003b2a:	e00b      	b.n	8003b44 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	68fb      	ldr	r3, [r7, #12]
}
 8003b42:	e7ff      	b.n	8003b44 <I2C_Master_ADDR+0x316>
 8003b44:	bf00      	nop
 8003b46:	3744      	adds	r7, #68	@ 0x44
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b5e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d02b      	beq.n	8003bc2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6e:	781a      	ldrb	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7a:	1c5a      	adds	r2, r3, #1
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d114      	bne.n	8003bc2 <I2C_SlaveTransmit_TXE+0x72>
 8003b98:	7bfb      	ldrb	r3, [r7, #15]
 8003b9a:	2b29      	cmp	r3, #41	@ 0x29
 8003b9c:	d111      	bne.n	8003bc2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2221      	movs	r2, #33	@ 0x21
 8003bb2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2228      	movs	r2, #40	@ 0x28
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7ff f9cb 	bl	8002f58 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d011      	beq.n	8003c00 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be0:	781a      	ldrb	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c1a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d02c      	beq.n	8003c80 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d114      	bne.n	8003c80 <I2C_SlaveReceive_RXNE+0x74>
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
 8003c58:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c5a:	d111      	bne.n	8003c80 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c6a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2222      	movs	r2, #34	@ 0x22
 8003c70:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2228      	movs	r2, #40	@ 0x28
 8003c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff f976 	bl	8002f6c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003c80:	bf00      	nop
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d012      	beq.n	8003cc0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca4:	b2d2      	uxtb	r2, r2
 8003ca6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003ce6:	2b28      	cmp	r3, #40	@ 0x28
 8003ce8:	d125      	bne.n	8003d36 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cf8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003d04:	2301      	movs	r3, #1
 8003d06:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d103      	bne.n	8003d1a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	81bb      	strh	r3, [r7, #12]
 8003d18:	e002      	b.n	8003d20 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003d28:	89ba      	ldrh	r2, [r7, #12]
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7ff f926 	bl	8002f80 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003d34:	e00e      	b.n	8003d54 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d36:	2300      	movs	r3, #0
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	60bb      	str	r3, [r7, #8]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003d54:	bf00      	nop
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d6a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d7a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60bb      	str	r3, [r7, #8]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	60bb      	str	r3, [r7, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0201 	orr.w	r2, r2, #1
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003da8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003db4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003db8:	d172      	bne.n	8003ea0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003dba:	7bfb      	ldrb	r3, [r7, #15]
 8003dbc:	2b22      	cmp	r3, #34	@ 0x22
 8003dbe:	d002      	beq.n	8003dc6 <I2C_Slave_STOPF+0x6a>
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
 8003dc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003dc4:	d135      	bne.n	8003e32 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d005      	beq.n	8003dea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de2:	f043 0204 	orr.w	r2, r3, #4
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003df8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fe f83e 	bl	8001e80 <HAL_DMA_GetState>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d049      	beq.n	8003e9e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e0e:	4a69      	ldr	r2, [pc, #420]	@ (8003fb4 <I2C_Slave_STOPF+0x258>)
 8003e10:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fd fe86 	bl	8001b28 <HAL_DMA_Abort_IT>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d03d      	beq.n	8003e9e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e30:	e035      	b.n	8003e9e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d005      	beq.n	8003e56 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4e:	f043 0204 	orr.w	r2, r3, #4
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e64:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fe f808 	bl	8001e80 <HAL_DMA_GetState>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d014      	beq.n	8003ea0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e7a:	4a4e      	ldr	r2, [pc, #312]	@ (8003fb4 <I2C_Slave_STOPF+0x258>)
 8003e7c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fd fe50 	bl	8001b28 <HAL_DMA_Abort_IT>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d008      	beq.n	8003ea0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003e98:	4610      	mov	r0, r2
 8003e9a:	4798      	blx	r3
 8003e9c:	e000      	b.n	8003ea0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e9e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d03e      	beq.n	8003f28 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d112      	bne.n	8003ede <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	691a      	ldr	r2, [r3, #16]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee8:	2b40      	cmp	r3, #64	@ 0x40
 8003eea:	d112      	bne.n	8003f12 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691a      	ldr	r2, [r3, #16]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f20:	f043 0204 	orr.w	r2, r3, #4
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f8b7 	bl	80040a4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003f36:	e039      	b.n	8003fac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003f38:	7bfb      	ldrb	r3, [r7, #15]
 8003f3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f3c:	d109      	bne.n	8003f52 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2228      	movs	r2, #40	@ 0x28
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7ff f80d 	bl	8002f6c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b28      	cmp	r3, #40	@ 0x28
 8003f5c:	d111      	bne.n	8003f82 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a15      	ldr	r2, [pc, #84]	@ (8003fb8 <I2C_Slave_STOPF+0x25c>)
 8003f62:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7ff f80e 	bl	8002f9c <HAL_I2C_ListenCpltCallback>
}
 8003f80:	e014      	b.n	8003fac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f86:	2b22      	cmp	r3, #34	@ 0x22
 8003f88:	d002      	beq.n	8003f90 <I2C_Slave_STOPF+0x234>
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
 8003f8c:	2b22      	cmp	r3, #34	@ 0x22
 8003f8e:	d10d      	bne.n	8003fac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7fe ffe0 	bl	8002f6c <HAL_I2C_SlaveRxCpltCallback>
}
 8003fac:	bf00      	nop
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	08004541 	.word	0x08004541
 8003fb8:	ffff0000 	.word	0xffff0000

08003fbc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fca:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	d002      	beq.n	8003fde <I2C_Slave_AF+0x22>
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b20      	cmp	r3, #32
 8003fdc:	d129      	bne.n	8004032 <I2C_Slave_AF+0x76>
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
 8003fe0:	2b28      	cmp	r3, #40	@ 0x28
 8003fe2:	d126      	bne.n	8004032 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a2e      	ldr	r2, [pc, #184]	@ (80040a0 <I2C_Slave_AF+0xe4>)
 8003fe8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ff8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004002:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004012:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2220      	movs	r2, #32
 800401e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7fe ffb6 	bl	8002f9c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004030:	e031      	b.n	8004096 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004032:	7bfb      	ldrb	r3, [r7, #15]
 8004034:	2b21      	cmp	r3, #33	@ 0x21
 8004036:	d129      	bne.n	800408c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a19      	ldr	r2, [pc, #100]	@ (80040a0 <I2C_Slave_AF+0xe4>)
 800403c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2221      	movs	r2, #33	@ 0x21
 8004042:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004062:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800406c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800407c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fe fb0a 	bl	8002698 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7fe ff67 	bl	8002f58 <HAL_I2C_SlaveTxCpltCallback>
}
 800408a:	e004      	b.n	8004096 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004094:	615a      	str	r2, [r3, #20]
}
 8004096:	bf00      	nop
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	ffff0000 	.word	0xffff0000

080040a4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80040bc:	7bbb      	ldrb	r3, [r7, #14]
 80040be:	2b10      	cmp	r3, #16
 80040c0:	d002      	beq.n	80040c8 <I2C_ITError+0x24>
 80040c2:	7bbb      	ldrb	r3, [r7, #14]
 80040c4:	2b40      	cmp	r3, #64	@ 0x40
 80040c6:	d10a      	bne.n	80040de <I2C_ITError+0x3a>
 80040c8:	7bfb      	ldrb	r3, [r7, #15]
 80040ca:	2b22      	cmp	r3, #34	@ 0x22
 80040cc:	d107      	bne.n	80040de <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040dc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80040de:	7bfb      	ldrb	r3, [r7, #15]
 80040e0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80040e4:	2b28      	cmp	r3, #40	@ 0x28
 80040e6:	d107      	bne.n	80040f8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2228      	movs	r2, #40	@ 0x28
 80040f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80040f6:	e015      	b.n	8004124 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004102:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004106:	d00a      	beq.n	800411e <I2C_ITError+0x7a>
 8004108:	7bfb      	ldrb	r3, [r7, #15]
 800410a:	2b60      	cmp	r3, #96	@ 0x60
 800410c:	d007      	beq.n	800411e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2220      	movs	r2, #32
 8004112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800412e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004132:	d162      	bne.n	80041fa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004142:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004148:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b01      	cmp	r3, #1
 8004150:	d020      	beq.n	8004194 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004156:	4a6a      	ldr	r2, [pc, #424]	@ (8004300 <I2C_ITError+0x25c>)
 8004158:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800415e:	4618      	mov	r0, r3
 8004160:	f7fd fce2 	bl	8001b28 <HAL_DMA_Abort_IT>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 8089 	beq.w	800427e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0201 	bic.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2220      	movs	r2, #32
 8004180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800418e:	4610      	mov	r0, r2
 8004190:	4798      	blx	r3
 8004192:	e074      	b.n	800427e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004198:	4a59      	ldr	r2, [pc, #356]	@ (8004300 <I2C_ITError+0x25c>)
 800419a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fd fcc1 	bl	8001b28 <HAL_DMA_Abort_IT>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d068      	beq.n	800427e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b6:	2b40      	cmp	r3, #64	@ 0x40
 80041b8:	d10b      	bne.n	80041d2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c4:	b2d2      	uxtb	r2, r2
 80041c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0201 	bic.w	r2, r2, #1
 80041e0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2220      	movs	r2, #32
 80041e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80041f4:	4610      	mov	r0, r2
 80041f6:	4798      	blx	r3
 80041f8:	e041      	b.n	800427e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b60      	cmp	r3, #96	@ 0x60
 8004204:	d125      	bne.n	8004252 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2220      	movs	r2, #32
 800420a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800421e:	2b40      	cmp	r3, #64	@ 0x40
 8004220:	d10b      	bne.n	800423a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422c:	b2d2      	uxtb	r2, r2
 800422e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004234:	1c5a      	adds	r2, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0201 	bic.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7fe fece 	bl	8002fec <HAL_I2C_AbortCpltCallback>
 8004250:	e015      	b.n	800427e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800425c:	2b40      	cmp	r3, #64	@ 0x40
 800425e:	d10b      	bne.n	8004278 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	691a      	ldr	r2, [r3, #16]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7fe fead 	bl	8002fd8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004282:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10e      	bne.n	80042ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004294:	2b00      	cmp	r3, #0
 8004296:	d109      	bne.n	80042ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d104      	bne.n	80042ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d007      	beq.n	80042bc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80042ba:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042c2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d113      	bne.n	80042f8 <I2C_ITError+0x254>
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
 80042d2:	2b28      	cmp	r3, #40	@ 0x28
 80042d4:	d110      	bne.n	80042f8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a0a      	ldr	r2, [pc, #40]	@ (8004304 <I2C_ITError+0x260>)
 80042da:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7fe fe52 	bl	8002f9c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80042f8:	bf00      	nop
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	08004541 	.word	0x08004541
 8004304:	ffff0000 	.word	0xffff0000

08004308 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004314:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800431c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004324:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800432a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800433a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004348:	2200      	movs	r2, #0
 800434a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004358:	2200      	movs	r2, #0
 800435a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800435c:	7cfb      	ldrb	r3, [r7, #19]
 800435e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8004362:	2b21      	cmp	r3, #33	@ 0x21
 8004364:	d007      	beq.n	8004376 <I2C_DMAXferCplt+0x6e>
 8004366:	7cfb      	ldrb	r3, [r7, #19]
 8004368:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 800436c:	2b22      	cmp	r3, #34	@ 0x22
 800436e:	d131      	bne.n	80043d4 <I2C_DMAXferCplt+0xcc>
 8004370:	7cbb      	ldrb	r3, [r7, #18]
 8004372:	2b20      	cmp	r3, #32
 8004374:	d12e      	bne.n	80043d4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004384:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2200      	movs	r2, #0
 800438a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800438c:	7cfb      	ldrb	r3, [r7, #19]
 800438e:	2b29      	cmp	r3, #41	@ 0x29
 8004390:	d10a      	bne.n	80043a8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2221      	movs	r2, #33	@ 0x21
 8004396:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2228      	movs	r2, #40	@ 0x28
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80043a0:	6978      	ldr	r0, [r7, #20]
 80043a2:	f7fe fdd9 	bl	8002f58 <HAL_I2C_SlaveTxCpltCallback>
 80043a6:	e00c      	b.n	80043c2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80043a8:	7cfb      	ldrb	r3, [r7, #19]
 80043aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80043ac:	d109      	bne.n	80043c2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2222      	movs	r2, #34	@ 0x22
 80043b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	2228      	movs	r2, #40	@ 0x28
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043bc:	6978      	ldr	r0, [r7, #20]
 80043be:	f7fe fdd5 	bl	8002f6c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80043d0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80043d2:	e074      	b.n	80044be <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d06e      	beq.n	80044be <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d107      	bne.n	80043fa <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043f8:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004408:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004410:	d009      	beq.n	8004426 <I2C_DMAXferCplt+0x11e>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2b08      	cmp	r3, #8
 8004416:	d006      	beq.n	8004426 <I2C_DMAXferCplt+0x11e>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800441e:	d002      	beq.n	8004426 <I2C_DMAXferCplt+0x11e>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2b20      	cmp	r3, #32
 8004424:	d107      	bne.n	8004436 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004434:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004444:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004454:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2200      	movs	r2, #0
 800445a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004464:	6978      	ldr	r0, [r7, #20]
 8004466:	f7fe fdb7 	bl	8002fd8 <HAL_I2C_ErrorCallback>
}
 800446a:	e028      	b.n	80044be <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	2220      	movs	r2, #32
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b40      	cmp	r3, #64	@ 0x40
 800447e:	d10a      	bne.n	8004496 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	2200      	movs	r2, #0
 800448c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800448e:	6978      	ldr	r0, [r7, #20]
 8004490:	f7fe fd98 	bl	8002fc4 <HAL_I2C_MemRxCpltCallback>
}
 8004494:	e013      	b.n	80044be <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d002      	beq.n	80044aa <I2C_DMAXferCplt+0x1a2>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b20      	cmp	r3, #32
 80044a8:	d103      	bne.n	80044b2 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2200      	movs	r2, #0
 80044ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80044b0:	e002      	b.n	80044b8 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2212      	movs	r2, #18
 80044b6:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80044b8:	6978      	ldr	r0, [r7, #20]
 80044ba:	f7fc f9b9 	bl	8000830 <HAL_I2C_MasterRxCpltCallback>
}
 80044be:	bf00      	nop
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044e0:	2200      	movs	r2, #0
 80044e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d003      	beq.n	80044f4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f0:	2200      	movs	r2, #0
 80044f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7fd fcd1 	bl	8001e9c <HAL_DMA_GetError>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d01b      	beq.n	8004538 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800450e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2220      	movs	r2, #32
 800451a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452a:	f043 0210 	orr.w	r2, r3, #16
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f7fe fd50 	bl	8002fd8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004538:	bf00      	nop
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004550:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004558:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800455a:	4b4b      	ldr	r3, [pc, #300]	@ (8004688 <I2C_DMAAbort+0x148>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	08db      	lsrs	r3, r3, #3
 8004560:	4a4a      	ldr	r2, [pc, #296]	@ (800468c <I2C_DMAAbort+0x14c>)
 8004562:	fba2 2303 	umull	r2, r3, r2, r3
 8004566:	0a1a      	lsrs	r2, r3, #8
 8004568:	4613      	mov	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	00da      	lsls	r2, r3, #3
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d106      	bne.n	8004588 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457e:	f043 0220 	orr.w	r2, r3, #32
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004586:	e00a      	b.n	800459e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	3b01      	subs	r3, #1
 800458c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800459c:	d0ea      	beq.n	8004574 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045aa:	2200      	movs	r2, #0
 80045ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ba:	2200      	movs	r2, #0
 80045bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045cc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	2200      	movs	r2, #0
 80045d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045e0:	2200      	movs	r2, #0
 80045e2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f0:	2200      	movs	r2, #0
 80045f2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0201 	bic.w	r2, r2, #1
 8004602:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b60      	cmp	r3, #96	@ 0x60
 800460e:	d10e      	bne.n	800462e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	2200      	movs	r2, #0
 8004624:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004626:	6978      	ldr	r0, [r7, #20]
 8004628:	f7fe fce0 	bl	8002fec <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800462c:	e027      	b.n	800467e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800462e:	7cfb      	ldrb	r3, [r7, #19]
 8004630:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004634:	2b28      	cmp	r3, #40	@ 0x28
 8004636:	d117      	bne.n	8004668 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0201 	orr.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004656:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	2200      	movs	r2, #0
 800465c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2228      	movs	r2, #40	@ 0x28
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004666:	e007      	b.n	8004678 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004678:	6978      	ldr	r0, [r7, #20]
 800467a:	f7fe fcad 	bl	8002fd8 <HAL_I2C_ErrorCallback>
}
 800467e:	bf00      	nop
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	20000000 	.word	0x20000000
 800468c:	14f8b589 	.word	0x14f8b589

08004690 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800469c:	4b13      	ldr	r3, [pc, #76]	@ (80046ec <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	08db      	lsrs	r3, r3, #3
 80046a2:	4a13      	ldr	r2, [pc, #76]	@ (80046f0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80046a4:	fba2 2303 	umull	r2, r3, r2, r3
 80046a8:	0a1a      	lsrs	r2, r3, #8
 80046aa:	4613      	mov	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	3b01      	subs	r3, #1
 80046b6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d107      	bne.n	80046ce <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c2:	f043 0220 	orr.w	r2, r3, #32
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e008      	b.n	80046e0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046dc:	d0e9      	beq.n	80046b2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	20000000 	.word	0x20000000
 80046f0:	14f8b589 	.word	0x14f8b589

080046f4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004700:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004704:	d103      	bne.n	800470e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800470c:	e007      	b.n	800471e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004712:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004716:	d102      	bne.n	800471e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2208      	movs	r2, #8
 800471c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
	...

0800472c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e267      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d075      	beq.n	8004836 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800474a:	4b88      	ldr	r3, [pc, #544]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 030c 	and.w	r3, r3, #12
 8004752:	2b04      	cmp	r3, #4
 8004754:	d00c      	beq.n	8004770 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004756:	4b85      	ldr	r3, [pc, #532]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800475e:	2b08      	cmp	r3, #8
 8004760:	d112      	bne.n	8004788 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004762:	4b82      	ldr	r3, [pc, #520]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800476a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800476e:	d10b      	bne.n	8004788 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004770:	4b7e      	ldr	r3, [pc, #504]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d05b      	beq.n	8004834 <HAL_RCC_OscConfig+0x108>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d157      	bne.n	8004834 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e242      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004790:	d106      	bne.n	80047a0 <HAL_RCC_OscConfig+0x74>
 8004792:	4b76      	ldr	r3, [pc, #472]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a75      	ldr	r2, [pc, #468]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	e01d      	b.n	80047dc <HAL_RCC_OscConfig+0xb0>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047a8:	d10c      	bne.n	80047c4 <HAL_RCC_OscConfig+0x98>
 80047aa:	4b70      	ldr	r3, [pc, #448]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a6f      	ldr	r2, [pc, #444]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80047b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047b4:	6013      	str	r3, [r2, #0]
 80047b6:	4b6d      	ldr	r3, [pc, #436]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a6c      	ldr	r2, [pc, #432]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80047bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047c0:	6013      	str	r3, [r2, #0]
 80047c2:	e00b      	b.n	80047dc <HAL_RCC_OscConfig+0xb0>
 80047c4:	4b69      	ldr	r3, [pc, #420]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a68      	ldr	r2, [pc, #416]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80047ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047ce:	6013      	str	r3, [r2, #0]
 80047d0:	4b66      	ldr	r3, [pc, #408]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a65      	ldr	r2, [pc, #404]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80047d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d013      	beq.n	800480c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e4:	f7fc ff58 	bl	8001698 <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047ec:	f7fc ff54 	bl	8001698 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b64      	cmp	r3, #100	@ 0x64
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e207      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047fe:	4b5b      	ldr	r3, [pc, #364]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0f0      	beq.n	80047ec <HAL_RCC_OscConfig+0xc0>
 800480a:	e014      	b.n	8004836 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480c:	f7fc ff44 	bl	8001698 <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004814:	f7fc ff40 	bl	8001698 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b64      	cmp	r3, #100	@ 0x64
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e1f3      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004826:	4b51      	ldr	r3, [pc, #324]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1f0      	bne.n	8004814 <HAL_RCC_OscConfig+0xe8>
 8004832:	e000      	b.n	8004836 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d063      	beq.n	800490a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004842:	4b4a      	ldr	r3, [pc, #296]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f003 030c 	and.w	r3, r3, #12
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00b      	beq.n	8004866 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800484e:	4b47      	ldr	r3, [pc, #284]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004856:	2b08      	cmp	r3, #8
 8004858:	d11c      	bne.n	8004894 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800485a:	4b44      	ldr	r3, [pc, #272]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d116      	bne.n	8004894 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004866:	4b41      	ldr	r3, [pc, #260]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d005      	beq.n	800487e <HAL_RCC_OscConfig+0x152>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d001      	beq.n	800487e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e1c7      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800487e:	4b3b      	ldr	r3, [pc, #236]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	4937      	ldr	r1, [pc, #220]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 800488e:	4313      	orrs	r3, r2
 8004890:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004892:	e03a      	b.n	800490a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d020      	beq.n	80048de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800489c:	4b34      	ldr	r3, [pc, #208]	@ (8004970 <HAL_RCC_OscConfig+0x244>)
 800489e:	2201      	movs	r2, #1
 80048a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a2:	f7fc fef9 	bl	8001698 <HAL_GetTick>
 80048a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a8:	e008      	b.n	80048bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048aa:	f7fc fef5 	bl	8001698 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d901      	bls.n	80048bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e1a8      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048bc:	4b2b      	ldr	r3, [pc, #172]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0f0      	beq.n	80048aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c8:	4b28      	ldr	r3, [pc, #160]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	4925      	ldr	r1, [pc, #148]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	600b      	str	r3, [r1, #0]
 80048dc:	e015      	b.n	800490a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048de:	4b24      	ldr	r3, [pc, #144]	@ (8004970 <HAL_RCC_OscConfig+0x244>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e4:	f7fc fed8 	bl	8001698 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048ec:	f7fc fed4 	bl	8001698 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e187      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048fe:	4b1b      	ldr	r3, [pc, #108]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f0      	bne.n	80048ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b00      	cmp	r3, #0
 8004914:	d036      	beq.n	8004984 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d016      	beq.n	800494c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800491e:	4b15      	ldr	r3, [pc, #84]	@ (8004974 <HAL_RCC_OscConfig+0x248>)
 8004920:	2201      	movs	r2, #1
 8004922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004924:	f7fc feb8 	bl	8001698 <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800492c:	f7fc feb4 	bl	8001698 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e167      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800493e:	4b0b      	ldr	r3, [pc, #44]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0f0      	beq.n	800492c <HAL_RCC_OscConfig+0x200>
 800494a:	e01b      	b.n	8004984 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800494c:	4b09      	ldr	r3, [pc, #36]	@ (8004974 <HAL_RCC_OscConfig+0x248>)
 800494e:	2200      	movs	r2, #0
 8004950:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004952:	f7fc fea1 	bl	8001698 <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004958:	e00e      	b.n	8004978 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800495a:	f7fc fe9d 	bl	8001698 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d907      	bls.n	8004978 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e150      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
 800496c:	40023800 	.word	0x40023800
 8004970:	42470000 	.word	0x42470000
 8004974:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004978:	4b88      	ldr	r3, [pc, #544]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 800497a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1ea      	bne.n	800495a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 8097 	beq.w	8004ac0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004992:	2300      	movs	r3, #0
 8004994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004996:	4b81      	ldr	r3, [pc, #516]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10f      	bne.n	80049c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049a2:	2300      	movs	r3, #0
 80049a4:	60bb      	str	r3, [r7, #8]
 80049a6:	4b7d      	ldr	r3, [pc, #500]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 80049a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049aa:	4a7c      	ldr	r2, [pc, #496]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 80049ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80049b2:	4b7a      	ldr	r3, [pc, #488]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 80049b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049ba:	60bb      	str	r3, [r7, #8]
 80049bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049be:	2301      	movs	r3, #1
 80049c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c2:	4b77      	ldr	r3, [pc, #476]	@ (8004ba0 <HAL_RCC_OscConfig+0x474>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d118      	bne.n	8004a00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ce:	4b74      	ldr	r3, [pc, #464]	@ (8004ba0 <HAL_RCC_OscConfig+0x474>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a73      	ldr	r2, [pc, #460]	@ (8004ba0 <HAL_RCC_OscConfig+0x474>)
 80049d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049da:	f7fc fe5d 	bl	8001698 <HAL_GetTick>
 80049de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e0:	e008      	b.n	80049f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049e2:	f7fc fe59 	bl	8001698 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d901      	bls.n	80049f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e10c      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f4:	4b6a      	ldr	r3, [pc, #424]	@ (8004ba0 <HAL_RCC_OscConfig+0x474>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0f0      	beq.n	80049e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d106      	bne.n	8004a16 <HAL_RCC_OscConfig+0x2ea>
 8004a08:	4b64      	ldr	r3, [pc, #400]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a0c:	4a63      	ldr	r2, [pc, #396]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a0e:	f043 0301 	orr.w	r3, r3, #1
 8004a12:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a14:	e01c      	b.n	8004a50 <HAL_RCC_OscConfig+0x324>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	2b05      	cmp	r3, #5
 8004a1c:	d10c      	bne.n	8004a38 <HAL_RCC_OscConfig+0x30c>
 8004a1e:	4b5f      	ldr	r3, [pc, #380]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a22:	4a5e      	ldr	r2, [pc, #376]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a24:	f043 0304 	orr.w	r3, r3, #4
 8004a28:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a2a:	4b5c      	ldr	r3, [pc, #368]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a2e:	4a5b      	ldr	r2, [pc, #364]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a30:	f043 0301 	orr.w	r3, r3, #1
 8004a34:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a36:	e00b      	b.n	8004a50 <HAL_RCC_OscConfig+0x324>
 8004a38:	4b58      	ldr	r3, [pc, #352]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a3c:	4a57      	ldr	r2, [pc, #348]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a3e:	f023 0301 	bic.w	r3, r3, #1
 8004a42:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a44:	4b55      	ldr	r3, [pc, #340]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a48:	4a54      	ldr	r2, [pc, #336]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a4a:	f023 0304 	bic.w	r3, r3, #4
 8004a4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d015      	beq.n	8004a84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a58:	f7fc fe1e 	bl	8001698 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a5e:	e00a      	b.n	8004a76 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a60:	f7fc fe1a 	bl	8001698 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e0cb      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a76:	4b49      	ldr	r3, [pc, #292]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0ee      	beq.n	8004a60 <HAL_RCC_OscConfig+0x334>
 8004a82:	e014      	b.n	8004aae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a84:	f7fc fe08 	bl	8001698 <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a8a:	e00a      	b.n	8004aa2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a8c:	f7fc fe04 	bl	8001698 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e0b5      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aa2:	4b3e      	ldr	r3, [pc, #248]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1ee      	bne.n	8004a8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004aae:	7dfb      	ldrb	r3, [r7, #23]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d105      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ab4:	4b39      	ldr	r3, [pc, #228]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab8:	4a38      	ldr	r2, [pc, #224]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004aba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004abe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 80a1 	beq.w	8004c0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004aca:	4b34      	ldr	r3, [pc, #208]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 030c 	and.w	r3, r3, #12
 8004ad2:	2b08      	cmp	r3, #8
 8004ad4:	d05c      	beq.n	8004b90 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d141      	bne.n	8004b62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ade:	4b31      	ldr	r3, [pc, #196]	@ (8004ba4 <HAL_RCC_OscConfig+0x478>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae4:	f7fc fdd8 	bl	8001698 <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aec:	f7fc fdd4 	bl	8001698 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e087      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004afe:	4b27      	ldr	r3, [pc, #156]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f0      	bne.n	8004aec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69da      	ldr	r2, [r3, #28]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	431a      	orrs	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b18:	019b      	lsls	r3, r3, #6
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b20:	085b      	lsrs	r3, r3, #1
 8004b22:	3b01      	subs	r3, #1
 8004b24:	041b      	lsls	r3, r3, #16
 8004b26:	431a      	orrs	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2c:	061b      	lsls	r3, r3, #24
 8004b2e:	491b      	ldr	r1, [pc, #108]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b34:	4b1b      	ldr	r3, [pc, #108]	@ (8004ba4 <HAL_RCC_OscConfig+0x478>)
 8004b36:	2201      	movs	r2, #1
 8004b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3a:	f7fc fdad 	bl	8001698 <HAL_GetTick>
 8004b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b40:	e008      	b.n	8004b54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b42:	f7fc fda9 	bl	8001698 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e05c      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b54:	4b11      	ldr	r3, [pc, #68]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d0f0      	beq.n	8004b42 <HAL_RCC_OscConfig+0x416>
 8004b60:	e054      	b.n	8004c0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b62:	4b10      	ldr	r3, [pc, #64]	@ (8004ba4 <HAL_RCC_OscConfig+0x478>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b68:	f7fc fd96 	bl	8001698 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b70:	f7fc fd92 	bl	8001698 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e045      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b82:	4b06      	ldr	r3, [pc, #24]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f0      	bne.n	8004b70 <HAL_RCC_OscConfig+0x444>
 8004b8e:	e03d      	b.n	8004c0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d107      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e038      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
 8004b9c:	40023800 	.word	0x40023800
 8004ba0:	40007000 	.word	0x40007000
 8004ba4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8004c18 <HAL_RCC_OscConfig+0x4ec>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d028      	beq.n	8004c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d121      	bne.n	8004c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d11a      	bne.n	8004c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004bd8:	4013      	ands	r3, r2
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004bde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d111      	bne.n	8004c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bee:	085b      	lsrs	r3, r3, #1
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d107      	bne.n	8004c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d001      	beq.n	8004c0c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e000      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	40023800 	.word	0x40023800

08004c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e0cc      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c30:	4b68      	ldr	r3, [pc, #416]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d90c      	bls.n	8004c58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3e:	4b65      	ldr	r3, [pc, #404]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c46:	4b63      	ldr	r3, [pc, #396]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d001      	beq.n	8004c58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e0b8      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d020      	beq.n	8004ca6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c70:	4b59      	ldr	r3, [pc, #356]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	4a58      	ldr	r2, [pc, #352]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d005      	beq.n	8004c94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c88:	4b53      	ldr	r3, [pc, #332]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	4a52      	ldr	r2, [pc, #328]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c94:	4b50      	ldr	r3, [pc, #320]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	494d      	ldr	r1, [pc, #308]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d044      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d107      	bne.n	8004cca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cba:	4b47      	ldr	r3, [pc, #284]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d119      	bne.n	8004cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e07f      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d003      	beq.n	8004cda <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cd6:	2b03      	cmp	r3, #3
 8004cd8:	d107      	bne.n	8004cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cda:	4b3f      	ldr	r3, [pc, #252]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d109      	bne.n	8004cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e06f      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cea:	4b3b      	ldr	r3, [pc, #236]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e067      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cfa:	4b37      	ldr	r3, [pc, #220]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f023 0203 	bic.w	r2, r3, #3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	4934      	ldr	r1, [pc, #208]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d0c:	f7fc fcc4 	bl	8001698 <HAL_GetTick>
 8004d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d12:	e00a      	b.n	8004d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d14:	f7fc fcc0 	bl	8001698 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e04f      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d2a:	4b2b      	ldr	r3, [pc, #172]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 020c 	and.w	r2, r3, #12
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d1eb      	bne.n	8004d14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d3c:	4b25      	ldr	r3, [pc, #148]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d20c      	bcs.n	8004d64 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d4a:	4b22      	ldr	r3, [pc, #136]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	b2d2      	uxtb	r2, r2
 8004d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d52:	4b20      	ldr	r3, [pc, #128]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0307 	and.w	r3, r3, #7
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d001      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e032      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d008      	beq.n	8004d82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d70:	4b19      	ldr	r3, [pc, #100]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	4916      	ldr	r1, [pc, #88]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0308 	and.w	r3, r3, #8
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d009      	beq.n	8004da2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d8e:	4b12      	ldr	r3, [pc, #72]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	490e      	ldr	r1, [pc, #56]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004da2:	f000 f821 	bl	8004de8 <HAL_RCC_GetSysClockFreq>
 8004da6:	4602      	mov	r2, r0
 8004da8:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	091b      	lsrs	r3, r3, #4
 8004dae:	f003 030f 	and.w	r3, r3, #15
 8004db2:	490a      	ldr	r1, [pc, #40]	@ (8004ddc <HAL_RCC_ClockConfig+0x1c0>)
 8004db4:	5ccb      	ldrb	r3, [r1, r3]
 8004db6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dba:	4a09      	ldr	r2, [pc, #36]	@ (8004de0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004dbe:	4b09      	ldr	r3, [pc, #36]	@ (8004de4 <HAL_RCC_ClockConfig+0x1c8>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fc fc24 	bl	8001610 <HAL_InitTick>

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40023c00 	.word	0x40023c00
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	080050a4 	.word	0x080050a4
 8004de0:	20000000 	.word	0x20000000
 8004de4:	20000004 	.word	0x20000004

08004de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dec:	b094      	sub	sp, #80	@ 0x50
 8004dee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004df0:	2300      	movs	r3, #0
 8004df2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e00:	4b79      	ldr	r3, [pc, #484]	@ (8004fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f003 030c 	and.w	r3, r3, #12
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d00d      	beq.n	8004e28 <HAL_RCC_GetSysClockFreq+0x40>
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	f200 80e1 	bhi.w	8004fd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d002      	beq.n	8004e1c <HAL_RCC_GetSysClockFreq+0x34>
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	d003      	beq.n	8004e22 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e1a:	e0db      	b.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e1c:	4b73      	ldr	r3, [pc, #460]	@ (8004fec <HAL_RCC_GetSysClockFreq+0x204>)
 8004e1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e20:	e0db      	b.n	8004fda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e22:	4b73      	ldr	r3, [pc, #460]	@ (8004ff0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e26:	e0d8      	b.n	8004fda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e28:	4b6f      	ldr	r3, [pc, #444]	@ (8004fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e30:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e32:	4b6d      	ldr	r3, [pc, #436]	@ (8004fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d063      	beq.n	8004f06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e3e:	4b6a      	ldr	r3, [pc, #424]	@ (8004fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	099b      	lsrs	r3, r3, #6
 8004e44:	2200      	movs	r2, #0
 8004e46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e48:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e50:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e52:	2300      	movs	r3, #0
 8004e54:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004e5a:	4622      	mov	r2, r4
 8004e5c:	462b      	mov	r3, r5
 8004e5e:	f04f 0000 	mov.w	r0, #0
 8004e62:	f04f 0100 	mov.w	r1, #0
 8004e66:	0159      	lsls	r1, r3, #5
 8004e68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e6c:	0150      	lsls	r0, r2, #5
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
 8004e72:	4621      	mov	r1, r4
 8004e74:	1a51      	subs	r1, r2, r1
 8004e76:	6139      	str	r1, [r7, #16]
 8004e78:	4629      	mov	r1, r5
 8004e7a:	eb63 0301 	sbc.w	r3, r3, r1
 8004e7e:	617b      	str	r3, [r7, #20]
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	f04f 0300 	mov.w	r3, #0
 8004e88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e8c:	4659      	mov	r1, fp
 8004e8e:	018b      	lsls	r3, r1, #6
 8004e90:	4651      	mov	r1, sl
 8004e92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e96:	4651      	mov	r1, sl
 8004e98:	018a      	lsls	r2, r1, #6
 8004e9a:	4651      	mov	r1, sl
 8004e9c:	ebb2 0801 	subs.w	r8, r2, r1
 8004ea0:	4659      	mov	r1, fp
 8004ea2:	eb63 0901 	sbc.w	r9, r3, r1
 8004ea6:	f04f 0200 	mov.w	r2, #0
 8004eaa:	f04f 0300 	mov.w	r3, #0
 8004eae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004eb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eba:	4690      	mov	r8, r2
 8004ebc:	4699      	mov	r9, r3
 8004ebe:	4623      	mov	r3, r4
 8004ec0:	eb18 0303 	adds.w	r3, r8, r3
 8004ec4:	60bb      	str	r3, [r7, #8]
 8004ec6:	462b      	mov	r3, r5
 8004ec8:	eb49 0303 	adc.w	r3, r9, r3
 8004ecc:	60fb      	str	r3, [r7, #12]
 8004ece:	f04f 0200 	mov.w	r2, #0
 8004ed2:	f04f 0300 	mov.w	r3, #0
 8004ed6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004eda:	4629      	mov	r1, r5
 8004edc:	024b      	lsls	r3, r1, #9
 8004ede:	4621      	mov	r1, r4
 8004ee0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ee4:	4621      	mov	r1, r4
 8004ee6:	024a      	lsls	r2, r1, #9
 8004ee8:	4610      	mov	r0, r2
 8004eea:	4619      	mov	r1, r3
 8004eec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004eee:	2200      	movs	r2, #0
 8004ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ef2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ef4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ef8:	f7fb f9b6 	bl	8000268 <__aeabi_uldivmod>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4613      	mov	r3, r2
 8004f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f04:	e058      	b.n	8004fb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f06:	4b38      	ldr	r3, [pc, #224]	@ (8004fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	099b      	lsrs	r3, r3, #6
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	4618      	mov	r0, r3
 8004f10:	4611      	mov	r1, r2
 8004f12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f16:	623b      	str	r3, [r7, #32]
 8004f18:	2300      	movs	r3, #0
 8004f1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f20:	4642      	mov	r2, r8
 8004f22:	464b      	mov	r3, r9
 8004f24:	f04f 0000 	mov.w	r0, #0
 8004f28:	f04f 0100 	mov.w	r1, #0
 8004f2c:	0159      	lsls	r1, r3, #5
 8004f2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f32:	0150      	lsls	r0, r2, #5
 8004f34:	4602      	mov	r2, r0
 8004f36:	460b      	mov	r3, r1
 8004f38:	4641      	mov	r1, r8
 8004f3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f3e:	4649      	mov	r1, r9
 8004f40:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	f04f 0300 	mov.w	r3, #0
 8004f4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f58:	ebb2 040a 	subs.w	r4, r2, sl
 8004f5c:	eb63 050b 	sbc.w	r5, r3, fp
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	00eb      	lsls	r3, r5, #3
 8004f6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f6e:	00e2      	lsls	r2, r4, #3
 8004f70:	4614      	mov	r4, r2
 8004f72:	461d      	mov	r5, r3
 8004f74:	4643      	mov	r3, r8
 8004f76:	18e3      	adds	r3, r4, r3
 8004f78:	603b      	str	r3, [r7, #0]
 8004f7a:	464b      	mov	r3, r9
 8004f7c:	eb45 0303 	adc.w	r3, r5, r3
 8004f80:	607b      	str	r3, [r7, #4]
 8004f82:	f04f 0200 	mov.w	r2, #0
 8004f86:	f04f 0300 	mov.w	r3, #0
 8004f8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f8e:	4629      	mov	r1, r5
 8004f90:	028b      	lsls	r3, r1, #10
 8004f92:	4621      	mov	r1, r4
 8004f94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f98:	4621      	mov	r1, r4
 8004f9a:	028a      	lsls	r2, r1, #10
 8004f9c:	4610      	mov	r0, r2
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	61bb      	str	r3, [r7, #24]
 8004fa6:	61fa      	str	r2, [r7, #28]
 8004fa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fac:	f7fb f95c 	bl	8000268 <__aeabi_uldivmod>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	0c1b      	lsrs	r3, r3, #16
 8004fbe:	f003 0303 	and.w	r3, r3, #3
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004fc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004fca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fd2:	e002      	b.n	8004fda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fd4:	4b05      	ldr	r3, [pc, #20]	@ (8004fec <HAL_RCC_GetSysClockFreq+0x204>)
 8004fd6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3750      	adds	r7, #80	@ 0x50
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fe6:	bf00      	nop
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	00f42400 	.word	0x00f42400
 8004ff0:	007a1200 	.word	0x007a1200

08004ff4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ff8:	4b03      	ldr	r3, [pc, #12]	@ (8005008 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	20000000 	.word	0x20000000

0800500c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005010:	f7ff fff0 	bl	8004ff4 <HAL_RCC_GetHCLKFreq>
 8005014:	4602      	mov	r2, r0
 8005016:	4b05      	ldr	r3, [pc, #20]	@ (800502c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	0a9b      	lsrs	r3, r3, #10
 800501c:	f003 0307 	and.w	r3, r3, #7
 8005020:	4903      	ldr	r1, [pc, #12]	@ (8005030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005022:	5ccb      	ldrb	r3, [r1, r3]
 8005024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005028:	4618      	mov	r0, r3
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40023800 	.word	0x40023800
 8005030:	080050b4 	.word	0x080050b4

08005034 <memset>:
 8005034:	4402      	add	r2, r0
 8005036:	4603      	mov	r3, r0
 8005038:	4293      	cmp	r3, r2
 800503a:	d100      	bne.n	800503e <memset+0xa>
 800503c:	4770      	bx	lr
 800503e:	f803 1b01 	strb.w	r1, [r3], #1
 8005042:	e7f9      	b.n	8005038 <memset+0x4>

08005044 <__libc_init_array>:
 8005044:	b570      	push	{r4, r5, r6, lr}
 8005046:	4d0d      	ldr	r5, [pc, #52]	@ (800507c <__libc_init_array+0x38>)
 8005048:	4c0d      	ldr	r4, [pc, #52]	@ (8005080 <__libc_init_array+0x3c>)
 800504a:	1b64      	subs	r4, r4, r5
 800504c:	10a4      	asrs	r4, r4, #2
 800504e:	2600      	movs	r6, #0
 8005050:	42a6      	cmp	r6, r4
 8005052:	d109      	bne.n	8005068 <__libc_init_array+0x24>
 8005054:	4d0b      	ldr	r5, [pc, #44]	@ (8005084 <__libc_init_array+0x40>)
 8005056:	4c0c      	ldr	r4, [pc, #48]	@ (8005088 <__libc_init_array+0x44>)
 8005058:	f000 f818 	bl	800508c <_init>
 800505c:	1b64      	subs	r4, r4, r5
 800505e:	10a4      	asrs	r4, r4, #2
 8005060:	2600      	movs	r6, #0
 8005062:	42a6      	cmp	r6, r4
 8005064:	d105      	bne.n	8005072 <__libc_init_array+0x2e>
 8005066:	bd70      	pop	{r4, r5, r6, pc}
 8005068:	f855 3b04 	ldr.w	r3, [r5], #4
 800506c:	4798      	blx	r3
 800506e:	3601      	adds	r6, #1
 8005070:	e7ee      	b.n	8005050 <__libc_init_array+0xc>
 8005072:	f855 3b04 	ldr.w	r3, [r5], #4
 8005076:	4798      	blx	r3
 8005078:	3601      	adds	r6, #1
 800507a:	e7f2      	b.n	8005062 <__libc_init_array+0x1e>
 800507c:	080050cc 	.word	0x080050cc
 8005080:	080050cc 	.word	0x080050cc
 8005084:	080050cc 	.word	0x080050cc
 8005088:	080050d0 	.word	0x080050d0

0800508c <_init>:
 800508c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800508e:	bf00      	nop
 8005090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005092:	bc08      	pop	{r3}
 8005094:	469e      	mov	lr, r3
 8005096:	4770      	bx	lr

08005098 <_fini>:
 8005098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800509a:	bf00      	nop
 800509c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800509e:	bc08      	pop	{r3}
 80050a0:	469e      	mov	lr, r3
 80050a2:	4770      	bx	lr
