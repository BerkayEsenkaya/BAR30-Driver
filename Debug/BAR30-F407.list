
BAR30-F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0f8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800b288  0800b288  0000c288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3a4  0800b3a4  0000d14c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3a4  0800b3a4  0000c3a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3ac  0800b3ac  0000d14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3ac  0800b3ac  0000c3ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b3b0  0800b3b0  0000c3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  0800b3b4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d14c  2**0
                  CONTENTS
 10 .bss          00002304  20000150  20000150  0000d150  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20002454  20002454  0000d150  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d14c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013952  00000000  00000000  0000d17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003810  00000000  00000000  00020ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001090  00000000  00000000  000242e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c76  00000000  00000000  00025370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023cf1  00000000  00000000  00025fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016eb8  00000000  00000000  00049cd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8c36  00000000  00000000  00060b8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001297c5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048b8  00000000  00000000  00129808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0012e0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000150 	.word	0x20000150
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b270 	.word	0x0800b270

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000154 	.word	0x20000154
 80001cc:	0800b270 	.word	0x0800b270

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_ldivmod>:
 8000280:	b97b      	cbnz	r3, 80002a2 <__aeabi_ldivmod+0x22>
 8000282:	b972      	cbnz	r2, 80002a2 <__aeabi_ldivmod+0x22>
 8000284:	2900      	cmp	r1, #0
 8000286:	bfbe      	ittt	lt
 8000288:	2000      	movlt	r0, #0
 800028a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800028e:	e006      	blt.n	800029e <__aeabi_ldivmod+0x1e>
 8000290:	bf08      	it	eq
 8000292:	2800      	cmpeq	r0, #0
 8000294:	bf1c      	itt	ne
 8000296:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800029a:	f04f 30ff 	movne.w	r0, #4294967295
 800029e:	f000 b9b5 	b.w	800060c <__aeabi_idiv0>
 80002a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002aa:	2900      	cmp	r1, #0
 80002ac:	db09      	blt.n	80002c2 <__aeabi_ldivmod+0x42>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db1a      	blt.n	80002e8 <__aeabi_ldivmod+0x68>
 80002b2:	f000 f84d 	bl	8000350 <__udivmoddi4>
 80002b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002be:	b004      	add	sp, #16
 80002c0:	4770      	bx	lr
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db1b      	blt.n	8000304 <__aeabi_ldivmod+0x84>
 80002cc:	f000 f840 	bl	8000350 <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	4252      	negs	r2, r2
 80002e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e6:	4770      	bx	lr
 80002e8:	4252      	negs	r2, r2
 80002ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ee:	f000 f82f 	bl	8000350 <__udivmoddi4>
 80002f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fa:	b004      	add	sp, #16
 80002fc:	4240      	negs	r0, r0
 80002fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000302:	4770      	bx	lr
 8000304:	4252      	negs	r2, r2
 8000306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030a:	f000 f821 	bl	8000350 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b96a 	b.w	800060c <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	460c      	mov	r4, r1
 8000358:	2b00      	cmp	r3, #0
 800035a:	d14e      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035c:	4694      	mov	ip, r2
 800035e:	458c      	cmp	ip, r1
 8000360:	4686      	mov	lr, r0
 8000362:	fab2 f282 	clz	r2, r2
 8000366:	d962      	bls.n	800042e <__udivmoddi4+0xde>
 8000368:	b14a      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036a:	f1c2 0320 	rsb	r3, r2, #32
 800036e:	4091      	lsls	r1, r2
 8000370:	fa20 f303 	lsr.w	r3, r0, r3
 8000374:	fa0c fc02 	lsl.w	ip, ip, r2
 8000378:	4319      	orrs	r1, r3
 800037a:	fa00 fe02 	lsl.w	lr, r0, r2
 800037e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000382:	fa1f f68c 	uxth.w	r6, ip
 8000386:	fbb1 f4f7 	udiv	r4, r1, r7
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb07 1114 	mls	r1, r7, r4, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb04 f106 	mul.w	r1, r4, r6
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80003a6:	f080 8112 	bcs.w	80005ce <__udivmoddi4+0x27e>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 810f 	bls.w	80005ce <__udivmoddi4+0x27e>
 80003b0:	3c02      	subs	r4, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a59      	subs	r1, r3, r1
 80003b6:	fa1f f38e 	uxth.w	r3, lr
 80003ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80003be:	fb07 1110 	mls	r1, r7, r0, r1
 80003c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c6:	fb00 f606 	mul.w	r6, r0, r6
 80003ca:	429e      	cmp	r6, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x94>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003d6:	f080 80fc 	bcs.w	80005d2 <__udivmoddi4+0x282>
 80003da:	429e      	cmp	r6, r3
 80003dc:	f240 80f9 	bls.w	80005d2 <__udivmoddi4+0x282>
 80003e0:	4463      	add	r3, ip
 80003e2:	3802      	subs	r0, #2
 80003e4:	1b9b      	subs	r3, r3, r6
 80003e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ea:	2100      	movs	r1, #0
 80003ec:	b11d      	cbz	r5, 80003f6 <__udivmoddi4+0xa6>
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	2200      	movs	r2, #0
 80003f2:	e9c5 3200 	strd	r3, r2, [r5]
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d905      	bls.n	800040a <__udivmoddi4+0xba>
 80003fe:	b10d      	cbz	r5, 8000404 <__udivmoddi4+0xb4>
 8000400:	e9c5 0100 	strd	r0, r1, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	4608      	mov	r0, r1
 8000408:	e7f5      	b.n	80003f6 <__udivmoddi4+0xa6>
 800040a:	fab3 f183 	clz	r1, r3
 800040e:	2900      	cmp	r1, #0
 8000410:	d146      	bne.n	80004a0 <__udivmoddi4+0x150>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d302      	bcc.n	800041c <__udivmoddi4+0xcc>
 8000416:	4290      	cmp	r0, r2
 8000418:	f0c0 80f0 	bcc.w	80005fc <__udivmoddi4+0x2ac>
 800041c:	1a86      	subs	r6, r0, r2
 800041e:	eb64 0303 	sbc.w	r3, r4, r3
 8000422:	2001      	movs	r0, #1
 8000424:	2d00      	cmp	r5, #0
 8000426:	d0e6      	beq.n	80003f6 <__udivmoddi4+0xa6>
 8000428:	e9c5 6300 	strd	r6, r3, [r5]
 800042c:	e7e3      	b.n	80003f6 <__udivmoddi4+0xa6>
 800042e:	2a00      	cmp	r2, #0
 8000430:	f040 8090 	bne.w	8000554 <__udivmoddi4+0x204>
 8000434:	eba1 040c 	sub.w	r4, r1, ip
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	2101      	movs	r1, #1
 8000442:	fbb4 f6f8 	udiv	r6, r4, r8
 8000446:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800044a:	fb08 4416 	mls	r4, r8, r6, r4
 800044e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000452:	fb07 f006 	mul.w	r0, r7, r6
 8000456:	4298      	cmp	r0, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x11c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x11a>
 8000464:	4298      	cmp	r0, r3
 8000466:	f200 80cd 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 800046a:	4626      	mov	r6, r4
 800046c:	1a1c      	subs	r4, r3, r0
 800046e:	fa1f f38e 	uxth.w	r3, lr
 8000472:	fbb4 f0f8 	udiv	r0, r4, r8
 8000476:	fb08 4410 	mls	r4, r8, r0, r4
 800047a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800047e:	fb00 f707 	mul.w	r7, r0, r7
 8000482:	429f      	cmp	r7, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x148>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 34ff 	add.w	r4, r0, #4294967295
 800048e:	d202      	bcs.n	8000496 <__udivmoddi4+0x146>
 8000490:	429f      	cmp	r7, r3
 8000492:	f200 80b0 	bhi.w	80005f6 <__udivmoddi4+0x2a6>
 8000496:	4620      	mov	r0, r4
 8000498:	1bdb      	subs	r3, r3, r7
 800049a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800049e:	e7a5      	b.n	80003ec <__udivmoddi4+0x9c>
 80004a0:	f1c1 0620 	rsb	r6, r1, #32
 80004a4:	408b      	lsls	r3, r1
 80004a6:	fa22 f706 	lsr.w	r7, r2, r6
 80004aa:	431f      	orrs	r7, r3
 80004ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80004b0:	fa04 f301 	lsl.w	r3, r4, r1
 80004b4:	ea43 030c 	orr.w	r3, r3, ip
 80004b8:	40f4      	lsrs	r4, r6
 80004ba:	fa00 f801 	lsl.w	r8, r0, r1
 80004be:	0c38      	lsrs	r0, r7, #16
 80004c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004c4:	fbb4 fef0 	udiv	lr, r4, r0
 80004c8:	fa1f fc87 	uxth.w	ip, r7
 80004cc:	fb00 441e 	mls	r4, r0, lr, r4
 80004d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d4:	fb0e f90c 	mul.w	r9, lr, ip
 80004d8:	45a1      	cmp	r9, r4
 80004da:	fa02 f201 	lsl.w	r2, r2, r1
 80004de:	d90a      	bls.n	80004f6 <__udivmoddi4+0x1a6>
 80004e0:	193c      	adds	r4, r7, r4
 80004e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004e6:	f080 8084 	bcs.w	80005f2 <__udivmoddi4+0x2a2>
 80004ea:	45a1      	cmp	r9, r4
 80004ec:	f240 8081 	bls.w	80005f2 <__udivmoddi4+0x2a2>
 80004f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004f4:	443c      	add	r4, r7
 80004f6:	eba4 0409 	sub.w	r4, r4, r9
 80004fa:	fa1f f983 	uxth.w	r9, r3
 80004fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000502:	fb00 4413 	mls	r4, r0, r3, r4
 8000506:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800050a:	fb03 fc0c 	mul.w	ip, r3, ip
 800050e:	45a4      	cmp	ip, r4
 8000510:	d907      	bls.n	8000522 <__udivmoddi4+0x1d2>
 8000512:	193c      	adds	r4, r7, r4
 8000514:	f103 30ff 	add.w	r0, r3, #4294967295
 8000518:	d267      	bcs.n	80005ea <__udivmoddi4+0x29a>
 800051a:	45a4      	cmp	ip, r4
 800051c:	d965      	bls.n	80005ea <__udivmoddi4+0x29a>
 800051e:	3b02      	subs	r3, #2
 8000520:	443c      	add	r4, r7
 8000522:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000526:	fba0 9302 	umull	r9, r3, r0, r2
 800052a:	eba4 040c 	sub.w	r4, r4, ip
 800052e:	429c      	cmp	r4, r3
 8000530:	46ce      	mov	lr, r9
 8000532:	469c      	mov	ip, r3
 8000534:	d351      	bcc.n	80005da <__udivmoddi4+0x28a>
 8000536:	d04e      	beq.n	80005d6 <__udivmoddi4+0x286>
 8000538:	b155      	cbz	r5, 8000550 <__udivmoddi4+0x200>
 800053a:	ebb8 030e 	subs.w	r3, r8, lr
 800053e:	eb64 040c 	sbc.w	r4, r4, ip
 8000542:	fa04 f606 	lsl.w	r6, r4, r6
 8000546:	40cb      	lsrs	r3, r1
 8000548:	431e      	orrs	r6, r3
 800054a:	40cc      	lsrs	r4, r1
 800054c:	e9c5 6400 	strd	r6, r4, [r5]
 8000550:	2100      	movs	r1, #0
 8000552:	e750      	b.n	80003f6 <__udivmoddi4+0xa6>
 8000554:	f1c2 0320 	rsb	r3, r2, #32
 8000558:	fa20 f103 	lsr.w	r1, r0, r3
 800055c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000560:	fa24 f303 	lsr.w	r3, r4, r3
 8000564:	4094      	lsls	r4, r2
 8000566:	430c      	orrs	r4, r1
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000570:	fa1f f78c 	uxth.w	r7, ip
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3110 	mls	r1, r8, r0, r3
 800057c:	0c23      	lsrs	r3, r4, #16
 800057e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000582:	fb00 f107 	mul.w	r1, r0, r7
 8000586:	4299      	cmp	r1, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x24c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000592:	d22c      	bcs.n	80005ee <__udivmoddi4+0x29e>
 8000594:	4299      	cmp	r1, r3
 8000596:	d92a      	bls.n	80005ee <__udivmoddi4+0x29e>
 8000598:	3802      	subs	r0, #2
 800059a:	4463      	add	r3, ip
 800059c:	1a5b      	subs	r3, r3, r1
 800059e:	b2a4      	uxth	r4, r4
 80005a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005a4:	fb08 3311 	mls	r3, r8, r1, r3
 80005a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005ac:	fb01 f307 	mul.w	r3, r1, r7
 80005b0:	42a3      	cmp	r3, r4
 80005b2:	d908      	bls.n	80005c6 <__udivmoddi4+0x276>
 80005b4:	eb1c 0404 	adds.w	r4, ip, r4
 80005b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005bc:	d213      	bcs.n	80005e6 <__udivmoddi4+0x296>
 80005be:	42a3      	cmp	r3, r4
 80005c0:	d911      	bls.n	80005e6 <__udivmoddi4+0x296>
 80005c2:	3902      	subs	r1, #2
 80005c4:	4464      	add	r4, ip
 80005c6:	1ae4      	subs	r4, r4, r3
 80005c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005cc:	e739      	b.n	8000442 <__udivmoddi4+0xf2>
 80005ce:	4604      	mov	r4, r0
 80005d0:	e6f0      	b.n	80003b4 <__udivmoddi4+0x64>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e706      	b.n	80003e4 <__udivmoddi4+0x94>
 80005d6:	45c8      	cmp	r8, r9
 80005d8:	d2ae      	bcs.n	8000538 <__udivmoddi4+0x1e8>
 80005da:	ebb9 0e02 	subs.w	lr, r9, r2
 80005de:	eb63 0c07 	sbc.w	ip, r3, r7
 80005e2:	3801      	subs	r0, #1
 80005e4:	e7a8      	b.n	8000538 <__udivmoddi4+0x1e8>
 80005e6:	4631      	mov	r1, r6
 80005e8:	e7ed      	b.n	80005c6 <__udivmoddi4+0x276>
 80005ea:	4603      	mov	r3, r0
 80005ec:	e799      	b.n	8000522 <__udivmoddi4+0x1d2>
 80005ee:	4630      	mov	r0, r6
 80005f0:	e7d4      	b.n	800059c <__udivmoddi4+0x24c>
 80005f2:	46d6      	mov	lr, sl
 80005f4:	e77f      	b.n	80004f6 <__udivmoddi4+0x1a6>
 80005f6:	4463      	add	r3, ip
 80005f8:	3802      	subs	r0, #2
 80005fa:	e74d      	b.n	8000498 <__udivmoddi4+0x148>
 80005fc:	4606      	mov	r6, r0
 80005fe:	4623      	mov	r3, r4
 8000600:	4608      	mov	r0, r1
 8000602:	e70f      	b.n	8000424 <__udivmoddi4+0xd4>
 8000604:	3e02      	subs	r6, #2
 8000606:	4463      	add	r3, ip
 8000608:	e730      	b.n	800046c <__udivmoddi4+0x11c>
 800060a:	bf00      	nop

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <AvarageFilter_Init>:
 */
#include "AvarageFilter.h"

AvarageFilterParam_T AvarageFilter_MPU6050_ACCEL_X, AvarageFilter_MPU6050_ACCEL_Y, AvarageFilter_MPU6050_ACCEL_Z,
AvarageFilter_MPU6050_GYRO_X, AvarageFilter_MPU6050_GYRO_Y, AvarageFilter_MPU6050_GYRO_Z;
void AvarageFilter_Init(AvarageFilterParam_T *handle, uint8_t FilterBufferSize){
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	460b      	mov	r3, r1
 800061a:	70fb      	strb	r3, [r7, #3]
	handle->FilterBufferSize = FilterBufferSize;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	78fa      	ldrb	r2, [r7, #3]
 8000620:	701a      	strb	r2, [r3, #0]
	handle->DataCounter = 0;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2200      	movs	r2, #0
 8000626:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
	handle->sum = 0;
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	f04f 0200 	mov.w	r2, #0
 8000630:	f04f 0300 	mov.w	r3, #0
 8000634:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88

}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <AvarageFilter2>:
		++handle->DataCounter;
		return AvaragePeriodContinue;
	}
}

uint8_t AvarageFilter2(AvarageFilterParam_T *handle, int16_t data){
 8000644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000648:	b084      	sub	sp, #16
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
 800064e:	460b      	mov	r3, r1
 8000650:	807b      	strh	r3, [r7, #2]

	if(handle->DataCounter == handle->FilterBufferSize){
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	429a      	cmp	r2, r3
 800065e:	d153      	bne.n	8000708 <AvarageFilter2+0xc4>
		for(int i = 0; i <= handle->DataCounter; i++ ){
 8000660:	2300      	movs	r3, #0
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	e016      	b.n	8000694 <AvarageFilter2+0x50>
			handle->sum +=  handle->buffer[i];
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	68f9      	ldr	r1, [r7, #12]
 8000670:	0049      	lsls	r1, r1, #1
 8000672:	4401      	add	r1, r0
 8000674:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8000678:	b209      	sxth	r1, r1
 800067a:	17c8      	asrs	r0, r1, #31
 800067c:	460c      	mov	r4, r1
 800067e:	4605      	mov	r5, r0
 8000680:	eb12 0804 	adds.w	r8, r2, r4
 8000684:	eb43 0905 	adc.w	r9, r3, r5
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	e9c3 8922 	strd	r8, r9, [r3, #136]	@ 0x88
		for(int i = 0; i <= handle->DataCounter; i++ ){
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	3301      	adds	r3, #1
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800069a:	461a      	mov	r2, r3
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	4293      	cmp	r3, r2
 80006a0:	dde1      	ble.n	8000666 <AvarageFilter2+0x22>
		}
		handle->Avarage = handle->sum / handle->FilterBufferSize;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	@ 0x88
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2200      	movs	r2, #0
 80006b0:	469a      	mov	sl, r3
 80006b2:	4693      	mov	fp, r2
 80006b4:	4652      	mov	r2, sl
 80006b6:	465b      	mov	r3, fp
 80006b8:	f7ff fde2 	bl	8000280 <__aeabi_ldivmod>
 80006bc:	4602      	mov	r2, r0
 80006be:	460b      	mov	r3, r1
 80006c0:	b212      	sxth	r2, r2
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
		handle->sum = 0;
 80006c8:	6879      	ldr	r1, [r7, #4]
 80006ca:	f04f 0200 	mov.w	r2, #0
 80006ce:	f04f 0300 	mov.w	r3, #0
 80006d2:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
		for(int i = 0; i <=handle->DataCounter; i++ ){
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	e008      	b.n	80006ee <AvarageFilter2+0xaa>
			handle->buffer[i] = 0;
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	4413      	add	r3, r2
 80006e4:	2200      	movs	r2, #0
 80006e6:	805a      	strh	r2, [r3, #2]
		for(int i = 0; i <=handle->DataCounter; i++ ){
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	3301      	adds	r3, #1
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 80006f4:	461a      	mov	r2, r3
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	4293      	cmp	r3, r2
 80006fa:	ddef      	ble.n	80006dc <AvarageFilter2+0x98>
		}
	handle->DataCounter = 0;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2200      	movs	r2, #0
 8000700:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
    return AvaragePeriodDone;
 8000704:	2300      	movs	r3, #0
 8000706:	e010      	b.n	800072a <AvarageFilter2+0xe6>
	}else{
		handle->buffer[handle->DataCounter] = data;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	4413      	add	r3, r2
 8000714:	887a      	ldrh	r2, [r7, #2]
 8000716:	805a      	strh	r2, [r3, #2]
		++handle->DataCounter;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800071e:	3301      	adds	r3, #1
 8000720:	b2da      	uxtb	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
		return AvaragePeriodContinue;
 8000728:	2301      	movs	r3, #1
	}

}
 800072a:	4618      	mov	r0, r3
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000734 <I2C_Init>:
 * GLOBAL FUNCTIONS
 ********************************************************/
/** Brief description which ends at this dot. Details follow
 *  here.
 */
void I2C_Init(void *handle, uint8_t I2CNo){
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	70fb      	strb	r3, [r7, #3]
	I2C_HandleTypeDef_T *i2c;
	i2c = I2C_GetModule(I2CNo);
 8000740:	78fb      	ldrb	r3, [r7, #3]
 8000742:	4618      	mov	r0, r3
 8000744:	f000 f858 	bl	80007f8 <I2C_GetModule>
 8000748:	60f8      	str	r0, [r7, #12]
    i2c->handle = handle;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	601a      	str	r2, [r3, #0]
}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <I2C_ReadWrite_DMA>:
}

/** Brief description which ends at this dot. Details follow
 *  here.
 */
I2C_ReturnTypeDef_T I2C_ReadWrite_DMA(uint8_t I2CNo, uint8_t DevAddress, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	603a      	str	r2, [r7, #0]
 8000760:	461a      	mov	r2, r3
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
 8000766:	460b      	mov	r3, r1
 8000768:	71bb      	strb	r3, [r7, #6]
 800076a:	4613      	mov	r3, r2
 800076c:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef_T *i2c;
	HAL_StatusTypeDef res;
	i2c = I2C_GetModule(I2CNo);
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	4618      	mov	r0, r3
 8000772:	f000 f841 	bl	80007f8 <I2C_GetModule>
 8000776:	60f8      	str	r0, [r7, #12]
	if(rxLenght == 0){
 8000778:	7f3b      	ldrb	r3, [r7, #28]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d115      	bne.n	80007aa <I2C_ReadWrite_DMA+0x52>
		res = HAL_I2C_Master_Transmit_DMA(i2c->handle , DevAddress, txBuff, txLenght);
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	6818      	ldr	r0, [r3, #0]
 8000782:	79bb      	ldrb	r3, [r7, #6]
 8000784:	b299      	uxth	r1, r3
 8000786:	797b      	ldrb	r3, [r7, #5]
 8000788:	b29b      	uxth	r3, r3
 800078a:	683a      	ldr	r2, [r7, #0]
 800078c:	f002 f936 	bl	80029fc <HAL_I2C_Master_Transmit_DMA>
 8000790:	4603      	mov	r3, r0
 8000792:	72fb      	strb	r3, [r7, #11]
		I2C_WaitFlag(I2CNo);
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	4618      	mov	r0, r3
 8000798:	f000 f850 	bl	800083c <I2C_WaitFlag>
		return res == I2C_ERROR;
 800079c:	7afb      	ldrb	r3, [r7, #11]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	bf0c      	ite	eq
 80007a2:	2301      	moveq	r3, #1
 80007a4:	2300      	movne	r3, #0
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	e021      	b.n	80007ee <I2C_ReadWrite_DMA+0x96>
	}else{
		HAL_I2C_Master_Transmit_DMA(i2c->handle , DevAddress, txBuff, txLenght);
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	6818      	ldr	r0, [r3, #0]
 80007ae:	79bb      	ldrb	r3, [r7, #6]
 80007b0:	b299      	uxth	r1, r3
 80007b2:	797b      	ldrb	r3, [r7, #5]
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	683a      	ldr	r2, [r7, #0]
 80007b8:	f002 f920 	bl	80029fc <HAL_I2C_Master_Transmit_DMA>
		I2C_WaitFlag(I2CNo);
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 f83c 	bl	800083c <I2C_WaitFlag>
		res = HAL_I2C_Master_Receive_DMA(i2c->handle, DevAddress, rxBuff, rxLenght);
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	6818      	ldr	r0, [r3, #0]
 80007c8:	79bb      	ldrb	r3, [r7, #6]
 80007ca:	b299      	uxth	r1, r3
 80007cc:	7f3b      	ldrb	r3, [r7, #28]
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	69ba      	ldr	r2, [r7, #24]
 80007d2:	f002 fa3f 	bl	8002c54 <HAL_I2C_Master_Receive_DMA>
 80007d6:	4603      	mov	r3, r0
 80007d8:	72fb      	strb	r3, [r7, #11]
		I2C_WaitFlag(I2CNo);
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 f82d 	bl	800083c <I2C_WaitFlag>
		return res == I2C_ERROR;
 80007e2:	7afb      	ldrb	r3, [r7, #11]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	bf0c      	ite	eq
 80007e8:	2301      	moveq	r3, #1
 80007ea:	2300      	movne	r3, #0
 80007ec:	b2db      	uxtb	r3, r3
	}
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <I2C_GetModule>:
 * PRIVATE FUNCTIONS
 *********************************************************/
/** Brief description which ends at this dot. Details follow
 *  here.
 */
I2C_HandleTypeDef_T* I2C_GetModule(uint8_t I2CNo){
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
	switch(I2CNo){
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	2b03      	cmp	r3, #3
 8000806:	d00a      	beq.n	800081e <I2C_GetModule+0x26>
 8000808:	2b03      	cmp	r3, #3
 800080a:	dc0a      	bgt.n	8000822 <I2C_GetModule+0x2a>
 800080c:	2b01      	cmp	r3, #1
 800080e:	d002      	beq.n	8000816 <I2C_GetModule+0x1e>
 8000810:	2b02      	cmp	r3, #2
 8000812:	d002      	beq.n	800081a <I2C_GetModule+0x22>
 8000814:	e005      	b.n	8000822 <I2C_GetModule+0x2a>
		case I2CNO_1 : return &I2C_1; break;
 8000816:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <I2C_GetModule+0x38>)
 8000818:	e004      	b.n	8000824 <I2C_GetModule+0x2c>
		case I2CNO_2 : return &I2C_2; break;
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <I2C_GetModule+0x3c>)
 800081c:	e002      	b.n	8000824 <I2C_GetModule+0x2c>
		case I2CNO_3 : return &I2C_3; break;
 800081e:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <I2C_GetModule+0x40>)
 8000820:	e000      	b.n	8000824 <I2C_GetModule+0x2c>
		default : return NULL; break;
 8000822:	2300      	movs	r3, #0
	}
}
 8000824:	4618      	mov	r0, r3
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	20000500 	.word	0x20000500
 8000834:	20000508 	.word	0x20000508
 8000838:	20000510 	.word	0x20000510

0800083c <I2C_WaitFlag>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
void I2C_WaitFlag(uint8_t I2CNo){
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	I2C_HandleTypeDef_T *i2c;
	uint8_t i=0;
 8000846:	2300      	movs	r3, #0
 8000848:	73fb      	strb	r3, [r7, #15]
	i2c = I2C_GetModule(I2CNo);
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ffd3 	bl	80007f8 <I2C_GetModule>
 8000852:	60b8      	str	r0, [r7, #8]
	while((!i2c->flag) & (i<5)){
 8000854:	e005      	b.n	8000862 <I2C_WaitFlag+0x26>
		HAL_Delay(1);
 8000856:	2001      	movs	r0, #1
 8000858:	f001 f8c6 	bl	80019e8 <HAL_Delay>
		i++;
 800085c:	7bfb      	ldrb	r3, [r7, #15]
 800085e:	3301      	adds	r3, #1
 8000860:	73fb      	strb	r3, [r7, #15]
	while((!i2c->flag) & (i<5)){
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	791b      	ldrb	r3, [r3, #4]
 8000866:	b2db      	uxtb	r3, r3
 8000868:	2b00      	cmp	r3, #0
 800086a:	bf0c      	ite	eq
 800086c:	2301      	moveq	r3, #1
 800086e:	2300      	movne	r3, #0
 8000870:	b2da      	uxtb	r2, r3
 8000872:	7bfb      	ldrb	r3, [r7, #15]
 8000874:	2b04      	cmp	r3, #4
 8000876:	bf94      	ite	ls
 8000878:	2301      	movls	r3, #1
 800087a:	2300      	movhi	r3, #0
 800087c:	b2db      	uxtb	r3, r3
 800087e:	4013      	ands	r3, r2
 8000880:	b2db      	uxtb	r3, r3
 8000882:	2b00      	cmp	r3, #0
 8000884:	d1e7      	bne.n	8000856 <I2C_WaitFlag+0x1a>
	}
	i2c->flag = 0;
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	2200      	movs	r2, #0
 800088a:	711a      	strb	r2, [r3, #4]
}
 800088c:	bf00      	nop
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <HAL_I2C_MasterTxCpltCallback>:
 *********************************************************/
/** Brief description which ends at this dot. Details follow
 *  here.
 */
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  if(I2C_1.handle == hi2c)
 800089c:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <HAL_I2C_MasterTxCpltCallback+0x48>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d103      	bne.n	80008ae <HAL_I2C_MasterTxCpltCallback+0x1a>
	  I2C_1.flag = 1;
 80008a6:	4b0d      	ldr	r3, [pc, #52]	@ (80008dc <HAL_I2C_MasterTxCpltCallback+0x48>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	711a      	strb	r2, [r3, #4]
  else if(I2C_3.handle == hi2c)
  	  I2C_3.flag = 1;
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80008ac:	e010      	b.n	80008d0 <HAL_I2C_MasterTxCpltCallback+0x3c>
  else if(I2C_2.handle == hi2c)
 80008ae:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <HAL_I2C_MasterTxCpltCallback+0x4c>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d103      	bne.n	80008c0 <HAL_I2C_MasterTxCpltCallback+0x2c>
  	  I2C_2.flag = 1;
 80008b8:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <HAL_I2C_MasterTxCpltCallback+0x4c>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	711a      	strb	r2, [r3, #4]
}
 80008be:	e007      	b.n	80008d0 <HAL_I2C_MasterTxCpltCallback+0x3c>
  else if(I2C_3.handle == hi2c)
 80008c0:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <HAL_I2C_MasterTxCpltCallback+0x50>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d102      	bne.n	80008d0 <HAL_I2C_MasterTxCpltCallback+0x3c>
  	  I2C_3.flag = 1;
 80008ca:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <HAL_I2C_MasterTxCpltCallback+0x50>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	711a      	strb	r2, [r3, #4]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	20000500 	.word	0x20000500
 80008e0:	20000508 	.word	0x20000508
 80008e4:	20000510 	.word	0x20000510

080008e8 <HAL_I2C_MasterRxCpltCallback>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	if(I2C_1.handle == hi2c)
 80008f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000930 <HAL_I2C_MasterRxCpltCallback+0x48>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d103      	bne.n	8000902 <HAL_I2C_MasterRxCpltCallback+0x1a>
		I2C_1.flag = 1;
 80008fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000930 <HAL_I2C_MasterRxCpltCallback+0x48>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	711a      	strb	r2, [r3, #4]
	  	I2C_3.flag = 1;

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8000900:	e010      	b.n	8000924 <HAL_I2C_MasterRxCpltCallback+0x3c>
	else if(I2C_2.handle == hi2c)
 8000902:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <HAL_I2C_MasterRxCpltCallback+0x4c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	429a      	cmp	r2, r3
 800090a:	d103      	bne.n	8000914 <HAL_I2C_MasterRxCpltCallback+0x2c>
	  	I2C_2.flag = 1;
 800090c:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <HAL_I2C_MasterRxCpltCallback+0x4c>)
 800090e:	2201      	movs	r2, #1
 8000910:	711a      	strb	r2, [r3, #4]
}
 8000912:	e007      	b.n	8000924 <HAL_I2C_MasterRxCpltCallback+0x3c>
	else if(I2C_3.handle == hi2c)
 8000914:	4b08      	ldr	r3, [pc, #32]	@ (8000938 <HAL_I2C_MasterRxCpltCallback+0x50>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	429a      	cmp	r2, r3
 800091c:	d102      	bne.n	8000924 <HAL_I2C_MasterRxCpltCallback+0x3c>
	  	I2C_3.flag = 1;
 800091e:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <HAL_I2C_MasterRxCpltCallback+0x50>)
 8000920:	2201      	movs	r2, #1
 8000922:	711a      	strb	r2, [r3, #4]
}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	20000500 	.word	0x20000500
 8000934:	20000508 	.word	0x20000508
 8000938:	20000510 	.word	0x20000510

0800093c <MPU6050_DeviceReset>:
MPU6050_Sensor_T MPU6050_1;

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_DeviceReset(MPU6050_Sensor_T *handle){
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	return MPU6050_Write(handle, MPU6050_REGISTER_PWR_MGMT_1, MPU6050_DATA_DEVICE_RESET);
 8000944:	2280      	movs	r2, #128	@ 0x80
 8000946:	216b      	movs	r1, #107	@ 0x6b
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f000 f9b4 	bl	8000cb6 <MPU6050_Write>
 800094e:	4603      	mov	r3, r0
}
 8000950:	4618      	mov	r0, r3
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <MPU6050_AllSignalPathReset>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_AllSignalPathReset(MPU6050_Sensor_T *handle){
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	return MPU6050_Write(handle, MPU6050_REGISTER_SIGNAL_PATH_RESET, MPU6050_DATA_ALL_SIGNALPATH_RESET);
 8000960:	2207      	movs	r2, #7
 8000962:	2168      	movs	r1, #104	@ 0x68
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f000 f9a6 	bl	8000cb6 <MPU6050_Write>
 800096a:	4603      	mov	r3, r0
}
 800096c:	4618      	mov	r0, r3
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <MPU6050_DeviceModeNormal>:
}

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_DeviceModeNormal(MPU6050_Sensor_T *handle){
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	return MPU6050_Write(handle, MPU6050_REGISTER_PWR_MGMT_1, 0);
 800097c:	2200      	movs	r2, #0
 800097e:	216b      	movs	r1, #107	@ 0x6b
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f000 f998 	bl	8000cb6 <MPU6050_Write>
 8000986:	4603      	mov	r3, r0
}
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <MPU6050_Init>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_Init(MPU6050_Sensor_T *handle, uint8_t I2C_No, uint8_t DevAddress){
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	460b      	mov	r3, r1
 800099a:	70fb      	strb	r3, [r7, #3]
 800099c:	4613      	mov	r3, r2
 800099e:	70bb      	strb	r3, [r7, #2]
	handle->devParam.I2C_No = I2C_No;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	78fa      	ldrb	r2, [r7, #3]
 80009a4:	705a      	strb	r2, [r3, #1]
	handle->devParam.DevAdress = DevAddress;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	78ba      	ldrb	r2, [r7, #2]
 80009aa:	709a      	strb	r2, [r3, #2]
	while(MPU6050_DeviceReset(handle))
 80009ac:	e002      	b.n	80009b4 <MPU6050_Init+0x24>
		HAL_Delay(1);
 80009ae:	2001      	movs	r0, #1
 80009b0:	f001 f81a 	bl	80019e8 <HAL_Delay>
	while(MPU6050_DeviceReset(handle))
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff ffc1 	bl	800093c <MPU6050_DeviceReset>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d1f6      	bne.n	80009ae <MPU6050_Init+0x1e>

	HAL_Delay(10);
 80009c0:	200a      	movs	r0, #10
 80009c2:	f001 f811 	bl	80019e8 <HAL_Delay>
	MPU6050_DeviceModeNormal(handle);
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f7ff ffd4 	bl	8000974 <MPU6050_DeviceModeNormal>
	MPU6050_AllSignalPathReset(handle);
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f7ff ffc3 	bl	8000958 <MPU6050_AllSignalPathReset>
    if(!MP6050_Get_WhoIAm_Data(handle)){
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f000 f82c 	bl	8000a30 <MP6050_Get_WhoIAm_Data>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d123      	bne.n	8000a26 <MPU6050_Init+0x96>
    	MPU6050_Set_ConfigRegister(handle, MPU6050_DATA_SAMPLERATE_184, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2101      	movs	r1, #1
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f000 f84a 	bl	8000a7c <MPU6050_Set_ConfigRegister>
    	MPU6050_Interrupt_Pin_Config(handle, MPU6050_DATA_INT_LEVEL_ACTIVE_HIGH | MPU6050_DATA_INT_PUSHPULL | MPU6050_DATA_INT_LATCH_DISABLE | MPU6050_DATA_INT_OTO_CLEAR);
 80009e8:	2190      	movs	r1, #144	@ 0x90
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f000 f941 	bl	8000c72 <MPU6050_Interrupt_Pin_Config>
    	MPU6050_Interrupt_Config(handle, MPU6050_DATA_INT_DATA_RDY_ENABLE);
 80009f0:	2101      	movs	r1, #1
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f000 f94e 	bl	8000c94 <MPU6050_Interrupt_Config>
    	MPU6050_Set_SampleRateDivider(handle, 19);
 80009f8:	2113      	movs	r1, #19
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f000 f82d 	bl	8000a5a <MPU6050_Set_SampleRateDivider>
    	MPU6050_Select_FIFO_Members(handle, 0);
 8000a00:	2100      	movs	r1, #0
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f000 f888 	bl	8000b18 <MPU6050_Select_FIFO_Members>
		MPU6050_Set_GYROConfigRegister(handle, MPU6050_DATA_GYRO_SCALERANGE_250, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f000 f84f 	bl	8000ab0 <MPU6050_Set_GYROConfigRegister>
		MPU6050_Set_ACCELConfigRegister(handle, MPU6050_DATA_ACCEL_SCALERANGE_2, 0); //MPU6050_DATA_ACCEL_ST_XAXIS_ENABLED | MPU6050_DATA_ACCEL_ST_YAXIS_ENABLED | MPU6050_DATA_ACCEL_ST_ZAXIS_ENABLED);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f000 f864 	bl	8000ae4 <MPU6050_Set_ACCELConfigRegister>
		HAL_Delay(10);
 8000a1c:	200a      	movs	r0, #10
 8000a1e:	f000 ffe3 	bl	80019e8 <HAL_Delay>
//		MPU6050_DeviceModeLowPower(handle);
//		MPU6050_Config_LowPowerMode(handle, MPU6050_DATA_LP_WU_FREQUENCY_5, 0 );
		return MPU6050_OK;
 8000a22:	2300      	movs	r3, #0
 8000a24:	e000      	b.n	8000a28 <MPU6050_Init+0x98>
    }
    return MPU6050_ERROR;
 8000a26:	2301      	movs	r3, #1
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <MP6050_Get_WhoIAm_Data>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MP6050_Get_WhoIAm_Data(MPU6050_Sensor_T *handle){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	uint8_t RxBuff[1];
	MPU6050_Read(handle, MPU6050_REGISTER_WHOIAM, RxBuff);
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	2175      	movs	r1, #117	@ 0x75
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f000 f95d 	bl	8000d00 <MPU6050_Read>
	if(RxBuff[0] == MPU6050_DATA_WHOIAM)
 8000a46:	7b3b      	ldrb	r3, [r7, #12]
 8000a48:	2b68      	cmp	r3, #104	@ 0x68
 8000a4a:	d101      	bne.n	8000a50 <MP6050_Get_WhoIAm_Data+0x20>
		return MPU6050_OK;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	e000      	b.n	8000a52 <MP6050_Get_WhoIAm_Data+0x22>
	return MPU6050_ERROR;
 8000a50:	2301      	movs	r3, #1
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <MPU6050_Set_SampleRateDivider>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_Set_SampleRateDivider(MPU6050_Sensor_T *handle, uint8_t divider){
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
 8000a62:	460b      	mov	r3, r1
 8000a64:	70fb      	strb	r3, [r7, #3]
	return MPU6050_Write(handle, MPU6050_REGISTER_SAMPLERATE_DIV, divider);
 8000a66:	78fb      	ldrb	r3, [r7, #3]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	2119      	movs	r1, #25
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f000 f922 	bl	8000cb6 <MPU6050_Write>
 8000a72:	4603      	mov	r3, r0
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <MPU6050_Set_ConfigRegister>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_Set_ConfigRegister(MPU6050_Sensor_T *handle, uint8_t sampleRate, uint8_t ExtSyncSet){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	460b      	mov	r3, r1
 8000a86:	70fb      	strb	r3, [r7, #3]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	70bb      	strb	r3, [r7, #2]
	handle->RegGroup_Config.ConfigRegister = sampleRate | ExtSyncSet;
 8000a8c:	78fa      	ldrb	r2, [r7, #3]
 8000a8e:	78bb      	ldrb	r3, [r7, #2]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	70da      	strb	r2, [r3, #3]
	return MPU6050_Write(handle, MPU6050_REGISTER_CONFIG, handle->RegGroup_Config.ConfigRegister);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	78db      	ldrb	r3, [r3, #3]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	211a      	movs	r1, #26
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f000 f908 	bl	8000cb6 <MPU6050_Write>
 8000aa6:	4603      	mov	r3, r0
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <MPU6050_Set_GYROConfigRegister>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_Set_GYROConfigRegister(MPU6050_Sensor_T *handle, uint8_t scaleRange, uint8_t STaxisEnabled){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	70fb      	strb	r3, [r7, #3]
 8000abc:	4613      	mov	r3, r2
 8000abe:	70bb      	strb	r3, [r7, #2]
	handle->RegGroup_Config.GYRO_ConfigRegister = scaleRange | STaxisEnabled;
 8000ac0:	78fa      	ldrb	r2, [r7, #3]
 8000ac2:	78bb      	ldrb	r3, [r7, #2]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	711a      	strb	r2, [r3, #4]
	return MPU6050_Write(handle, MPU6050_REGISTER_GYRO_CONFIG, handle->RegGroup_Config.GYRO_ConfigRegister);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	791b      	ldrb	r3, [r3, #4]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	211b      	movs	r1, #27
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f000 f8ee 	bl	8000cb6 <MPU6050_Write>
 8000ada:	4603      	mov	r3, r0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <MPU6050_Set_ACCELConfigRegister>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_Set_ACCELConfigRegister(MPU6050_Sensor_T *handle, uint8_t scaleRange, uint8_t STaxisEnabled){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	460b      	mov	r3, r1
 8000aee:	70fb      	strb	r3, [r7, #3]
 8000af0:	4613      	mov	r3, r2
 8000af2:	70bb      	strb	r3, [r7, #2]
	handle->RegGroup_Config.ACCEL_ConfigRegister = scaleRange | STaxisEnabled;
 8000af4:	78fa      	ldrb	r2, [r7, #3]
 8000af6:	78bb      	ldrb	r3, [r7, #2]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	715a      	strb	r2, [r3, #5]
	return MPU6050_Write(handle, MPU6050_REGISTER_ACCEL_CONFIG , handle->RegGroup_Config.ACCEL_ConfigRegister);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	795b      	ldrb	r3, [r3, #5]
 8000b04:	461a      	mov	r2, r3
 8000b06:	211c      	movs	r1, #28
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f000 f8d4 	bl	8000cb6 <MPU6050_Write>
 8000b0e:	4603      	mov	r3, r0
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <MPU6050_Select_FIFO_Members>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_Select_FIFO_Members(MPU6050_Sensor_T *handle, uint8_t members){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	460b      	mov	r3, r1
 8000b22:	70fb      	strb	r3, [r7, #3]
	return MPU6050_Write(handle, MPU6050_REGISTER_FIFO_ENABLE, members);
 8000b24:	78fb      	ldrb	r3, [r7, #3]
 8000b26:	461a      	mov	r2, r3
 8000b28:	2123      	movs	r1, #35	@ 0x23
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f000 f8c3 	bl	8000cb6 <MPU6050_Write>
 8000b30:	4603      	mov	r3, r0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <MPU6050_Read_ACCEL_Data>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_Read_ACCEL_Data(MPU6050_Sensor_T *handle){
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b084      	sub	sp, #16
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
	uint8_t DataH[1], DataL[1] ;
	MPU6050_Read(handle, MPU6050_REGISTER_ACCEL_OUT_X_H, DataH);
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	461a      	mov	r2, r3
 8000b48:	213b      	movs	r1, #59	@ 0x3b
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f000 f8d8 	bl	8000d00 <MPU6050_Read>
	MPU6050_Read(handle, MPU6050_REGISTER_ACCEL_OUT_X_L, DataL);
 8000b50:	f107 0308 	add.w	r3, r7, #8
 8000b54:	461a      	mov	r2, r3
 8000b56:	213c      	movs	r1, #60	@ 0x3c
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f000 f8d1 	bl	8000d00 <MPU6050_Read>
	handle->RegGroup_Data.ACCEL_Axis_X_Data = (int16_t)((DataH[0]<<8) | DataL[0]);
 8000b5e:	7b3b      	ldrb	r3, [r7, #12]
 8000b60:	021b      	lsls	r3, r3, #8
 8000b62:	b21a      	sxth	r2, r3
 8000b64:	7a3b      	ldrb	r3, [r7, #8]
 8000b66:	b21b      	sxth	r3, r3
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	b21a      	sxth	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	80da      	strh	r2, [r3, #6]

	MPU6050_Read(handle, MPU6050_REGISTER_ACCEL_OUT_Y_H, DataH);
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	461a      	mov	r2, r3
 8000b76:	213d      	movs	r1, #61	@ 0x3d
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f000 f8c1 	bl	8000d00 <MPU6050_Read>
	MPU6050_Read(handle, MPU6050_REGISTER_ACCEL_OUT_Y_L, DataL);
 8000b7e:	f107 0308 	add.w	r3, r7, #8
 8000b82:	461a      	mov	r2, r3
 8000b84:	213e      	movs	r1, #62	@ 0x3e
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f000 f8ba 	bl	8000d00 <MPU6050_Read>
	handle->RegGroup_Data.ACCEL_Axis_Y_Data = (int16_t)(DataH[0]<<8) | DataL[0];
 8000b8c:	7b3b      	ldrb	r3, [r7, #12]
 8000b8e:	021b      	lsls	r3, r3, #8
 8000b90:	b21a      	sxth	r2, r3
 8000b92:	7a3b      	ldrb	r3, [r7, #8]
 8000b94:	b21b      	sxth	r3, r3
 8000b96:	4313      	orrs	r3, r2
 8000b98:	b21a      	sxth	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	811a      	strh	r2, [r3, #8]

	MPU6050_Read(handle, MPU6050_REGISTER_ACCEL_OUT_Z_H, DataH);
 8000b9e:	f107 030c 	add.w	r3, r7, #12
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	213f      	movs	r1, #63	@ 0x3f
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f000 f8aa 	bl	8000d00 <MPU6050_Read>
	MPU6050_Read(handle, MPU6050_REGISTER_ACCEL_OUT_Z_L, DataL);
 8000bac:	f107 0308 	add.w	r3, r7, #8
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	2140      	movs	r1, #64	@ 0x40
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f000 f8a3 	bl	8000d00 <MPU6050_Read>
	handle->RegGroup_Data.ACCEL_Axis_Z_Data = (int16_t)((DataH[0]<<8) | DataL[0]);
 8000bba:	7b3b      	ldrb	r3, [r7, #12]
 8000bbc:	021b      	lsls	r3, r3, #8
 8000bbe:	b21a      	sxth	r2, r3
 8000bc0:	7a3b      	ldrb	r3, [r7, #8]
 8000bc2:	b21b      	sxth	r3, r3
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	b21a      	sxth	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	815a      	strh	r2, [r3, #10]
	return MPU6050_OK;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <MPU6050_Read_GYRO_Data>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_Read_GYRO_Data(MPU6050_Sensor_T *handle){
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b084      	sub	sp, #16
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
	uint8_t DataH[1], DataL[1] ;
	MPU6050_Read(handle, MPU6050_REGISTER_GYRO_OUT_X_H, DataH);
 8000bde:	f107 030c 	add.w	r3, r7, #12
 8000be2:	461a      	mov	r2, r3
 8000be4:	2143      	movs	r1, #67	@ 0x43
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f000 f88a 	bl	8000d00 <MPU6050_Read>
	MPU6050_Read(handle, MPU6050_REGISTER_GYRO_OUT_X_L, DataL);
 8000bec:	f107 0308 	add.w	r3, r7, #8
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	2144      	movs	r1, #68	@ 0x44
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f000 f883 	bl	8000d00 <MPU6050_Read>
	handle->RegGroup_Data.GYRO_Axis_X_Data = (int16_t)((DataH[0]<<8) | DataL[0]);
 8000bfa:	7b3b      	ldrb	r3, [r7, #12]
 8000bfc:	021b      	lsls	r3, r3, #8
 8000bfe:	b21a      	sxth	r2, r3
 8000c00:	7a3b      	ldrb	r3, [r7, #8]
 8000c02:	b21b      	sxth	r3, r3
 8000c04:	4313      	orrs	r3, r2
 8000c06:	b21a      	sxth	r2, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	819a      	strh	r2, [r3, #12]

	MPU6050_Read(handle, MPU6050_REGISTER_GYRO_OUT_Y_H, DataH);
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	461a      	mov	r2, r3
 8000c12:	2145      	movs	r1, #69	@ 0x45
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f000 f873 	bl	8000d00 <MPU6050_Read>
	MPU6050_Read(handle, MPU6050_REGISTER_GYRO_OUT_Y_L, DataL);
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	461a      	mov	r2, r3
 8000c20:	2146      	movs	r1, #70	@ 0x46
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f000 f86c 	bl	8000d00 <MPU6050_Read>
	handle->RegGroup_Data.GYRO_Axis_Y_Data = (int16_t)(DataH[0]<<8) | DataL[0];
 8000c28:	7b3b      	ldrb	r3, [r7, #12]
 8000c2a:	021b      	lsls	r3, r3, #8
 8000c2c:	b21a      	sxth	r2, r3
 8000c2e:	7a3b      	ldrb	r3, [r7, #8]
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	4313      	orrs	r3, r2
 8000c34:	b21a      	sxth	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	81da      	strh	r2, [r3, #14]

	MPU6050_Read(handle, MPU6050_REGISTER_GYRO_OUT_Z_H, DataH);
 8000c3a:	f107 030c 	add.w	r3, r7, #12
 8000c3e:	461a      	mov	r2, r3
 8000c40:	2147      	movs	r1, #71	@ 0x47
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f000 f85c 	bl	8000d00 <MPU6050_Read>
	MPU6050_Read(handle, MPU6050_REGISTER_GYRO_OUT_Z_L, DataL);
 8000c48:	f107 0308 	add.w	r3, r7, #8
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	2148      	movs	r1, #72	@ 0x48
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f000 f855 	bl	8000d00 <MPU6050_Read>
	handle->RegGroup_Data.GYRO_Axis_Z_Data = (int16_t)((DataH[0]<<8) | DataL[0]);
 8000c56:	7b3b      	ldrb	r3, [r7, #12]
 8000c58:	021b      	lsls	r3, r3, #8
 8000c5a:	b21a      	sxth	r2, r3
 8000c5c:	7a3b      	ldrb	r3, [r7, #8]
 8000c5e:	b21b      	sxth	r3, r3
 8000c60:	4313      	orrs	r3, r2
 8000c62:	b21a      	sxth	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	821a      	strh	r2, [r3, #16]
	return MPU6050_OK;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <MPU6050_Interrupt_Pin_Config>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_Interrupt_Pin_Config(MPU6050_Sensor_T *handle, uint8_t data){
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	70fb      	strb	r3, [r7, #3]
	return MPU6050_Write(handle, MPU6050_REGISTER_INTERRUPT_PIN_CONFIG , data);
 8000c7e:	78fb      	ldrb	r3, [r7, #3]
 8000c80:	461a      	mov	r2, r3
 8000c82:	2137      	movs	r1, #55	@ 0x37
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f000 f816 	bl	8000cb6 <MPU6050_Write>
 8000c8a:	4603      	mov	r3, r0
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <MPU6050_Interrupt_Config>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_Interrupt_Config(MPU6050_Sensor_T *handle, uint8_t data){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	70fb      	strb	r3, [r7, #3]
	return MPU6050_Write(handle, MPU6050_REGISTER_INTERRUPT_ENABLE , data);
 8000ca0:	78fb      	ldrb	r3, [r7, #3]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	2138      	movs	r1, #56	@ 0x38
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f000 f805 	bl	8000cb6 <MPU6050_Write>
 8000cac:	4603      	mov	r3, r0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <MPU6050_Write>:
}

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_Write(MPU6050_Sensor_T *handle, uint8_t Register, uint8_t Data){
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b086      	sub	sp, #24
 8000cba:	af02      	add	r7, sp, #8
 8000cbc:	6078      	str	r0, [r7, #4]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	70fb      	strb	r3, [r7, #3]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	70bb      	strb	r3, [r7, #2]
	MPU6050_ReturnTypeDef_T res;
	uint8_t TxBuff[2];
	TxBuff[0] = Register;
 8000cc6:	78fb      	ldrb	r3, [r7, #3]
 8000cc8:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = Data;
 8000cca:	78bb      	ldrb	r3, [r7, #2]
 8000ccc:	737b      	strb	r3, [r7, #13]
	res = MPU6050_SendReceive(handle->devParam.I2C_No, handle->devParam.DevAdress, TxBuff, 2, 0, 0);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	7858      	ldrb	r0, [r3, #1]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	7899      	ldrb	r1, [r3, #2]
 8000cd6:	f107 020c 	add.w	r2, r7, #12
 8000cda:	2300      	movs	r3, #0
 8000cdc:	9301      	str	r3, [sp, #4]
 8000cde:	2300      	movs	r3, #0
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	f000 f82e 	bl	8000d44 <MPU6050_SendReceive>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	73fb      	strb	r3, [r7, #15]
	if(res == MPU6050_OK)
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d101      	bne.n	8000cf6 <MPU6050_Write+0x40>
		return MPU6050_OK;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e000      	b.n	8000cf8 <MPU6050_Write+0x42>
	else
		return MPU6050_ERROR;
 8000cf6:	2301      	movs	r3, #1
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <MPU6050_Read>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
MPU6050_ReturnTypeDef_T MPU6050_Read(MPU6050_Sensor_T *handle, uint8_t Register, uint8_t *RxBuff){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af02      	add	r7, sp, #8
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	607a      	str	r2, [r7, #4]
 8000d0c:	72fb      	strb	r3, [r7, #11]
	MPU6050_ReturnTypeDef_T res;
	uint8_t TxBuff[1];
	TxBuff[0] = Register;
 8000d0e:	7afb      	ldrb	r3, [r7, #11]
 8000d10:	753b      	strb	r3, [r7, #20]
	res = MPU6050_SendReceive(handle->devParam.I2C_No, handle->devParam.DevAdress, TxBuff, 1, RxBuff, 1);
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	7858      	ldrb	r0, [r3, #1]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	7899      	ldrb	r1, [r3, #2]
 8000d1a:	f107 0214 	add.w	r2, r7, #20
 8000d1e:	2301      	movs	r3, #1
 8000d20:	9301      	str	r3, [sp, #4]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	2301      	movs	r3, #1
 8000d28:	f000 f80c 	bl	8000d44 <MPU6050_SendReceive>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	75fb      	strb	r3, [r7, #23]
	if(res == MPU6050_OK)
 8000d30:	7dfb      	ldrb	r3, [r7, #23]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d101      	bne.n	8000d3a <MPU6050_Read+0x3a>
		return MPU6050_OK;
 8000d36:	2300      	movs	r3, #0
 8000d38:	e000      	b.n	8000d3c <MPU6050_Read+0x3c>
	else
		return MPU6050_ERROR;
 8000d3a:	2301      	movs	r3, #1
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <MPU6050_SendReceive>:
 *      Author: esenk
 */

#include "I2C.h"

uint8_t MPU6050_SendReceive(uint8_t I2CNo, uint8_t DevAddress, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af02      	add	r7, sp, #8
 8000d4a:	603a      	str	r2, [r7, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
 8000d52:	460b      	mov	r3, r1
 8000d54:	71bb      	strb	r3, [r7, #6]
 8000d56:	4613      	mov	r3, r2
 8000d58:	717b      	strb	r3, [r7, #5]
	HAL_Delay(1);
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	f000 fe44 	bl	80019e8 <HAL_Delay>
	return I2C_ReadWrite_DMA(I2CNo, DevAddress, txBuff, txLenght, rxBuff, rxLenght);
 8000d60:	797a      	ldrb	r2, [r7, #5]
 8000d62:	79b9      	ldrb	r1, [r7, #6]
 8000d64:	79f8      	ldrb	r0, [r7, #7]
 8000d66:	7d3b      	ldrb	r3, [r7, #20]
 8000d68:	9301      	str	r3, [sp, #4]
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	683a      	ldr	r2, [r7, #0]
 8000d72:	f7ff fcf1 	bl	8000758 <I2C_ReadWrite_DMA>
 8000d76:	4603      	mov	r3, r0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <MPU6050_MATH_Calculate_ACCEL_mG_Value>:
#include "MPU6050_Math.h"

/** Brief description which ends at this dot. Details follow
 *  here.
 */
void MPU6050_MATH_Calculate_ACCEL_mG_Value(MPU6050_Sensor_T *handle){
 8000d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d84:	b08c      	sub	sp, #48	@ 0x30
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	61f8      	str	r0, [r7, #28]
	int64_t tempValue;
	uint16_t MPU_Accel_LSB_Value = MPU6050_MATH_Get_ACCEL_LSB_Value(handle);
 8000d8a:	69f8      	ldr	r0, [r7, #28]
 8000d8c:	f000 f85e 	bl	8000e4c <MPU6050_MATH_Get_ACCEL_LSB_Value>
 8000d90:	4603      	mov	r3, r0
 8000d92:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	tempValue = (int64_t)(MPU6050_1.FilteredValues.ACCEL_Axis_X_Filtered*1000);
 8000d94:	4b2c      	ldr	r3, [pc, #176]	@ (8000e48 <MPU6050_MATH_Calculate_ACCEL_mG_Value+0xc8>)
 8000d96:	8a5b      	ldrh	r3, [r3, #18]
 8000d98:	b21b      	sxth	r3, r3
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000da0:	fb02 f303 	mul.w	r3, r2, r3
 8000da4:	17da      	asrs	r2, r3, #31
 8000da6:	461c      	mov	r4, r3
 8000da8:	4615      	mov	r5, r2
 8000daa:	e9c7 4508 	strd	r4, r5, [r7, #32]
	handle->CalculatedValues.ACCEL_Axis_X_mG = tempValue / MPU_Accel_LSB_Value;
 8000dae:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000db0:	2200      	movs	r2, #0
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	617a      	str	r2, [r7, #20]
 8000db6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000dba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000dbe:	f7ff fa5f 	bl	8000280 <__aeabi_ldivmod>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	b212      	sxth	r2, r2
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	83da      	strh	r2, [r3, #30]

	tempValue = (int64_t)(MPU6050_1.FilteredValues.ACCEL_Axis_Y_Filtered*1000);
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e48 <MPU6050_MATH_Calculate_ACCEL_mG_Value+0xc8>)
 8000dce:	8a9b      	ldrh	r3, [r3, #20]
 8000dd0:	b21b      	sxth	r3, r3
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dd8:	fb02 f303 	mul.w	r3, r2, r3
 8000ddc:	17da      	asrs	r2, r3, #31
 8000dde:	469a      	mov	sl, r3
 8000de0:	4693      	mov	fp, r2
 8000de2:	e9c7 ab08 	strd	sl, fp, [r7, #32]
	handle->CalculatedValues.ACCEL_Axis_Y_mG = tempValue / MPU_Accel_LSB_Value;
 8000de6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000de8:	2200      	movs	r2, #0
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	60fa      	str	r2, [r7, #12]
 8000dee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000df2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000df6:	f7ff fa43 	bl	8000280 <__aeabi_ldivmod>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	b212      	sxth	r2, r2
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	841a      	strh	r2, [r3, #32]

	tempValue = (int64_t)(MPU6050_1.FilteredValues.ACCEL_Axis_Z_Filtered*1000);
 8000e04:	4b10      	ldr	r3, [pc, #64]	@ (8000e48 <MPU6050_MATH_Calculate_ACCEL_mG_Value+0xc8>)
 8000e06:	8adb      	ldrh	r3, [r3, #22]
 8000e08:	b21b      	sxth	r3, r3
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e10:	fb02 f303 	mul.w	r3, r2, r3
 8000e14:	17da      	asrs	r2, r3, #31
 8000e16:	4698      	mov	r8, r3
 8000e18:	4691      	mov	r9, r2
 8000e1a:	e9c7 8908 	strd	r8, r9, [r7, #32]
	handle->CalculatedValues.ACCEL_Axis_Z_mG = tempValue / MPU_Accel_LSB_Value;
 8000e1e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000e20:	2200      	movs	r2, #0
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	607a      	str	r2, [r7, #4]
 8000e26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e2a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000e2e:	f7ff fa27 	bl	8000280 <__aeabi_ldivmod>
 8000e32:	4602      	mov	r2, r0
 8000e34:	460b      	mov	r3, r1
 8000e36:	b212      	sxth	r2, r2
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	845a      	strh	r2, [r3, #34]	@ 0x22
}
 8000e3c:	bf00      	nop
 8000e3e:	3730      	adds	r7, #48	@ 0x30
 8000e40:	46bd      	mov	sp, r7
 8000e42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000e46:	bf00      	nop
 8000e48:	20000518 	.word	0x20000518

08000e4c <MPU6050_MATH_Get_ACCEL_LSB_Value>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
uint16_t MPU6050_MATH_Get_ACCEL_LSB_Value(MPU6050_Sensor_T *handle){
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	switch(handle->RegGroup_Config.ACCEL_ConfigRegister>>3){
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	795b      	ldrb	r3, [r3, #5]
 8000e58:	08db      	lsrs	r3, r3, #3
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b18      	cmp	r3, #24
 8000e5e:	d841      	bhi.n	8000ee4 <MPU6050_MATH_Get_ACCEL_LSB_Value+0x98>
 8000e60:	a201      	add	r2, pc, #4	@ (adr r2, 8000e68 <MPU6050_MATH_Get_ACCEL_LSB_Value+0x1c>)
 8000e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e66:	bf00      	nop
 8000e68:	08000ecd 	.word	0x08000ecd
 8000e6c:	08000ee5 	.word	0x08000ee5
 8000e70:	08000ee5 	.word	0x08000ee5
 8000e74:	08000ee5 	.word	0x08000ee5
 8000e78:	08000ee5 	.word	0x08000ee5
 8000e7c:	08000ee5 	.word	0x08000ee5
 8000e80:	08000ee5 	.word	0x08000ee5
 8000e84:	08000ee5 	.word	0x08000ee5
 8000e88:	08000ed3 	.word	0x08000ed3
 8000e8c:	08000ee5 	.word	0x08000ee5
 8000e90:	08000ee5 	.word	0x08000ee5
 8000e94:	08000ee5 	.word	0x08000ee5
 8000e98:	08000ee5 	.word	0x08000ee5
 8000e9c:	08000ee5 	.word	0x08000ee5
 8000ea0:	08000ee5 	.word	0x08000ee5
 8000ea4:	08000ee5 	.word	0x08000ee5
 8000ea8:	08000ed9 	.word	0x08000ed9
 8000eac:	08000ee5 	.word	0x08000ee5
 8000eb0:	08000ee5 	.word	0x08000ee5
 8000eb4:	08000ee5 	.word	0x08000ee5
 8000eb8:	08000ee5 	.word	0x08000ee5
 8000ebc:	08000ee5 	.word	0x08000ee5
 8000ec0:	08000ee5 	.word	0x08000ee5
 8000ec4:	08000ee5 	.word	0x08000ee5
 8000ec8:	08000edf 	.word	0x08000edf
		case  MPU6050_DATA_ACCEL_SCALERANGE_2 : return MPU6050_ACCEL_2G_LSB_VALUE ;
 8000ecc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ed0:	e009      	b.n	8000ee6 <MPU6050_MATH_Get_ACCEL_LSB_Value+0x9a>
		break;
		case  MPU6050_DATA_ACCEL_SCALERANGE_4 : return MPU6050_ACCEL_4G_LSB_VALUE ;
 8000ed2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ed6:	e006      	b.n	8000ee6 <MPU6050_MATH_Get_ACCEL_LSB_Value+0x9a>
		break;
		case  MPU6050_DATA_ACCEL_SCALERANGE_8 : return MPU6050_ACCEL_8G_LSB_VALUE ;
 8000ed8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000edc:	e003      	b.n	8000ee6 <MPU6050_MATH_Get_ACCEL_LSB_Value+0x9a>
		break;
		case  MPU6050_DATA_ACCEL_SCALERANGE_16 :return MPU6050_ACCEL_16G_LSB_VALUE ;
 8000ede:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ee2:	e000      	b.n	8000ee6 <MPU6050_MATH_Get_ACCEL_LSB_Value+0x9a>
		break;
		default : return 0;
 8000ee4:	2300      	movs	r3, #0
	}
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <MPU6050_MATH_Calculate_GYRO_mG_Value>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
void MPU6050_MATH_Calculate_GYRO_mG_Value(MPU6050_Sensor_T *handle){
 8000ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ef8:	b08c      	sub	sp, #48	@ 0x30
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	61f8      	str	r0, [r7, #28]
	int64_t tempValue;
	uint16_t MPU_Accel_LSB_Value = MPU6050_MATH_Get_GYRO_LSB_Value(handle);
 8000efe:	69f8      	ldr	r0, [r7, #28]
 8000f00:	f000 f85a 	bl	8000fb8 <MPU6050_MATH_Get_GYRO_LSB_Value>
 8000f04:	4603      	mov	r3, r0
 8000f06:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	tempValue = (int64_t)(MPU6050_1.FilteredValues.GYRO_Axis_X_Filtered*100);
 8000f08:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb4 <MPU6050_MATH_Calculate_GYRO_mG_Value+0xc0>)
 8000f0a:	8b1b      	ldrh	r3, [r3, #24]
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	461a      	mov	r2, r3
 8000f10:	2364      	movs	r3, #100	@ 0x64
 8000f12:	fb02 f303 	mul.w	r3, r2, r3
 8000f16:	17da      	asrs	r2, r3, #31
 8000f18:	461c      	mov	r4, r3
 8000f1a:	4615      	mov	r5, r2
 8000f1c:	e9c7 4508 	strd	r4, r5, [r7, #32]
	handle->CalculatedValues.GYRO_Axis_X_mDDS = tempValue / MPU_Accel_LSB_Value;
 8000f20:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000f22:	2200      	movs	r2, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	617a      	str	r2, [r7, #20]
 8000f28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f2c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000f30:	f7ff f9a6 	bl	8000280 <__aeabi_ldivmod>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	b212      	sxth	r2, r2
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	849a      	strh	r2, [r3, #36]	@ 0x24

	tempValue = (int64_t)(MPU6050_1.FilteredValues.GYRO_Axis_Y_Filtered*100);
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb4 <MPU6050_MATH_Calculate_GYRO_mG_Value+0xc0>)
 8000f40:	8b5b      	ldrh	r3, [r3, #26]
 8000f42:	b21b      	sxth	r3, r3
 8000f44:	461a      	mov	r2, r3
 8000f46:	2364      	movs	r3, #100	@ 0x64
 8000f48:	fb02 f303 	mul.w	r3, r2, r3
 8000f4c:	17da      	asrs	r2, r3, #31
 8000f4e:	469a      	mov	sl, r3
 8000f50:	4693      	mov	fp, r2
 8000f52:	e9c7 ab08 	strd	sl, fp, [r7, #32]
	handle->CalculatedValues.GYRO_Axis_Y_mDDS = tempValue / MPU_Accel_LSB_Value;
 8000f56:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000f58:	2200      	movs	r2, #0
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	60fa      	str	r2, [r7, #12]
 8000f5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f62:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000f66:	f7ff f98b 	bl	8000280 <__aeabi_ldivmod>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	b212      	sxth	r2, r2
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	84da      	strh	r2, [r3, #38]	@ 0x26

	tempValue = (int64_t)(MPU6050_1.FilteredValues.GYRO_Axis_Z_Filtered*100);
 8000f74:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb4 <MPU6050_MATH_Calculate_GYRO_mG_Value+0xc0>)
 8000f76:	8b9b      	ldrh	r3, [r3, #28]
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	2364      	movs	r3, #100	@ 0x64
 8000f7e:	fb02 f303 	mul.w	r3, r2, r3
 8000f82:	17da      	asrs	r2, r3, #31
 8000f84:	4698      	mov	r8, r3
 8000f86:	4691      	mov	r9, r2
 8000f88:	e9c7 8908 	strd	r8, r9, [r7, #32]
	handle->CalculatedValues.GYRO_Axis_Z_mDDS = tempValue / MPU_Accel_LSB_Value;
 8000f8c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000f8e:	2200      	movs	r2, #0
 8000f90:	603b      	str	r3, [r7, #0]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f98:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000f9c:	f7ff f970 	bl	8000280 <__aeabi_ldivmod>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	b212      	sxth	r2, r2
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000faa:	bf00      	nop
 8000fac:	3730      	adds	r7, #48	@ 0x30
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000fb4:	20000518 	.word	0x20000518

08000fb8 <MPU6050_MATH_Get_GYRO_LSB_Value>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
uint16_t MPU6050_MATH_Get_GYRO_LSB_Value(MPU6050_Sensor_T *handle){
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	switch(handle->RegGroup_Config.GYRO_ConfigRegister>>3){
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	791b      	ldrb	r3, [r3, #4]
 8000fc4:	08db      	lsrs	r3, r3, #3
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2b18      	cmp	r3, #24
 8000fca:	d840      	bhi.n	800104e <MPU6050_MATH_Get_GYRO_LSB_Value+0x96>
 8000fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8000fd4 <MPU6050_MATH_Get_GYRO_LSB_Value+0x1c>)
 8000fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd2:	bf00      	nop
 8000fd4:	08001039 	.word	0x08001039
 8000fd8:	0800104f 	.word	0x0800104f
 8000fdc:	0800104f 	.word	0x0800104f
 8000fe0:	0800104f 	.word	0x0800104f
 8000fe4:	0800104f 	.word	0x0800104f
 8000fe8:	0800104f 	.word	0x0800104f
 8000fec:	0800104f 	.word	0x0800104f
 8000ff0:	0800104f 	.word	0x0800104f
 8000ff4:	0800103f 	.word	0x0800103f
 8000ff8:	0800104f 	.word	0x0800104f
 8000ffc:	0800104f 	.word	0x0800104f
 8001000:	0800104f 	.word	0x0800104f
 8001004:	0800104f 	.word	0x0800104f
 8001008:	0800104f 	.word	0x0800104f
 800100c:	0800104f 	.word	0x0800104f
 8001010:	0800104f 	.word	0x0800104f
 8001014:	08001045 	.word	0x08001045
 8001018:	0800104f 	.word	0x0800104f
 800101c:	0800104f 	.word	0x0800104f
 8001020:	0800104f 	.word	0x0800104f
 8001024:	0800104f 	.word	0x0800104f
 8001028:	0800104f 	.word	0x0800104f
 800102c:	0800104f 	.word	0x0800104f
 8001030:	0800104f 	.word	0x0800104f
 8001034:	0800104b 	.word	0x0800104b
		case  MPU6050_DATA_GYRO_SCALERANGE_250 : return MPU6050_GYRO_250DDS_LSB_VALUE ;
 8001038:	f240 531e 	movw	r3, #1310	@ 0x51e
 800103c:	e008      	b.n	8001050 <MPU6050_MATH_Get_GYRO_LSB_Value+0x98>
		break;
		case  MPU6050_DATA_GYRO_SCALERANGE_500 : return MPU6050_GYRO_500DDS_LSB_VALUE ;
 800103e:	f240 238f 	movw	r3, #655	@ 0x28f
 8001042:	e005      	b.n	8001050 <MPU6050_MATH_Get_GYRO_LSB_Value+0x98>
		break;
		case  MPU6050_DATA_GYRO_SCALERANGE_1000 : return MPU6050_GYRO_1000DDS_LSB_VALUE ;
 8001044:	f44f 73a4 	mov.w	r3, #328	@ 0x148
 8001048:	e002      	b.n	8001050 <MPU6050_MATH_Get_GYRO_LSB_Value+0x98>
		break;
		case  MPU6050_DATA_GYRO_SCALERANGE_2000 :return MPU6050_GYRO_2000DDS_LSB_VALUE ;
 800104a:	23a4      	movs	r3, #164	@ 0xa4
 800104c:	e000      	b.n	8001050 <MPU6050_MATH_Get_GYRO_LSB_Value+0x98>
		break;
		default : return 0;
 800104e:	2300      	movs	r3, #0
	}
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001062:	f000 fc4f 	bl	8001904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001066:	f000 f8ff 	bl	8001268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800106a:	f000 f9c1 	bl	80013f0 <MX_GPIO_Init>
  MX_DMA_Init();
 800106e:	f000 f997 	bl	80013a0 <MX_DMA_Init>
  MX_I2C2_Init();
 8001072:	f000 f963 	bl	800133c <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8001076:	f008 fee5 	bl	8009e44 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  BAR30_Init(&BAR30_1, 2, (0x76<<1));
//  HAL_Delay(5);
//  BAR30_Reset(&BAR30_1);
  MPU6050_Init(&MPU6050_1, I2CNO_2, (MPU6050_DEVICE_ADDRESS));
 800107a:	22d0      	movs	r2, #208	@ 0xd0
 800107c:	2102      	movs	r1, #2
 800107e:	486b      	ldr	r0, [pc, #428]	@ (800122c <main+0x1d0>)
 8001080:	f7ff fc86 	bl	8000990 <MPU6050_Init>
  HAL_Delay(100);
 8001084:	2064      	movs	r0, #100	@ 0x64
 8001086:	f000 fcaf 	bl	80019e8 <HAL_Delay>

  AvarageFilter_Init(&AvarageFilter_MPU6050_ACCEL_X, 5);
 800108a:	2105      	movs	r1, #5
 800108c:	4868      	ldr	r0, [pc, #416]	@ (8001230 <main+0x1d4>)
 800108e:	f7ff fabf 	bl	8000610 <AvarageFilter_Init>
  AvarageFilter_Init(&AvarageFilter_MPU6050_ACCEL_Y, 5);
 8001092:	2105      	movs	r1, #5
 8001094:	4867      	ldr	r0, [pc, #412]	@ (8001234 <main+0x1d8>)
 8001096:	f7ff fabb 	bl	8000610 <AvarageFilter_Init>
  AvarageFilter_Init(&AvarageFilter_MPU6050_ACCEL_Z, 5);
 800109a:	2105      	movs	r1, #5
 800109c:	4866      	ldr	r0, [pc, #408]	@ (8001238 <main+0x1dc>)
 800109e:	f7ff fab7 	bl	8000610 <AvarageFilter_Init>
  AvarageFilter_Init(&AvarageFilter_MPU6050_GYRO_X, 5);
 80010a2:	2105      	movs	r1, #5
 80010a4:	4865      	ldr	r0, [pc, #404]	@ (800123c <main+0x1e0>)
 80010a6:	f7ff fab3 	bl	8000610 <AvarageFilter_Init>
  AvarageFilter_Init(&AvarageFilter_MPU6050_GYRO_Y, 5);
 80010aa:	2105      	movs	r1, #5
 80010ac:	4864      	ldr	r0, [pc, #400]	@ (8001240 <main+0x1e4>)
 80010ae:	f7ff faaf 	bl	8000610 <AvarageFilter_Init>
  AvarageFilter_Init(&AvarageFilter_MPU6050_GYRO_Z, 5);
 80010b2:	2105      	movs	r1, #5
 80010b4:	4863      	ldr	r0, [pc, #396]	@ (8001244 <main+0x1e8>)
 80010b6:	f7ff faab 	bl	8000610 <AvarageFilter_Init>
while (1)
{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(MPU6050_1.dataReadyFlag){
 80010ba:	4b5c      	ldr	r3, [pc, #368]	@ (800122c <main+0x1d0>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d008      	beq.n	80010d6 <main+0x7a>
		MPU6050_1.dataReadyFlag = 0;
 80010c4:	4b59      	ldr	r3, [pc, #356]	@ (800122c <main+0x1d0>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
		MPU6050_Read_ACCEL_Data(&MPU6050_1);
 80010ca:	4858      	ldr	r0, [pc, #352]	@ (800122c <main+0x1d0>)
 80010cc:	f7ff fd35 	bl	8000b3a <MPU6050_Read_ACCEL_Data>
		MPU6050_Read_GYRO_Data(&MPU6050_1);
 80010d0:	4856      	ldr	r0, [pc, #344]	@ (800122c <main+0x1d0>)
 80010d2:	f7ff fd80 	bl	8000bd6 <MPU6050_Read_GYRO_Data>
	}

		if(!AvarageFilter2(&AvarageFilter_MPU6050_ACCEL_X, MPU6050_1.RegGroup_Data.ACCEL_Axis_X_Data))
 80010d6:	4b55      	ldr	r3, [pc, #340]	@ (800122c <main+0x1d0>)
 80010d8:	88db      	ldrh	r3, [r3, #6]
 80010da:	b21b      	sxth	r3, r3
 80010dc:	4619      	mov	r1, r3
 80010de:	4854      	ldr	r0, [pc, #336]	@ (8001230 <main+0x1d4>)
 80010e0:	f7ff fab0 	bl	8000644 <AvarageFilter2>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d104      	bne.n	80010f4 <main+0x98>
			MPU6050_1.FilteredValues.ACCEL_Axis_X_Filtered = AvarageFilter_MPU6050_ACCEL_X.Avarage;
 80010ea:	4b51      	ldr	r3, [pc, #324]	@ (8001230 <main+0x1d4>)
 80010ec:	f9b3 2090 	ldrsh.w	r2, [r3, #144]	@ 0x90
 80010f0:	4b4e      	ldr	r3, [pc, #312]	@ (800122c <main+0x1d0>)
 80010f2:	825a      	strh	r2, [r3, #18]
		if(!AvarageFilter2(&AvarageFilter_MPU6050_ACCEL_Y, MPU6050_1.RegGroup_Data.ACCEL_Axis_Y_Data))
 80010f4:	4b4d      	ldr	r3, [pc, #308]	@ (800122c <main+0x1d0>)
 80010f6:	891b      	ldrh	r3, [r3, #8]
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	4619      	mov	r1, r3
 80010fc:	484d      	ldr	r0, [pc, #308]	@ (8001234 <main+0x1d8>)
 80010fe:	f7ff faa1 	bl	8000644 <AvarageFilter2>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d104      	bne.n	8001112 <main+0xb6>
			MPU6050_1.FilteredValues.ACCEL_Axis_Y_Filtered = AvarageFilter_MPU6050_ACCEL_Y.Avarage;
 8001108:	4b4a      	ldr	r3, [pc, #296]	@ (8001234 <main+0x1d8>)
 800110a:	f9b3 2090 	ldrsh.w	r2, [r3, #144]	@ 0x90
 800110e:	4b47      	ldr	r3, [pc, #284]	@ (800122c <main+0x1d0>)
 8001110:	829a      	strh	r2, [r3, #20]
		if(!AvarageFilter2(&AvarageFilter_MPU6050_ACCEL_Z, MPU6050_1.RegGroup_Data.ACCEL_Axis_Z_Data))
 8001112:	4b46      	ldr	r3, [pc, #280]	@ (800122c <main+0x1d0>)
 8001114:	895b      	ldrh	r3, [r3, #10]
 8001116:	b21b      	sxth	r3, r3
 8001118:	4619      	mov	r1, r3
 800111a:	4847      	ldr	r0, [pc, #284]	@ (8001238 <main+0x1dc>)
 800111c:	f7ff fa92 	bl	8000644 <AvarageFilter2>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d104      	bne.n	8001130 <main+0xd4>
			MPU6050_1.FilteredValues.ACCEL_Axis_Z_Filtered = AvarageFilter_MPU6050_ACCEL_Z.Avarage;
 8001126:	4b44      	ldr	r3, [pc, #272]	@ (8001238 <main+0x1dc>)
 8001128:	f9b3 2090 	ldrsh.w	r2, [r3, #144]	@ 0x90
 800112c:	4b3f      	ldr	r3, [pc, #252]	@ (800122c <main+0x1d0>)
 800112e:	82da      	strh	r2, [r3, #22]
		if(!AvarageFilter2(&AvarageFilter_MPU6050_GYRO_X, MPU6050_1.RegGroup_Data.GYRO_Axis_X_Data))
 8001130:	4b3e      	ldr	r3, [pc, #248]	@ (800122c <main+0x1d0>)
 8001132:	899b      	ldrh	r3, [r3, #12]
 8001134:	b21b      	sxth	r3, r3
 8001136:	4619      	mov	r1, r3
 8001138:	4840      	ldr	r0, [pc, #256]	@ (800123c <main+0x1e0>)
 800113a:	f7ff fa83 	bl	8000644 <AvarageFilter2>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d104      	bne.n	800114e <main+0xf2>
			MPU6050_1.FilteredValues.GYRO_Axis_X_Filtered = AvarageFilter_MPU6050_GYRO_X.Avarage;
 8001144:	4b3d      	ldr	r3, [pc, #244]	@ (800123c <main+0x1e0>)
 8001146:	f9b3 2090 	ldrsh.w	r2, [r3, #144]	@ 0x90
 800114a:	4b38      	ldr	r3, [pc, #224]	@ (800122c <main+0x1d0>)
 800114c:	831a      	strh	r2, [r3, #24]
		if(!AvarageFilter2(&AvarageFilter_MPU6050_GYRO_Y, MPU6050_1.RegGroup_Data.GYRO_Axis_Y_Data))
 800114e:	4b37      	ldr	r3, [pc, #220]	@ (800122c <main+0x1d0>)
 8001150:	89db      	ldrh	r3, [r3, #14]
 8001152:	b21b      	sxth	r3, r3
 8001154:	4619      	mov	r1, r3
 8001156:	483a      	ldr	r0, [pc, #232]	@ (8001240 <main+0x1e4>)
 8001158:	f7ff fa74 	bl	8000644 <AvarageFilter2>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d104      	bne.n	800116c <main+0x110>
			MPU6050_1.FilteredValues.GYRO_Axis_Y_Filtered = AvarageFilter_MPU6050_GYRO_Y.Avarage;
 8001162:	4b37      	ldr	r3, [pc, #220]	@ (8001240 <main+0x1e4>)
 8001164:	f9b3 2090 	ldrsh.w	r2, [r3, #144]	@ 0x90
 8001168:	4b30      	ldr	r3, [pc, #192]	@ (800122c <main+0x1d0>)
 800116a:	835a      	strh	r2, [r3, #26]
		if(!AvarageFilter2(&AvarageFilter_MPU6050_GYRO_Z, MPU6050_1.RegGroup_Data.GYRO_Axis_Z_Data))
 800116c:	4b2f      	ldr	r3, [pc, #188]	@ (800122c <main+0x1d0>)
 800116e:	8a1b      	ldrh	r3, [r3, #16]
 8001170:	b21b      	sxth	r3, r3
 8001172:	4619      	mov	r1, r3
 8001174:	4833      	ldr	r0, [pc, #204]	@ (8001244 <main+0x1e8>)
 8001176:	f7ff fa65 	bl	8000644 <AvarageFilter2>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d104      	bne.n	800118a <main+0x12e>
			MPU6050_1.FilteredValues.GYRO_Axis_Z_Filtered = AvarageFilter_MPU6050_GYRO_Z.Avarage;
 8001180:	4b30      	ldr	r3, [pc, #192]	@ (8001244 <main+0x1e8>)
 8001182:	f9b3 2090 	ldrsh.w	r2, [r3, #144]	@ 0x90
 8001186:	4b29      	ldr	r3, [pc, #164]	@ (800122c <main+0x1d0>)
 8001188:	839a      	strh	r2, [r3, #28]
		MPU6050_MATH_Calculate_ACCEL_mG_Value(&MPU6050_1);
 800118a:	4828      	ldr	r0, [pc, #160]	@ (800122c <main+0x1d0>)
 800118c:	f7ff fdf8 	bl	8000d80 <MPU6050_MATH_Calculate_ACCEL_mG_Value>
		MPU6050_MATH_Calculate_GYRO_mG_Value(&MPU6050_1);
 8001190:	4826      	ldr	r0, [pc, #152]	@ (800122c <main+0x1d0>)
 8001192:	f7ff feaf 	bl	8000ef4 <MPU6050_MATH_Calculate_GYRO_mG_Value>

//		itoa(buffer, AccelBuffer, 10);

		itoa(MPU6050_1.CalculatedValues.ACCEL_Axis_X_mG, bufferAX, 10);
 8001196:	4b25      	ldr	r3, [pc, #148]	@ (800122c <main+0x1d0>)
 8001198:	8bdb      	ldrh	r3, [r3, #30]
 800119a:	b21b      	sxth	r3, r3
 800119c:	220a      	movs	r2, #10
 800119e:	492a      	ldr	r1, [pc, #168]	@ (8001248 <main+0x1ec>)
 80011a0:	4618      	mov	r0, r3
 80011a2:	f009 fb81 	bl	800a8a8 <itoa>
		itoa(MPU6050_1.CalculatedValues.ACCEL_Axis_Y_mG, bufferAY, 10);
 80011a6:	4b21      	ldr	r3, [pc, #132]	@ (800122c <main+0x1d0>)
 80011a8:	8c1b      	ldrh	r3, [r3, #32]
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	220a      	movs	r2, #10
 80011ae:	4927      	ldr	r1, [pc, #156]	@ (800124c <main+0x1f0>)
 80011b0:	4618      	mov	r0, r3
 80011b2:	f009 fb79 	bl	800a8a8 <itoa>
		itoa(MPU6050_1.CalculatedValues.ACCEL_Axis_Z_mG, bufferAZ, 10);
 80011b6:	4b1d      	ldr	r3, [pc, #116]	@ (800122c <main+0x1d0>)
 80011b8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	220a      	movs	r2, #10
 80011be:	4924      	ldr	r1, [pc, #144]	@ (8001250 <main+0x1f4>)
 80011c0:	4618      	mov	r0, r3
 80011c2:	f009 fb71 	bl	800a8a8 <itoa>
		itoa(MPU6050_1.CalculatedValues.GYRO_Axis_X_mDDS , bufferGX, 10);
 80011c6:	4b19      	ldr	r3, [pc, #100]	@ (800122c <main+0x1d0>)
 80011c8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	220a      	movs	r2, #10
 80011ce:	4921      	ldr	r1, [pc, #132]	@ (8001254 <main+0x1f8>)
 80011d0:	4618      	mov	r0, r3
 80011d2:	f009 fb69 	bl	800a8a8 <itoa>
		itoa(MPU6050_1.CalculatedValues.GYRO_Axis_Y_mDDS, bufferGY, 10);
 80011d6:	4b15      	ldr	r3, [pc, #84]	@ (800122c <main+0x1d0>)
 80011d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80011da:	b21b      	sxth	r3, r3
 80011dc:	220a      	movs	r2, #10
 80011de:	491e      	ldr	r1, [pc, #120]	@ (8001258 <main+0x1fc>)
 80011e0:	4618      	mov	r0, r3
 80011e2:	f009 fb61 	bl	800a8a8 <itoa>
		itoa(MPU6050_1.CalculatedValues.GYRO_Axis_Z_mDDS, bufferGZ, 10);
 80011e6:	4b11      	ldr	r3, [pc, #68]	@ (800122c <main+0x1d0>)
 80011e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	220a      	movs	r2, #10
 80011ee:	491b      	ldr	r1, [pc, #108]	@ (800125c <main+0x200>)
 80011f0:	4618      	mov	r0, r3
 80011f2:	f009 fb59 	bl	800a8a8 <itoa>
		sprintf(AccelBuffer, "ACC X : [%s]  ACC Y : [%s]  ACC Z :[ %s]     GYRO X : [%s]  GYRO Y : [%s]  GYRO Z :[ %s]\r\n", bufferAX, bufferAY, bufferAZ, bufferGX, bufferGY, bufferGZ);
 80011f6:	4b19      	ldr	r3, [pc, #100]	@ (800125c <main+0x200>)
 80011f8:	9303      	str	r3, [sp, #12]
 80011fa:	4b17      	ldr	r3, [pc, #92]	@ (8001258 <main+0x1fc>)
 80011fc:	9302      	str	r3, [sp, #8]
 80011fe:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <main+0x1f8>)
 8001200:	9301      	str	r3, [sp, #4]
 8001202:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <main+0x1f4>)
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	4b11      	ldr	r3, [pc, #68]	@ (800124c <main+0x1f0>)
 8001208:	4a0f      	ldr	r2, [pc, #60]	@ (8001248 <main+0x1ec>)
 800120a:	4915      	ldr	r1, [pc, #84]	@ (8001260 <main+0x204>)
 800120c:	4815      	ldr	r0, [pc, #84]	@ (8001264 <main+0x208>)
 800120e:	f009 fb8f 	bl	800a930 <siprintf>

		CDC_Transmit_FS(AccelBuffer, strlen((char*)AccelBuffer));
 8001212:	4814      	ldr	r0, [pc, #80]	@ (8001264 <main+0x208>)
 8001214:	f7fe ffdc 	bl	80001d0 <strlen>
 8001218:	4603      	mov	r3, r0
 800121a:	b29b      	uxth	r3, r3
 800121c:	4619      	mov	r1, r3
 800121e:	4811      	ldr	r0, [pc, #68]	@ (8001264 <main+0x208>)
 8001220:	f008 fece 	bl	8009fc0 <CDC_Transmit_FS>
  HAL_Delay(5);
 8001224:	2005      	movs	r0, #5
 8001226:	f000 fbdf 	bl	80019e8 <HAL_Delay>
	if(MPU6050_1.dataReadyFlag){
 800122a:	e746      	b.n	80010ba <main+0x5e>
 800122c:	20000518 	.word	0x20000518
 8001230:	20000170 	.word	0x20000170
 8001234:	20000208 	.word	0x20000208
 8001238:	200002a0 	.word	0x200002a0
 800123c:	20000338 	.word	0x20000338
 8001240:	200003d0 	.word	0x200003d0
 8001244:	20000468 	.word	0x20000468
 8001248:	200006d8 	.word	0x200006d8
 800124c:	200006e4 	.word	0x200006e4
 8001250:	200006f0 	.word	0x200006f0
 8001254:	200006fc 	.word	0x200006fc
 8001258:	20000708 	.word	0x20000708
 800125c:	20000714 	.word	0x20000714
 8001260:	0800b288 	.word	0x0800b288
 8001264:	20000658 	.word	0x20000658

08001268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b094      	sub	sp, #80	@ 0x50
 800126c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	2230      	movs	r2, #48	@ 0x30
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f009 fb7a 	bl	800a970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	4b28      	ldr	r3, [pc, #160]	@ (8001334 <SystemClock_Config+0xcc>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001294:	4a27      	ldr	r2, [pc, #156]	@ (8001334 <SystemClock_Config+0xcc>)
 8001296:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800129a:	6413      	str	r3, [r2, #64]	@ 0x40
 800129c:	4b25      	ldr	r3, [pc, #148]	@ (8001334 <SystemClock_Config+0xcc>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012a8:	2300      	movs	r3, #0
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	4b22      	ldr	r3, [pc, #136]	@ (8001338 <SystemClock_Config+0xd0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a21      	ldr	r2, [pc, #132]	@ (8001338 <SystemClock_Config+0xd0>)
 80012b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001338 <SystemClock_Config+0xd0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012c4:	2301      	movs	r3, #1
 80012c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ce:	2302      	movs	r3, #2
 80012d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012d8:	2308      	movs	r3, #8
 80012da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012dc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80012e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012e2:	2302      	movs	r3, #2
 80012e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012e6:	2307      	movs	r3, #7
 80012e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ea:	f107 0320 	add.w	r3, r7, #32
 80012ee:	4618      	mov	r0, r3
 80012f0:	f004 fe0a 	bl	8005f08 <HAL_RCC_OscConfig>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012fa:	f000 f93b 	bl	8001574 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fe:	230f      	movs	r3, #15
 8001300:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001302:	2302      	movs	r3, #2
 8001304:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800130a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800130e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001310:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001314:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	2105      	movs	r1, #5
 800131c:	4618      	mov	r0, r3
 800131e:	f005 f86b 	bl	80063f8 <HAL_RCC_ClockConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001328:	f000 f924 	bl	8001574 <Error_Handler>
  }
}
 800132c:	bf00      	nop
 800132e:	3750      	adds	r7, #80	@ 0x50
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40023800 	.word	0x40023800
 8001338:	40007000 	.word	0x40007000

0800133c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001340:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <MX_I2C2_Init+0x58>)
 8001342:	4a15      	ldr	r2, [pc, #84]	@ (8001398 <MX_I2C2_Init+0x5c>)
 8001344:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001346:	4b13      	ldr	r3, [pc, #76]	@ (8001394 <MX_I2C2_Init+0x58>)
 8001348:	4a14      	ldr	r2, [pc, #80]	@ (800139c <MX_I2C2_Init+0x60>)
 800134a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800134c:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <MX_I2C2_Init+0x58>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001352:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <MX_I2C2_Init+0x58>)
 8001354:	2200      	movs	r2, #0
 8001356:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001358:	4b0e      	ldr	r3, [pc, #56]	@ (8001394 <MX_I2C2_Init+0x58>)
 800135a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800135e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001360:	4b0c      	ldr	r3, [pc, #48]	@ (8001394 <MX_I2C2_Init+0x58>)
 8001362:	2200      	movs	r2, #0
 8001364:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001366:	4b0b      	ldr	r3, [pc, #44]	@ (8001394 <MX_I2C2_Init+0x58>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800136c:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <MX_I2C2_Init+0x58>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001372:	4b08      	ldr	r3, [pc, #32]	@ (8001394 <MX_I2C2_Init+0x58>)
 8001374:	2200      	movs	r2, #0
 8001376:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001378:	4806      	ldr	r0, [pc, #24]	@ (8001394 <MX_I2C2_Init+0x58>)
 800137a:	f001 f9e5 	bl	8002748 <HAL_I2C_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001384:	f000 f8f6 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  I2C_Init(&hi2c2, 2);
 8001388:	2102      	movs	r1, #2
 800138a:	4802      	ldr	r0, [pc, #8]	@ (8001394 <MX_I2C2_Init+0x58>)
 800138c:	f7ff f9d2 	bl	8000734 <I2C_Init>
  /* USER CODE END I2C2_Init 2 */

}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000544 	.word	0x20000544
 8001398:	40005800 	.word	0x40005800
 800139c:	00061a80 	.word	0x00061a80

080013a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	4b10      	ldr	r3, [pc, #64]	@ (80013ec <MX_DMA_Init+0x4c>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	4a0f      	ldr	r2, [pc, #60]	@ (80013ec <MX_DMA_Init+0x4c>)
 80013b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b6:	4b0d      	ldr	r3, [pc, #52]	@ (80013ec <MX_DMA_Init+0x4c>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	200d      	movs	r0, #13
 80013c8:	f000 fc0d 	bl	8001be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80013cc:	200d      	movs	r0, #13
 80013ce:	f000 fc26 	bl	8001c1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2100      	movs	r1, #0
 80013d6:	202f      	movs	r0, #47	@ 0x2f
 80013d8:	f000 fc05 	bl	8001be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80013dc:	202f      	movs	r0, #47	@ 0x2f
 80013de:	f000 fc1e 	bl	8001c1e <HAL_NVIC_EnableIRQ>

}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800

080013f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08c      	sub	sp, #48	@ 0x30
 80013f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f6:	f107 031c 	add.w	r3, r7, #28
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	61bb      	str	r3, [r7, #24]
 800140a:	4b4d      	ldr	r3, [pc, #308]	@ (8001540 <MX_GPIO_Init+0x150>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	4a4c      	ldr	r2, [pc, #304]	@ (8001540 <MX_GPIO_Init+0x150>)
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	6313      	str	r3, [r2, #48]	@ 0x30
 8001416:	4b4a      	ldr	r3, [pc, #296]	@ (8001540 <MX_GPIO_Init+0x150>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	61bb      	str	r3, [r7, #24]
 8001420:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
 8001426:	4b46      	ldr	r3, [pc, #280]	@ (8001540 <MX_GPIO_Init+0x150>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	4a45      	ldr	r2, [pc, #276]	@ (8001540 <MX_GPIO_Init+0x150>)
 800142c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001430:	6313      	str	r3, [r2, #48]	@ 0x30
 8001432:	4b43      	ldr	r3, [pc, #268]	@ (8001540 <MX_GPIO_Init+0x150>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	4b3f      	ldr	r3, [pc, #252]	@ (8001540 <MX_GPIO_Init+0x150>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	4a3e      	ldr	r2, [pc, #248]	@ (8001540 <MX_GPIO_Init+0x150>)
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	6313      	str	r3, [r2, #48]	@ 0x30
 800144e:	4b3c      	ldr	r3, [pc, #240]	@ (8001540 <MX_GPIO_Init+0x150>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b38      	ldr	r3, [pc, #224]	@ (8001540 <MX_GPIO_Init+0x150>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	4a37      	ldr	r2, [pc, #220]	@ (8001540 <MX_GPIO_Init+0x150>)
 8001464:	f043 0310 	orr.w	r3, r3, #16
 8001468:	6313      	str	r3, [r2, #48]	@ 0x30
 800146a:	4b35      	ldr	r3, [pc, #212]	@ (8001540 <MX_GPIO_Init+0x150>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	f003 0310 	and.w	r3, r3, #16
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	4b31      	ldr	r3, [pc, #196]	@ (8001540 <MX_GPIO_Init+0x150>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	4a30      	ldr	r2, [pc, #192]	@ (8001540 <MX_GPIO_Init+0x150>)
 8001480:	f043 0308 	orr.w	r3, r3, #8
 8001484:	6313      	str	r3, [r2, #48]	@ 0x30
 8001486:	4b2e      	ldr	r3, [pc, #184]	@ (8001540 <MX_GPIO_Init+0x150>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	4b2a      	ldr	r3, [pc, #168]	@ (8001540 <MX_GPIO_Init+0x150>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a29      	ldr	r2, [pc, #164]	@ (8001540 <MX_GPIO_Init+0x150>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4b27      	ldr	r3, [pc, #156]	@ (8001540 <MX_GPIO_Init+0x150>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80014b4:	4823      	ldr	r0, [pc, #140]	@ (8001544 <MX_GPIO_Init+0x154>)
 80014b6:	f001 f915 	bl	80026e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014ba:	2301      	movs	r3, #1
 80014bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	4619      	mov	r1, r3
 80014ce:	481e      	ldr	r0, [pc, #120]	@ (8001548 <MX_GPIO_Init+0x158>)
 80014d0:	f000 ff6c 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80014d4:	2304      	movs	r3, #4
 80014d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d8:	2300      	movs	r3, #0
 80014da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80014e0:	f107 031c 	add.w	r3, r7, #28
 80014e4:	4619      	mov	r1, r3
 80014e6:	4819      	ldr	r0, [pc, #100]	@ (800154c <MX_GPIO_Init+0x15c>)
 80014e8:	f000 ff60 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014f2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80014f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014f8:	2302      	movs	r3, #2
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	4619      	mov	r1, r3
 8001502:	4813      	ldr	r0, [pc, #76]	@ (8001550 <MX_GPIO_Init+0x160>)
 8001504:	f000 ff52 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8001508:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800150c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150e:	2301      	movs	r3, #1
 8001510:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800151a:	f107 031c 	add.w	r3, r7, #28
 800151e:	4619      	mov	r1, r3
 8001520:	4808      	ldr	r0, [pc, #32]	@ (8001544 <MX_GPIO_Init+0x154>)
 8001522:	f000 ff43 	bl	80023ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	2017      	movs	r0, #23
 800152c:	f000 fb5b 	bl	8001be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001530:	2017      	movs	r0, #23
 8001532:	f000 fb74 	bl	8001c1e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001536:	bf00      	nop
 8001538:	3730      	adds	r7, #48	@ 0x30
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800
 8001544:	40020c00 	.word	0x40020c00
 8001548:	40020800 	.word	0x40020800
 800154c:	40020400 	.word	0x40020400
 8001550:	40021000 	.word	0x40021000

08001554 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  if(GPIO_PIN_9)
	  MPU6050_1.dataReadyFlag = 1;
 800155e:	4b04      	ldr	r3, [pc, #16]	@ (8001570 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001560:	2201      	movs	r2, #1
 8001562:	701a      	strb	r2, [r3, #0]
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	20000518 	.word	0x20000518

08001574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001578:	b672      	cpsid	i
}
 800157a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800157c:	bf00      	nop
 800157e:	e7fd      	b.n	800157c <Error_Handler+0x8>

08001580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <HAL_MspInit+0x4c>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158e:	4a0f      	ldr	r2, [pc, #60]	@ (80015cc <HAL_MspInit+0x4c>)
 8001590:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001594:	6453      	str	r3, [r2, #68]	@ 0x44
 8001596:	4b0d      	ldr	r3, [pc, #52]	@ (80015cc <HAL_MspInit+0x4c>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	603b      	str	r3, [r7, #0]
 80015a6:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <HAL_MspInit+0x4c>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015aa:	4a08      	ldr	r2, [pc, #32]	@ (80015cc <HAL_MspInit+0x4c>)
 80015ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b2:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <HAL_MspInit+0x4c>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015be:	2007      	movs	r0, #7
 80015c0:	f000 fb06 	bl	8001bd0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40023800 	.word	0x40023800

080015d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	@ 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a50      	ldr	r2, [pc, #320]	@ (8001730 <HAL_I2C_MspInit+0x160>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	f040 8099 	bne.w	8001726 <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f4:	2300      	movs	r3, #0
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001734 <HAL_I2C_MspInit+0x164>)
 80015fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fc:	4a4d      	ldr	r2, [pc, #308]	@ (8001734 <HAL_I2C_MspInit+0x164>)
 80015fe:	f043 0302 	orr.w	r3, r3, #2
 8001602:	6313      	str	r3, [r2, #48]	@ 0x30
 8001604:	4b4b      	ldr	r3, [pc, #300]	@ (8001734 <HAL_I2C_MspInit+0x164>)
 8001606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001610:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001616:	2312      	movs	r3, #18
 8001618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001622:	2304      	movs	r3, #4
 8001624:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	4842      	ldr	r0, [pc, #264]	@ (8001738 <HAL_I2C_MspInit+0x168>)
 800162e:	f000 febd 	bl	80023ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	4b3f      	ldr	r3, [pc, #252]	@ (8001734 <HAL_I2C_MspInit+0x164>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163a:	4a3e      	ldr	r2, [pc, #248]	@ (8001734 <HAL_I2C_MspInit+0x164>)
 800163c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001640:	6413      	str	r3, [r2, #64]	@ 0x40
 8001642:	4b3c      	ldr	r3, [pc, #240]	@ (8001734 <HAL_I2C_MspInit+0x164>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001646:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 800164e:	4b3b      	ldr	r3, [pc, #236]	@ (800173c <HAL_I2C_MspInit+0x16c>)
 8001650:	4a3b      	ldr	r2, [pc, #236]	@ (8001740 <HAL_I2C_MspInit+0x170>)
 8001652:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8001654:	4b39      	ldr	r3, [pc, #228]	@ (800173c <HAL_I2C_MspInit+0x16c>)
 8001656:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 800165a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800165c:	4b37      	ldr	r3, [pc, #220]	@ (800173c <HAL_I2C_MspInit+0x16c>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001662:	4b36      	ldr	r3, [pc, #216]	@ (800173c <HAL_I2C_MspInit+0x16c>)
 8001664:	2200      	movs	r2, #0
 8001666:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001668:	4b34      	ldr	r3, [pc, #208]	@ (800173c <HAL_I2C_MspInit+0x16c>)
 800166a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800166e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001670:	4b32      	ldr	r3, [pc, #200]	@ (800173c <HAL_I2C_MspInit+0x16c>)
 8001672:	2200      	movs	r2, #0
 8001674:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001676:	4b31      	ldr	r3, [pc, #196]	@ (800173c <HAL_I2C_MspInit+0x16c>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800167c:	4b2f      	ldr	r3, [pc, #188]	@ (800173c <HAL_I2C_MspInit+0x16c>)
 800167e:	2200      	movs	r2, #0
 8001680:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001682:	4b2e      	ldr	r3, [pc, #184]	@ (800173c <HAL_I2C_MspInit+0x16c>)
 8001684:	2200      	movs	r2, #0
 8001686:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001688:	4b2c      	ldr	r3, [pc, #176]	@ (800173c <HAL_I2C_MspInit+0x16c>)
 800168a:	2200      	movs	r2, #0
 800168c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800168e:	482b      	ldr	r0, [pc, #172]	@ (800173c <HAL_I2C_MspInit+0x16c>)
 8001690:	f000 fae0 	bl	8001c54 <HAL_DMA_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800169a:	f7ff ff6b 	bl	8001574 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a26      	ldr	r2, [pc, #152]	@ (800173c <HAL_I2C_MspInit+0x16c>)
 80016a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80016a4:	4a25      	ldr	r2, [pc, #148]	@ (800173c <HAL_I2C_MspInit+0x16c>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 80016aa:	4b26      	ldr	r3, [pc, #152]	@ (8001744 <HAL_I2C_MspInit+0x174>)
 80016ac:	4a26      	ldr	r2, [pc, #152]	@ (8001748 <HAL_I2C_MspInit+0x178>)
 80016ae:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 80016b0:	4b24      	ldr	r3, [pc, #144]	@ (8001744 <HAL_I2C_MspInit+0x174>)
 80016b2:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80016b6:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016b8:	4b22      	ldr	r3, [pc, #136]	@ (8001744 <HAL_I2C_MspInit+0x174>)
 80016ba:	2240      	movs	r2, #64	@ 0x40
 80016bc:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016be:	4b21      	ldr	r3, [pc, #132]	@ (8001744 <HAL_I2C_MspInit+0x174>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001744 <HAL_I2C_MspInit+0x174>)
 80016c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016ca:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001744 <HAL_I2C_MspInit+0x174>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001744 <HAL_I2C_MspInit+0x174>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80016d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <HAL_I2C_MspInit+0x174>)
 80016da:	2200      	movs	r2, #0
 80016dc:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016de:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <HAL_I2C_MspInit+0x174>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016e4:	4b17      	ldr	r3, [pc, #92]	@ (8001744 <HAL_I2C_MspInit+0x174>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80016ea:	4816      	ldr	r0, [pc, #88]	@ (8001744 <HAL_I2C_MspInit+0x174>)
 80016ec:	f000 fab2 	bl	8001c54 <HAL_DMA_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 80016f6:	f7ff ff3d 	bl	8001574 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a11      	ldr	r2, [pc, #68]	@ (8001744 <HAL_I2C_MspInit+0x174>)
 80016fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8001700:	4a10      	ldr	r2, [pc, #64]	@ (8001744 <HAL_I2C_MspInit+0x174>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	2021      	movs	r0, #33	@ 0x21
 800170c:	f000 fa6b 	bl	8001be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001710:	2021      	movs	r0, #33	@ 0x21
 8001712:	f000 fa84 	bl	8001c1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	2022      	movs	r0, #34	@ 0x22
 800171c:	f000 fa63 	bl	8001be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001720:	2022      	movs	r0, #34	@ 0x22
 8001722:	f000 fa7c 	bl	8001c1e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001726:	bf00      	nop
 8001728:	3728      	adds	r7, #40	@ 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40005800 	.word	0x40005800
 8001734:	40023800 	.word	0x40023800
 8001738:	40020400 	.word	0x40020400
 800173c:	20000598 	.word	0x20000598
 8001740:	40026040 	.word	0x40026040
 8001744:	200005f8 	.word	0x200005f8
 8001748:	400260b8 	.word	0x400260b8

0800174c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <NMI_Handler+0x4>

08001754 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <HardFault_Handler+0x4>

0800175c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <MemManage_Handler+0x4>

08001764 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <BusFault_Handler+0x4>

0800176c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <UsageFault_Handler+0x4>

08001774 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a2:	f000 f901 	bl	80019a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80017b0:	4802      	ldr	r0, [pc, #8]	@ (80017bc <DMA1_Stream2_IRQHandler+0x10>)
 80017b2:	f000 fb77 	bl	8001ea4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000598 	.word	0x20000598

080017c0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80017c4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80017c8:	f000 ffa6 	bl	8002718 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80017d4:	4802      	ldr	r0, [pc, #8]	@ (80017e0 <I2C2_EV_IRQHandler+0x10>)
 80017d6:	f001 fb69 	bl	8002eac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000544 	.word	0x20000544

080017e4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80017e8:	4802      	ldr	r0, [pc, #8]	@ (80017f4 <I2C2_ER_IRQHandler+0x10>)
 80017ea:	f001 fcb2 	bl	8003152 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000544 	.word	0x20000544

080017f8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80017fc:	4802      	ldr	r0, [pc, #8]	@ (8001808 <DMA1_Stream7_IRQHandler+0x10>)
 80017fe:	f000 fb51 	bl	8001ea4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200005f8 	.word	0x200005f8

0800180c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001810:	4802      	ldr	r0, [pc, #8]	@ (800181c <OTG_FS_IRQHandler+0x10>)
 8001812:	f003 fa6a 	bl	8004cea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20001c08 	.word	0x20001c08

08001820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001828:	4a14      	ldr	r2, [pc, #80]	@ (800187c <_sbrk+0x5c>)
 800182a:	4b15      	ldr	r3, [pc, #84]	@ (8001880 <_sbrk+0x60>)
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001834:	4b13      	ldr	r3, [pc, #76]	@ (8001884 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d102      	bne.n	8001842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800183c:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <_sbrk+0x64>)
 800183e:	4a12      	ldr	r2, [pc, #72]	@ (8001888 <_sbrk+0x68>)
 8001840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001842:	4b10      	ldr	r3, [pc, #64]	@ (8001884 <_sbrk+0x64>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	429a      	cmp	r2, r3
 800184e:	d207      	bcs.n	8001860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001850:	f009 f896 	bl	800a980 <__errno>
 8001854:	4603      	mov	r3, r0
 8001856:	220c      	movs	r2, #12
 8001858:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
 800185e:	e009      	b.n	8001874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001860:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <_sbrk+0x64>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001866:	4b07      	ldr	r3, [pc, #28]	@ (8001884 <_sbrk+0x64>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	4a05      	ldr	r2, [pc, #20]	@ (8001884 <_sbrk+0x64>)
 8001870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001872:	68fb      	ldr	r3, [r7, #12]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20020000 	.word	0x20020000
 8001880:	00000400 	.word	0x00000400
 8001884:	20000720 	.word	0x20000720
 8001888:	20002458 	.word	0x20002458

0800188c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001890:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <SystemInit+0x20>)
 8001892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001896:	4a05      	ldr	r2, [pc, #20]	@ (80018ac <SystemInit+0x20>)
 8001898:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800189c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018b4:	f7ff ffea 	bl	800188c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018b8:	480c      	ldr	r0, [pc, #48]	@ (80018ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018ba:	490d      	ldr	r1, [pc, #52]	@ (80018f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018bc:	4a0d      	ldr	r2, [pc, #52]	@ (80018f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c0:	e002      	b.n	80018c8 <LoopCopyDataInit>

080018c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c6:	3304      	adds	r3, #4

080018c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018cc:	d3f9      	bcc.n	80018c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ce:	4a0a      	ldr	r2, [pc, #40]	@ (80018f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018d0:	4c0a      	ldr	r4, [pc, #40]	@ (80018fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d4:	e001      	b.n	80018da <LoopFillZerobss>

080018d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d8:	3204      	adds	r2, #4

080018da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018dc:	d3fb      	bcc.n	80018d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018de:	f009 f855 	bl	800a98c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018e2:	f7ff fbbb 	bl	800105c <main>
  bx  lr    
 80018e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f0:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 80018f4:	0800b3b4 	.word	0x0800b3b4
  ldr r2, =_sbss
 80018f8:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 80018fc:	20002454 	.word	0x20002454

08001900 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001900:	e7fe      	b.n	8001900 <ADC_IRQHandler>
	...

08001904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001908:	4b0e      	ldr	r3, [pc, #56]	@ (8001944 <HAL_Init+0x40>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a0d      	ldr	r2, [pc, #52]	@ (8001944 <HAL_Init+0x40>)
 800190e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001912:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001914:	4b0b      	ldr	r3, [pc, #44]	@ (8001944 <HAL_Init+0x40>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0a      	ldr	r2, [pc, #40]	@ (8001944 <HAL_Init+0x40>)
 800191a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800191e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001920:	4b08      	ldr	r3, [pc, #32]	@ (8001944 <HAL_Init+0x40>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a07      	ldr	r2, [pc, #28]	@ (8001944 <HAL_Init+0x40>)
 8001926:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800192a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800192c:	2003      	movs	r0, #3
 800192e:	f000 f94f 	bl	8001bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001932:	2000      	movs	r0, #0
 8001934:	f000 f808 	bl	8001948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001938:	f7ff fe22 	bl	8001580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023c00 	.word	0x40023c00

08001948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001950:	4b12      	ldr	r3, [pc, #72]	@ (800199c <HAL_InitTick+0x54>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b12      	ldr	r3, [pc, #72]	@ (80019a0 <HAL_InitTick+0x58>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800195e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001962:	fbb2 f3f3 	udiv	r3, r2, r3
 8001966:	4618      	mov	r0, r3
 8001968:	f000 f967 	bl	8001c3a <HAL_SYSTICK_Config>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e00e      	b.n	8001994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b0f      	cmp	r3, #15
 800197a:	d80a      	bhi.n	8001992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800197c:	2200      	movs	r2, #0
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	f04f 30ff 	mov.w	r0, #4294967295
 8001984:	f000 f92f 	bl	8001be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001988:	4a06      	ldr	r2, [pc, #24]	@ (80019a4 <HAL_InitTick+0x5c>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	e000      	b.n	8001994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000000 	.word	0x20000000
 80019a0:	20000008 	.word	0x20000008
 80019a4:	20000004 	.word	0x20000004

080019a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019ac:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <HAL_IncTick+0x20>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <HAL_IncTick+0x24>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4413      	add	r3, r2
 80019b8:	4a04      	ldr	r2, [pc, #16]	@ (80019cc <HAL_IncTick+0x24>)
 80019ba:	6013      	str	r3, [r2, #0]
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	20000008 	.word	0x20000008
 80019cc:	20000724 	.word	0x20000724

080019d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return uwTick;
 80019d4:	4b03      	ldr	r3, [pc, #12]	@ (80019e4 <HAL_GetTick+0x14>)
 80019d6:	681b      	ldr	r3, [r3, #0]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	20000724 	.word	0x20000724

080019e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019f0:	f7ff ffee 	bl	80019d0 <HAL_GetTick>
 80019f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a00:	d005      	beq.n	8001a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a02:	4b0a      	ldr	r3, [pc, #40]	@ (8001a2c <HAL_Delay+0x44>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a0e:	bf00      	nop
 8001a10:	f7ff ffde 	bl	80019d0 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d8f7      	bhi.n	8001a10 <HAL_Delay+0x28>
  {
  }
}
 8001a20:	bf00      	nop
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000008 	.word	0x20000008

08001a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a40:	4b0c      	ldr	r3, [pc, #48]	@ (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a62:	4a04      	ldr	r2, [pc, #16]	@ (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	60d3      	str	r3, [r2, #12]
}
 8001a68:	bf00      	nop
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a7c:	4b04      	ldr	r3, [pc, #16]	@ (8001a90 <__NVIC_GetPriorityGrouping+0x18>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	0a1b      	lsrs	r3, r3, #8
 8001a82:	f003 0307 	and.w	r3, r3, #7
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	db0b      	blt.n	8001abe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	f003 021f 	and.w	r2, r3, #31
 8001aac:	4907      	ldr	r1, [pc, #28]	@ (8001acc <__NVIC_EnableIRQ+0x38>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	095b      	lsrs	r3, r3, #5
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000e100 	.word	0xe000e100

08001ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	6039      	str	r1, [r7, #0]
 8001ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	db0a      	blt.n	8001afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	490c      	ldr	r1, [pc, #48]	@ (8001b1c <__NVIC_SetPriority+0x4c>)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	0112      	lsls	r2, r2, #4
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	440b      	add	r3, r1
 8001af4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af8:	e00a      	b.n	8001b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4908      	ldr	r1, [pc, #32]	@ (8001b20 <__NVIC_SetPriority+0x50>)
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	3b04      	subs	r3, #4
 8001b08:	0112      	lsls	r2, r2, #4
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	761a      	strb	r2, [r3, #24]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000e100 	.word	0xe000e100
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	@ 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f1c3 0307 	rsb	r3, r3, #7
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	bf28      	it	cs
 8001b42:	2304      	movcs	r3, #4
 8001b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	2b06      	cmp	r3, #6
 8001b4c:	d902      	bls.n	8001b54 <NVIC_EncodePriority+0x30>
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3b03      	subs	r3, #3
 8001b52:	e000      	b.n	8001b56 <NVIC_EncodePriority+0x32>
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43da      	mvns	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	401a      	ands	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	43d9      	mvns	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	4313      	orrs	r3, r2
         );
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3724      	adds	r7, #36	@ 0x24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b9c:	d301      	bcc.n	8001ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00f      	b.n	8001bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bcc <SysTick_Config+0x40>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001baa:	210f      	movs	r1, #15
 8001bac:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb0:	f7ff ff8e 	bl	8001ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb4:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <SysTick_Config+0x40>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bba:	4b04      	ldr	r3, [pc, #16]	@ (8001bcc <SysTick_Config+0x40>)
 8001bbc:	2207      	movs	r2, #7
 8001bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	e000e010 	.word	0xe000e010

08001bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ff29 	bl	8001a30 <__NVIC_SetPriorityGrouping>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b086      	sub	sp, #24
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
 8001bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf8:	f7ff ff3e 	bl	8001a78 <__NVIC_GetPriorityGrouping>
 8001bfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	6978      	ldr	r0, [r7, #20]
 8001c04:	f7ff ff8e 	bl	8001b24 <NVIC_EncodePriority>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff5d 	bl	8001ad0 <__NVIC_SetPriority>
}
 8001c16:	bf00      	nop
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4603      	mov	r3, r0
 8001c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff31 	bl	8001a94 <__NVIC_EnableIRQ>
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff ffa2 	bl	8001b8c <SysTick_Config>
 8001c48:	4603      	mov	r3, r0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c60:	f7ff feb6 	bl	80019d0 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e099      	b.n	8001da4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2202      	movs	r2, #2
 8001c74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0201 	bic.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c90:	e00f      	b.n	8001cb2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c92:	f7ff fe9d 	bl	80019d0 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b05      	cmp	r3, #5
 8001c9e:	d908      	bls.n	8001cb2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2203      	movs	r2, #3
 8001caa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e078      	b.n	8001da4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1e8      	bne.n	8001c92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	4b38      	ldr	r3, [pc, #224]	@ (8001dac <HAL_DMA_Init+0x158>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d107      	bne.n	8001d1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d14:	4313      	orrs	r3, r2
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	f023 0307 	bic.w	r3, r3, #7
 8001d32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	d117      	bne.n	8001d76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00e      	beq.n	8001d76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 faab 	bl	80022b4 <DMA_CheckFifoParam>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d008      	beq.n	8001d76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2240      	movs	r2, #64	@ 0x40
 8001d68:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001d72:	2301      	movs	r3, #1
 8001d74:	e016      	b.n	8001da4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 fa62 	bl	8002248 <DMA_CalcBaseAndBitshift>
 8001d84:	4603      	mov	r3, r0
 8001d86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d8c:	223f      	movs	r2, #63	@ 0x3f
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	f010803f 	.word	0xf010803f

08001db0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_DMA_Start_IT+0x26>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e040      	b.n	8001e58 <HAL_DMA_Start_IT+0xa8>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d12f      	bne.n	8001e4a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2202      	movs	r2, #2
 8001dee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	68b9      	ldr	r1, [r7, #8]
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 f9f4 	bl	80021ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e08:	223f      	movs	r2, #63	@ 0x3f
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0216 	orr.w	r2, r2, #22
 8001e1e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d007      	beq.n	8001e38 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0208 	orr.w	r2, r2, #8
 8001e36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	e005      	b.n	8001e56 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e52:	2302      	movs	r3, #2
 8001e54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d004      	beq.n	8001e7e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2280      	movs	r2, #128	@ 0x80
 8001e78:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e00c      	b.n	8001e98 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2205      	movs	r2, #5
 8001e82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0201 	bic.w	r2, r2, #1
 8001e94:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001eb0:	4b8e      	ldr	r3, [pc, #568]	@ (80020ec <HAL_DMA_IRQHandler+0x248>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a8e      	ldr	r2, [pc, #568]	@ (80020f0 <HAL_DMA_IRQHandler+0x24c>)
 8001eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eba:	0a9b      	lsrs	r3, r3, #10
 8001ebc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ece:	2208      	movs	r2, #8
 8001ed0:	409a      	lsls	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d01a      	beq.n	8001f10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d013      	beq.n	8001f10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0204 	bic.w	r2, r2, #4
 8001ef6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001efc:	2208      	movs	r2, #8
 8001efe:	409a      	lsls	r2, r3
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f08:	f043 0201 	orr.w	r2, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f14:	2201      	movs	r2, #1
 8001f16:	409a      	lsls	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d012      	beq.n	8001f46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00b      	beq.n	8001f46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f32:	2201      	movs	r2, #1
 8001f34:	409a      	lsls	r2, r3
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f3e:	f043 0202 	orr.w	r2, r3, #2
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f4a:	2204      	movs	r2, #4
 8001f4c:	409a      	lsls	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	4013      	ands	r3, r2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d012      	beq.n	8001f7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00b      	beq.n	8001f7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f68:	2204      	movs	r2, #4
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f74:	f043 0204 	orr.w	r2, r3, #4
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f80:	2210      	movs	r2, #16
 8001f82:	409a      	lsls	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d043      	beq.n	8002014 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0308 	and.w	r3, r3, #8
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d03c      	beq.n	8002014 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f9e:	2210      	movs	r2, #16
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d018      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d108      	bne.n	8001fd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d024      	beq.n	8002014 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	4798      	blx	r3
 8001fd2:	e01f      	b.n	8002014 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d01b      	beq.n	8002014 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	4798      	blx	r3
 8001fe4:	e016      	b.n	8002014 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d107      	bne.n	8002004 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0208 	bic.w	r2, r2, #8
 8002002:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002018:	2220      	movs	r2, #32
 800201a:	409a      	lsls	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4013      	ands	r3, r2
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 808f 	beq.w	8002144 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 8087 	beq.w	8002144 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800203a:	2220      	movs	r2, #32
 800203c:	409a      	lsls	r2, r3
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b05      	cmp	r3, #5
 800204c:	d136      	bne.n	80020bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0216 	bic.w	r2, r2, #22
 800205c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	695a      	ldr	r2, [r3, #20]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800206c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002072:	2b00      	cmp	r3, #0
 8002074:	d103      	bne.n	800207e <HAL_DMA_IRQHandler+0x1da>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800207a:	2b00      	cmp	r3, #0
 800207c:	d007      	beq.n	800208e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0208 	bic.w	r2, r2, #8
 800208c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002092:	223f      	movs	r2, #63	@ 0x3f
 8002094:	409a      	lsls	r2, r3
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d07e      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	4798      	blx	r3
        }
        return;
 80020ba:	e079      	b.n	80021b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d01d      	beq.n	8002106 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10d      	bne.n	80020f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d031      	beq.n	8002144 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	4798      	blx	r3
 80020e8:	e02c      	b.n	8002144 <HAL_DMA_IRQHandler+0x2a0>
 80020ea:	bf00      	nop
 80020ec:	20000000 	.word	0x20000000
 80020f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d023      	beq.n	8002144 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	4798      	blx	r3
 8002104:	e01e      	b.n	8002144 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10f      	bne.n	8002134 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0210 	bic.w	r2, r2, #16
 8002122:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002148:	2b00      	cmp	r3, #0
 800214a:	d032      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d022      	beq.n	800219e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2205      	movs	r2, #5
 800215c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0201 	bic.w	r2, r2, #1
 800216e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	3301      	adds	r3, #1
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	429a      	cmp	r2, r3
 800217a:	d307      	bcc.n	800218c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f2      	bne.n	8002170 <HAL_DMA_IRQHandler+0x2cc>
 800218a:	e000      	b.n	800218e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800218c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d005      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	4798      	blx	r3
 80021ae:	e000      	b.n	80021b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80021b0:	bf00      	nop
    }
  }
}
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021c6:	b2db      	uxtb	r3, r3
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
 80021f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002208:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2b40      	cmp	r3, #64	@ 0x40
 8002218:	d108      	bne.n	800222c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800222a:	e007      	b.n	800223c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	60da      	str	r2, [r3, #12]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	3b10      	subs	r3, #16
 8002258:	4a14      	ldr	r2, [pc, #80]	@ (80022ac <DMA_CalcBaseAndBitshift+0x64>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	091b      	lsrs	r3, r3, #4
 8002260:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002262:	4a13      	ldr	r2, [pc, #76]	@ (80022b0 <DMA_CalcBaseAndBitshift+0x68>)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4413      	add	r3, r2
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2b03      	cmp	r3, #3
 8002274:	d909      	bls.n	800228a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800227e:	f023 0303 	bic.w	r3, r3, #3
 8002282:	1d1a      	adds	r2, r3, #4
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	659a      	str	r2, [r3, #88]	@ 0x58
 8002288:	e007      	b.n	800229a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002292:	f023 0303 	bic.w	r3, r3, #3
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	aaaaaaab 	.word	0xaaaaaaab
 80022b0:	0800b344 	.word	0x0800b344

080022b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d11f      	bne.n	800230e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d856      	bhi.n	8002382 <DMA_CheckFifoParam+0xce>
 80022d4:	a201      	add	r2, pc, #4	@ (adr r2, 80022dc <DMA_CheckFifoParam+0x28>)
 80022d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022da:	bf00      	nop
 80022dc:	080022ed 	.word	0x080022ed
 80022e0:	080022ff 	.word	0x080022ff
 80022e4:	080022ed 	.word	0x080022ed
 80022e8:	08002383 	.word	0x08002383
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d046      	beq.n	8002386 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022fc:	e043      	b.n	8002386 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002302:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002306:	d140      	bne.n	800238a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800230c:	e03d      	b.n	800238a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002316:	d121      	bne.n	800235c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2b03      	cmp	r3, #3
 800231c:	d837      	bhi.n	800238e <DMA_CheckFifoParam+0xda>
 800231e:	a201      	add	r2, pc, #4	@ (adr r2, 8002324 <DMA_CheckFifoParam+0x70>)
 8002320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002324:	08002335 	.word	0x08002335
 8002328:	0800233b 	.word	0x0800233b
 800232c:	08002335 	.word	0x08002335
 8002330:	0800234d 	.word	0x0800234d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
      break;
 8002338:	e030      	b.n	800239c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d025      	beq.n	8002392 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800234a:	e022      	b.n	8002392 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002350:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002354:	d11f      	bne.n	8002396 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800235a:	e01c      	b.n	8002396 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d903      	bls.n	800236a <DMA_CheckFifoParam+0xb6>
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b03      	cmp	r3, #3
 8002366:	d003      	beq.n	8002370 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002368:	e018      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	73fb      	strb	r3, [r7, #15]
      break;
 800236e:	e015      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002374:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00e      	beq.n	800239a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	73fb      	strb	r3, [r7, #15]
      break;
 8002380:	e00b      	b.n	800239a <DMA_CheckFifoParam+0xe6>
      break;
 8002382:	bf00      	nop
 8002384:	e00a      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      break;
 8002386:	bf00      	nop
 8002388:	e008      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      break;
 800238a:	bf00      	nop
 800238c:	e006      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      break;
 800238e:	bf00      	nop
 8002390:	e004      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      break;
 8002392:	bf00      	nop
 8002394:	e002      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      break;   
 8002396:	bf00      	nop
 8002398:	e000      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      break;
 800239a:	bf00      	nop
    }
  } 
  
  return status; 
 800239c:	7bfb      	ldrb	r3, [r7, #15]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop

080023ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b089      	sub	sp, #36	@ 0x24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023be:	2300      	movs	r3, #0
 80023c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
 80023c6:	e16b      	b.n	80026a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023c8:	2201      	movs	r2, #1
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	4013      	ands	r3, r2
 80023da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	f040 815a 	bne.w	800269a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d005      	beq.n	80023fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d130      	bne.n	8002460 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	2203      	movs	r2, #3
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002434:	2201      	movs	r2, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f003 0201 	and.w	r2, r3, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	2b03      	cmp	r3, #3
 800246a:	d017      	beq.n	800249c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	2203      	movs	r2, #3
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d123      	bne.n	80024f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	08da      	lsrs	r2, r3, #3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3208      	adds	r2, #8
 80024b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	220f      	movs	r2, #15
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	08da      	lsrs	r2, r3, #3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3208      	adds	r2, #8
 80024ea:	69b9      	ldr	r1, [r7, #24]
 80024ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	2203      	movs	r2, #3
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0203 	and.w	r2, r3, #3
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80b4 	beq.w	800269a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	4b60      	ldr	r3, [pc, #384]	@ (80026b8 <HAL_GPIO_Init+0x30c>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253a:	4a5f      	ldr	r2, [pc, #380]	@ (80026b8 <HAL_GPIO_Init+0x30c>)
 800253c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002540:	6453      	str	r3, [r2, #68]	@ 0x44
 8002542:	4b5d      	ldr	r3, [pc, #372]	@ (80026b8 <HAL_GPIO_Init+0x30c>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002546:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800254e:	4a5b      	ldr	r2, [pc, #364]	@ (80026bc <HAL_GPIO_Init+0x310>)
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	089b      	lsrs	r3, r3, #2
 8002554:	3302      	adds	r3, #2
 8002556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	220f      	movs	r2, #15
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a52      	ldr	r2, [pc, #328]	@ (80026c0 <HAL_GPIO_Init+0x314>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d02b      	beq.n	80025d2 <HAL_GPIO_Init+0x226>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a51      	ldr	r2, [pc, #324]	@ (80026c4 <HAL_GPIO_Init+0x318>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d025      	beq.n	80025ce <HAL_GPIO_Init+0x222>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a50      	ldr	r2, [pc, #320]	@ (80026c8 <HAL_GPIO_Init+0x31c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d01f      	beq.n	80025ca <HAL_GPIO_Init+0x21e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4f      	ldr	r2, [pc, #316]	@ (80026cc <HAL_GPIO_Init+0x320>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d019      	beq.n	80025c6 <HAL_GPIO_Init+0x21a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4e      	ldr	r2, [pc, #312]	@ (80026d0 <HAL_GPIO_Init+0x324>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d013      	beq.n	80025c2 <HAL_GPIO_Init+0x216>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a4d      	ldr	r2, [pc, #308]	@ (80026d4 <HAL_GPIO_Init+0x328>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d00d      	beq.n	80025be <HAL_GPIO_Init+0x212>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a4c      	ldr	r2, [pc, #304]	@ (80026d8 <HAL_GPIO_Init+0x32c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d007      	beq.n	80025ba <HAL_GPIO_Init+0x20e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a4b      	ldr	r2, [pc, #300]	@ (80026dc <HAL_GPIO_Init+0x330>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d101      	bne.n	80025b6 <HAL_GPIO_Init+0x20a>
 80025b2:	2307      	movs	r3, #7
 80025b4:	e00e      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025b6:	2308      	movs	r3, #8
 80025b8:	e00c      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025ba:	2306      	movs	r3, #6
 80025bc:	e00a      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025be:	2305      	movs	r3, #5
 80025c0:	e008      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025c2:	2304      	movs	r3, #4
 80025c4:	e006      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025c6:	2303      	movs	r3, #3
 80025c8:	e004      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e002      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025d2:	2300      	movs	r3, #0
 80025d4:	69fa      	ldr	r2, [r7, #28]
 80025d6:	f002 0203 	and.w	r2, r2, #3
 80025da:	0092      	lsls	r2, r2, #2
 80025dc:	4093      	lsls	r3, r2
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025e4:	4935      	ldr	r1, [pc, #212]	@ (80026bc <HAL_GPIO_Init+0x310>)
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	089b      	lsrs	r3, r3, #2
 80025ea:	3302      	adds	r3, #2
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025f2:	4b3b      	ldr	r3, [pc, #236]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002616:	4a32      	ldr	r2, [pc, #200]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800261c:	4b30      	ldr	r3, [pc, #192]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002640:	4a27      	ldr	r2, [pc, #156]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002646:	4b26      	ldr	r3, [pc, #152]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	43db      	mvns	r3, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4013      	ands	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800266a:	4a1d      	ldr	r2, [pc, #116]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002670:	4b1b      	ldr	r3, [pc, #108]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002694:	4a12      	ldr	r2, [pc, #72]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3301      	adds	r3, #1
 800269e:	61fb      	str	r3, [r7, #28]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	2b0f      	cmp	r3, #15
 80026a4:	f67f ae90 	bls.w	80023c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026a8:	bf00      	nop
 80026aa:	bf00      	nop
 80026ac:	3724      	adds	r7, #36	@ 0x24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40013800 	.word	0x40013800
 80026c0:	40020000 	.word	0x40020000
 80026c4:	40020400 	.word	0x40020400
 80026c8:	40020800 	.word	0x40020800
 80026cc:	40020c00 	.word	0x40020c00
 80026d0:	40021000 	.word	0x40021000
 80026d4:	40021400 	.word	0x40021400
 80026d8:	40021800 	.word	0x40021800
 80026dc:	40021c00 	.word	0x40021c00
 80026e0:	40013c00 	.word	0x40013c00

080026e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	807b      	strh	r3, [r7, #2]
 80026f0:	4613      	mov	r3, r2
 80026f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026f4:	787b      	ldrb	r3, [r7, #1]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026fa:	887a      	ldrh	r2, [r7, #2]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002700:	e003      	b.n	800270a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002702:	887b      	ldrh	r3, [r7, #2]
 8002704:	041a      	lsls	r2, r3, #16
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	619a      	str	r2, [r3, #24]
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002722:	4b08      	ldr	r3, [pc, #32]	@ (8002744 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002724:	695a      	ldr	r2, [r3, #20]
 8002726:	88fb      	ldrh	r3, [r7, #6]
 8002728:	4013      	ands	r3, r2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d006      	beq.n	800273c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800272e:	4a05      	ldr	r2, [pc, #20]	@ (8002744 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002730:	88fb      	ldrh	r3, [r7, #6]
 8002732:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002734:	88fb      	ldrh	r3, [r7, #6]
 8002736:	4618      	mov	r0, r3
 8002738:	f7fe ff0c 	bl	8001554 <HAL_GPIO_EXTI_Callback>
  }
}
 800273c:	bf00      	nop
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40013c00 	.word	0x40013c00

08002748 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e12b      	b.n	80029b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d106      	bne.n	8002774 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7fe ff2e 	bl	80015d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2224      	movs	r2, #36	@ 0x24
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0201 	bic.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800279a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027ac:	f004 f81c 	bl	80067e8 <HAL_RCC_GetPCLK1Freq>
 80027b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	4a81      	ldr	r2, [pc, #516]	@ (80029bc <HAL_I2C_Init+0x274>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d807      	bhi.n	80027cc <HAL_I2C_Init+0x84>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4a80      	ldr	r2, [pc, #512]	@ (80029c0 <HAL_I2C_Init+0x278>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	bf94      	ite	ls
 80027c4:	2301      	movls	r3, #1
 80027c6:	2300      	movhi	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	e006      	b.n	80027da <HAL_I2C_Init+0x92>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4a7d      	ldr	r2, [pc, #500]	@ (80029c4 <HAL_I2C_Init+0x27c>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	bf94      	ite	ls
 80027d4:	2301      	movls	r3, #1
 80027d6:	2300      	movhi	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e0e7      	b.n	80029b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4a78      	ldr	r2, [pc, #480]	@ (80029c8 <HAL_I2C_Init+0x280>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	0c9b      	lsrs	r3, r3, #18
 80027ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	430a      	orrs	r2, r1
 8002800:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	4a6a      	ldr	r2, [pc, #424]	@ (80029bc <HAL_I2C_Init+0x274>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d802      	bhi.n	800281c <HAL_I2C_Init+0xd4>
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	3301      	adds	r3, #1
 800281a:	e009      	b.n	8002830 <HAL_I2C_Init+0xe8>
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002822:	fb02 f303 	mul.w	r3, r2, r3
 8002826:	4a69      	ldr	r2, [pc, #420]	@ (80029cc <HAL_I2C_Init+0x284>)
 8002828:	fba2 2303 	umull	r2, r3, r2, r3
 800282c:	099b      	lsrs	r3, r3, #6
 800282e:	3301      	adds	r3, #1
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	430b      	orrs	r3, r1
 8002836:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002842:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	495c      	ldr	r1, [pc, #368]	@ (80029bc <HAL_I2C_Init+0x274>)
 800284c:	428b      	cmp	r3, r1
 800284e:	d819      	bhi.n	8002884 <HAL_I2C_Init+0x13c>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	1e59      	subs	r1, r3, #1
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	fbb1 f3f3 	udiv	r3, r1, r3
 800285e:	1c59      	adds	r1, r3, #1
 8002860:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002864:	400b      	ands	r3, r1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00a      	beq.n	8002880 <HAL_I2C_Init+0x138>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	1e59      	subs	r1, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	fbb1 f3f3 	udiv	r3, r1, r3
 8002878:	3301      	adds	r3, #1
 800287a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800287e:	e051      	b.n	8002924 <HAL_I2C_Init+0x1dc>
 8002880:	2304      	movs	r3, #4
 8002882:	e04f      	b.n	8002924 <HAL_I2C_Init+0x1dc>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d111      	bne.n	80028b0 <HAL_I2C_Init+0x168>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1e58      	subs	r0, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6859      	ldr	r1, [r3, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	440b      	add	r3, r1
 800289a:	fbb0 f3f3 	udiv	r3, r0, r3
 800289e:	3301      	adds	r3, #1
 80028a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	bf0c      	ite	eq
 80028a8:	2301      	moveq	r3, #1
 80028aa:	2300      	movne	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	e012      	b.n	80028d6 <HAL_I2C_Init+0x18e>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	1e58      	subs	r0, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6859      	ldr	r1, [r3, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	0099      	lsls	r1, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c6:	3301      	adds	r3, #1
 80028c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bf0c      	ite	eq
 80028d0:	2301      	moveq	r3, #1
 80028d2:	2300      	movne	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <HAL_I2C_Init+0x196>
 80028da:	2301      	movs	r3, #1
 80028dc:	e022      	b.n	8002924 <HAL_I2C_Init+0x1dc>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10e      	bne.n	8002904 <HAL_I2C_Init+0x1bc>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	1e58      	subs	r0, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6859      	ldr	r1, [r3, #4]
 80028ee:	460b      	mov	r3, r1
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	440b      	add	r3, r1
 80028f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f8:	3301      	adds	r3, #1
 80028fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002902:	e00f      	b.n	8002924 <HAL_I2C_Init+0x1dc>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	1e58      	subs	r0, r3, #1
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6859      	ldr	r1, [r3, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	0099      	lsls	r1, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	fbb0 f3f3 	udiv	r3, r0, r3
 800291a:	3301      	adds	r3, #1
 800291c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002920:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	6809      	ldr	r1, [r1, #0]
 8002928:	4313      	orrs	r3, r2
 800292a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69da      	ldr	r2, [r3, #28]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002952:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6911      	ldr	r1, [r2, #16]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	68d2      	ldr	r2, [r2, #12]
 800295e:	4311      	orrs	r1, r2
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6812      	ldr	r2, [r2, #0]
 8002964:	430b      	orrs	r3, r1
 8002966:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695a      	ldr	r2, [r3, #20]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0201 	orr.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2220      	movs	r2, #32
 800299e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	000186a0 	.word	0x000186a0
 80029c0:	001e847f 	.word	0x001e847f
 80029c4:	003d08ff 	.word	0x003d08ff
 80029c8:	431bde83 	.word	0x431bde83
 80029cc:	10624dd3 	.word	0x10624dd3

080029d0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029e2:	2b80      	cmp	r3, #128	@ 0x80
 80029e4:	d103      	bne.n	80029ee <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2200      	movs	r2, #0
 80029ec:	611a      	str	r2, [r3, #16]
  }
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
	...

080029fc <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	461a      	mov	r2, r3
 8002a08:	460b      	mov	r3, r1
 8002a0a:	817b      	strh	r3, [r7, #10]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b20      	cmp	r3, #32
 8002a1e:	f040 8109 	bne.w	8002c34 <HAL_I2C_Master_Transmit_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002a22:	4b87      	ldr	r3, [pc, #540]	@ (8002c40 <HAL_I2C_Master_Transmit_DMA+0x244>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	08db      	lsrs	r3, r3, #3
 8002a28:	4a86      	ldr	r2, [pc, #536]	@ (8002c44 <HAL_I2C_Master_Transmit_DMA+0x248>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	0a1a      	lsrs	r2, r3, #8
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	009a      	lsls	r2, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d112      	bne.n	8002a6e <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2220      	movs	r2, #32
 8002a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a62:	f043 0220 	orr.w	r2, r3, #32
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e0e3      	b.n	8002c36 <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d0df      	beq.n	8002a3c <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_I2C_Master_Transmit_DMA+0x8e>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e0d5      	b.n	8002c36 <HAL_I2C_Master_Transmit_DMA+0x23a>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d007      	beq.n	8002ab0 <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0201 	orr.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002abe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2221      	movs	r2, #33	@ 0x21
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2210      	movs	r2, #16
 8002acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	893a      	ldrh	r2, [r7, #8]
 8002ae0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4a56      	ldr	r2, [pc, #344]	@ (8002c48 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8002af0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002af2:	897a      	ldrh	r2, [r7, #10]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d07b      	beq.n	8002bf8 <HAL_I2C_Master_Transmit_DMA+0x1fc>
    {
      if (hi2c->hdmatx != NULL)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d02a      	beq.n	8002b5e <HAL_I2C_Master_Transmit_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b0c:	4a4f      	ldr	r2, [pc, #316]	@ (8002c4c <HAL_I2C_Master_Transmit_DMA+0x250>)
 8002b0e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b14:	4a4e      	ldr	r2, [pc, #312]	@ (8002c50 <HAL_I2C_Master_Transmit_DMA+0x254>)
 8002b16:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b24:	2200      	movs	r2, #0
 8002b26:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b34:	2200      	movs	r2, #0
 8002b36:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b40:	4619      	mov	r1, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	3310      	adds	r3, #16
 8002b48:	461a      	mov	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b4e:	f7ff f92f 	bl	8001db0 <HAL_DMA_Start_IT>
 8002b52:	4603      	mov	r3, r0
 8002b54:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002b56:	7dfb      	ldrb	r3, [r7, #23]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d139      	bne.n	8002bd0 <HAL_I2C_Master_Transmit_DMA+0x1d4>
 8002b5c:	e013      	b.n	8002b86 <HAL_I2C_Master_Transmit_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2220      	movs	r2, #32
 8002b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b72:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e057      	b.n	8002c36 <HAL_I2C_Master_Transmit_DMA+0x23a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002b9c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bac:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002bbc:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	e02f      	b.n	8002c30 <HAL_I2C_Master_Transmit_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be4:	f043 0210 	orr.w	r2, r3, #16
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e01e      	b.n	8002c36 <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c06:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c16:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002c2e:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8002c30:	2300      	movs	r3, #0
 8002c32:	e000      	b.n	8002c36 <HAL_I2C_Master_Transmit_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8002c34:	2302      	movs	r3, #2
  }
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000000 	.word	0x20000000
 8002c44:	14f8b589 	.word	0x14f8b589
 8002c48:	ffff0000 	.word	0xffff0000
 8002c4c:	08004641 	.word	0x08004641
 8002c50:	080047ff 	.word	0x080047ff

08002c54 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	607a      	str	r2, [r7, #4]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	460b      	mov	r3, r1
 8002c62:	817b      	strh	r3, [r7, #10]
 8002c64:	4613      	mov	r3, r2
 8002c66:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b20      	cmp	r3, #32
 8002c76:	f040 8109 	bne.w	8002e8c <HAL_I2C_Master_Receive_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c7a:	4b87      	ldr	r3, [pc, #540]	@ (8002e98 <HAL_I2C_Master_Receive_DMA+0x244>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	08db      	lsrs	r3, r3, #3
 8002c80:	4a86      	ldr	r2, [pc, #536]	@ (8002e9c <HAL_I2C_Master_Receive_DMA+0x248>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
 8002c86:	0a1a      	lsrs	r2, r3, #8
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009a      	lsls	r2, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d112      	bne.n	8002cc6 <HAL_I2C_Master_Receive_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cba:	f043 0220 	orr.w	r2, r3, #32
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e0e3      	b.n	8002e8e <HAL_I2C_Master_Receive_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d0df      	beq.n	8002c94 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_I2C_Master_Receive_DMA+0x8e>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e0d5      	b.n	8002e8e <HAL_I2C_Master_Receive_DMA+0x23a>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d007      	beq.n	8002d08 <HAL_I2C_Master_Receive_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2222      	movs	r2, #34	@ 0x22
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2210      	movs	r2, #16
 8002d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	893a      	ldrh	r2, [r7, #8]
 8002d38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4a56      	ldr	r2, [pc, #344]	@ (8002ea0 <HAL_I2C_Master_Receive_DMA+0x24c>)
 8002d48:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002d4a:	897a      	ldrh	r2, [r7, #10]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d07b      	beq.n	8002e50 <HAL_I2C_Master_Receive_DMA+0x1fc>
    {
      if (hi2c->hdmarx != NULL)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d02a      	beq.n	8002db6 <HAL_I2C_Master_Receive_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d64:	4a4f      	ldr	r2, [pc, #316]	@ (8002ea4 <HAL_I2C_Master_Receive_DMA+0x250>)
 8002d66:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d6c:	4a4e      	ldr	r2, [pc, #312]	@ (8002ea8 <HAL_I2C_Master_Receive_DMA+0x254>)
 8002d6e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d74:	2200      	movs	r2, #0
 8002d76:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d84:	2200      	movs	r2, #0
 8002d86:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	3310      	adds	r3, #16
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da0:	461a      	mov	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da6:	f7ff f803 	bl	8001db0 <HAL_DMA_Start_IT>
 8002daa:	4603      	mov	r3, r0
 8002dac:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002dae:	7dfb      	ldrb	r3, [r7, #23]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d139      	bne.n	8002e28 <HAL_I2C_Master_Receive_DMA+0x1d4>
 8002db4:	e013      	b.n	8002dde <HAL_I2C_Master_Receive_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2220      	movs	r2, #32
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e057      	b.n	8002e8e <HAL_I2C_Master_Receive_DMA+0x23a>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002dec:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dfc:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002e14:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	e02f      	b.n	8002e88 <HAL_I2C_Master_Receive_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3c:	f043 0210 	orr.w	r2, r3, #16
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e01e      	b.n	8002e8e <HAL_I2C_Master_Receive_DMA+0x23a>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002e66:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e76:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e86:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	e000      	b.n	8002e8e <HAL_I2C_Master_Receive_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8002e8c:	2302      	movs	r3, #2
  }
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	20000000 	.word	0x20000000
 8002e9c:	14f8b589 	.word	0x14f8b589
 8002ea0:	ffff0000 	.word	0xffff0000
 8002ea4:	08004641 	.word	0x08004641
 8002ea8:	080047ff 	.word	0x080047ff

08002eac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b088      	sub	sp, #32
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ecc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ed4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
 8002ed8:	2b10      	cmp	r3, #16
 8002eda:	d003      	beq.n	8002ee4 <HAL_I2C_EV_IRQHandler+0x38>
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
 8002ede:	2b40      	cmp	r3, #64	@ 0x40
 8002ee0:	f040 80b1 	bne.w	8003046 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10d      	bne.n	8002f1a <HAL_I2C_EV_IRQHandler+0x6e>
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002f04:	d003      	beq.n	8002f0e <HAL_I2C_EV_IRQHandler+0x62>
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002f0c:	d101      	bne.n	8002f12 <HAL_I2C_EV_IRQHandler+0x66>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <HAL_I2C_EV_IRQHandler+0x68>
 8002f12:	2300      	movs	r3, #0
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	f000 8114 	beq.w	8003142 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00b      	beq.n	8002f3c <HAL_I2C_EV_IRQHandler+0x90>
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d006      	beq.n	8002f3c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f001 fd7c 	bl	8004a2c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 fd66 	bl	8003a06 <I2C_Master_SB>
 8002f3a:	e083      	b.n	8003044 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d008      	beq.n	8002f58 <HAL_I2C_EV_IRQHandler+0xac>
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fdde 	bl	8003b12 <I2C_Master_ADD10>
 8002f56:	e075      	b.n	8003044 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d008      	beq.n	8002f74 <HAL_I2C_EV_IRQHandler+0xc8>
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 fdfa 	bl	8003b66 <I2C_Master_ADDR>
 8002f72:	e067      	b.n	8003044 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d036      	beq.n	8002fec <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f8c:	f000 80db 	beq.w	8003146 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00d      	beq.n	8002fb6 <HAL_I2C_EV_IRQHandler+0x10a>
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_I2C_EV_IRQHandler+0x10a>
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	f003 0304 	and.w	r3, r3, #4
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d103      	bne.n	8002fb6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f9c2 	bl	8003338 <I2C_MasterTransmit_TXE>
 8002fb4:	e046      	b.n	8003044 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 80c2 	beq.w	8003146 <HAL_I2C_EV_IRQHandler+0x29a>
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 80bc 	beq.w	8003146 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002fce:	7bbb      	ldrb	r3, [r7, #14]
 8002fd0:	2b21      	cmp	r3, #33	@ 0x21
 8002fd2:	d103      	bne.n	8002fdc <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 fa4b 	bl	8003470 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fda:	e0b4      	b.n	8003146 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
 8002fde:	2b40      	cmp	r3, #64	@ 0x40
 8002fe0:	f040 80b1 	bne.w	8003146 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 fab9 	bl	800355c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fea:	e0ac      	b.n	8003146 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ff6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ffa:	f000 80a4 	beq.w	8003146 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00d      	beq.n	8003024 <HAL_I2C_EV_IRQHandler+0x178>
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800300e:	2b00      	cmp	r3, #0
 8003010:	d008      	beq.n	8003024 <HAL_I2C_EV_IRQHandler+0x178>
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	d103      	bne.n	8003024 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 fb35 	bl	800368c <I2C_MasterReceive_RXNE>
 8003022:	e00f      	b.n	8003044 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 808b 	beq.w	8003146 <HAL_I2C_EV_IRQHandler+0x29a>
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 8085 	beq.w	8003146 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 fbed 	bl	800381c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003042:	e080      	b.n	8003146 <HAL_I2C_EV_IRQHandler+0x29a>
 8003044:	e07f      	b.n	8003146 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304a:	2b00      	cmp	r3, #0
 800304c:	d004      	beq.n	8003058 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	61fb      	str	r3, [r7, #28]
 8003056:	e007      	b.n	8003068 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d011      	beq.n	8003096 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00c      	beq.n	8003096 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003080:	2b00      	cmp	r3, #0
 8003082:	d003      	beq.n	800308c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800308c:	69b9      	ldr	r1, [r7, #24]
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 ffb8 	bl	8004004 <I2C_Slave_ADDR>
 8003094:	e05a      	b.n	800314c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	f003 0310 	and.w	r3, r3, #16
 800309c:	2b00      	cmp	r3, #0
 800309e:	d008      	beq.n	80030b2 <HAL_I2C_EV_IRQHandler+0x206>
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 fff2 	bl	8004094 <I2C_Slave_STOPF>
 80030b0:	e04c      	b.n	800314c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80030b2:	7bbb      	ldrb	r3, [r7, #14]
 80030b4:	2b21      	cmp	r3, #33	@ 0x21
 80030b6:	d002      	beq.n	80030be <HAL_I2C_EV_IRQHandler+0x212>
 80030b8:	7bbb      	ldrb	r3, [r7, #14]
 80030ba:	2b29      	cmp	r3, #41	@ 0x29
 80030bc:	d120      	bne.n	8003100 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00d      	beq.n	80030e4 <HAL_I2C_EV_IRQHandler+0x238>
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d008      	beq.n	80030e4 <HAL_I2C_EV_IRQHandler+0x238>
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d103      	bne.n	80030e4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 fed3 	bl	8003e88 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030e2:	e032      	b.n	800314a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d02d      	beq.n	800314a <HAL_I2C_EV_IRQHandler+0x29e>
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d028      	beq.n	800314a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 ff02 	bl	8003f02 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030fe:	e024      	b.n	800314a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00d      	beq.n	8003126 <HAL_I2C_EV_IRQHandler+0x27a>
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003110:	2b00      	cmp	r3, #0
 8003112:	d008      	beq.n	8003126 <HAL_I2C_EV_IRQHandler+0x27a>
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	2b00      	cmp	r3, #0
 800311c:	d103      	bne.n	8003126 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 ff10 	bl	8003f44 <I2C_SlaveReceive_RXNE>
 8003124:	e012      	b.n	800314c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00d      	beq.n	800314c <HAL_I2C_EV_IRQHandler+0x2a0>
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003136:	2b00      	cmp	r3, #0
 8003138:	d008      	beq.n	800314c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 ff40 	bl	8003fc0 <I2C_SlaveReceive_BTF>
 8003140:	e004      	b.n	800314c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003142:	bf00      	nop
 8003144:	e002      	b.n	800314c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003146:	bf00      	nop
 8003148:	e000      	b.n	800314c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800314a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800314c:	3720      	adds	r7, #32
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b08a      	sub	sp, #40	@ 0x28
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800316a:	2300      	movs	r3, #0
 800316c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003174:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00d      	beq.n	800319c <HAL_I2C_ER_IRQHandler+0x4a>
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003186:	2b00      	cmp	r3, #0
 8003188:	d008      	beq.n	800319c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800318a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318c:	f043 0301 	orr.w	r3, r3, #1
 8003190:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800319a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00d      	beq.n	80031c2 <HAL_I2C_ER_IRQHandler+0x70>
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d008      	beq.n	80031c2 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80031b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b2:	f043 0302 	orr.w	r3, r3, #2
 80031b6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80031c0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d03e      	beq.n	800324a <HAL_I2C_ER_IRQHandler+0xf8>
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d039      	beq.n	800324a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80031d6:	7efb      	ldrb	r3, [r7, #27]
 80031d8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031de:	b29b      	uxth	r3, r3
 80031e0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031e8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ee:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80031f0:	7ebb      	ldrb	r3, [r7, #26]
 80031f2:	2b20      	cmp	r3, #32
 80031f4:	d112      	bne.n	800321c <HAL_I2C_ER_IRQHandler+0xca>
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10f      	bne.n	800321c <HAL_I2C_ER_IRQHandler+0xca>
 80031fc:	7cfb      	ldrb	r3, [r7, #19]
 80031fe:	2b21      	cmp	r3, #33	@ 0x21
 8003200:	d008      	beq.n	8003214 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003202:	7cfb      	ldrb	r3, [r7, #19]
 8003204:	2b29      	cmp	r3, #41	@ 0x29
 8003206:	d005      	beq.n	8003214 <HAL_I2C_ER_IRQHandler+0xc2>
 8003208:	7cfb      	ldrb	r3, [r7, #19]
 800320a:	2b28      	cmp	r3, #40	@ 0x28
 800320c:	d106      	bne.n	800321c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2b21      	cmp	r3, #33	@ 0x21
 8003212:	d103      	bne.n	800321c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f001 f86d 	bl	80042f4 <I2C_Slave_AF>
 800321a:	e016      	b.n	800324a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003224:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003228:	f043 0304 	orr.w	r3, r3, #4
 800322c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800322e:	7efb      	ldrb	r3, [r7, #27]
 8003230:	2b10      	cmp	r3, #16
 8003232:	d002      	beq.n	800323a <HAL_I2C_ER_IRQHandler+0xe8>
 8003234:	7efb      	ldrb	r3, [r7, #27]
 8003236:	2b40      	cmp	r3, #64	@ 0x40
 8003238:	d107      	bne.n	800324a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003248:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00d      	beq.n	8003270 <HAL_I2C_ER_IRQHandler+0x11e>
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800325a:	2b00      	cmp	r3, #0
 800325c:	d008      	beq.n	8003270 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800325e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003260:	f043 0308 	orr.w	r3, r3, #8
 8003264:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800326e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003272:	2b00      	cmp	r3, #0
 8003274:	d008      	beq.n	8003288 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327c:	431a      	orrs	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f001 f8aa 	bl	80043dc <I2C_ITError>
  }
}
 8003288:	bf00      	nop
 800328a:	3728      	adds	r7, #40	@ 0x28
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	70fb      	strb	r3, [r7, #3]
 80032c4:	4613      	mov	r3, r2
 80032c6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003346:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800334e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003354:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800335a:	2b00      	cmp	r3, #0
 800335c:	d150      	bne.n	8003400 <I2C_MasterTransmit_TXE+0xc8>
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	2b21      	cmp	r3, #33	@ 0x21
 8003362:	d14d      	bne.n	8003400 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2b08      	cmp	r3, #8
 8003368:	d01d      	beq.n	80033a6 <I2C_MasterTransmit_TXE+0x6e>
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2b20      	cmp	r3, #32
 800336e:	d01a      	beq.n	80033a6 <I2C_MasterTransmit_TXE+0x6e>
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003376:	d016      	beq.n	80033a6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003386:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2211      	movs	r2, #17
 800338c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2220      	movs	r2, #32
 800339a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fd fa78 	bl	8000894 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033a4:	e060      	b.n	8003468 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80033b4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033c4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b40      	cmp	r3, #64	@ 0x40
 80033de:	d107      	bne.n	80033f0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7ff ff7d 	bl	80032e8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033ee:	e03b      	b.n	8003468 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7fd fa4b 	bl	8000894 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033fe:	e033      	b.n	8003468 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003400:	7bfb      	ldrb	r3, [r7, #15]
 8003402:	2b21      	cmp	r3, #33	@ 0x21
 8003404:	d005      	beq.n	8003412 <I2C_MasterTransmit_TXE+0xda>
 8003406:	7bbb      	ldrb	r3, [r7, #14]
 8003408:	2b40      	cmp	r3, #64	@ 0x40
 800340a:	d12d      	bne.n	8003468 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800340c:	7bfb      	ldrb	r3, [r7, #15]
 800340e:	2b22      	cmp	r3, #34	@ 0x22
 8003410:	d12a      	bne.n	8003468 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003416:	b29b      	uxth	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	d108      	bne.n	800342e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800342a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800342c:	e01c      	b.n	8003468 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b40      	cmp	r3, #64	@ 0x40
 8003438:	d103      	bne.n	8003442 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f88e 	bl	800355c <I2C_MemoryTransmit_TXE_BTF>
}
 8003440:	e012      	b.n	8003468 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003446:	781a      	ldrb	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800345c:	b29b      	uxth	r3, r3
 800345e:	3b01      	subs	r3, #1
 8003460:	b29a      	uxth	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003466:	e7ff      	b.n	8003468 <I2C_MasterTransmit_TXE+0x130>
 8003468:	bf00      	nop
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b21      	cmp	r3, #33	@ 0x21
 8003488:	d164      	bne.n	8003554 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800348e:	b29b      	uxth	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d012      	beq.n	80034ba <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003498:	781a      	ldrb	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80034b8:	e04c      	b.n	8003554 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d01d      	beq.n	80034fc <I2C_MasterTransmit_BTF+0x8c>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2b20      	cmp	r3, #32
 80034c4:	d01a      	beq.n	80034fc <I2C_MasterTransmit_BTF+0x8c>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80034cc:	d016      	beq.n	80034fc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80034dc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2211      	movs	r2, #17
 80034e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7fd f9cd 	bl	8000894 <HAL_I2C_MasterTxCpltCallback>
}
 80034fa:	e02b      	b.n	8003554 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800350a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800351a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2220      	movs	r2, #32
 8003526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b40      	cmp	r3, #64	@ 0x40
 8003534:	d107      	bne.n	8003546 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7ff fed2 	bl	80032e8 <HAL_I2C_MemTxCpltCallback>
}
 8003544:	e006      	b.n	8003554 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7fd f9a0 	bl	8000894 <HAL_I2C_MasterTxCpltCallback>
}
 8003554:	bf00      	nop
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800356a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003570:	2b00      	cmp	r3, #0
 8003572:	d11d      	bne.n	80035b0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003578:	2b01      	cmp	r3, #1
 800357a:	d10b      	bne.n	8003594 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003580:	b2da      	uxtb	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800358c:	1c9a      	adds	r2, r3, #2
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003592:	e077      	b.n	8003684 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003598:	b29b      	uxth	r3, r3
 800359a:	121b      	asrs	r3, r3, #8
 800359c:	b2da      	uxtb	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80035ae:	e069      	b.n	8003684 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d10b      	bne.n	80035d0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035c8:	1c5a      	adds	r2, r3, #1
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80035ce:	e059      	b.n	8003684 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d152      	bne.n	800367e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
 80035da:	2b22      	cmp	r3, #34	@ 0x22
 80035dc:	d10d      	bne.n	80035fa <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035ec:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f2:	1c5a      	adds	r2, r3, #1
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80035f8:	e044      	b.n	8003684 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d015      	beq.n	8003630 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003604:	7bfb      	ldrb	r3, [r7, #15]
 8003606:	2b21      	cmp	r3, #33	@ 0x21
 8003608:	d112      	bne.n	8003630 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360e:	781a      	ldrb	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003624:	b29b      	uxth	r3, r3
 8003626:	3b01      	subs	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800362e:	e029      	b.n	8003684 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003634:	b29b      	uxth	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d124      	bne.n	8003684 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800363a:	7bfb      	ldrb	r3, [r7, #15]
 800363c:	2b21      	cmp	r3, #33	@ 0x21
 800363e:	d121      	bne.n	8003684 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800364e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800365e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7ff fe36 	bl	80032e8 <HAL_I2C_MemTxCpltCallback>
}
 800367c:	e002      	b.n	8003684 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7ff f9a6 	bl	80029d0 <I2C_Flush_DR>
}
 8003684:	bf00      	nop
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b22      	cmp	r3, #34	@ 0x22
 800369e:	f040 80b9 	bne.w	8003814 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	d921      	bls.n	80036fa <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c0:	b2d2      	uxtb	r2, r2
 80036c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	2b03      	cmp	r3, #3
 80036e4:	f040 8096 	bne.w	8003814 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036f6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80036f8:	e08c      	b.n	8003814 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d07f      	beq.n	8003802 <I2C_MasterReceive_RXNE+0x176>
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d002      	beq.n	800370e <I2C_MasterReceive_RXNE+0x82>
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d179      	bne.n	8003802 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f001 f95a 	bl	80049c8 <I2C_WaitOnSTOPRequestThroughIT>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d14c      	bne.n	80037b4 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003728:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003738:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003756:	b29b      	uxth	r3, r3
 8003758:	3b01      	subs	r3, #1
 800375a:	b29a      	uxth	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b40      	cmp	r3, #64	@ 0x40
 8003772:	d10a      	bne.n	800378a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff fdba 	bl	80032fc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003788:	e044      	b.n	8003814 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b08      	cmp	r3, #8
 8003796:	d002      	beq.n	800379e <I2C_MasterReceive_RXNE+0x112>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2b20      	cmp	r3, #32
 800379c:	d103      	bne.n	80037a6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80037a4:	e002      	b.n	80037ac <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2212      	movs	r2, #18
 80037aa:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7fd f89b 	bl	80008e8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80037b2:	e02f      	b.n	8003814 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80037c2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691a      	ldr	r2, [r3, #16]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff fd88 	bl	8003310 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003800:	e008      	b.n	8003814 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003810:	605a      	str	r2, [r3, #4]
}
 8003812:	e7ff      	b.n	8003814 <I2C_MasterReceive_RXNE+0x188>
 8003814:	bf00      	nop
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003828:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800382e:	b29b      	uxth	r3, r3
 8003830:	2b04      	cmp	r3, #4
 8003832:	d11b      	bne.n	800386c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003842:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691a      	ldr	r2, [r3, #16]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003856:	1c5a      	adds	r2, r3, #1
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003860:	b29b      	uxth	r3, r3
 8003862:	3b01      	subs	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800386a:	e0c8      	b.n	80039fe <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b03      	cmp	r3, #3
 8003874:	d129      	bne.n	80038ca <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003884:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b04      	cmp	r3, #4
 800388a:	d00a      	beq.n	80038a2 <I2C_MasterReceive_BTF+0x86>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d007      	beq.n	80038a2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038a0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	691a      	ldr	r2, [r3, #16]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b4:	1c5a      	adds	r2, r3, #1
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038be:	b29b      	uxth	r3, r3
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80038c8:	e099      	b.n	80039fe <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	f040 8081 	bne.w	80039d8 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d002      	beq.n	80038e2 <I2C_MasterReceive_BTF+0xc6>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2b10      	cmp	r3, #16
 80038e0:	d108      	bne.n	80038f4 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	e019      	b.n	8003928 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d002      	beq.n	8003900 <I2C_MasterReceive_BTF+0xe4>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d108      	bne.n	8003912 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	e00a      	b.n	8003928 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2b10      	cmp	r3, #16
 8003916:	d007      	beq.n	8003928 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003926:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	691a      	ldr	r2, [r3, #16]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003944:	b29b      	uxth	r3, r3
 8003946:	3b01      	subs	r3, #1
 8003948:	b29a      	uxth	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800396a:	b29b      	uxth	r3, r3
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003982:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2220      	movs	r2, #32
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b40      	cmp	r3, #64	@ 0x40
 8003996:	d10a      	bne.n	80039ae <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7ff fca8 	bl	80032fc <HAL_I2C_MemRxCpltCallback>
}
 80039ac:	e027      	b.n	80039fe <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d002      	beq.n	80039c2 <I2C_MasterReceive_BTF+0x1a6>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2b20      	cmp	r3, #32
 80039c0:	d103      	bne.n	80039ca <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80039c8:	e002      	b.n	80039d0 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2212      	movs	r2, #18
 80039ce:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7fc ff89 	bl	80008e8 <HAL_I2C_MasterRxCpltCallback>
}
 80039d6:	e012      	b.n	80039fe <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	691a      	ldr	r2, [r3, #16]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ea:	1c5a      	adds	r2, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	3b01      	subs	r3, #1
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80039fe:	bf00      	nop
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b40      	cmp	r3, #64	@ 0x40
 8003a18:	d117      	bne.n	8003a4a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d109      	bne.n	8003a36 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	461a      	mov	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a32:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003a34:	e067      	b.n	8003b06 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	611a      	str	r2, [r3, #16]
}
 8003a48:	e05d      	b.n	8003b06 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a52:	d133      	bne.n	8003abc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b21      	cmp	r3, #33	@ 0x21
 8003a5e:	d109      	bne.n	8003a74 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	461a      	mov	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a70:	611a      	str	r2, [r3, #16]
 8003a72:	e008      	b.n	8003a86 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	f043 0301 	orr.w	r3, r3, #1
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d004      	beq.n	8003a98 <I2C_Master_SB+0x92>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d108      	bne.n	8003aaa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d032      	beq.n	8003b06 <I2C_Master_SB+0x100>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d02d      	beq.n	8003b06 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ab8:	605a      	str	r2, [r3, #4]
}
 8003aba:	e024      	b.n	8003b06 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10e      	bne.n	8003ae2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	11db      	asrs	r3, r3, #7
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	f003 0306 	and.w	r3, r3, #6
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	f063 030f 	orn	r3, r3, #15
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	611a      	str	r2, [r3, #16]
}
 8003ae0:	e011      	b.n	8003b06 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d10d      	bne.n	8003b06 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	11db      	asrs	r3, r3, #7
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	f003 0306 	and.w	r3, r3, #6
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	f063 030e 	orn	r3, r3, #14
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	611a      	str	r2, [r3, #16]
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d004      	beq.n	8003b38 <I2C_Master_ADD10+0x26>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d108      	bne.n	8003b4a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00c      	beq.n	8003b5a <I2C_Master_ADD10+0x48>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d007      	beq.n	8003b5a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b58:	605a      	str	r2, [r3, #4]
  }
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b091      	sub	sp, #68	@ 0x44
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b74:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b82:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b22      	cmp	r3, #34	@ 0x22
 8003b8e:	f040 8169 	bne.w	8003e64 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10f      	bne.n	8003bba <I2C_Master_ADDR+0x54>
 8003b9a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003b9e:	2b40      	cmp	r3, #64	@ 0x40
 8003ba0:	d10b      	bne.n	8003bba <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb8:	e160      	b.n	8003e7c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d11d      	bne.n	8003bfe <I2C_Master_ADDR+0x98>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003bca:	d118      	bne.n	8003bfe <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bcc:	2300      	movs	r3, #0
 8003bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bf0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	651a      	str	r2, [r3, #80]	@ 0x50
 8003bfc:	e13e      	b.n	8003e7c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d113      	bne.n	8003c30 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c08:	2300      	movs	r3, #0
 8003c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	e115      	b.n	8003e5c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	f040 808a 	bne.w	8003d50 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c3e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c42:	d137      	bne.n	8003cb4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c52:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c62:	d113      	bne.n	8003c8c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c72:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c74:	2300      	movs	r3, #0
 8003c76:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8a:	e0e7      	b.n	8003e5c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	623b      	str	r3, [r7, #32]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	623b      	str	r3, [r7, #32]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	623b      	str	r3, [r7, #32]
 8003ca0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	e0d3      	b.n	8003e5c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d02e      	beq.n	8003d18 <I2C_Master_ADDR+0x1b2>
 8003cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cbc:	2b20      	cmp	r3, #32
 8003cbe:	d02b      	beq.n	8003d18 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cc2:	2b12      	cmp	r3, #18
 8003cc4:	d102      	bne.n	8003ccc <I2C_Master_ADDR+0x166>
 8003cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d125      	bne.n	8003d18 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d00e      	beq.n	8003cf0 <I2C_Master_ADDR+0x18a>
 8003cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d00b      	beq.n	8003cf0 <I2C_Master_ADDR+0x18a>
 8003cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cda:	2b10      	cmp	r3, #16
 8003cdc:	d008      	beq.n	8003cf0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	e007      	b.n	8003d00 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003cfe:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d00:	2300      	movs	r3, #0
 8003d02:	61fb      	str	r3, [r7, #28]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	61fb      	str	r3, [r7, #28]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	61fb      	str	r3, [r7, #28]
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	e0a1      	b.n	8003e5c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d26:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d28:	2300      	movs	r3, #0
 8003d2a:	61bb      	str	r3, [r7, #24]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	61bb      	str	r3, [r7, #24]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	61bb      	str	r3, [r7, #24]
 8003d3c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	e085      	b.n	8003e5c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d14d      	bne.n	8003df6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d5c:	2b04      	cmp	r3, #4
 8003d5e:	d016      	beq.n	8003d8e <I2C_Master_ADDR+0x228>
 8003d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d013      	beq.n	8003d8e <I2C_Master_ADDR+0x228>
 8003d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d68:	2b10      	cmp	r3, #16
 8003d6a:	d010      	beq.n	8003d8e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d7a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	e007      	b.n	8003d9e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d9c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003da8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dac:	d117      	bne.n	8003dde <I2C_Master_ADDR+0x278>
 8003dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003db0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003db4:	d00b      	beq.n	8003dce <I2C_Master_ADDR+0x268>
 8003db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d008      	beq.n	8003dce <I2C_Master_ADDR+0x268>
 8003dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d005      	beq.n	8003dce <I2C_Master_ADDR+0x268>
 8003dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc4:	2b10      	cmp	r3, #16
 8003dc6:	d002      	beq.n	8003dce <I2C_Master_ADDR+0x268>
 8003dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dca:	2b20      	cmp	r3, #32
 8003dcc:	d107      	bne.n	8003dde <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ddc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dde:	2300      	movs	r3, #0
 8003de0:	617b      	str	r3, [r7, #20]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	617b      	str	r3, [r7, #20]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	617b      	str	r3, [r7, #20]
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	e032      	b.n	8003e5c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e04:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e14:	d117      	bne.n	8003e46 <I2C_Master_ADDR+0x2e0>
 8003e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e18:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e1c:	d00b      	beq.n	8003e36 <I2C_Master_ADDR+0x2d0>
 8003e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d008      	beq.n	8003e36 <I2C_Master_ADDR+0x2d0>
 8003e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	d005      	beq.n	8003e36 <I2C_Master_ADDR+0x2d0>
 8003e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e2c:	2b10      	cmp	r3, #16
 8003e2e:	d002      	beq.n	8003e36 <I2C_Master_ADDR+0x2d0>
 8003e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e32:	2b20      	cmp	r3, #32
 8003e34:	d107      	bne.n	8003e46 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003e44:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e46:	2300      	movs	r3, #0
 8003e48:	613b      	str	r3, [r7, #16]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	613b      	str	r3, [r7, #16]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	613b      	str	r3, [r7, #16]
 8003e5a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003e62:	e00b      	b.n	8003e7c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e64:	2300      	movs	r3, #0
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	68fb      	ldr	r3, [r7, #12]
}
 8003e7a:	e7ff      	b.n	8003e7c <I2C_Master_ADDR+0x316>
 8003e7c:	bf00      	nop
 8003e7e:	3744      	adds	r7, #68	@ 0x44
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e96:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d02b      	beq.n	8003efa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea6:	781a      	ldrb	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d114      	bne.n	8003efa <I2C_SlaveTransmit_TXE+0x72>
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
 8003ed2:	2b29      	cmp	r3, #41	@ 0x29
 8003ed4:	d111      	bne.n	8003efa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ee4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2221      	movs	r2, #33	@ 0x21
 8003eea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2228      	movs	r2, #40	@ 0x28
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7ff f9cb 	bl	8003290 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003efa:	bf00      	nop
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d011      	beq.n	8003f38 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f18:	781a      	ldrb	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f52:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d02c      	beq.n	8003fb8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d114      	bne.n	8003fb8 <I2C_SlaveReceive_RXNE+0x74>
 8003f8e:	7bfb      	ldrb	r3, [r7, #15]
 8003f90:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f92:	d111      	bne.n	8003fb8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fa2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2222      	movs	r2, #34	@ 0x22
 8003fa8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2228      	movs	r2, #40	@ 0x28
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7ff f976 	bl	80032a4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003fb8:	bf00      	nop
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d012      	beq.n	8003ff8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fdc:	b2d2      	uxtb	r2, r2
 8003fde:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800400e:	2300      	movs	r3, #0
 8004010:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004018:	b2db      	uxtb	r3, r3
 800401a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800401e:	2b28      	cmp	r3, #40	@ 0x28
 8004020:	d125      	bne.n	800406e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004030:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800403c:	2301      	movs	r3, #1
 800403e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004046:	2b00      	cmp	r3, #0
 8004048:	d103      	bne.n	8004052 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	81bb      	strh	r3, [r7, #12]
 8004050:	e002      	b.n	8004058 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004060:	89ba      	ldrh	r2, [r7, #12]
 8004062:	7bfb      	ldrb	r3, [r7, #15]
 8004064:	4619      	mov	r1, r3
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7ff f926 	bl	80032b8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800406c:	e00e      	b.n	800408c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800406e:	2300      	movs	r3, #0
 8004070:	60bb      	str	r3, [r7, #8]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	60bb      	str	r3, [r7, #8]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	60bb      	str	r3, [r7, #8]
 8004082:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800408c:	bf00      	nop
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040a2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040b2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80040b4:	2300      	movs	r3, #0
 80040b6:	60bb      	str	r3, [r7, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	60bb      	str	r3, [r7, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0201 	orr.w	r2, r2, #1
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040e0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040f0:	d172      	bne.n	80041d8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
 80040f4:	2b22      	cmp	r3, #34	@ 0x22
 80040f6:	d002      	beq.n	80040fe <I2C_Slave_STOPF+0x6a>
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
 80040fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80040fc:	d135      	bne.n	800416a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	b29a      	uxth	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d005      	beq.n	8004122 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411a:	f043 0204 	orr.w	r2, r3, #4
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004130:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004136:	4618      	mov	r0, r3
 8004138:	f7fe f83e 	bl	80021b8 <HAL_DMA_GetState>
 800413c:	4603      	mov	r3, r0
 800413e:	2b01      	cmp	r3, #1
 8004140:	d049      	beq.n	80041d6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004146:	4a69      	ldr	r2, [pc, #420]	@ (80042ec <I2C_Slave_STOPF+0x258>)
 8004148:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414e:	4618      	mov	r0, r3
 8004150:	f7fd fe86 	bl	8001e60 <HAL_DMA_Abort_IT>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d03d      	beq.n	80041d6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800415e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004164:	4610      	mov	r0, r2
 8004166:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004168:	e035      	b.n	80041d6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	b29a      	uxth	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d005      	beq.n	800418e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004186:	f043 0204 	orr.w	r2, r3, #4
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800419c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fe f808 	bl	80021b8 <HAL_DMA_GetState>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d014      	beq.n	80041d8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041b2:	4a4e      	ldr	r2, [pc, #312]	@ (80042ec <I2C_Slave_STOPF+0x258>)
 80041b4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fd fe50 	bl	8001e60 <HAL_DMA_Abort_IT>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d008      	beq.n	80041d8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80041d0:	4610      	mov	r0, r2
 80041d2:	4798      	blx	r3
 80041d4:	e000      	b.n	80041d8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041d6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d03e      	beq.n	8004260 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b04      	cmp	r3, #4
 80041ee:	d112      	bne.n	8004216 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	691a      	ldr	r2, [r3, #16]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004220:	2b40      	cmp	r3, #64	@ 0x40
 8004222:	d112      	bne.n	800424a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691a      	ldr	r2, [r3, #16]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004240:	b29b      	uxth	r3, r3
 8004242:	3b01      	subs	r3, #1
 8004244:	b29a      	uxth	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800424e:	b29b      	uxth	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	d005      	beq.n	8004260 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004258:	f043 0204 	orr.w	r2, r3, #4
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f8b7 	bl	80043dc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800426e:	e039      	b.n	80042e4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004270:	7bfb      	ldrb	r3, [r7, #15]
 8004272:	2b2a      	cmp	r3, #42	@ 0x2a
 8004274:	d109      	bne.n	800428a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2228      	movs	r2, #40	@ 0x28
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7ff f80d 	bl	80032a4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b28      	cmp	r3, #40	@ 0x28
 8004294:	d111      	bne.n	80042ba <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a15      	ldr	r2, [pc, #84]	@ (80042f0 <I2C_Slave_STOPF+0x25c>)
 800429a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7ff f80e 	bl	80032d4 <HAL_I2C_ListenCpltCallback>
}
 80042b8:	e014      	b.n	80042e4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042be:	2b22      	cmp	r3, #34	@ 0x22
 80042c0:	d002      	beq.n	80042c8 <I2C_Slave_STOPF+0x234>
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
 80042c4:	2b22      	cmp	r3, #34	@ 0x22
 80042c6:	d10d      	bne.n	80042e4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7fe ffe0 	bl	80032a4 <HAL_I2C_SlaveRxCpltCallback>
}
 80042e4:	bf00      	nop
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	08004879 	.word	0x08004879
 80042f0:	ffff0000 	.word	0xffff0000

080042f4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004302:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004308:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	2b08      	cmp	r3, #8
 800430e:	d002      	beq.n	8004316 <I2C_Slave_AF+0x22>
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2b20      	cmp	r3, #32
 8004314:	d129      	bne.n	800436a <I2C_Slave_AF+0x76>
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	2b28      	cmp	r3, #40	@ 0x28
 800431a:	d126      	bne.n	800436a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a2e      	ldr	r2, [pc, #184]	@ (80043d8 <I2C_Slave_AF+0xe4>)
 8004320:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004330:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800433a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800434a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fe ffb6 	bl	80032d4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004368:	e031      	b.n	80043ce <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800436a:	7bfb      	ldrb	r3, [r7, #15]
 800436c:	2b21      	cmp	r3, #33	@ 0x21
 800436e:	d129      	bne.n	80043c4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a19      	ldr	r2, [pc, #100]	@ (80043d8 <I2C_Slave_AF+0xe4>)
 8004374:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2221      	movs	r2, #33	@ 0x21
 800437a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800439a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043a4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043b4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7fe fb0a 	bl	80029d0 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7fe ff67 	bl	8003290 <HAL_I2C_SlaveTxCpltCallback>
}
 80043c2:	e004      	b.n	80043ce <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043cc:	615a      	str	r2, [r3, #20]
}
 80043ce:	bf00      	nop
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	ffff0000 	.word	0xffff0000

080043dc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043f2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80043f4:	7bbb      	ldrb	r3, [r7, #14]
 80043f6:	2b10      	cmp	r3, #16
 80043f8:	d002      	beq.n	8004400 <I2C_ITError+0x24>
 80043fa:	7bbb      	ldrb	r3, [r7, #14]
 80043fc:	2b40      	cmp	r3, #64	@ 0x40
 80043fe:	d10a      	bne.n	8004416 <I2C_ITError+0x3a>
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	2b22      	cmp	r3, #34	@ 0x22
 8004404:	d107      	bne.n	8004416 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004414:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004416:	7bfb      	ldrb	r3, [r7, #15]
 8004418:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800441c:	2b28      	cmp	r3, #40	@ 0x28
 800441e:	d107      	bne.n	8004430 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2228      	movs	r2, #40	@ 0x28
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800442e:	e015      	b.n	800445c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800443a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800443e:	d00a      	beq.n	8004456 <I2C_ITError+0x7a>
 8004440:	7bfb      	ldrb	r3, [r7, #15]
 8004442:	2b60      	cmp	r3, #96	@ 0x60
 8004444:	d007      	beq.n	8004456 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004466:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800446a:	d162      	bne.n	8004532 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800447a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004480:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b01      	cmp	r3, #1
 8004488:	d020      	beq.n	80044cc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800448e:	4a6a      	ldr	r2, [pc, #424]	@ (8004638 <I2C_ITError+0x25c>)
 8004490:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004496:	4618      	mov	r0, r3
 8004498:	f7fd fce2 	bl	8001e60 <HAL_DMA_Abort_IT>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 8089 	beq.w	80045b6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 0201 	bic.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80044c6:	4610      	mov	r0, r2
 80044c8:	4798      	blx	r3
 80044ca:	e074      	b.n	80045b6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d0:	4a59      	ldr	r2, [pc, #356]	@ (8004638 <I2C_ITError+0x25c>)
 80044d2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d8:	4618      	mov	r0, r3
 80044da:	f7fd fcc1 	bl	8001e60 <HAL_DMA_Abort_IT>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d068      	beq.n	80045b6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ee:	2b40      	cmp	r3, #64	@ 0x40
 80044f0:	d10b      	bne.n	800450a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 0201 	bic.w	r2, r2, #1
 8004518:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2220      	movs	r2, #32
 800451e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800452c:	4610      	mov	r0, r2
 800452e:	4798      	blx	r3
 8004530:	e041      	b.n	80045b6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b60      	cmp	r3, #96	@ 0x60
 800453c:	d125      	bne.n	800458a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2220      	movs	r2, #32
 8004542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004556:	2b40      	cmp	r3, #64	@ 0x40
 8004558:	d10b      	bne.n	8004572 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	691a      	ldr	r2, [r3, #16]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0201 	bic.w	r2, r2, #1
 8004580:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7fe fece 	bl	8003324 <HAL_I2C_AbortCpltCallback>
 8004588:	e015      	b.n	80045b6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004594:	2b40      	cmp	r3, #64	@ 0x40
 8004596:	d10b      	bne.n	80045b0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691a      	ldr	r2, [r3, #16]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f7fe fead 	bl	8003310 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ba:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10e      	bne.n	80045e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d109      	bne.n	80045e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d104      	bne.n	80045e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d007      	beq.n	80045f4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80045f2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045fa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b04      	cmp	r3, #4
 8004606:	d113      	bne.n	8004630 <I2C_ITError+0x254>
 8004608:	7bfb      	ldrb	r3, [r7, #15]
 800460a:	2b28      	cmp	r3, #40	@ 0x28
 800460c:	d110      	bne.n	8004630 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a0a      	ldr	r2, [pc, #40]	@ (800463c <I2C_ITError+0x260>)
 8004612:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2220      	movs	r2, #32
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fe fe52 	bl	80032d4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004630:	bf00      	nop
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	08004879 	.word	0x08004879
 800463c:	ffff0000 	.word	0xffff0000

08004640 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800464c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004654:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800465c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004662:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004672:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004680:	2200      	movs	r2, #0
 8004682:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004690:	2200      	movs	r2, #0
 8004692:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004694:	7cfb      	ldrb	r3, [r7, #19]
 8004696:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800469a:	2b21      	cmp	r3, #33	@ 0x21
 800469c:	d007      	beq.n	80046ae <I2C_DMAXferCplt+0x6e>
 800469e:	7cfb      	ldrb	r3, [r7, #19]
 80046a0:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80046a4:	2b22      	cmp	r3, #34	@ 0x22
 80046a6:	d131      	bne.n	800470c <I2C_DMAXferCplt+0xcc>
 80046a8:	7cbb      	ldrb	r3, [r7, #18]
 80046aa:	2b20      	cmp	r3, #32
 80046ac:	d12e      	bne.n	800470c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046bc:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2200      	movs	r2, #0
 80046c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80046c4:	7cfb      	ldrb	r3, [r7, #19]
 80046c6:	2b29      	cmp	r3, #41	@ 0x29
 80046c8:	d10a      	bne.n	80046e0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2221      	movs	r2, #33	@ 0x21
 80046ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	2228      	movs	r2, #40	@ 0x28
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80046d8:	6978      	ldr	r0, [r7, #20]
 80046da:	f7fe fdd9 	bl	8003290 <HAL_I2C_SlaveTxCpltCallback>
 80046de:	e00c      	b.n	80046fa <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80046e0:	7cfb      	ldrb	r3, [r7, #19]
 80046e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80046e4:	d109      	bne.n	80046fa <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	2222      	movs	r2, #34	@ 0x22
 80046ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	2228      	movs	r2, #40	@ 0x28
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046f4:	6978      	ldr	r0, [r7, #20]
 80046f6:	f7fe fdd5 	bl	80032a4 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004708:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800470a:	e074      	b.n	80047f6 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d06e      	beq.n	80047f6 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800471c:	b29b      	uxth	r3, r3
 800471e:	2b01      	cmp	r3, #1
 8004720:	d107      	bne.n	8004732 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004730:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004740:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004748:	d009      	beq.n	800475e <I2C_DMAXferCplt+0x11e>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2b08      	cmp	r3, #8
 800474e:	d006      	beq.n	800475e <I2C_DMAXferCplt+0x11e>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004756:	d002      	beq.n	800475e <I2C_DMAXferCplt+0x11e>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b20      	cmp	r3, #32
 800475c:	d107      	bne.n	800476e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800476c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800477c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800478c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2200      	movs	r2, #0
 8004792:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800479c:	6978      	ldr	r0, [r7, #20]
 800479e:	f7fe fdb7 	bl	8003310 <HAL_I2C_ErrorCallback>
}
 80047a2:	e028      	b.n	80047f6 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b40      	cmp	r3, #64	@ 0x40
 80047b6:	d10a      	bne.n	80047ce <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	2200      	movs	r2, #0
 80047c4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80047c6:	6978      	ldr	r0, [r7, #20]
 80047c8:	f7fe fd98 	bl	80032fc <HAL_I2C_MemRxCpltCallback>
}
 80047cc:	e013      	b.n	80047f6 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d002      	beq.n	80047e2 <I2C_DMAXferCplt+0x1a2>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2b20      	cmp	r3, #32
 80047e0:	d103      	bne.n	80047ea <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2200      	movs	r2, #0
 80047e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80047e8:	e002      	b.n	80047f0 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2212      	movs	r2, #18
 80047ee:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80047f0:	6978      	ldr	r0, [r7, #20]
 80047f2:	f7fc f879 	bl	80008e8 <HAL_I2C_MasterRxCpltCallback>
}
 80047f6:	bf00      	nop
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b084      	sub	sp, #16
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800480a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004810:	2b00      	cmp	r3, #0
 8004812:	d003      	beq.n	800481c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004818:	2200      	movs	r2, #0
 800481a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004828:	2200      	movs	r2, #0
 800482a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7fd fcd1 	bl	80021d4 <HAL_DMA_GetError>
 8004832:	4603      	mov	r3, r0
 8004834:	2b02      	cmp	r3, #2
 8004836:	d01b      	beq.n	8004870 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004846:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2220      	movs	r2, #32
 8004852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004862:	f043 0210 	orr.w	r2, r3, #16
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f7fe fd50 	bl	8003310 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004870:	bf00      	nop
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004888:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004890:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004892:	4b4b      	ldr	r3, [pc, #300]	@ (80049c0 <I2C_DMAAbort+0x148>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	08db      	lsrs	r3, r3, #3
 8004898:	4a4a      	ldr	r2, [pc, #296]	@ (80049c4 <I2C_DMAAbort+0x14c>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	0a1a      	lsrs	r2, r3, #8
 80048a0:	4613      	mov	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	00da      	lsls	r2, r3, #3
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d106      	bne.n	80048c0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b6:	f043 0220 	orr.w	r2, r3, #32
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80048be:	e00a      	b.n	80048d6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048d4:	d0ea      	beq.n	80048ac <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048e2:	2200      	movs	r2, #0
 80048e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f2:	2200      	movs	r2, #0
 80048f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004904:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2200      	movs	r2, #0
 800490a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004918:	2200      	movs	r2, #0
 800491a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004928:	2200      	movs	r2, #0
 800492a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 0201 	bic.w	r2, r2, #1
 800493a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b60      	cmp	r3, #96	@ 0x60
 8004946:	d10e      	bne.n	8004966 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	2200      	movs	r2, #0
 800495c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800495e:	6978      	ldr	r0, [r7, #20]
 8004960:	f7fe fce0 	bl	8003324 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004964:	e027      	b.n	80049b6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004966:	7cfb      	ldrb	r3, [r7, #19]
 8004968:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800496c:	2b28      	cmp	r3, #40	@ 0x28
 800496e:	d117      	bne.n	80049a0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0201 	orr.w	r2, r2, #1
 800497e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800498e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2200      	movs	r2, #0
 8004994:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2228      	movs	r2, #40	@ 0x28
 800499a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800499e:	e007      	b.n	80049b0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80049b0:	6978      	ldr	r0, [r7, #20]
 80049b2:	f7fe fcad 	bl	8003310 <HAL_I2C_ErrorCallback>
}
 80049b6:	bf00      	nop
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	20000000 	.word	0x20000000
 80049c4:	14f8b589 	.word	0x14f8b589

080049c8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80049d4:	4b13      	ldr	r3, [pc, #76]	@ (8004a24 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	08db      	lsrs	r3, r3, #3
 80049da:	4a13      	ldr	r2, [pc, #76]	@ (8004a28 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80049dc:	fba2 2303 	umull	r2, r3, r2, r3
 80049e0:	0a1a      	lsrs	r2, r3, #8
 80049e2:	4613      	mov	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	3b01      	subs	r3, #1
 80049ee:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d107      	bne.n	8004a06 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fa:	f043 0220 	orr.w	r2, r3, #32
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e008      	b.n	8004a18 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a14:	d0e9      	beq.n	80049ea <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr
 8004a24:	20000000 	.word	0x20000000
 8004a28:	14f8b589 	.word	0x14f8b589

08004a2c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a38:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004a3c:	d103      	bne.n	8004a46 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004a44:	e007      	b.n	8004a56 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a4a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004a4e:	d102      	bne.n	8004a56 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2208      	movs	r2, #8
 8004a54:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b086      	sub	sp, #24
 8004a66:	af02      	add	r7, sp, #8
 8004a68:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e101      	b.n	8004c78 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d106      	bne.n	8004a94 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f005 fbde 	bl	800a250 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2203      	movs	r2, #3
 8004a98:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004aa2:	d102      	bne.n	8004aaa <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f001 ffc5 	bl	8006a3e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6818      	ldr	r0, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	7c1a      	ldrb	r2, [r3, #16]
 8004abc:	f88d 2000 	strb.w	r2, [sp]
 8004ac0:	3304      	adds	r3, #4
 8004ac2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ac4:	f001 fea4 	bl	8006810 <USB_CoreInit>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d005      	beq.n	8004ada <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e0ce      	b.n	8004c78 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2100      	movs	r1, #0
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f001 ffbd 	bl	8006a60 <USB_SetCurrentMode>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d005      	beq.n	8004af8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e0bf      	b.n	8004c78 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004af8:	2300      	movs	r3, #0
 8004afa:	73fb      	strb	r3, [r7, #15]
 8004afc:	e04a      	b.n	8004b94 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004afe:	7bfa      	ldrb	r2, [r7, #15]
 8004b00:	6879      	ldr	r1, [r7, #4]
 8004b02:	4613      	mov	r3, r2
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	4413      	add	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	440b      	add	r3, r1
 8004b0c:	3315      	adds	r3, #21
 8004b0e:	2201      	movs	r2, #1
 8004b10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004b12:	7bfa      	ldrb	r2, [r7, #15]
 8004b14:	6879      	ldr	r1, [r7, #4]
 8004b16:	4613      	mov	r3, r2
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	4413      	add	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	440b      	add	r3, r1
 8004b20:	3314      	adds	r3, #20
 8004b22:	7bfa      	ldrb	r2, [r7, #15]
 8004b24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004b26:	7bfa      	ldrb	r2, [r7, #15]
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
 8004b2a:	b298      	uxth	r0, r3
 8004b2c:	6879      	ldr	r1, [r7, #4]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	4413      	add	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	440b      	add	r3, r1
 8004b38:	332e      	adds	r3, #46	@ 0x2e
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004b3e:	7bfa      	ldrb	r2, [r7, #15]
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	4613      	mov	r3, r2
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	4413      	add	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	3318      	adds	r3, #24
 8004b4e:	2200      	movs	r2, #0
 8004b50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004b52:	7bfa      	ldrb	r2, [r7, #15]
 8004b54:	6879      	ldr	r1, [r7, #4]
 8004b56:	4613      	mov	r3, r2
 8004b58:	00db      	lsls	r3, r3, #3
 8004b5a:	4413      	add	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	440b      	add	r3, r1
 8004b60:	331c      	adds	r3, #28
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004b66:	7bfa      	ldrb	r2, [r7, #15]
 8004b68:	6879      	ldr	r1, [r7, #4]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	4413      	add	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	440b      	add	r3, r1
 8004b74:	3320      	adds	r3, #32
 8004b76:	2200      	movs	r2, #0
 8004b78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004b7a:	7bfa      	ldrb	r2, [r7, #15]
 8004b7c:	6879      	ldr	r1, [r7, #4]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	4413      	add	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	440b      	add	r3, r1
 8004b88:	3324      	adds	r3, #36	@ 0x24
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b8e:	7bfb      	ldrb	r3, [r7, #15]
 8004b90:	3301      	adds	r3, #1
 8004b92:	73fb      	strb	r3, [r7, #15]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	791b      	ldrb	r3, [r3, #4]
 8004b98:	7bfa      	ldrb	r2, [r7, #15]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d3af      	bcc.n	8004afe <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	73fb      	strb	r3, [r7, #15]
 8004ba2:	e044      	b.n	8004c2e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ba4:	7bfa      	ldrb	r2, [r7, #15]
 8004ba6:	6879      	ldr	r1, [r7, #4]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	4413      	add	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004bba:	7bfa      	ldrb	r2, [r7, #15]
 8004bbc:	6879      	ldr	r1, [r7, #4]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	440b      	add	r3, r1
 8004bc8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004bcc:	7bfa      	ldrb	r2, [r7, #15]
 8004bce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004bd0:	7bfa      	ldrb	r2, [r7, #15]
 8004bd2:	6879      	ldr	r1, [r7, #4]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	00db      	lsls	r3, r3, #3
 8004bd8:	4413      	add	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	440b      	add	r3, r1
 8004bde:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004be2:	2200      	movs	r2, #0
 8004be4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004be6:	7bfa      	ldrb	r2, [r7, #15]
 8004be8:	6879      	ldr	r1, [r7, #4]
 8004bea:	4613      	mov	r3, r2
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	4413      	add	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	440b      	add	r3, r1
 8004bf4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004bfc:	7bfa      	ldrb	r2, [r7, #15]
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	4613      	mov	r3, r2
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	4413      	add	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004c12:	7bfa      	ldrb	r2, [r7, #15]
 8004c14:	6879      	ldr	r1, [r7, #4]
 8004c16:	4613      	mov	r3, r2
 8004c18:	00db      	lsls	r3, r3, #3
 8004c1a:	4413      	add	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	440b      	add	r3, r1
 8004c20:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004c24:	2200      	movs	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	73fb      	strb	r3, [r7, #15]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	791b      	ldrb	r3, [r3, #4]
 8004c32:	7bfa      	ldrb	r2, [r7, #15]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d3b5      	bcc.n	8004ba4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6818      	ldr	r0, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	7c1a      	ldrb	r2, [r3, #16]
 8004c40:	f88d 2000 	strb.w	r2, [sp]
 8004c44:	3304      	adds	r3, #4
 8004c46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c48:	f001 ff56 	bl	8006af8 <USB_DevInit>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d005      	beq.n	8004c5e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2202      	movs	r2, #2
 8004c56:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e00c      	b.n	8004c78 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f002 ffa0 	bl	8007bb6 <USB_DevDisconnect>

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d101      	bne.n	8004c9c <HAL_PCD_Start+0x1c>
 8004c98:	2302      	movs	r3, #2
 8004c9a:	e022      	b.n	8004ce2 <HAL_PCD_Start+0x62>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d009      	beq.n	8004cc4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d105      	bne.n	8004cc4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cbc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f001 fea7 	bl	8006a1c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f002 ff4e 	bl	8007b74 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004cea:	b590      	push	{r4, r7, lr}
 8004cec:	b08d      	sub	sp, #52	@ 0x34
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
 8004cfa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f003 f80c 	bl	8007d1e <USB_GetMode>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f040 848c 	bne.w	8005626 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f002 ff70 	bl	8007bf8 <USB_ReadInterrupts>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 8482 	beq.w	8005624 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	0a1b      	lsrs	r3, r3, #8
 8004d2a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f002 ff5d 	bl	8007bf8 <USB_ReadInterrupts>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d107      	bne.n	8004d58 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	695a      	ldr	r2, [r3, #20]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f002 0202 	and.w	r2, r2, #2
 8004d56:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f002 ff4b 	bl	8007bf8 <USB_ReadInterrupts>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f003 0310 	and.w	r3, r3, #16
 8004d68:	2b10      	cmp	r3, #16
 8004d6a:	d161      	bne.n	8004e30 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699a      	ldr	r2, [r3, #24]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 0210 	bic.w	r2, r2, #16
 8004d7a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	f003 020f 	and.w	r2, r3, #15
 8004d88:	4613      	mov	r3, r2
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	4413      	add	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	4413      	add	r3, r2
 8004d98:	3304      	adds	r3, #4
 8004d9a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	0c5b      	lsrs	r3, r3, #17
 8004da0:	f003 030f 	and.w	r3, r3, #15
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d124      	bne.n	8004df2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004dae:	4013      	ands	r3, r2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d035      	beq.n	8004e20 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	091b      	lsrs	r3, r3, #4
 8004dbc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004dbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	6a38      	ldr	r0, [r7, #32]
 8004dc8:	f002 fd82 	bl	80078d0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	68da      	ldr	r2, [r3, #12]
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	091b      	lsrs	r3, r3, #4
 8004dd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dd8:	441a      	add	r2, r3
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	695a      	ldr	r2, [r3, #20]
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	091b      	lsrs	r3, r3, #4
 8004de6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dea:	441a      	add	r2, r3
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	615a      	str	r2, [r3, #20]
 8004df0:	e016      	b.n	8004e20 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	0c5b      	lsrs	r3, r3, #17
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	2b06      	cmp	r3, #6
 8004dfc:	d110      	bne.n	8004e20 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004e04:	2208      	movs	r2, #8
 8004e06:	4619      	mov	r1, r3
 8004e08:	6a38      	ldr	r0, [r7, #32]
 8004e0a:	f002 fd61 	bl	80078d0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	695a      	ldr	r2, [r3, #20]
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	091b      	lsrs	r3, r3, #4
 8004e16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e1a:	441a      	add	r2, r3
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699a      	ldr	r2, [r3, #24]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f042 0210 	orr.w	r2, r2, #16
 8004e2e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f002 fedf 	bl	8007bf8 <USB_ReadInterrupts>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e40:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004e44:	f040 80a7 	bne.w	8004f96 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f002 fee4 	bl	8007c1e <USB_ReadDevAllOutEpInterrupt>
 8004e56:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004e58:	e099      	b.n	8004f8e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 808e 	beq.w	8004f82 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e6c:	b2d2      	uxtb	r2, r2
 8004e6e:	4611      	mov	r1, r2
 8004e70:	4618      	mov	r0, r3
 8004e72:	f002 ff08 	bl	8007c86 <USB_ReadDevOutEPInterrupt>
 8004e76:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00c      	beq.n	8004e9c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e8e:	461a      	mov	r2, r3
 8004e90:	2301      	movs	r3, #1
 8004e92:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004e94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 fea4 	bl	8005be4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	f003 0308 	and.w	r3, r3, #8
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00c      	beq.n	8004ec0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea8:	015a      	lsls	r2, r3, #5
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	2308      	movs	r3, #8
 8004eb6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004eb8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 ff7a 	bl	8005db4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f003 0310 	and.w	r3, r3, #16
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d008      	beq.n	8004edc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	2310      	movs	r3, #16
 8004eda:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d030      	beq.n	8004f48 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eee:	2b80      	cmp	r3, #128	@ 0x80
 8004ef0:	d109      	bne.n	8004f06 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	69fa      	ldr	r2, [r7, #28]
 8004efc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f00:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f04:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f08:	4613      	mov	r3, r2
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	4413      	add	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	4413      	add	r3, r2
 8004f18:	3304      	adds	r3, #4
 8004f1a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	78db      	ldrb	r3, [r3, #3]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d108      	bne.n	8004f36 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	2200      	movs	r2, #0
 8004f28:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	4619      	mov	r1, r3
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f005 fa93 	bl	800a45c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f42:	461a      	mov	r2, r3
 8004f44:	2302      	movs	r3, #2
 8004f46:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f003 0320 	and.w	r3, r3, #32
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d008      	beq.n	8004f64 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f5e:	461a      	mov	r2, r3
 8004f60:	2320      	movs	r3, #32
 8004f62:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d009      	beq.n	8004f82 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f70:	015a      	lsls	r2, r3, #5
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	4413      	add	r3, r2
 8004f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004f80:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f84:	3301      	adds	r3, #1
 8004f86:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f8a:	085b      	lsrs	r3, r3, #1
 8004f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f47f af62 	bne.w	8004e5a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f002 fe2c 	bl	8007bf8 <USB_ReadInterrupts>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fa6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004faa:	f040 80db 	bne.w	8005164 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f002 fe4d 	bl	8007c52 <USB_ReadDevAllInEpInterrupt>
 8004fb8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004fbe:	e0cd      	b.n	800515c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f000 80c2 	beq.w	8005150 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	4611      	mov	r1, r2
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f002 fe73 	bl	8007cc2 <USB_ReadDevInEPInterrupt>
 8004fdc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d057      	beq.n	8005098 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	2201      	movs	r2, #1
 8004ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ffc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	43db      	mvns	r3, r3
 8005002:	69f9      	ldr	r1, [r7, #28]
 8005004:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005008:	4013      	ands	r3, r2
 800500a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800500c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	4413      	add	r3, r2
 8005014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005018:	461a      	mov	r2, r3
 800501a:	2301      	movs	r3, #1
 800501c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	799b      	ldrb	r3, [r3, #6]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d132      	bne.n	800508c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800502a:	4613      	mov	r3, r2
 800502c:	00db      	lsls	r3, r3, #3
 800502e:	4413      	add	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	440b      	add	r3, r1
 8005034:	3320      	adds	r3, #32
 8005036:	6819      	ldr	r1, [r3, #0]
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800503c:	4613      	mov	r3, r2
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	4413      	add	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4403      	add	r3, r0
 8005046:	331c      	adds	r3, #28
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4419      	add	r1, r3
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005050:	4613      	mov	r3, r2
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	4413      	add	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4403      	add	r3, r0
 800505a:	3320      	adds	r3, #32
 800505c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800505e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005060:	2b00      	cmp	r3, #0
 8005062:	d113      	bne.n	800508c <HAL_PCD_IRQHandler+0x3a2>
 8005064:	6879      	ldr	r1, [r7, #4]
 8005066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005068:	4613      	mov	r3, r2
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	4413      	add	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	440b      	add	r3, r1
 8005072:	3324      	adds	r3, #36	@ 0x24
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d108      	bne.n	800508c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6818      	ldr	r0, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005084:	461a      	mov	r2, r3
 8005086:	2101      	movs	r1, #1
 8005088:	f002 fe7a 	bl	8007d80 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800508c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508e:	b2db      	uxtb	r3, r3
 8005090:	4619      	mov	r1, r3
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f005 f95d 	bl	800a352 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	f003 0308 	and.w	r3, r3, #8
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d008      	beq.n	80050b4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80050a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050ae:	461a      	mov	r2, r3
 80050b0:	2308      	movs	r3, #8
 80050b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f003 0310 	and.w	r3, r3, #16
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d008      	beq.n	80050d0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80050be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050ca:	461a      	mov	r2, r3
 80050cc:	2310      	movs	r3, #16
 80050ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d008      	beq.n	80050ec <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80050da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050e6:	461a      	mov	r2, r3
 80050e8:	2340      	movs	r3, #64	@ 0x40
 80050ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d023      	beq.n	800513e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80050f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80050f8:	6a38      	ldr	r0, [r7, #32]
 80050fa:	f001 fe61 	bl	8006dc0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80050fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005100:	4613      	mov	r3, r2
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	4413      	add	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	3310      	adds	r3, #16
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	4413      	add	r3, r2
 800510e:	3304      	adds	r3, #4
 8005110:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	78db      	ldrb	r3, [r3, #3]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d108      	bne.n	800512c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2200      	movs	r2, #0
 800511e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005122:	b2db      	uxtb	r3, r3
 8005124:	4619      	mov	r1, r3
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f005 f9aa 	bl	800a480 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800512c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005138:	461a      	mov	r2, r3
 800513a:	2302      	movs	r3, #2
 800513c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005148:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 fcbd 	bl	8005aca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005152:	3301      	adds	r3, #1
 8005154:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005158:	085b      	lsrs	r3, r3, #1
 800515a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800515c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800515e:	2b00      	cmp	r3, #0
 8005160:	f47f af2e 	bne.w	8004fc0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4618      	mov	r0, r3
 800516a:	f002 fd45 	bl	8007bf8 <USB_ReadInterrupts>
 800516e:	4603      	mov	r3, r0
 8005170:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005174:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005178:	d122      	bne.n	80051c0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	69fa      	ldr	r2, [r7, #28]
 8005184:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005188:	f023 0301 	bic.w	r3, r3, #1
 800518c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005194:	2b01      	cmp	r3, #1
 8005196:	d108      	bne.n	80051aa <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80051a0:	2100      	movs	r1, #0
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fea4 	bl	8005ef0 <HAL_PCDEx_LPM_Callback>
 80051a8:	e002      	b.n	80051b0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f005 f948 	bl	800a440 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695a      	ldr	r2, [r3, #20]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80051be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f002 fd17 	bl	8007bf8 <USB_ReadInterrupts>
 80051ca:	4603      	mov	r3, r0
 80051cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051d4:	d112      	bne.n	80051fc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d102      	bne.n	80051ec <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f005 f904 	bl	800a3f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695a      	ldr	r2, [r3, #20]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80051fa:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4618      	mov	r0, r3
 8005202:	f002 fcf9 	bl	8007bf8 <USB_ReadInterrupts>
 8005206:	4603      	mov	r3, r0
 8005208:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800520c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005210:	f040 80b7 	bne.w	8005382 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	69fa      	ldr	r2, [r7, #28]
 800521e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005222:	f023 0301 	bic.w	r3, r3, #1
 8005226:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2110      	movs	r1, #16
 800522e:	4618      	mov	r0, r3
 8005230:	f001 fdc6 	bl	8006dc0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005234:	2300      	movs	r3, #0
 8005236:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005238:	e046      	b.n	80052c8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800523a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005246:	461a      	mov	r2, r3
 8005248:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800524c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800524e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800525e:	0151      	lsls	r1, r2, #5
 8005260:	69fa      	ldr	r2, [r7, #28]
 8005262:	440a      	add	r2, r1
 8005264:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005268:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800526c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800526e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	4413      	add	r3, r2
 8005276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800527a:	461a      	mov	r2, r3
 800527c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005280:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005284:	015a      	lsls	r2, r3, #5
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	4413      	add	r3, r2
 800528a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005292:	0151      	lsls	r1, r2, #5
 8005294:	69fa      	ldr	r2, [r7, #28]
 8005296:	440a      	add	r2, r1
 8005298:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800529c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80052a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80052a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052b2:	0151      	lsls	r1, r2, #5
 80052b4:	69fa      	ldr	r2, [r7, #28]
 80052b6:	440a      	add	r2, r1
 80052b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80052c0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c4:	3301      	adds	r3, #1
 80052c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	791b      	ldrb	r3, [r3, #4]
 80052cc:	461a      	mov	r2, r3
 80052ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d3b2      	bcc.n	800523a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	69fa      	ldr	r2, [r7, #28]
 80052de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052e2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80052e6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	7bdb      	ldrb	r3, [r3, #15]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d016      	beq.n	800531e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052fa:	69fa      	ldr	r2, [r7, #28]
 80052fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005300:	f043 030b 	orr.w	r3, r3, #11
 8005304:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800530e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005310:	69fa      	ldr	r2, [r7, #28]
 8005312:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005316:	f043 030b 	orr.w	r3, r3, #11
 800531a:	6453      	str	r3, [r2, #68]	@ 0x44
 800531c:	e015      	b.n	800534a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	69fa      	ldr	r2, [r7, #28]
 8005328:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800532c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005330:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005334:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	69fa      	ldr	r2, [r7, #28]
 8005340:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005344:	f043 030b 	orr.w	r3, r3, #11
 8005348:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	69fa      	ldr	r2, [r7, #28]
 8005354:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005358:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800535c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6818      	ldr	r0, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800536c:	461a      	mov	r2, r3
 800536e:	f002 fd07 	bl	8007d80 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	695a      	ldr	r2, [r3, #20]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005380:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4618      	mov	r0, r3
 8005388:	f002 fc36 	bl	8007bf8 <USB_ReadInterrupts>
 800538c:	4603      	mov	r3, r0
 800538e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005392:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005396:	d123      	bne.n	80053e0 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4618      	mov	r0, r3
 800539e:	f002 fccc 	bl	8007d3a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f001 fd83 	bl	8006eb2 <USB_GetDevSpeed>
 80053ac:	4603      	mov	r3, r0
 80053ae:	461a      	mov	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681c      	ldr	r4, [r3, #0]
 80053b8:	f001 fa0a 	bl	80067d0 <HAL_RCC_GetHCLKFreq>
 80053bc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80053c2:	461a      	mov	r2, r3
 80053c4:	4620      	mov	r0, r4
 80053c6:	f001 fa87 	bl	80068d8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f004 ffe9 	bl	800a3a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	695a      	ldr	r2, [r3, #20]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80053de:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f002 fc07 	bl	8007bf8 <USB_ReadInterrupts>
 80053ea:	4603      	mov	r3, r0
 80053ec:	f003 0308 	and.w	r3, r3, #8
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d10a      	bne.n	800540a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f004 ffc6 	bl	800a386 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	695a      	ldr	r2, [r3, #20]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f002 0208 	and.w	r2, r2, #8
 8005408:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4618      	mov	r0, r3
 8005410:	f002 fbf2 	bl	8007bf8 <USB_ReadInterrupts>
 8005414:	4603      	mov	r3, r0
 8005416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800541a:	2b80      	cmp	r3, #128	@ 0x80
 800541c:	d123      	bne.n	8005466 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800542a:	2301      	movs	r3, #1
 800542c:	627b      	str	r3, [r7, #36]	@ 0x24
 800542e:	e014      	b.n	800545a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005430:	6879      	ldr	r1, [r7, #4]
 8005432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005434:	4613      	mov	r3, r2
 8005436:	00db      	lsls	r3, r3, #3
 8005438:	4413      	add	r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	440b      	add	r3, r1
 800543e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d105      	bne.n	8005454 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544a:	b2db      	uxtb	r3, r3
 800544c:	4619      	mov	r1, r3
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fb0a 	bl	8005a68 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005456:	3301      	adds	r3, #1
 8005458:	627b      	str	r3, [r7, #36]	@ 0x24
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	791b      	ldrb	r3, [r3, #4]
 800545e:	461a      	mov	r2, r3
 8005460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005462:	4293      	cmp	r3, r2
 8005464:	d3e4      	bcc.n	8005430 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f002 fbc4 	bl	8007bf8 <USB_ReadInterrupts>
 8005470:	4603      	mov	r3, r0
 8005472:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005476:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800547a:	d13c      	bne.n	80054f6 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800547c:	2301      	movs	r3, #1
 800547e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005480:	e02b      	b.n	80054da <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	4413      	add	r3, r2
 800548a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005492:	6879      	ldr	r1, [r7, #4]
 8005494:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005496:	4613      	mov	r3, r2
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	4413      	add	r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	440b      	add	r3, r1
 80054a0:	3318      	adds	r3, #24
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d115      	bne.n	80054d4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80054a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	da12      	bge.n	80054d4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054b2:	4613      	mov	r3, r2
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	4413      	add	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	440b      	add	r3, r1
 80054bc:	3317      	adds	r3, #23
 80054be:	2201      	movs	r2, #1
 80054c0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80054c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	4619      	mov	r1, r3
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 faca 	bl	8005a68 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d6:	3301      	adds	r3, #1
 80054d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	791b      	ldrb	r3, [r3, #4]
 80054de:	461a      	mov	r2, r3
 80054e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d3cd      	bcc.n	8005482 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	695a      	ldr	r2, [r3, #20]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80054f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f002 fb7c 	bl	8007bf8 <USB_ReadInterrupts>
 8005500:	4603      	mov	r3, r0
 8005502:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005506:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800550a:	d156      	bne.n	80055ba <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800550c:	2301      	movs	r3, #1
 800550e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005510:	e045      	b.n	800559e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	4413      	add	r3, r2
 800551a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005522:	6879      	ldr	r1, [r7, #4]
 8005524:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005526:	4613      	mov	r3, r2
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	4413      	add	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	440b      	add	r3, r1
 8005530:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d12e      	bne.n	8005598 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800553a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800553c:	2b00      	cmp	r3, #0
 800553e:	da2b      	bge.n	8005598 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800554c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005550:	429a      	cmp	r2, r3
 8005552:	d121      	bne.n	8005598 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005554:	6879      	ldr	r1, [r7, #4]
 8005556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005558:	4613      	mov	r3, r2
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	4413      	add	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	440b      	add	r3, r1
 8005562:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005566:	2201      	movs	r2, #1
 8005568:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10a      	bne.n	8005598 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	69fa      	ldr	r2, [r7, #28]
 800558c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005590:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005594:	6053      	str	r3, [r2, #4]
            break;
 8005596:	e008      	b.n	80055aa <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559a:	3301      	adds	r3, #1
 800559c:	627b      	str	r3, [r7, #36]	@ 0x24
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	791b      	ldrb	r3, [r3, #4]
 80055a2:	461a      	mov	r2, r3
 80055a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d3b3      	bcc.n	8005512 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	695a      	ldr	r2, [r3, #20]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80055b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4618      	mov	r0, r3
 80055c0:	f002 fb1a 	bl	8007bf8 <USB_ReadInterrupts>
 80055c4:	4603      	mov	r3, r0
 80055c6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80055ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055ce:	d10a      	bne.n	80055e6 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f004 ff67 	bl	800a4a4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	695a      	ldr	r2, [r3, #20]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80055e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f002 fb04 	bl	8007bf8 <USB_ReadInterrupts>
 80055f0:	4603      	mov	r3, r0
 80055f2:	f003 0304 	and.w	r3, r3, #4
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d115      	bne.n	8005626 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	f003 0304 	and.w	r3, r3, #4
 8005608:	2b00      	cmp	r3, #0
 800560a:	d002      	beq.n	8005612 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f004 ff57 	bl	800a4c0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6859      	ldr	r1, [r3, #4]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	430a      	orrs	r2, r1
 8005620:	605a      	str	r2, [r3, #4]
 8005622:	e000      	b.n	8005626 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005624:	bf00      	nop
    }
  }
}
 8005626:	3734      	adds	r7, #52	@ 0x34
 8005628:	46bd      	mov	sp, r7
 800562a:	bd90      	pop	{r4, r7, pc}

0800562c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	460b      	mov	r3, r1
 8005636:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800563e:	2b01      	cmp	r3, #1
 8005640:	d101      	bne.n	8005646 <HAL_PCD_SetAddress+0x1a>
 8005642:	2302      	movs	r3, #2
 8005644:	e012      	b.n	800566c <HAL_PCD_SetAddress+0x40>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	78fa      	ldrb	r2, [r7, #3]
 8005652:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	78fa      	ldrb	r2, [r7, #3]
 800565a:	4611      	mov	r1, r2
 800565c:	4618      	mov	r0, r3
 800565e:	f002 fa63 	bl	8007b28 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	4608      	mov	r0, r1
 800567e:	4611      	mov	r1, r2
 8005680:	461a      	mov	r2, r3
 8005682:	4603      	mov	r3, r0
 8005684:	70fb      	strb	r3, [r7, #3]
 8005686:	460b      	mov	r3, r1
 8005688:	803b      	strh	r3, [r7, #0]
 800568a:	4613      	mov	r3, r2
 800568c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800568e:	2300      	movs	r3, #0
 8005690:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005692:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005696:	2b00      	cmp	r3, #0
 8005698:	da0f      	bge.n	80056ba <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800569a:	78fb      	ldrb	r3, [r7, #3]
 800569c:	f003 020f 	and.w	r2, r3, #15
 80056a0:	4613      	mov	r3, r2
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	4413      	add	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	3310      	adds	r3, #16
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	4413      	add	r3, r2
 80056ae:	3304      	adds	r3, #4
 80056b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2201      	movs	r2, #1
 80056b6:	705a      	strb	r2, [r3, #1]
 80056b8:	e00f      	b.n	80056da <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056ba:	78fb      	ldrb	r3, [r7, #3]
 80056bc:	f003 020f 	and.w	r2, r3, #15
 80056c0:	4613      	mov	r3, r2
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	4413      	add	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	4413      	add	r3, r2
 80056d0:	3304      	adds	r3, #4
 80056d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80056da:	78fb      	ldrb	r3, [r7, #3]
 80056dc:	f003 030f 	and.w	r3, r3, #15
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80056e6:	883b      	ldrh	r3, [r7, #0]
 80056e8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	78ba      	ldrb	r2, [r7, #2]
 80056f4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	785b      	ldrb	r3, [r3, #1]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d004      	beq.n	8005708 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	461a      	mov	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005708:	78bb      	ldrb	r3, [r7, #2]
 800570a:	2b02      	cmp	r3, #2
 800570c:	d102      	bne.n	8005714 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800571a:	2b01      	cmp	r3, #1
 800571c:	d101      	bne.n	8005722 <HAL_PCD_EP_Open+0xae>
 800571e:	2302      	movs	r3, #2
 8005720:	e00e      	b.n	8005740 <HAL_PCD_EP_Open+0xcc>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68f9      	ldr	r1, [r7, #12]
 8005730:	4618      	mov	r0, r3
 8005732:	f001 fbe3 	bl	8006efc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800573e:	7afb      	ldrb	r3, [r7, #11]
}
 8005740:	4618      	mov	r0, r3
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	460b      	mov	r3, r1
 8005752:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005754:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005758:	2b00      	cmp	r3, #0
 800575a:	da0f      	bge.n	800577c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800575c:	78fb      	ldrb	r3, [r7, #3]
 800575e:	f003 020f 	and.w	r2, r3, #15
 8005762:	4613      	mov	r3, r2
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	4413      	add	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	3310      	adds	r3, #16
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	4413      	add	r3, r2
 8005770:	3304      	adds	r3, #4
 8005772:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2201      	movs	r2, #1
 8005778:	705a      	strb	r2, [r3, #1]
 800577a:	e00f      	b.n	800579c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800577c:	78fb      	ldrb	r3, [r7, #3]
 800577e:	f003 020f 	and.w	r2, r3, #15
 8005782:	4613      	mov	r3, r2
 8005784:	00db      	lsls	r3, r3, #3
 8005786:	4413      	add	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	4413      	add	r3, r2
 8005792:	3304      	adds	r3, #4
 8005794:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800579c:	78fb      	ldrb	r3, [r7, #3]
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	b2da      	uxtb	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d101      	bne.n	80057b6 <HAL_PCD_EP_Close+0x6e>
 80057b2:	2302      	movs	r3, #2
 80057b4:	e00e      	b.n	80057d4 <HAL_PCD_EP_Close+0x8c>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68f9      	ldr	r1, [r7, #12]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f001 fc21 	bl	800700c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	607a      	str	r2, [r7, #4]
 80057e6:	603b      	str	r3, [r7, #0]
 80057e8:	460b      	mov	r3, r1
 80057ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057ec:	7afb      	ldrb	r3, [r7, #11]
 80057ee:	f003 020f 	and.w	r2, r3, #15
 80057f2:	4613      	mov	r3, r2
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	4413      	add	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4413      	add	r3, r2
 8005802:	3304      	adds	r3, #4
 8005804:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2200      	movs	r2, #0
 8005816:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	2200      	movs	r2, #0
 800581c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800581e:	7afb      	ldrb	r3, [r7, #11]
 8005820:	f003 030f 	and.w	r3, r3, #15
 8005824:	b2da      	uxtb	r2, r3
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	799b      	ldrb	r3, [r3, #6]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d102      	bne.n	8005838 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6818      	ldr	r0, [r3, #0]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	799b      	ldrb	r3, [r3, #6]
 8005840:	461a      	mov	r2, r3
 8005842:	6979      	ldr	r1, [r7, #20]
 8005844:	f001 fcbe 	bl	80071c4 <USB_EPStartXfer>

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3718      	adds	r7, #24
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005852:	b480      	push	{r7}
 8005854:	b083      	sub	sp, #12
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	460b      	mov	r3, r1
 800585c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800585e:	78fb      	ldrb	r3, [r7, #3]
 8005860:	f003 020f 	and.w	r2, r3, #15
 8005864:	6879      	ldr	r1, [r7, #4]
 8005866:	4613      	mov	r3, r2
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	4413      	add	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	440b      	add	r3, r1
 8005870:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005874:	681b      	ldr	r3, [r3, #0]
}
 8005876:	4618      	mov	r0, r3
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b086      	sub	sp, #24
 8005886:	af00      	add	r7, sp, #0
 8005888:	60f8      	str	r0, [r7, #12]
 800588a:	607a      	str	r2, [r7, #4]
 800588c:	603b      	str	r3, [r7, #0]
 800588e:	460b      	mov	r3, r1
 8005890:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005892:	7afb      	ldrb	r3, [r7, #11]
 8005894:	f003 020f 	and.w	r2, r3, #15
 8005898:	4613      	mov	r3, r2
 800589a:	00db      	lsls	r3, r3, #3
 800589c:	4413      	add	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	3310      	adds	r3, #16
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	4413      	add	r3, r2
 80058a6:	3304      	adds	r3, #4
 80058a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2200      	movs	r2, #0
 80058ba:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	2201      	movs	r2, #1
 80058c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058c2:	7afb      	ldrb	r3, [r7, #11]
 80058c4:	f003 030f 	and.w	r3, r3, #15
 80058c8:	b2da      	uxtb	r2, r3
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	799b      	ldrb	r3, [r3, #6]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d102      	bne.n	80058dc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6818      	ldr	r0, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	799b      	ldrb	r3, [r3, #6]
 80058e4:	461a      	mov	r2, r3
 80058e6:	6979      	ldr	r1, [r7, #20]
 80058e8:	f001 fc6c 	bl	80071c4 <USB_EPStartXfer>

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b084      	sub	sp, #16
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
 80058fe:	460b      	mov	r3, r1
 8005900:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005902:	78fb      	ldrb	r3, [r7, #3]
 8005904:	f003 030f 	and.w	r3, r3, #15
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	7912      	ldrb	r2, [r2, #4]
 800590c:	4293      	cmp	r3, r2
 800590e:	d901      	bls.n	8005914 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e04f      	b.n	80059b4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005914:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005918:	2b00      	cmp	r3, #0
 800591a:	da0f      	bge.n	800593c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800591c:	78fb      	ldrb	r3, [r7, #3]
 800591e:	f003 020f 	and.w	r2, r3, #15
 8005922:	4613      	mov	r3, r2
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	4413      	add	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	3310      	adds	r3, #16
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	4413      	add	r3, r2
 8005930:	3304      	adds	r3, #4
 8005932:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2201      	movs	r2, #1
 8005938:	705a      	strb	r2, [r3, #1]
 800593a:	e00d      	b.n	8005958 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800593c:	78fa      	ldrb	r2, [r7, #3]
 800593e:	4613      	mov	r3, r2
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	4413      	add	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	4413      	add	r3, r2
 800594e:	3304      	adds	r3, #4
 8005950:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2201      	movs	r2, #1
 800595c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800595e:	78fb      	ldrb	r3, [r7, #3]
 8005960:	f003 030f 	and.w	r3, r3, #15
 8005964:	b2da      	uxtb	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005970:	2b01      	cmp	r3, #1
 8005972:	d101      	bne.n	8005978 <HAL_PCD_EP_SetStall+0x82>
 8005974:	2302      	movs	r3, #2
 8005976:	e01d      	b.n	80059b4 <HAL_PCD_EP_SetStall+0xbe>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68f9      	ldr	r1, [r7, #12]
 8005986:	4618      	mov	r0, r3
 8005988:	f001 fffa 	bl	8007980 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800598c:	78fb      	ldrb	r3, [r7, #3]
 800598e:	f003 030f 	and.w	r3, r3, #15
 8005992:	2b00      	cmp	r3, #0
 8005994:	d109      	bne.n	80059aa <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6818      	ldr	r0, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	7999      	ldrb	r1, [r3, #6]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80059a4:	461a      	mov	r2, r3
 80059a6:	f002 f9eb 	bl	8007d80 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	460b      	mov	r3, r1
 80059c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80059c8:	78fb      	ldrb	r3, [r7, #3]
 80059ca:	f003 030f 	and.w	r3, r3, #15
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	7912      	ldrb	r2, [r2, #4]
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d901      	bls.n	80059da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e042      	b.n	8005a60 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80059da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	da0f      	bge.n	8005a02 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059e2:	78fb      	ldrb	r3, [r7, #3]
 80059e4:	f003 020f 	and.w	r2, r3, #15
 80059e8:	4613      	mov	r3, r2
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	4413      	add	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	3310      	adds	r3, #16
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	4413      	add	r3, r2
 80059f6:	3304      	adds	r3, #4
 80059f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2201      	movs	r2, #1
 80059fe:	705a      	strb	r2, [r3, #1]
 8005a00:	e00f      	b.n	8005a22 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a02:	78fb      	ldrb	r3, [r7, #3]
 8005a04:	f003 020f 	and.w	r2, r3, #15
 8005a08:	4613      	mov	r3, r2
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	4413      	add	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	4413      	add	r3, r2
 8005a18:	3304      	adds	r3, #4
 8005a1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a28:	78fb      	ldrb	r3, [r7, #3]
 8005a2a:	f003 030f 	and.w	r3, r3, #15
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d101      	bne.n	8005a42 <HAL_PCD_EP_ClrStall+0x86>
 8005a3e:	2302      	movs	r3, #2
 8005a40:	e00e      	b.n	8005a60 <HAL_PCD_EP_ClrStall+0xa4>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68f9      	ldr	r1, [r7, #12]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f002 f803 	bl	8007a5c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	460b      	mov	r3, r1
 8005a72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005a74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	da0c      	bge.n	8005a96 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a7c:	78fb      	ldrb	r3, [r7, #3]
 8005a7e:	f003 020f 	and.w	r2, r3, #15
 8005a82:	4613      	mov	r3, r2
 8005a84:	00db      	lsls	r3, r3, #3
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	3310      	adds	r3, #16
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	4413      	add	r3, r2
 8005a90:	3304      	adds	r3, #4
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	e00c      	b.n	8005ab0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a96:	78fb      	ldrb	r3, [r7, #3]
 8005a98:	f003 020f 	and.w	r2, r3, #15
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	4413      	add	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	4413      	add	r3, r2
 8005aac:	3304      	adds	r3, #4
 8005aae:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68f9      	ldr	r1, [r7, #12]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f001 fe22 	bl	8007700 <USB_EPStopXfer>
 8005abc:	4603      	mov	r3, r0
 8005abe:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005ac0:	7afb      	ldrb	r3, [r7, #11]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b08a      	sub	sp, #40	@ 0x28
 8005ace:	af02      	add	r7, sp, #8
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	4413      	add	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	3310      	adds	r3, #16
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	4413      	add	r3, r2
 8005aee:	3304      	adds	r3, #4
 8005af0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	695a      	ldr	r2, [r3, #20]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d901      	bls.n	8005b02 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e06b      	b.n	8005bda <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	691a      	ldr	r2, [r3, #16]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	69fa      	ldr	r2, [r7, #28]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d902      	bls.n	8005b1e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	3303      	adds	r3, #3
 8005b22:	089b      	lsrs	r3, r3, #2
 8005b24:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b26:	e02a      	b.n	8005b7e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	691a      	ldr	r2, [r3, #16]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	69fa      	ldr	r2, [r7, #28]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d902      	bls.n	8005b44 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	3303      	adds	r3, #3
 8005b48:	089b      	lsrs	r3, r3, #2
 8005b4a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	68d9      	ldr	r1, [r3, #12]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	4603      	mov	r3, r0
 8005b60:	6978      	ldr	r0, [r7, #20]
 8005b62:	f001 fe77 	bl	8007854 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	68da      	ldr	r2, [r3, #12]
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	441a      	add	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	695a      	ldr	r2, [r3, #20]
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	441a      	add	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d809      	bhi.n	8005ba8 <PCD_WriteEmptyTxFifo+0xde>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	695a      	ldr	r2, [r3, #20]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d203      	bcs.n	8005ba8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1bf      	bne.n	8005b28 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	691a      	ldr	r2, [r3, #16]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d811      	bhi.n	8005bd8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	f003 030f 	and.w	r3, r3, #15
 8005bba:	2201      	movs	r2, #1
 8005bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	43db      	mvns	r3, r3
 8005bce:	6939      	ldr	r1, [r7, #16]
 8005bd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3720      	adds	r7, #32
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
	...

08005be4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b088      	sub	sp, #32
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	333c      	adds	r3, #60	@ 0x3c
 8005bfc:	3304      	adds	r3, #4
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	799b      	ldrb	r3, [r3, #6]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d17b      	bne.n	8005d12 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f003 0308 	and.w	r3, r3, #8
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d015      	beq.n	8005c50 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	4a61      	ldr	r2, [pc, #388]	@ (8005dac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	f240 80b9 	bls.w	8005da0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 80b3 	beq.w	8005da0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	015a      	lsls	r2, r3, #5
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c46:	461a      	mov	r2, r3
 8005c48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c4c:	6093      	str	r3, [r2, #8]
 8005c4e:	e0a7      	b.n	8005da0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f003 0320 	and.w	r3, r3, #32
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d009      	beq.n	8005c6e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c66:	461a      	mov	r2, r3
 8005c68:	2320      	movs	r3, #32
 8005c6a:	6093      	str	r3, [r2, #8]
 8005c6c:	e098      	b.n	8005da0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f040 8093 	bne.w	8005da0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	4a4b      	ldr	r2, [pc, #300]	@ (8005dac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d90f      	bls.n	8005ca2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00a      	beq.n	8005ca2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c98:	461a      	mov	r2, r3
 8005c9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c9e:	6093      	str	r3, [r2, #8]
 8005ca0:	e07e      	b.n	8005da0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	00db      	lsls	r3, r3, #3
 8005ca8:	4413      	add	r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6a1a      	ldr	r2, [r3, #32]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	0159      	lsls	r1, r3, #5
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	440b      	add	r3, r1
 8005cc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cce:	1ad2      	subs	r2, r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d114      	bne.n	8005d04 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d109      	bne.n	8005cf6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6818      	ldr	r0, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005cec:	461a      	mov	r2, r3
 8005cee:	2101      	movs	r1, #1
 8005cf0:	f002 f846 	bl	8007d80 <USB_EP0_OutStart>
 8005cf4:	e006      	b.n	8005d04 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	441a      	add	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	4619      	mov	r1, r3
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f004 fb06 	bl	800a31c <HAL_PCD_DataOutStageCallback>
 8005d10:	e046      	b.n	8005da0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	4a26      	ldr	r2, [pc, #152]	@ (8005db0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d124      	bne.n	8005d64 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00a      	beq.n	8005d3a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d30:	461a      	mov	r2, r3
 8005d32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d36:	6093      	str	r3, [r2, #8]
 8005d38:	e032      	b.n	8005da0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	f003 0320 	and.w	r3, r3, #32
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d008      	beq.n	8005d56 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d50:	461a      	mov	r2, r3
 8005d52:	2320      	movs	r3, #32
 8005d54:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f004 fadd 	bl	800a31c <HAL_PCD_DataOutStageCallback>
 8005d62:	e01d      	b.n	8005da0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d114      	bne.n	8005d94 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005d6a:	6879      	ldr	r1, [r7, #4]
 8005d6c:	683a      	ldr	r2, [r7, #0]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	00db      	lsls	r3, r3, #3
 8005d72:	4413      	add	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	440b      	add	r3, r1
 8005d78:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d108      	bne.n	8005d94 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6818      	ldr	r0, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	2100      	movs	r1, #0
 8005d90:	f001 fff6 	bl	8007d80 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	4619      	mov	r1, r3
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f004 fabe 	bl	800a31c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3720      	adds	r7, #32
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	4f54300a 	.word	0x4f54300a
 8005db0:	4f54310a 	.word	0x4f54310a

08005db4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	333c      	adds	r3, #60	@ 0x3c
 8005dcc:	3304      	adds	r3, #4
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4a15      	ldr	r2, [pc, #84]	@ (8005e3c <PCD_EP_OutSetupPacket_int+0x88>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d90e      	bls.n	8005e08 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d009      	beq.n	8005e08 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e00:	461a      	mov	r2, r3
 8005e02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e06:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f004 fa75 	bl	800a2f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4a0a      	ldr	r2, [pc, #40]	@ (8005e3c <PCD_EP_OutSetupPacket_int+0x88>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d90c      	bls.n	8005e30 <PCD_EP_OutSetupPacket_int+0x7c>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	799b      	ldrb	r3, [r3, #6]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d108      	bne.n	8005e30 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6818      	ldr	r0, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005e28:	461a      	mov	r2, r3
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	f001 ffa8 	bl	8007d80 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3718      	adds	r7, #24
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	4f54300a 	.word	0x4f54300a

08005e40 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	460b      	mov	r3, r1
 8005e4a:	70fb      	strb	r3, [r7, #3]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e56:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005e58:	78fb      	ldrb	r3, [r7, #3]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d107      	bne.n	8005e6e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005e5e:	883b      	ldrh	r3, [r7, #0]
 8005e60:	0419      	lsls	r1, r3, #16
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e6c:	e028      	b.n	8005ec0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e74:	0c1b      	lsrs	r3, r3, #16
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	4413      	add	r3, r2
 8005e7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	73fb      	strb	r3, [r7, #15]
 8005e80:	e00d      	b.n	8005e9e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
 8005e88:	3340      	adds	r3, #64	@ 0x40
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	0c1b      	lsrs	r3, r3, #16
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	4413      	add	r3, r2
 8005e96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005e98:	7bfb      	ldrb	r3, [r7, #15]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	73fb      	strb	r3, [r7, #15]
 8005e9e:	7bfa      	ldrb	r2, [r7, #15]
 8005ea0:	78fb      	ldrb	r3, [r7, #3]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d3ec      	bcc.n	8005e82 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005ea8:	883b      	ldrh	r3, [r7, #0]
 8005eaa:	0418      	lsls	r0, r3, #16
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6819      	ldr	r1, [r3, #0]
 8005eb0:	78fb      	ldrb	r3, [r7, #3]
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	4302      	orrs	r2, r0
 8005eb8:	3340      	adds	r3, #64	@ 0x40
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	440b      	add	r3, r1
 8005ebe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b083      	sub	sp, #12
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	887a      	ldrh	r2, [r7, #2]
 8005ee0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d101      	bne.n	8005f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e267      	b.n	80063ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d075      	beq.n	8006012 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005f26:	4b88      	ldr	r3, [pc, #544]	@ (8006148 <HAL_RCC_OscConfig+0x240>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f003 030c 	and.w	r3, r3, #12
 8005f2e:	2b04      	cmp	r3, #4
 8005f30:	d00c      	beq.n	8005f4c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f32:	4b85      	ldr	r3, [pc, #532]	@ (8006148 <HAL_RCC_OscConfig+0x240>)
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005f3a:	2b08      	cmp	r3, #8
 8005f3c:	d112      	bne.n	8005f64 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f3e:	4b82      	ldr	r3, [pc, #520]	@ (8006148 <HAL_RCC_OscConfig+0x240>)
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f4a:	d10b      	bne.n	8005f64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f4c:	4b7e      	ldr	r3, [pc, #504]	@ (8006148 <HAL_RCC_OscConfig+0x240>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d05b      	beq.n	8006010 <HAL_RCC_OscConfig+0x108>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d157      	bne.n	8006010 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e242      	b.n	80063ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f6c:	d106      	bne.n	8005f7c <HAL_RCC_OscConfig+0x74>
 8005f6e:	4b76      	ldr	r3, [pc, #472]	@ (8006148 <HAL_RCC_OscConfig+0x240>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a75      	ldr	r2, [pc, #468]	@ (8006148 <HAL_RCC_OscConfig+0x240>)
 8005f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f78:	6013      	str	r3, [r2, #0]
 8005f7a:	e01d      	b.n	8005fb8 <HAL_RCC_OscConfig+0xb0>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f84:	d10c      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x98>
 8005f86:	4b70      	ldr	r3, [pc, #448]	@ (8006148 <HAL_RCC_OscConfig+0x240>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a6f      	ldr	r2, [pc, #444]	@ (8006148 <HAL_RCC_OscConfig+0x240>)
 8005f8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f90:	6013      	str	r3, [r2, #0]
 8005f92:	4b6d      	ldr	r3, [pc, #436]	@ (8006148 <HAL_RCC_OscConfig+0x240>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a6c      	ldr	r2, [pc, #432]	@ (8006148 <HAL_RCC_OscConfig+0x240>)
 8005f98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f9c:	6013      	str	r3, [r2, #0]
 8005f9e:	e00b      	b.n	8005fb8 <HAL_RCC_OscConfig+0xb0>
 8005fa0:	4b69      	ldr	r3, [pc, #420]	@ (8006148 <HAL_RCC_OscConfig+0x240>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a68      	ldr	r2, [pc, #416]	@ (8006148 <HAL_RCC_OscConfig+0x240>)
 8005fa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	4b66      	ldr	r3, [pc, #408]	@ (8006148 <HAL_RCC_OscConfig+0x240>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a65      	ldr	r2, [pc, #404]	@ (8006148 <HAL_RCC_OscConfig+0x240>)
 8005fb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d013      	beq.n	8005fe8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fc0:	f7fb fd06 	bl	80019d0 <HAL_GetTick>
 8005fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fc6:	e008      	b.n	8005fda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fc8:	f7fb fd02 	bl	80019d0 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	2b64      	cmp	r3, #100	@ 0x64
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e207      	b.n	80063ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fda:	4b5b      	ldr	r3, [pc, #364]	@ (8006148 <HAL_RCC_OscConfig+0x240>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d0f0      	beq.n	8005fc8 <HAL_RCC_OscConfig+0xc0>
 8005fe6:	e014      	b.n	8006012 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fe8:	f7fb fcf2 	bl	80019d0 <HAL_GetTick>
 8005fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fee:	e008      	b.n	8006002 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ff0:	f7fb fcee 	bl	80019d0 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b64      	cmp	r3, #100	@ 0x64
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e1f3      	b.n	80063ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006002:	4b51      	ldr	r3, [pc, #324]	@ (8006148 <HAL_RCC_OscConfig+0x240>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1f0      	bne.n	8005ff0 <HAL_RCC_OscConfig+0xe8>
 800600e:	e000      	b.n	8006012 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d063      	beq.n	80060e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800601e:	4b4a      	ldr	r3, [pc, #296]	@ (8006148 <HAL_RCC_OscConfig+0x240>)
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f003 030c 	and.w	r3, r3, #12
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00b      	beq.n	8006042 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800602a:	4b47      	ldr	r3, [pc, #284]	@ (8006148 <HAL_RCC_OscConfig+0x240>)
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006032:	2b08      	cmp	r3, #8
 8006034:	d11c      	bne.n	8006070 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006036:	4b44      	ldr	r3, [pc, #272]	@ (8006148 <HAL_RCC_OscConfig+0x240>)
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d116      	bne.n	8006070 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006042:	4b41      	ldr	r3, [pc, #260]	@ (8006148 <HAL_RCC_OscConfig+0x240>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	2b00      	cmp	r3, #0
 800604c:	d005      	beq.n	800605a <HAL_RCC_OscConfig+0x152>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d001      	beq.n	800605a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e1c7      	b.n	80063ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800605a:	4b3b      	ldr	r3, [pc, #236]	@ (8006148 <HAL_RCC_OscConfig+0x240>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	00db      	lsls	r3, r3, #3
 8006068:	4937      	ldr	r1, [pc, #220]	@ (8006148 <HAL_RCC_OscConfig+0x240>)
 800606a:	4313      	orrs	r3, r2
 800606c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800606e:	e03a      	b.n	80060e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d020      	beq.n	80060ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006078:	4b34      	ldr	r3, [pc, #208]	@ (800614c <HAL_RCC_OscConfig+0x244>)
 800607a:	2201      	movs	r2, #1
 800607c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800607e:	f7fb fca7 	bl	80019d0 <HAL_GetTick>
 8006082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006084:	e008      	b.n	8006098 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006086:	f7fb fca3 	bl	80019d0 <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	2b02      	cmp	r3, #2
 8006092:	d901      	bls.n	8006098 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e1a8      	b.n	80063ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006098:	4b2b      	ldr	r3, [pc, #172]	@ (8006148 <HAL_RCC_OscConfig+0x240>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d0f0      	beq.n	8006086 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060a4:	4b28      	ldr	r3, [pc, #160]	@ (8006148 <HAL_RCC_OscConfig+0x240>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	00db      	lsls	r3, r3, #3
 80060b2:	4925      	ldr	r1, [pc, #148]	@ (8006148 <HAL_RCC_OscConfig+0x240>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	600b      	str	r3, [r1, #0]
 80060b8:	e015      	b.n	80060e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060ba:	4b24      	ldr	r3, [pc, #144]	@ (800614c <HAL_RCC_OscConfig+0x244>)
 80060bc:	2200      	movs	r2, #0
 80060be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060c0:	f7fb fc86 	bl	80019d0 <HAL_GetTick>
 80060c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060c6:	e008      	b.n	80060da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060c8:	f7fb fc82 	bl	80019d0 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d901      	bls.n	80060da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e187      	b.n	80063ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060da:	4b1b      	ldr	r3, [pc, #108]	@ (8006148 <HAL_RCC_OscConfig+0x240>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1f0      	bne.n	80060c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0308 	and.w	r3, r3, #8
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d036      	beq.n	8006160 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d016      	beq.n	8006128 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060fa:	4b15      	ldr	r3, [pc, #84]	@ (8006150 <HAL_RCC_OscConfig+0x248>)
 80060fc:	2201      	movs	r2, #1
 80060fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006100:	f7fb fc66 	bl	80019d0 <HAL_GetTick>
 8006104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006106:	e008      	b.n	800611a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006108:	f7fb fc62 	bl	80019d0 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2b02      	cmp	r3, #2
 8006114:	d901      	bls.n	800611a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e167      	b.n	80063ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800611a:	4b0b      	ldr	r3, [pc, #44]	@ (8006148 <HAL_RCC_OscConfig+0x240>)
 800611c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d0f0      	beq.n	8006108 <HAL_RCC_OscConfig+0x200>
 8006126:	e01b      	b.n	8006160 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006128:	4b09      	ldr	r3, [pc, #36]	@ (8006150 <HAL_RCC_OscConfig+0x248>)
 800612a:	2200      	movs	r2, #0
 800612c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800612e:	f7fb fc4f 	bl	80019d0 <HAL_GetTick>
 8006132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006134:	e00e      	b.n	8006154 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006136:	f7fb fc4b 	bl	80019d0 <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	2b02      	cmp	r3, #2
 8006142:	d907      	bls.n	8006154 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	e150      	b.n	80063ea <HAL_RCC_OscConfig+0x4e2>
 8006148:	40023800 	.word	0x40023800
 800614c:	42470000 	.word	0x42470000
 8006150:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006154:	4b88      	ldr	r3, [pc, #544]	@ (8006378 <HAL_RCC_OscConfig+0x470>)
 8006156:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006158:	f003 0302 	and.w	r3, r3, #2
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1ea      	bne.n	8006136 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0304 	and.w	r3, r3, #4
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 8097 	beq.w	800629c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800616e:	2300      	movs	r3, #0
 8006170:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006172:	4b81      	ldr	r3, [pc, #516]	@ (8006378 <HAL_RCC_OscConfig+0x470>)
 8006174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006176:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10f      	bne.n	800619e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800617e:	2300      	movs	r3, #0
 8006180:	60bb      	str	r3, [r7, #8]
 8006182:	4b7d      	ldr	r3, [pc, #500]	@ (8006378 <HAL_RCC_OscConfig+0x470>)
 8006184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006186:	4a7c      	ldr	r2, [pc, #496]	@ (8006378 <HAL_RCC_OscConfig+0x470>)
 8006188:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800618c:	6413      	str	r3, [r2, #64]	@ 0x40
 800618e:	4b7a      	ldr	r3, [pc, #488]	@ (8006378 <HAL_RCC_OscConfig+0x470>)
 8006190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006196:	60bb      	str	r3, [r7, #8]
 8006198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800619a:	2301      	movs	r3, #1
 800619c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800619e:	4b77      	ldr	r3, [pc, #476]	@ (800637c <HAL_RCC_OscConfig+0x474>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d118      	bne.n	80061dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061aa:	4b74      	ldr	r3, [pc, #464]	@ (800637c <HAL_RCC_OscConfig+0x474>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a73      	ldr	r2, [pc, #460]	@ (800637c <HAL_RCC_OscConfig+0x474>)
 80061b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061b6:	f7fb fc0b 	bl	80019d0 <HAL_GetTick>
 80061ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061bc:	e008      	b.n	80061d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061be:	f7fb fc07 	bl	80019d0 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d901      	bls.n	80061d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e10c      	b.n	80063ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061d0:	4b6a      	ldr	r3, [pc, #424]	@ (800637c <HAL_RCC_OscConfig+0x474>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d0f0      	beq.n	80061be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d106      	bne.n	80061f2 <HAL_RCC_OscConfig+0x2ea>
 80061e4:	4b64      	ldr	r3, [pc, #400]	@ (8006378 <HAL_RCC_OscConfig+0x470>)
 80061e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061e8:	4a63      	ldr	r2, [pc, #396]	@ (8006378 <HAL_RCC_OscConfig+0x470>)
 80061ea:	f043 0301 	orr.w	r3, r3, #1
 80061ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80061f0:	e01c      	b.n	800622c <HAL_RCC_OscConfig+0x324>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	2b05      	cmp	r3, #5
 80061f8:	d10c      	bne.n	8006214 <HAL_RCC_OscConfig+0x30c>
 80061fa:	4b5f      	ldr	r3, [pc, #380]	@ (8006378 <HAL_RCC_OscConfig+0x470>)
 80061fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061fe:	4a5e      	ldr	r2, [pc, #376]	@ (8006378 <HAL_RCC_OscConfig+0x470>)
 8006200:	f043 0304 	orr.w	r3, r3, #4
 8006204:	6713      	str	r3, [r2, #112]	@ 0x70
 8006206:	4b5c      	ldr	r3, [pc, #368]	@ (8006378 <HAL_RCC_OscConfig+0x470>)
 8006208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800620a:	4a5b      	ldr	r2, [pc, #364]	@ (8006378 <HAL_RCC_OscConfig+0x470>)
 800620c:	f043 0301 	orr.w	r3, r3, #1
 8006210:	6713      	str	r3, [r2, #112]	@ 0x70
 8006212:	e00b      	b.n	800622c <HAL_RCC_OscConfig+0x324>
 8006214:	4b58      	ldr	r3, [pc, #352]	@ (8006378 <HAL_RCC_OscConfig+0x470>)
 8006216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006218:	4a57      	ldr	r2, [pc, #348]	@ (8006378 <HAL_RCC_OscConfig+0x470>)
 800621a:	f023 0301 	bic.w	r3, r3, #1
 800621e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006220:	4b55      	ldr	r3, [pc, #340]	@ (8006378 <HAL_RCC_OscConfig+0x470>)
 8006222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006224:	4a54      	ldr	r2, [pc, #336]	@ (8006378 <HAL_RCC_OscConfig+0x470>)
 8006226:	f023 0304 	bic.w	r3, r3, #4
 800622a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d015      	beq.n	8006260 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006234:	f7fb fbcc 	bl	80019d0 <HAL_GetTick>
 8006238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800623a:	e00a      	b.n	8006252 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800623c:	f7fb fbc8 	bl	80019d0 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800624a:	4293      	cmp	r3, r2
 800624c:	d901      	bls.n	8006252 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e0cb      	b.n	80063ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006252:	4b49      	ldr	r3, [pc, #292]	@ (8006378 <HAL_RCC_OscConfig+0x470>)
 8006254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0ee      	beq.n	800623c <HAL_RCC_OscConfig+0x334>
 800625e:	e014      	b.n	800628a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006260:	f7fb fbb6 	bl	80019d0 <HAL_GetTick>
 8006264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006266:	e00a      	b.n	800627e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006268:	f7fb fbb2 	bl	80019d0 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006276:	4293      	cmp	r3, r2
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e0b5      	b.n	80063ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800627e:	4b3e      	ldr	r3, [pc, #248]	@ (8006378 <HAL_RCC_OscConfig+0x470>)
 8006280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1ee      	bne.n	8006268 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800628a:	7dfb      	ldrb	r3, [r7, #23]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d105      	bne.n	800629c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006290:	4b39      	ldr	r3, [pc, #228]	@ (8006378 <HAL_RCC_OscConfig+0x470>)
 8006292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006294:	4a38      	ldr	r2, [pc, #224]	@ (8006378 <HAL_RCC_OscConfig+0x470>)
 8006296:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800629a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 80a1 	beq.w	80063e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062a6:	4b34      	ldr	r3, [pc, #208]	@ (8006378 <HAL_RCC_OscConfig+0x470>)
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f003 030c 	and.w	r3, r3, #12
 80062ae:	2b08      	cmp	r3, #8
 80062b0:	d05c      	beq.n	800636c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d141      	bne.n	800633e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062ba:	4b31      	ldr	r3, [pc, #196]	@ (8006380 <HAL_RCC_OscConfig+0x478>)
 80062bc:	2200      	movs	r2, #0
 80062be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062c0:	f7fb fb86 	bl	80019d0 <HAL_GetTick>
 80062c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062c6:	e008      	b.n	80062da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062c8:	f7fb fb82 	bl	80019d0 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d901      	bls.n	80062da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e087      	b.n	80063ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062da:	4b27      	ldr	r3, [pc, #156]	@ (8006378 <HAL_RCC_OscConfig+0x470>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1f0      	bne.n	80062c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	69da      	ldr	r2, [r3, #28]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	431a      	orrs	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f4:	019b      	lsls	r3, r3, #6
 80062f6:	431a      	orrs	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062fc:	085b      	lsrs	r3, r3, #1
 80062fe:	3b01      	subs	r3, #1
 8006300:	041b      	lsls	r3, r3, #16
 8006302:	431a      	orrs	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006308:	061b      	lsls	r3, r3, #24
 800630a:	491b      	ldr	r1, [pc, #108]	@ (8006378 <HAL_RCC_OscConfig+0x470>)
 800630c:	4313      	orrs	r3, r2
 800630e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006310:	4b1b      	ldr	r3, [pc, #108]	@ (8006380 <HAL_RCC_OscConfig+0x478>)
 8006312:	2201      	movs	r2, #1
 8006314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006316:	f7fb fb5b 	bl	80019d0 <HAL_GetTick>
 800631a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800631c:	e008      	b.n	8006330 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800631e:	f7fb fb57 	bl	80019d0 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	2b02      	cmp	r3, #2
 800632a:	d901      	bls.n	8006330 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e05c      	b.n	80063ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006330:	4b11      	ldr	r3, [pc, #68]	@ (8006378 <HAL_RCC_OscConfig+0x470>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d0f0      	beq.n	800631e <HAL_RCC_OscConfig+0x416>
 800633c:	e054      	b.n	80063e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800633e:	4b10      	ldr	r3, [pc, #64]	@ (8006380 <HAL_RCC_OscConfig+0x478>)
 8006340:	2200      	movs	r2, #0
 8006342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006344:	f7fb fb44 	bl	80019d0 <HAL_GetTick>
 8006348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800634a:	e008      	b.n	800635e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800634c:	f7fb fb40 	bl	80019d0 <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	2b02      	cmp	r3, #2
 8006358:	d901      	bls.n	800635e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e045      	b.n	80063ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800635e:	4b06      	ldr	r3, [pc, #24]	@ (8006378 <HAL_RCC_OscConfig+0x470>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1f0      	bne.n	800634c <HAL_RCC_OscConfig+0x444>
 800636a:	e03d      	b.n	80063e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d107      	bne.n	8006384 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e038      	b.n	80063ea <HAL_RCC_OscConfig+0x4e2>
 8006378:	40023800 	.word	0x40023800
 800637c:	40007000 	.word	0x40007000
 8006380:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006384:	4b1b      	ldr	r3, [pc, #108]	@ (80063f4 <HAL_RCC_OscConfig+0x4ec>)
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d028      	beq.n	80063e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800639c:	429a      	cmp	r2, r3
 800639e:	d121      	bne.n	80063e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d11a      	bne.n	80063e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80063b4:	4013      	ands	r3, r2
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80063ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063bc:	4293      	cmp	r3, r2
 80063be:	d111      	bne.n	80063e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ca:	085b      	lsrs	r3, r3, #1
 80063cc:	3b01      	subs	r3, #1
 80063ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d107      	bne.n	80063e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d001      	beq.n	80063e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e000      	b.n	80063ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3718      	adds	r7, #24
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	40023800 	.word	0x40023800

080063f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d101      	bne.n	800640c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e0cc      	b.n	80065a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800640c:	4b68      	ldr	r3, [pc, #416]	@ (80065b0 <HAL_RCC_ClockConfig+0x1b8>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0307 	and.w	r3, r3, #7
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	429a      	cmp	r2, r3
 8006418:	d90c      	bls.n	8006434 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800641a:	4b65      	ldr	r3, [pc, #404]	@ (80065b0 <HAL_RCC_ClockConfig+0x1b8>)
 800641c:	683a      	ldr	r2, [r7, #0]
 800641e:	b2d2      	uxtb	r2, r2
 8006420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006422:	4b63      	ldr	r3, [pc, #396]	@ (80065b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0307 	and.w	r3, r3, #7
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	429a      	cmp	r2, r3
 800642e:	d001      	beq.n	8006434 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e0b8      	b.n	80065a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b00      	cmp	r3, #0
 800643e:	d020      	beq.n	8006482 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b00      	cmp	r3, #0
 800644a:	d005      	beq.n	8006458 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800644c:	4b59      	ldr	r3, [pc, #356]	@ (80065b4 <HAL_RCC_ClockConfig+0x1bc>)
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	4a58      	ldr	r2, [pc, #352]	@ (80065b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006452:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006456:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0308 	and.w	r3, r3, #8
 8006460:	2b00      	cmp	r3, #0
 8006462:	d005      	beq.n	8006470 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006464:	4b53      	ldr	r3, [pc, #332]	@ (80065b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	4a52      	ldr	r2, [pc, #328]	@ (80065b4 <HAL_RCC_ClockConfig+0x1bc>)
 800646a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800646e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006470:	4b50      	ldr	r3, [pc, #320]	@ (80065b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	494d      	ldr	r1, [pc, #308]	@ (80065b4 <HAL_RCC_ClockConfig+0x1bc>)
 800647e:	4313      	orrs	r3, r2
 8006480:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b00      	cmp	r3, #0
 800648c:	d044      	beq.n	8006518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d107      	bne.n	80064a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006496:	4b47      	ldr	r3, [pc, #284]	@ (80065b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d119      	bne.n	80064d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e07f      	b.n	80065a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d003      	beq.n	80064b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064b2:	2b03      	cmp	r3, #3
 80064b4:	d107      	bne.n	80064c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064b6:	4b3f      	ldr	r3, [pc, #252]	@ (80065b4 <HAL_RCC_ClockConfig+0x1bc>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d109      	bne.n	80064d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e06f      	b.n	80065a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064c6:	4b3b      	ldr	r3, [pc, #236]	@ (80065b4 <HAL_RCC_ClockConfig+0x1bc>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e067      	b.n	80065a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064d6:	4b37      	ldr	r3, [pc, #220]	@ (80065b4 <HAL_RCC_ClockConfig+0x1bc>)
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f023 0203 	bic.w	r2, r3, #3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	4934      	ldr	r1, [pc, #208]	@ (80065b4 <HAL_RCC_ClockConfig+0x1bc>)
 80064e4:	4313      	orrs	r3, r2
 80064e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064e8:	f7fb fa72 	bl	80019d0 <HAL_GetTick>
 80064ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ee:	e00a      	b.n	8006506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064f0:	f7fb fa6e 	bl	80019d0 <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064fe:	4293      	cmp	r3, r2
 8006500:	d901      	bls.n	8006506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e04f      	b.n	80065a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006506:	4b2b      	ldr	r3, [pc, #172]	@ (80065b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f003 020c 	and.w	r2, r3, #12
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	429a      	cmp	r2, r3
 8006516:	d1eb      	bne.n	80064f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006518:	4b25      	ldr	r3, [pc, #148]	@ (80065b0 <HAL_RCC_ClockConfig+0x1b8>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0307 	and.w	r3, r3, #7
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	429a      	cmp	r2, r3
 8006524:	d20c      	bcs.n	8006540 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006526:	4b22      	ldr	r3, [pc, #136]	@ (80065b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006528:	683a      	ldr	r2, [r7, #0]
 800652a:	b2d2      	uxtb	r2, r2
 800652c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800652e:	4b20      	ldr	r3, [pc, #128]	@ (80065b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0307 	and.w	r3, r3, #7
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	429a      	cmp	r2, r3
 800653a:	d001      	beq.n	8006540 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e032      	b.n	80065a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0304 	and.w	r3, r3, #4
 8006548:	2b00      	cmp	r3, #0
 800654a:	d008      	beq.n	800655e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800654c:	4b19      	ldr	r3, [pc, #100]	@ (80065b4 <HAL_RCC_ClockConfig+0x1bc>)
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	4916      	ldr	r1, [pc, #88]	@ (80065b4 <HAL_RCC_ClockConfig+0x1bc>)
 800655a:	4313      	orrs	r3, r2
 800655c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0308 	and.w	r3, r3, #8
 8006566:	2b00      	cmp	r3, #0
 8006568:	d009      	beq.n	800657e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800656a:	4b12      	ldr	r3, [pc, #72]	@ (80065b4 <HAL_RCC_ClockConfig+0x1bc>)
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	00db      	lsls	r3, r3, #3
 8006578:	490e      	ldr	r1, [pc, #56]	@ (80065b4 <HAL_RCC_ClockConfig+0x1bc>)
 800657a:	4313      	orrs	r3, r2
 800657c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800657e:	f000 f821 	bl	80065c4 <HAL_RCC_GetSysClockFreq>
 8006582:	4602      	mov	r2, r0
 8006584:	4b0b      	ldr	r3, [pc, #44]	@ (80065b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	091b      	lsrs	r3, r3, #4
 800658a:	f003 030f 	and.w	r3, r3, #15
 800658e:	490a      	ldr	r1, [pc, #40]	@ (80065b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006590:	5ccb      	ldrb	r3, [r1, r3]
 8006592:	fa22 f303 	lsr.w	r3, r2, r3
 8006596:	4a09      	ldr	r2, [pc, #36]	@ (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 8006598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800659a:	4b09      	ldr	r3, [pc, #36]	@ (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fb f9d2 	bl	8001948 <HAL_InitTick>

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	40023c00 	.word	0x40023c00
 80065b4:	40023800 	.word	0x40023800
 80065b8:	0800b32c 	.word	0x0800b32c
 80065bc:	20000000 	.word	0x20000000
 80065c0:	20000004 	.word	0x20000004

080065c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065c8:	b094      	sub	sp, #80	@ 0x50
 80065ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80065cc:	2300      	movs	r3, #0
 80065ce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80065d4:	2300      	movs	r3, #0
 80065d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80065d8:	2300      	movs	r3, #0
 80065da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065dc:	4b79      	ldr	r3, [pc, #484]	@ (80067c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f003 030c 	and.w	r3, r3, #12
 80065e4:	2b08      	cmp	r3, #8
 80065e6:	d00d      	beq.n	8006604 <HAL_RCC_GetSysClockFreq+0x40>
 80065e8:	2b08      	cmp	r3, #8
 80065ea:	f200 80e1 	bhi.w	80067b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d002      	beq.n	80065f8 <HAL_RCC_GetSysClockFreq+0x34>
 80065f2:	2b04      	cmp	r3, #4
 80065f4:	d003      	beq.n	80065fe <HAL_RCC_GetSysClockFreq+0x3a>
 80065f6:	e0db      	b.n	80067b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80065f8:	4b73      	ldr	r3, [pc, #460]	@ (80067c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80065fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065fc:	e0db      	b.n	80067b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065fe:	4b73      	ldr	r3, [pc, #460]	@ (80067cc <HAL_RCC_GetSysClockFreq+0x208>)
 8006600:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006602:	e0d8      	b.n	80067b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006604:	4b6f      	ldr	r3, [pc, #444]	@ (80067c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800660c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800660e:	4b6d      	ldr	r3, [pc, #436]	@ (80067c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d063      	beq.n	80066e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800661a:	4b6a      	ldr	r3, [pc, #424]	@ (80067c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	099b      	lsrs	r3, r3, #6
 8006620:	2200      	movs	r2, #0
 8006622:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006624:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800662c:	633b      	str	r3, [r7, #48]	@ 0x30
 800662e:	2300      	movs	r3, #0
 8006630:	637b      	str	r3, [r7, #52]	@ 0x34
 8006632:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006636:	4622      	mov	r2, r4
 8006638:	462b      	mov	r3, r5
 800663a:	f04f 0000 	mov.w	r0, #0
 800663e:	f04f 0100 	mov.w	r1, #0
 8006642:	0159      	lsls	r1, r3, #5
 8006644:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006648:	0150      	lsls	r0, r2, #5
 800664a:	4602      	mov	r2, r0
 800664c:	460b      	mov	r3, r1
 800664e:	4621      	mov	r1, r4
 8006650:	1a51      	subs	r1, r2, r1
 8006652:	6139      	str	r1, [r7, #16]
 8006654:	4629      	mov	r1, r5
 8006656:	eb63 0301 	sbc.w	r3, r3, r1
 800665a:	617b      	str	r3, [r7, #20]
 800665c:	f04f 0200 	mov.w	r2, #0
 8006660:	f04f 0300 	mov.w	r3, #0
 8006664:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006668:	4659      	mov	r1, fp
 800666a:	018b      	lsls	r3, r1, #6
 800666c:	4651      	mov	r1, sl
 800666e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006672:	4651      	mov	r1, sl
 8006674:	018a      	lsls	r2, r1, #6
 8006676:	4651      	mov	r1, sl
 8006678:	ebb2 0801 	subs.w	r8, r2, r1
 800667c:	4659      	mov	r1, fp
 800667e:	eb63 0901 	sbc.w	r9, r3, r1
 8006682:	f04f 0200 	mov.w	r2, #0
 8006686:	f04f 0300 	mov.w	r3, #0
 800668a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800668e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006692:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006696:	4690      	mov	r8, r2
 8006698:	4699      	mov	r9, r3
 800669a:	4623      	mov	r3, r4
 800669c:	eb18 0303 	adds.w	r3, r8, r3
 80066a0:	60bb      	str	r3, [r7, #8]
 80066a2:	462b      	mov	r3, r5
 80066a4:	eb49 0303 	adc.w	r3, r9, r3
 80066a8:	60fb      	str	r3, [r7, #12]
 80066aa:	f04f 0200 	mov.w	r2, #0
 80066ae:	f04f 0300 	mov.w	r3, #0
 80066b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80066b6:	4629      	mov	r1, r5
 80066b8:	024b      	lsls	r3, r1, #9
 80066ba:	4621      	mov	r1, r4
 80066bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80066c0:	4621      	mov	r1, r4
 80066c2:	024a      	lsls	r2, r1, #9
 80066c4:	4610      	mov	r0, r2
 80066c6:	4619      	mov	r1, r3
 80066c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066ca:	2200      	movs	r2, #0
 80066cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80066d4:	f7f9 fe24 	bl	8000320 <__aeabi_uldivmod>
 80066d8:	4602      	mov	r2, r0
 80066da:	460b      	mov	r3, r1
 80066dc:	4613      	mov	r3, r2
 80066de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066e0:	e058      	b.n	8006794 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066e2:	4b38      	ldr	r3, [pc, #224]	@ (80067c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	099b      	lsrs	r3, r3, #6
 80066e8:	2200      	movs	r2, #0
 80066ea:	4618      	mov	r0, r3
 80066ec:	4611      	mov	r1, r2
 80066ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80066f2:	623b      	str	r3, [r7, #32]
 80066f4:	2300      	movs	r3, #0
 80066f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80066f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80066fc:	4642      	mov	r2, r8
 80066fe:	464b      	mov	r3, r9
 8006700:	f04f 0000 	mov.w	r0, #0
 8006704:	f04f 0100 	mov.w	r1, #0
 8006708:	0159      	lsls	r1, r3, #5
 800670a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800670e:	0150      	lsls	r0, r2, #5
 8006710:	4602      	mov	r2, r0
 8006712:	460b      	mov	r3, r1
 8006714:	4641      	mov	r1, r8
 8006716:	ebb2 0a01 	subs.w	sl, r2, r1
 800671a:	4649      	mov	r1, r9
 800671c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006720:	f04f 0200 	mov.w	r2, #0
 8006724:	f04f 0300 	mov.w	r3, #0
 8006728:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800672c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006730:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006734:	ebb2 040a 	subs.w	r4, r2, sl
 8006738:	eb63 050b 	sbc.w	r5, r3, fp
 800673c:	f04f 0200 	mov.w	r2, #0
 8006740:	f04f 0300 	mov.w	r3, #0
 8006744:	00eb      	lsls	r3, r5, #3
 8006746:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800674a:	00e2      	lsls	r2, r4, #3
 800674c:	4614      	mov	r4, r2
 800674e:	461d      	mov	r5, r3
 8006750:	4643      	mov	r3, r8
 8006752:	18e3      	adds	r3, r4, r3
 8006754:	603b      	str	r3, [r7, #0]
 8006756:	464b      	mov	r3, r9
 8006758:	eb45 0303 	adc.w	r3, r5, r3
 800675c:	607b      	str	r3, [r7, #4]
 800675e:	f04f 0200 	mov.w	r2, #0
 8006762:	f04f 0300 	mov.w	r3, #0
 8006766:	e9d7 4500 	ldrd	r4, r5, [r7]
 800676a:	4629      	mov	r1, r5
 800676c:	028b      	lsls	r3, r1, #10
 800676e:	4621      	mov	r1, r4
 8006770:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006774:	4621      	mov	r1, r4
 8006776:	028a      	lsls	r2, r1, #10
 8006778:	4610      	mov	r0, r2
 800677a:	4619      	mov	r1, r3
 800677c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800677e:	2200      	movs	r2, #0
 8006780:	61bb      	str	r3, [r7, #24]
 8006782:	61fa      	str	r2, [r7, #28]
 8006784:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006788:	f7f9 fdca 	bl	8000320 <__aeabi_uldivmod>
 800678c:	4602      	mov	r2, r0
 800678e:	460b      	mov	r3, r1
 8006790:	4613      	mov	r3, r2
 8006792:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006794:	4b0b      	ldr	r3, [pc, #44]	@ (80067c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	0c1b      	lsrs	r3, r3, #16
 800679a:	f003 0303 	and.w	r3, r3, #3
 800679e:	3301      	adds	r3, #1
 80067a0:	005b      	lsls	r3, r3, #1
 80067a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80067a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80067a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80067ae:	e002      	b.n	80067b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067b0:	4b05      	ldr	r3, [pc, #20]	@ (80067c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80067b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80067b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3750      	adds	r7, #80	@ 0x50
 80067bc:	46bd      	mov	sp, r7
 80067be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067c2:	bf00      	nop
 80067c4:	40023800 	.word	0x40023800
 80067c8:	00f42400 	.word	0x00f42400
 80067cc:	007a1200 	.word	0x007a1200

080067d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067d0:	b480      	push	{r7}
 80067d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067d4:	4b03      	ldr	r3, [pc, #12]	@ (80067e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80067d6:	681b      	ldr	r3, [r3, #0]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	20000000 	.word	0x20000000

080067e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80067ec:	f7ff fff0 	bl	80067d0 <HAL_RCC_GetHCLKFreq>
 80067f0:	4602      	mov	r2, r0
 80067f2:	4b05      	ldr	r3, [pc, #20]	@ (8006808 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	0a9b      	lsrs	r3, r3, #10
 80067f8:	f003 0307 	and.w	r3, r3, #7
 80067fc:	4903      	ldr	r1, [pc, #12]	@ (800680c <HAL_RCC_GetPCLK1Freq+0x24>)
 80067fe:	5ccb      	ldrb	r3, [r1, r3]
 8006800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006804:	4618      	mov	r0, r3
 8006806:	bd80      	pop	{r7, pc}
 8006808:	40023800 	.word	0x40023800
 800680c:	0800b33c 	.word	0x0800b33c

08006810 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006810:	b084      	sub	sp, #16
 8006812:	b580      	push	{r7, lr}
 8006814:	b084      	sub	sp, #16
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
 800681a:	f107 001c 	add.w	r0, r7, #28
 800681e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006822:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006826:	2b01      	cmp	r3, #1
 8006828:	d123      	bne.n	8006872 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800682e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800683e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006852:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006856:	2b01      	cmp	r3, #1
 8006858:	d105      	bne.n	8006866 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f001 fae8 	bl	8007e3c <USB_CoreReset>
 800686c:	4603      	mov	r3, r0
 800686e:	73fb      	strb	r3, [r7, #15]
 8006870:	e01b      	b.n	80068aa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f001 fadc 	bl	8007e3c <USB_CoreReset>
 8006884:	4603      	mov	r3, r0
 8006886:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006888:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800688c:	2b00      	cmp	r3, #0
 800688e:	d106      	bne.n	800689e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006894:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	639a      	str	r2, [r3, #56]	@ 0x38
 800689c:	e005      	b.n	80068aa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80068aa:	7fbb      	ldrb	r3, [r7, #30]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d10b      	bne.n	80068c8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f043 0206 	orr.w	r2, r3, #6
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f043 0220 	orr.w	r2, r3, #32
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80068c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068d4:	b004      	add	sp, #16
 80068d6:	4770      	bx	lr

080068d8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80068d8:	b480      	push	{r7}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	4613      	mov	r3, r2
 80068e4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80068e6:	79fb      	ldrb	r3, [r7, #7]
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d165      	bne.n	80069b8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	4a41      	ldr	r2, [pc, #260]	@ (80069f4 <USB_SetTurnaroundTime+0x11c>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d906      	bls.n	8006902 <USB_SetTurnaroundTime+0x2a>
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	4a40      	ldr	r2, [pc, #256]	@ (80069f8 <USB_SetTurnaroundTime+0x120>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d202      	bcs.n	8006902 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80068fc:	230f      	movs	r3, #15
 80068fe:	617b      	str	r3, [r7, #20]
 8006900:	e062      	b.n	80069c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	4a3c      	ldr	r2, [pc, #240]	@ (80069f8 <USB_SetTurnaroundTime+0x120>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d306      	bcc.n	8006918 <USB_SetTurnaroundTime+0x40>
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	4a3b      	ldr	r2, [pc, #236]	@ (80069fc <USB_SetTurnaroundTime+0x124>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d202      	bcs.n	8006918 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006912:	230e      	movs	r3, #14
 8006914:	617b      	str	r3, [r7, #20]
 8006916:	e057      	b.n	80069c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	4a38      	ldr	r2, [pc, #224]	@ (80069fc <USB_SetTurnaroundTime+0x124>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d306      	bcc.n	800692e <USB_SetTurnaroundTime+0x56>
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	4a37      	ldr	r2, [pc, #220]	@ (8006a00 <USB_SetTurnaroundTime+0x128>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d202      	bcs.n	800692e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006928:	230d      	movs	r3, #13
 800692a:	617b      	str	r3, [r7, #20]
 800692c:	e04c      	b.n	80069c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	4a33      	ldr	r2, [pc, #204]	@ (8006a00 <USB_SetTurnaroundTime+0x128>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d306      	bcc.n	8006944 <USB_SetTurnaroundTime+0x6c>
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	4a32      	ldr	r2, [pc, #200]	@ (8006a04 <USB_SetTurnaroundTime+0x12c>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d802      	bhi.n	8006944 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800693e:	230c      	movs	r3, #12
 8006940:	617b      	str	r3, [r7, #20]
 8006942:	e041      	b.n	80069c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	4a2f      	ldr	r2, [pc, #188]	@ (8006a04 <USB_SetTurnaroundTime+0x12c>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d906      	bls.n	800695a <USB_SetTurnaroundTime+0x82>
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	4a2e      	ldr	r2, [pc, #184]	@ (8006a08 <USB_SetTurnaroundTime+0x130>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d802      	bhi.n	800695a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006954:	230b      	movs	r3, #11
 8006956:	617b      	str	r3, [r7, #20]
 8006958:	e036      	b.n	80069c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	4a2a      	ldr	r2, [pc, #168]	@ (8006a08 <USB_SetTurnaroundTime+0x130>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d906      	bls.n	8006970 <USB_SetTurnaroundTime+0x98>
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	4a29      	ldr	r2, [pc, #164]	@ (8006a0c <USB_SetTurnaroundTime+0x134>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d802      	bhi.n	8006970 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800696a:	230a      	movs	r3, #10
 800696c:	617b      	str	r3, [r7, #20]
 800696e:	e02b      	b.n	80069c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	4a26      	ldr	r2, [pc, #152]	@ (8006a0c <USB_SetTurnaroundTime+0x134>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d906      	bls.n	8006986 <USB_SetTurnaroundTime+0xae>
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	4a25      	ldr	r2, [pc, #148]	@ (8006a10 <USB_SetTurnaroundTime+0x138>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d202      	bcs.n	8006986 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006980:	2309      	movs	r3, #9
 8006982:	617b      	str	r3, [r7, #20]
 8006984:	e020      	b.n	80069c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	4a21      	ldr	r2, [pc, #132]	@ (8006a10 <USB_SetTurnaroundTime+0x138>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d306      	bcc.n	800699c <USB_SetTurnaroundTime+0xc4>
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	4a20      	ldr	r2, [pc, #128]	@ (8006a14 <USB_SetTurnaroundTime+0x13c>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d802      	bhi.n	800699c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006996:	2308      	movs	r3, #8
 8006998:	617b      	str	r3, [r7, #20]
 800699a:	e015      	b.n	80069c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	4a1d      	ldr	r2, [pc, #116]	@ (8006a14 <USB_SetTurnaroundTime+0x13c>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d906      	bls.n	80069b2 <USB_SetTurnaroundTime+0xda>
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	4a1c      	ldr	r2, [pc, #112]	@ (8006a18 <USB_SetTurnaroundTime+0x140>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d202      	bcs.n	80069b2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80069ac:	2307      	movs	r3, #7
 80069ae:	617b      	str	r3, [r7, #20]
 80069b0:	e00a      	b.n	80069c8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80069b2:	2306      	movs	r3, #6
 80069b4:	617b      	str	r3, [r7, #20]
 80069b6:	e007      	b.n	80069c8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80069b8:	79fb      	ldrb	r3, [r7, #7]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d102      	bne.n	80069c4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80069be:	2309      	movs	r3, #9
 80069c0:	617b      	str	r3, [r7, #20]
 80069c2:	e001      	b.n	80069c8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80069c4:	2309      	movs	r3, #9
 80069c6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	68da      	ldr	r2, [r3, #12]
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	029b      	lsls	r3, r3, #10
 80069dc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80069e0:	431a      	orrs	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	371c      	adds	r7, #28
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr
 80069f4:	00d8acbf 	.word	0x00d8acbf
 80069f8:	00e4e1c0 	.word	0x00e4e1c0
 80069fc:	00f42400 	.word	0x00f42400
 8006a00:	01067380 	.word	0x01067380
 8006a04:	011a499f 	.word	0x011a499f
 8006a08:	01312cff 	.word	0x01312cff
 8006a0c:	014ca43f 	.word	0x014ca43f
 8006a10:	016e3600 	.word	0x016e3600
 8006a14:	01a6ab1f 	.word	0x01a6ab1f
 8006a18:	01e84800 	.word	0x01e84800

08006a1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f043 0201 	orr.w	r2, r3, #1
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f023 0201 	bic.w	r2, r3, #1
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	460b      	mov	r3, r1
 8006a6a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a7c:	78fb      	ldrb	r3, [r7, #3]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d115      	bne.n	8006aae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006a8e:	200a      	movs	r0, #10
 8006a90:	f7fa ffaa 	bl	80019e8 <HAL_Delay>
      ms += 10U;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	330a      	adds	r3, #10
 8006a98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f001 f93f 	bl	8007d1e <USB_GetMode>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d01e      	beq.n	8006ae4 <USB_SetCurrentMode+0x84>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2bc7      	cmp	r3, #199	@ 0xc7
 8006aaa:	d9f0      	bls.n	8006a8e <USB_SetCurrentMode+0x2e>
 8006aac:	e01a      	b.n	8006ae4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006aae:	78fb      	ldrb	r3, [r7, #3]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d115      	bne.n	8006ae0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006ac0:	200a      	movs	r0, #10
 8006ac2:	f7fa ff91 	bl	80019e8 <HAL_Delay>
      ms += 10U;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	330a      	adds	r3, #10
 8006aca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f001 f926 	bl	8007d1e <USB_GetMode>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d005      	beq.n	8006ae4 <USB_SetCurrentMode+0x84>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2bc7      	cmp	r3, #199	@ 0xc7
 8006adc:	d9f0      	bls.n	8006ac0 <USB_SetCurrentMode+0x60>
 8006ade:	e001      	b.n	8006ae4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e005      	b.n	8006af0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2bc8      	cmp	r3, #200	@ 0xc8
 8006ae8:	d101      	bne.n	8006aee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e000      	b.n	8006af0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006af8:	b084      	sub	sp, #16
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b086      	sub	sp, #24
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006b06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006b12:	2300      	movs	r3, #0
 8006b14:	613b      	str	r3, [r7, #16]
 8006b16:	e009      	b.n	8006b2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	3340      	adds	r3, #64	@ 0x40
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4413      	add	r3, r2
 8006b22:	2200      	movs	r2, #0
 8006b24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	613b      	str	r3, [r7, #16]
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	2b0e      	cmp	r3, #14
 8006b30:	d9f2      	bls.n	8006b18 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b32:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d11c      	bne.n	8006b74 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b48:	f043 0302 	orr.w	r3, r3, #2
 8006b4c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b52:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b5e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b6a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	639a      	str	r2, [r3, #56]	@ 0x38
 8006b72:	e00b      	b.n	8006b8c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b78:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b84:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b92:	461a      	mov	r2, r3
 8006b94:	2300      	movs	r3, #0
 8006b96:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b98:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d10d      	bne.n	8006bbc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006ba0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d104      	bne.n	8006bb2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006ba8:	2100      	movs	r1, #0
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f968 	bl	8006e80 <USB_SetDevSpeed>
 8006bb0:	e008      	b.n	8006bc4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006bb2:	2101      	movs	r1, #1
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 f963 	bl	8006e80 <USB_SetDevSpeed>
 8006bba:	e003      	b.n	8006bc4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006bbc:	2103      	movs	r1, #3
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f95e 	bl	8006e80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006bc4:	2110      	movs	r1, #16
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f8fa 	bl	8006dc0 <USB_FlushTxFifo>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f924 	bl	8006e24 <USB_FlushRxFifo>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bec:	461a      	mov	r2, r3
 8006bee:	2300      	movs	r3, #0
 8006bf0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c04:	461a      	mov	r2, r3
 8006c06:	2300      	movs	r3, #0
 8006c08:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	613b      	str	r3, [r7, #16]
 8006c0e:	e043      	b.n	8006c98 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	015a      	lsls	r2, r3, #5
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	4413      	add	r3, r2
 8006c18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c26:	d118      	bne.n	8006c5a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10a      	bne.n	8006c44 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006c40:	6013      	str	r3, [r2, #0]
 8006c42:	e013      	b.n	8006c6c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c50:	461a      	mov	r2, r3
 8006c52:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006c56:	6013      	str	r3, [r2, #0]
 8006c58:	e008      	b.n	8006c6c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c66:	461a      	mov	r2, r3
 8006c68:	2300      	movs	r3, #0
 8006c6a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c78:	461a      	mov	r2, r3
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	015a      	lsls	r2, r3, #5
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006c90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	3301      	adds	r3, #1
 8006c96:	613b      	str	r3, [r7, #16]
 8006c98:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d3b5      	bcc.n	8006c10 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	613b      	str	r3, [r7, #16]
 8006ca8:	e043      	b.n	8006d32 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cc0:	d118      	bne.n	8006cf4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d10a      	bne.n	8006cde <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	015a      	lsls	r2, r3, #5
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4413      	add	r3, r2
 8006cd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006cda:	6013      	str	r3, [r2, #0]
 8006cdc:	e013      	b.n	8006d06 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	015a      	lsls	r2, r3, #5
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cea:	461a      	mov	r2, r3
 8006cec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006cf0:	6013      	str	r3, [r2, #0]
 8006cf2:	e008      	b.n	8006d06 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	015a      	lsls	r2, r3, #5
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d00:	461a      	mov	r2, r3
 8006d02:	2300      	movs	r3, #0
 8006d04:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	015a      	lsls	r2, r3, #5
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d12:	461a      	mov	r2, r3
 8006d14:	2300      	movs	r3, #0
 8006d16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d24:	461a      	mov	r2, r3
 8006d26:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006d2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	613b      	str	r3, [r7, #16]
 8006d32:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006d36:	461a      	mov	r2, r3
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d3b5      	bcc.n	8006caa <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d50:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006d5e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d60:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d105      	bne.n	8006d74 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	f043 0210 	orr.w	r2, r3, #16
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	699a      	ldr	r2, [r3, #24]
 8006d78:	4b10      	ldr	r3, [pc, #64]	@ (8006dbc <USB_DevInit+0x2c4>)
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d80:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d005      	beq.n	8006d94 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	f043 0208 	orr.w	r2, r3, #8
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d94:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d107      	bne.n	8006dac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006da4:	f043 0304 	orr.w	r3, r3, #4
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3718      	adds	r7, #24
 8006db2:	46bd      	mov	sp, r7
 8006db4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006db8:	b004      	add	sp, #16
 8006dba:	4770      	bx	lr
 8006dbc:	803c3800 	.word	0x803c3800

08006dc0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006dda:	d901      	bls.n	8006de0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e01b      	b.n	8006e18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	daf2      	bge.n	8006dce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006de8:	2300      	movs	r3, #0
 8006dea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	019b      	lsls	r3, r3, #6
 8006df0:	f043 0220 	orr.w	r2, r3, #32
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e04:	d901      	bls.n	8006e0a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e006      	b.n	8006e18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	f003 0320 	and.w	r3, r3, #32
 8006e12:	2b20      	cmp	r3, #32
 8006e14:	d0f0      	beq.n	8006df8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3714      	adds	r7, #20
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	3301      	adds	r3, #1
 8006e34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e3c:	d901      	bls.n	8006e42 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e018      	b.n	8006e74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	daf2      	bge.n	8006e30 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2210      	movs	r2, #16
 8006e52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	3301      	adds	r3, #1
 8006e58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e60:	d901      	bls.n	8006e66 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e006      	b.n	8006e74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	f003 0310 	and.w	r3, r3, #16
 8006e6e:	2b10      	cmp	r3, #16
 8006e70:	d0f0      	beq.n	8006e54 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3714      	adds	r7, #20
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	460b      	mov	r3, r1
 8006e8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	78fb      	ldrb	r3, [r7, #3]
 8006e9a:	68f9      	ldr	r1, [r7, #12]
 8006e9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b087      	sub	sp, #28
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f003 0306 	and.w	r3, r3, #6
 8006eca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d102      	bne.n	8006ed8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	75fb      	strb	r3, [r7, #23]
 8006ed6:	e00a      	b.n	8006eee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d002      	beq.n	8006ee4 <USB_GetDevSpeed+0x32>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2b06      	cmp	r3, #6
 8006ee2:	d102      	bne.n	8006eea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	75fb      	strb	r3, [r7, #23]
 8006ee8:	e001      	b.n	8006eee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006eea:	230f      	movs	r3, #15
 8006eec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	371c      	adds	r7, #28
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	785b      	ldrb	r3, [r3, #1]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d13a      	bne.n	8006f8e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f1e:	69da      	ldr	r2, [r3, #28]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	f003 030f 	and.w	r3, r3, #15
 8006f28:	2101      	movs	r1, #1
 8006f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	68f9      	ldr	r1, [r7, #12]
 8006f32:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f36:	4313      	orrs	r3, r2
 8006f38:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d155      	bne.n	8006ffc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	015a      	lsls	r2, r3, #5
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	4413      	add	r3, r2
 8006f58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	791b      	ldrb	r3, [r3, #4]
 8006f6a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f6c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	059b      	lsls	r3, r3, #22
 8006f72:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f74:	4313      	orrs	r3, r2
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	0151      	lsls	r1, r2, #5
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	440a      	add	r2, r1
 8006f7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f8a:	6013      	str	r3, [r2, #0]
 8006f8c:	e036      	b.n	8006ffc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f94:	69da      	ldr	r2, [r3, #28]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	f003 030f 	and.w	r3, r3, #15
 8006f9e:	2101      	movs	r1, #1
 8006fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8006fa4:	041b      	lsls	r3, r3, #16
 8006fa6:	68f9      	ldr	r1, [r7, #12]
 8006fa8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006fac:	4313      	orrs	r3, r2
 8006fae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	015a      	lsls	r2, r3, #5
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d11a      	bne.n	8006ffc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	015a      	lsls	r2, r3, #5
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	4413      	add	r3, r2
 8006fce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	791b      	ldrb	r3, [r3, #4]
 8006fe0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006fe2:	430b      	orrs	r3, r1
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	68ba      	ldr	r2, [r7, #8]
 8006fe8:	0151      	lsls	r1, r2, #5
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	440a      	add	r2, r1
 8006fee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ff2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ff6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ffa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3714      	adds	r7, #20
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
	...

0800700c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	785b      	ldrb	r3, [r3, #1]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d161      	bne.n	80070ec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	015a      	lsls	r2, r3, #5
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	4413      	add	r3, r2
 8007030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800703a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800703e:	d11f      	bne.n	8007080 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	015a      	lsls	r2, r3, #5
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	4413      	add	r3, r2
 8007048:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	0151      	lsls	r1, r2, #5
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	440a      	add	r2, r1
 8007056:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800705a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800705e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	015a      	lsls	r2, r3, #5
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	4413      	add	r3, r2
 8007068:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68ba      	ldr	r2, [r7, #8]
 8007070:	0151      	lsls	r1, r2, #5
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	440a      	add	r2, r1
 8007076:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800707a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800707e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007086:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	f003 030f 	and.w	r3, r3, #15
 8007090:	2101      	movs	r1, #1
 8007092:	fa01 f303 	lsl.w	r3, r1, r3
 8007096:	b29b      	uxth	r3, r3
 8007098:	43db      	mvns	r3, r3
 800709a:	68f9      	ldr	r1, [r7, #12]
 800709c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070a0:	4013      	ands	r3, r2
 80070a2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070aa:	69da      	ldr	r2, [r3, #28]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	f003 030f 	and.w	r3, r3, #15
 80070b4:	2101      	movs	r1, #1
 80070b6:	fa01 f303 	lsl.w	r3, r1, r3
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	43db      	mvns	r3, r3
 80070be:	68f9      	ldr	r1, [r7, #12]
 80070c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070c4:	4013      	ands	r3, r2
 80070c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	015a      	lsls	r2, r3, #5
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	4413      	add	r3, r2
 80070d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	0159      	lsls	r1, r3, #5
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	440b      	add	r3, r1
 80070de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070e2:	4619      	mov	r1, r3
 80070e4:	4b35      	ldr	r3, [pc, #212]	@ (80071bc <USB_DeactivateEndpoint+0x1b0>)
 80070e6:	4013      	ands	r3, r2
 80070e8:	600b      	str	r3, [r1, #0]
 80070ea:	e060      	b.n	80071ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	015a      	lsls	r2, r3, #5
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007102:	d11f      	bne.n	8007144 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	015a      	lsls	r2, r3, #5
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	4413      	add	r3, r2
 800710c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	0151      	lsls	r1, r2, #5
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	440a      	add	r2, r1
 800711a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800711e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007122:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	015a      	lsls	r2, r3, #5
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	4413      	add	r3, r2
 800712c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	0151      	lsls	r1, r2, #5
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	440a      	add	r2, r1
 800713a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800713e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007142:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800714a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	f003 030f 	and.w	r3, r3, #15
 8007154:	2101      	movs	r1, #1
 8007156:	fa01 f303 	lsl.w	r3, r1, r3
 800715a:	041b      	lsls	r3, r3, #16
 800715c:	43db      	mvns	r3, r3
 800715e:	68f9      	ldr	r1, [r7, #12]
 8007160:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007164:	4013      	ands	r3, r2
 8007166:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800716e:	69da      	ldr	r2, [r3, #28]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	f003 030f 	and.w	r3, r3, #15
 8007178:	2101      	movs	r1, #1
 800717a:	fa01 f303 	lsl.w	r3, r1, r3
 800717e:	041b      	lsls	r3, r3, #16
 8007180:	43db      	mvns	r3, r3
 8007182:	68f9      	ldr	r1, [r7, #12]
 8007184:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007188:	4013      	ands	r3, r2
 800718a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	0159      	lsls	r1, r3, #5
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	440b      	add	r3, r1
 80071a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071a6:	4619      	mov	r1, r3
 80071a8:	4b05      	ldr	r3, [pc, #20]	@ (80071c0 <USB_DeactivateEndpoint+0x1b4>)
 80071aa:	4013      	ands	r3, r2
 80071ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	ec337800 	.word	0xec337800
 80071c0:	eff37800 	.word	0xeff37800

080071c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b08a      	sub	sp, #40	@ 0x28
 80071c8:	af02      	add	r7, sp, #8
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	4613      	mov	r3, r2
 80071d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	785b      	ldrb	r3, [r3, #1]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	f040 817f 	bne.w	80074e4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d132      	bne.n	8007254 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	015a      	lsls	r2, r3, #5
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	69ba      	ldr	r2, [r7, #24]
 80071fe:	0151      	lsls	r1, r2, #5
 8007200:	69fa      	ldr	r2, [r7, #28]
 8007202:	440a      	add	r2, r1
 8007204:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007208:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800720c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007210:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	015a      	lsls	r2, r3, #5
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	4413      	add	r3, r2
 800721a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	69ba      	ldr	r2, [r7, #24]
 8007222:	0151      	lsls	r1, r2, #5
 8007224:	69fa      	ldr	r2, [r7, #28]
 8007226:	440a      	add	r2, r1
 8007228:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800722c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007230:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	015a      	lsls	r2, r3, #5
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	4413      	add	r3, r2
 800723a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	69ba      	ldr	r2, [r7, #24]
 8007242:	0151      	lsls	r1, r2, #5
 8007244:	69fa      	ldr	r2, [r7, #28]
 8007246:	440a      	add	r2, r1
 8007248:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800724c:	0cdb      	lsrs	r3, r3, #19
 800724e:	04db      	lsls	r3, r3, #19
 8007250:	6113      	str	r3, [r2, #16]
 8007252:	e097      	b.n	8007384 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	015a      	lsls	r2, r3, #5
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	4413      	add	r3, r2
 800725c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	69ba      	ldr	r2, [r7, #24]
 8007264:	0151      	lsls	r1, r2, #5
 8007266:	69fa      	ldr	r2, [r7, #28]
 8007268:	440a      	add	r2, r1
 800726a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800726e:	0cdb      	lsrs	r3, r3, #19
 8007270:	04db      	lsls	r3, r3, #19
 8007272:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	015a      	lsls	r2, r3, #5
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	4413      	add	r3, r2
 800727c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	69ba      	ldr	r2, [r7, #24]
 8007284:	0151      	lsls	r1, r2, #5
 8007286:	69fa      	ldr	r2, [r7, #28]
 8007288:	440a      	add	r2, r1
 800728a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800728e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007292:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007296:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d11a      	bne.n	80072d4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	691a      	ldr	r2, [r3, #16]
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d903      	bls.n	80072b2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	689a      	ldr	r2, [r3, #8]
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	015a      	lsls	r2, r3, #5
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	4413      	add	r3, r2
 80072ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	69ba      	ldr	r2, [r7, #24]
 80072c2:	0151      	lsls	r1, r2, #5
 80072c4:	69fa      	ldr	r2, [r7, #28]
 80072c6:	440a      	add	r2, r1
 80072c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80072d0:	6113      	str	r3, [r2, #16]
 80072d2:	e044      	b.n	800735e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	691a      	ldr	r2, [r3, #16]
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	4413      	add	r3, r2
 80072de:	1e5a      	subs	r2, r3, #1
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	015a      	lsls	r2, r3, #5
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	4413      	add	r3, r2
 80072f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072f6:	691a      	ldr	r2, [r3, #16]
 80072f8:	8afb      	ldrh	r3, [r7, #22]
 80072fa:	04d9      	lsls	r1, r3, #19
 80072fc:	4ba4      	ldr	r3, [pc, #656]	@ (8007590 <USB_EPStartXfer+0x3cc>)
 80072fe:	400b      	ands	r3, r1
 8007300:	69b9      	ldr	r1, [r7, #24]
 8007302:	0148      	lsls	r0, r1, #5
 8007304:	69f9      	ldr	r1, [r7, #28]
 8007306:	4401      	add	r1, r0
 8007308:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800730c:	4313      	orrs	r3, r2
 800730e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	791b      	ldrb	r3, [r3, #4]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d122      	bne.n	800735e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	015a      	lsls	r2, r3, #5
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	4413      	add	r3, r2
 8007320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	69ba      	ldr	r2, [r7, #24]
 8007328:	0151      	lsls	r1, r2, #5
 800732a:	69fa      	ldr	r2, [r7, #28]
 800732c:	440a      	add	r2, r1
 800732e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007332:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007336:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	015a      	lsls	r2, r3, #5
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	4413      	add	r3, r2
 8007340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007344:	691a      	ldr	r2, [r3, #16]
 8007346:	8afb      	ldrh	r3, [r7, #22]
 8007348:	075b      	lsls	r3, r3, #29
 800734a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800734e:	69b9      	ldr	r1, [r7, #24]
 8007350:	0148      	lsls	r0, r1, #5
 8007352:	69f9      	ldr	r1, [r7, #28]
 8007354:	4401      	add	r1, r0
 8007356:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800735a:	4313      	orrs	r3, r2
 800735c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	015a      	lsls	r2, r3, #5
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	4413      	add	r3, r2
 8007366:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800736a:	691a      	ldr	r2, [r3, #16]
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007374:	69b9      	ldr	r1, [r7, #24]
 8007376:	0148      	lsls	r0, r1, #5
 8007378:	69f9      	ldr	r1, [r7, #28]
 800737a:	4401      	add	r1, r0
 800737c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007380:	4313      	orrs	r3, r2
 8007382:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007384:	79fb      	ldrb	r3, [r7, #7]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d14b      	bne.n	8007422 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d009      	beq.n	80073a6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	015a      	lsls	r2, r3, #5
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	4413      	add	r3, r2
 800739a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800739e:	461a      	mov	r2, r3
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	791b      	ldrb	r3, [r3, #4]
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d128      	bne.n	8007400 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d110      	bne.n	80073e0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	015a      	lsls	r2, r3, #5
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	4413      	add	r3, r2
 80073c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	69ba      	ldr	r2, [r7, #24]
 80073ce:	0151      	lsls	r1, r2, #5
 80073d0:	69fa      	ldr	r2, [r7, #28]
 80073d2:	440a      	add	r2, r1
 80073d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80073dc:	6013      	str	r3, [r2, #0]
 80073de:	e00f      	b.n	8007400 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	69ba      	ldr	r2, [r7, #24]
 80073f0:	0151      	lsls	r1, r2, #5
 80073f2:	69fa      	ldr	r2, [r7, #28]
 80073f4:	440a      	add	r2, r1
 80073f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073fe:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	015a      	lsls	r2, r3, #5
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	4413      	add	r3, r2
 8007408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	69ba      	ldr	r2, [r7, #24]
 8007410:	0151      	lsls	r1, r2, #5
 8007412:	69fa      	ldr	r2, [r7, #28]
 8007414:	440a      	add	r2, r1
 8007416:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800741a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800741e:	6013      	str	r3, [r2, #0]
 8007420:	e166      	b.n	80076f0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	015a      	lsls	r2, r3, #5
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	4413      	add	r3, r2
 800742a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	69ba      	ldr	r2, [r7, #24]
 8007432:	0151      	lsls	r1, r2, #5
 8007434:	69fa      	ldr	r2, [r7, #28]
 8007436:	440a      	add	r2, r1
 8007438:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800743c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007440:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	791b      	ldrb	r3, [r3, #4]
 8007446:	2b01      	cmp	r3, #1
 8007448:	d015      	beq.n	8007476 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	2b00      	cmp	r3, #0
 8007450:	f000 814e 	beq.w	80076f0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800745a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	f003 030f 	and.w	r3, r3, #15
 8007464:	2101      	movs	r1, #1
 8007466:	fa01 f303 	lsl.w	r3, r1, r3
 800746a:	69f9      	ldr	r1, [r7, #28]
 800746c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007470:	4313      	orrs	r3, r2
 8007472:	634b      	str	r3, [r1, #52]	@ 0x34
 8007474:	e13c      	b.n	80076f0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007482:	2b00      	cmp	r3, #0
 8007484:	d110      	bne.n	80074a8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	015a      	lsls	r2, r3, #5
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	4413      	add	r3, r2
 800748e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	69ba      	ldr	r2, [r7, #24]
 8007496:	0151      	lsls	r1, r2, #5
 8007498:	69fa      	ldr	r2, [r7, #28]
 800749a:	440a      	add	r2, r1
 800749c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80074a4:	6013      	str	r3, [r2, #0]
 80074a6:	e00f      	b.n	80074c8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	015a      	lsls	r2, r3, #5
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	4413      	add	r3, r2
 80074b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	69ba      	ldr	r2, [r7, #24]
 80074b8:	0151      	lsls	r1, r2, #5
 80074ba:	69fa      	ldr	r2, [r7, #28]
 80074bc:	440a      	add	r2, r1
 80074be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074c6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	68d9      	ldr	r1, [r3, #12]
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	781a      	ldrb	r2, [r3, #0]
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	b298      	uxth	r0, r3
 80074d6:	79fb      	ldrb	r3, [r7, #7]
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	4603      	mov	r3, r0
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f000 f9b9 	bl	8007854 <USB_WritePacket>
 80074e2:	e105      	b.n	80076f0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	015a      	lsls	r2, r3, #5
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	4413      	add	r3, r2
 80074ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	0151      	lsls	r1, r2, #5
 80074f6:	69fa      	ldr	r2, [r7, #28]
 80074f8:	440a      	add	r2, r1
 80074fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074fe:	0cdb      	lsrs	r3, r3, #19
 8007500:	04db      	lsls	r3, r3, #19
 8007502:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	015a      	lsls	r2, r3, #5
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	4413      	add	r3, r2
 800750c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	69ba      	ldr	r2, [r7, #24]
 8007514:	0151      	lsls	r1, r2, #5
 8007516:	69fa      	ldr	r2, [r7, #28]
 8007518:	440a      	add	r2, r1
 800751a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800751e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007522:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007526:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d132      	bne.n	8007594 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d003      	beq.n	800753e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	689a      	ldr	r2, [r3, #8]
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	689a      	ldr	r2, [r3, #8]
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	015a      	lsls	r2, r3, #5
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	4413      	add	r3, r2
 800754e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007552:	691a      	ldr	r2, [r3, #16]
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	6a1b      	ldr	r3, [r3, #32]
 8007558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800755c:	69b9      	ldr	r1, [r7, #24]
 800755e:	0148      	lsls	r0, r1, #5
 8007560:	69f9      	ldr	r1, [r7, #28]
 8007562:	4401      	add	r1, r0
 8007564:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007568:	4313      	orrs	r3, r2
 800756a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	015a      	lsls	r2, r3, #5
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	4413      	add	r3, r2
 8007574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	69ba      	ldr	r2, [r7, #24]
 800757c:	0151      	lsls	r1, r2, #5
 800757e:	69fa      	ldr	r2, [r7, #28]
 8007580:	440a      	add	r2, r1
 8007582:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007586:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800758a:	6113      	str	r3, [r2, #16]
 800758c:	e062      	b.n	8007654 <USB_EPStartXfer+0x490>
 800758e:	bf00      	nop
 8007590:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d123      	bne.n	80075e4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	015a      	lsls	r2, r3, #5
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	4413      	add	r3, r2
 80075a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075a8:	691a      	ldr	r2, [r3, #16]
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075b2:	69b9      	ldr	r1, [r7, #24]
 80075b4:	0148      	lsls	r0, r1, #5
 80075b6:	69f9      	ldr	r1, [r7, #28]
 80075b8:	4401      	add	r1, r0
 80075ba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80075be:	4313      	orrs	r3, r2
 80075c0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	015a      	lsls	r2, r3, #5
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	4413      	add	r3, r2
 80075ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	69ba      	ldr	r2, [r7, #24]
 80075d2:	0151      	lsls	r1, r2, #5
 80075d4:	69fa      	ldr	r2, [r7, #28]
 80075d6:	440a      	add	r2, r1
 80075d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80075e0:	6113      	str	r3, [r2, #16]
 80075e2:	e037      	b.n	8007654 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	691a      	ldr	r2, [r3, #16]
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	4413      	add	r3, r2
 80075ee:	1e5a      	subs	r2, r3, #1
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80075f8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	8afa      	ldrh	r2, [r7, #22]
 8007600:	fb03 f202 	mul.w	r2, r3, r2
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	015a      	lsls	r2, r3, #5
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	4413      	add	r3, r2
 8007610:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007614:	691a      	ldr	r2, [r3, #16]
 8007616:	8afb      	ldrh	r3, [r7, #22]
 8007618:	04d9      	lsls	r1, r3, #19
 800761a:	4b38      	ldr	r3, [pc, #224]	@ (80076fc <USB_EPStartXfer+0x538>)
 800761c:	400b      	ands	r3, r1
 800761e:	69b9      	ldr	r1, [r7, #24]
 8007620:	0148      	lsls	r0, r1, #5
 8007622:	69f9      	ldr	r1, [r7, #28]
 8007624:	4401      	add	r1, r0
 8007626:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800762a:	4313      	orrs	r3, r2
 800762c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	015a      	lsls	r2, r3, #5
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	4413      	add	r3, r2
 8007636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800763a:	691a      	ldr	r2, [r3, #16]
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	6a1b      	ldr	r3, [r3, #32]
 8007640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007644:	69b9      	ldr	r1, [r7, #24]
 8007646:	0148      	lsls	r0, r1, #5
 8007648:	69f9      	ldr	r1, [r7, #28]
 800764a:	4401      	add	r1, r0
 800764c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007650:	4313      	orrs	r3, r2
 8007652:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007654:	79fb      	ldrb	r3, [r7, #7]
 8007656:	2b01      	cmp	r3, #1
 8007658:	d10d      	bne.n	8007676 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d009      	beq.n	8007676 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	68d9      	ldr	r1, [r3, #12]
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	015a      	lsls	r2, r3, #5
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	4413      	add	r3, r2
 800766e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007672:	460a      	mov	r2, r1
 8007674:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	791b      	ldrb	r3, [r3, #4]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d128      	bne.n	80076d0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800768a:	2b00      	cmp	r3, #0
 800768c:	d110      	bne.n	80076b0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	015a      	lsls	r2, r3, #5
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	4413      	add	r3, r2
 8007696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	69ba      	ldr	r2, [r7, #24]
 800769e:	0151      	lsls	r1, r2, #5
 80076a0:	69fa      	ldr	r2, [r7, #28]
 80076a2:	440a      	add	r2, r1
 80076a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80076ac:	6013      	str	r3, [r2, #0]
 80076ae:	e00f      	b.n	80076d0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	015a      	lsls	r2, r3, #5
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	4413      	add	r3, r2
 80076b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	69ba      	ldr	r2, [r7, #24]
 80076c0:	0151      	lsls	r1, r2, #5
 80076c2:	69fa      	ldr	r2, [r7, #28]
 80076c4:	440a      	add	r2, r1
 80076c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	015a      	lsls	r2, r3, #5
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	4413      	add	r3, r2
 80076d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	69ba      	ldr	r2, [r7, #24]
 80076e0:	0151      	lsls	r1, r2, #5
 80076e2:	69fa      	ldr	r2, [r7, #28]
 80076e4:	440a      	add	r2, r1
 80076e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076ea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80076ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3720      	adds	r7, #32
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	1ff80000 	.word	0x1ff80000

08007700 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800770a:	2300      	movs	r3, #0
 800770c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800770e:	2300      	movs	r3, #0
 8007710:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	785b      	ldrb	r3, [r3, #1]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d14a      	bne.n	80077b4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	015a      	lsls	r2, r3, #5
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	4413      	add	r3, r2
 8007728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007732:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007736:	f040 8086 	bne.w	8007846 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	015a      	lsls	r2, r3, #5
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	4413      	add	r3, r2
 8007744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	7812      	ldrb	r2, [r2, #0]
 800774e:	0151      	lsls	r1, r2, #5
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	440a      	add	r2, r1
 8007754:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007758:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800775c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	4413      	add	r3, r2
 8007768:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	683a      	ldr	r2, [r7, #0]
 8007770:	7812      	ldrb	r2, [r2, #0]
 8007772:	0151      	lsls	r1, r2, #5
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	440a      	add	r2, r1
 8007778:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800777c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007780:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	3301      	adds	r3, #1
 8007786:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800778e:	4293      	cmp	r3, r2
 8007790:	d902      	bls.n	8007798 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	75fb      	strb	r3, [r7, #23]
          break;
 8007796:	e056      	b.n	8007846 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	015a      	lsls	r2, r3, #5
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	4413      	add	r3, r2
 80077a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077b0:	d0e7      	beq.n	8007782 <USB_EPStopXfer+0x82>
 80077b2:	e048      	b.n	8007846 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	015a      	lsls	r2, r3, #5
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	4413      	add	r3, r2
 80077be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077cc:	d13b      	bne.n	8007846 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	015a      	lsls	r2, r3, #5
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	4413      	add	r3, r2
 80077d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	683a      	ldr	r2, [r7, #0]
 80077e0:	7812      	ldrb	r2, [r2, #0]
 80077e2:	0151      	lsls	r1, r2, #5
 80077e4:	693a      	ldr	r2, [r7, #16]
 80077e6:	440a      	add	r2, r1
 80077e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80077f0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	015a      	lsls	r2, r3, #5
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	4413      	add	r3, r2
 80077fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	7812      	ldrb	r2, [r2, #0]
 8007806:	0151      	lsls	r1, r2, #5
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	440a      	add	r2, r1
 800780c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007810:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007814:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	3301      	adds	r3, #1
 800781a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007822:	4293      	cmp	r3, r2
 8007824:	d902      	bls.n	800782c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	75fb      	strb	r3, [r7, #23]
          break;
 800782a:	e00c      	b.n	8007846 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	015a      	lsls	r2, r3, #5
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	4413      	add	r3, r2
 8007836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007840:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007844:	d0e7      	beq.n	8007816 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007846:	7dfb      	ldrb	r3, [r7, #23]
}
 8007848:	4618      	mov	r0, r3
 800784a:	371c      	adds	r7, #28
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007854:	b480      	push	{r7}
 8007856:	b089      	sub	sp, #36	@ 0x24
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	4611      	mov	r1, r2
 8007860:	461a      	mov	r2, r3
 8007862:	460b      	mov	r3, r1
 8007864:	71fb      	strb	r3, [r7, #7]
 8007866:	4613      	mov	r3, r2
 8007868:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007872:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007876:	2b00      	cmp	r3, #0
 8007878:	d123      	bne.n	80078c2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800787a:	88bb      	ldrh	r3, [r7, #4]
 800787c:	3303      	adds	r3, #3
 800787e:	089b      	lsrs	r3, r3, #2
 8007880:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007882:	2300      	movs	r3, #0
 8007884:	61bb      	str	r3, [r7, #24]
 8007886:	e018      	b.n	80078ba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007888:	79fb      	ldrb	r3, [r7, #7]
 800788a:	031a      	lsls	r2, r3, #12
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	4413      	add	r3, r2
 8007890:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007894:	461a      	mov	r2, r3
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	3301      	adds	r3, #1
 80078a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	3301      	adds	r3, #1
 80078a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	3301      	adds	r3, #1
 80078ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	3301      	adds	r3, #1
 80078b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	3301      	adds	r3, #1
 80078b8:	61bb      	str	r3, [r7, #24]
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d3e2      	bcc.n	8007888 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3724      	adds	r7, #36	@ 0x24
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b08b      	sub	sp, #44	@ 0x2c
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	4613      	mov	r3, r2
 80078dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80078e6:	88fb      	ldrh	r3, [r7, #6]
 80078e8:	089b      	lsrs	r3, r3, #2
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80078ee:	88fb      	ldrh	r3, [r7, #6]
 80078f0:	f003 0303 	and.w	r3, r3, #3
 80078f4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80078f6:	2300      	movs	r3, #0
 80078f8:	623b      	str	r3, [r7, #32]
 80078fa:	e014      	b.n	8007926 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007906:	601a      	str	r2, [r3, #0]
    pDest++;
 8007908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800790a:	3301      	adds	r3, #1
 800790c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800790e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007910:	3301      	adds	r3, #1
 8007912:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007916:	3301      	adds	r3, #1
 8007918:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800791a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791c:	3301      	adds	r3, #1
 800791e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	3301      	adds	r3, #1
 8007924:	623b      	str	r3, [r7, #32]
 8007926:	6a3a      	ldr	r2, [r7, #32]
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	429a      	cmp	r2, r3
 800792c:	d3e6      	bcc.n	80078fc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800792e:	8bfb      	ldrh	r3, [r7, #30]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d01e      	beq.n	8007972 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007934:	2300      	movs	r3, #0
 8007936:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800793e:	461a      	mov	r2, r3
 8007940:	f107 0310 	add.w	r3, r7, #16
 8007944:	6812      	ldr	r2, [r2, #0]
 8007946:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	6a3b      	ldr	r3, [r7, #32]
 800794c:	b2db      	uxtb	r3, r3
 800794e:	00db      	lsls	r3, r3, #3
 8007950:	fa22 f303 	lsr.w	r3, r2, r3
 8007954:	b2da      	uxtb	r2, r3
 8007956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007958:	701a      	strb	r2, [r3, #0]
      i++;
 800795a:	6a3b      	ldr	r3, [r7, #32]
 800795c:	3301      	adds	r3, #1
 800795e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007962:	3301      	adds	r3, #1
 8007964:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007966:	8bfb      	ldrh	r3, [r7, #30]
 8007968:	3b01      	subs	r3, #1
 800796a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800796c:	8bfb      	ldrh	r3, [r7, #30]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1ea      	bne.n	8007948 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007974:	4618      	mov	r0, r3
 8007976:	372c      	adds	r7, #44	@ 0x2c
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	785b      	ldrb	r3, [r3, #1]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d12c      	bne.n	80079f6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	015a      	lsls	r2, r3, #5
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	4413      	add	r3, r2
 80079a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	db12      	blt.n	80079d4 <USB_EPSetStall+0x54>
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00f      	beq.n	80079d4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	0151      	lsls	r1, r2, #5
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	440a      	add	r2, r1
 80079ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80079d2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	015a      	lsls	r2, r3, #5
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	4413      	add	r3, r2
 80079dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	0151      	lsls	r1, r2, #5
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	440a      	add	r2, r1
 80079ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80079f2:	6013      	str	r3, [r2, #0]
 80079f4:	e02b      	b.n	8007a4e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	015a      	lsls	r2, r3, #5
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	4413      	add	r3, r2
 80079fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	db12      	blt.n	8007a2e <USB_EPSetStall+0xae>
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00f      	beq.n	8007a2e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	015a      	lsls	r2, r3, #5
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	4413      	add	r3, r2
 8007a16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	0151      	lsls	r1, r2, #5
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	440a      	add	r2, r1
 8007a24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a28:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007a2c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	015a      	lsls	r2, r3, #5
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	4413      	add	r3, r2
 8007a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	0151      	lsls	r1, r2, #5
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	440a      	add	r2, r1
 8007a44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007a4c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3714      	adds	r7, #20
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	785b      	ldrb	r3, [r3, #1]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d128      	bne.n	8007aca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	015a      	lsls	r2, r3, #5
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68ba      	ldr	r2, [r7, #8]
 8007a88:	0151      	lsls	r1, r2, #5
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	440a      	add	r2, r1
 8007a8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a92:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007a96:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	791b      	ldrb	r3, [r3, #4]
 8007a9c:	2b03      	cmp	r3, #3
 8007a9e:	d003      	beq.n	8007aa8 <USB_EPClearStall+0x4c>
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	791b      	ldrb	r3, [r3, #4]
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d138      	bne.n	8007b1a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	015a      	lsls	r2, r3, #5
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68ba      	ldr	r2, [r7, #8]
 8007ab8:	0151      	lsls	r1, r2, #5
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	440a      	add	r2, r1
 8007abe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ac2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ac6:	6013      	str	r3, [r2, #0]
 8007ac8:	e027      	b.n	8007b1a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	015a      	lsls	r2, r3, #5
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	0151      	lsls	r1, r2, #5
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	440a      	add	r2, r1
 8007ae0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ae4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007ae8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	791b      	ldrb	r3, [r3, #4]
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	d003      	beq.n	8007afa <USB_EPClearStall+0x9e>
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	791b      	ldrb	r3, [r3, #4]
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	d10f      	bne.n	8007b1a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	015a      	lsls	r2, r3, #5
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	4413      	add	r3, r2
 8007b02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	0151      	lsls	r1, r2, #5
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	440a      	add	r2, r1
 8007b10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b18:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3714      	adds	r7, #20
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	460b      	mov	r3, r1
 8007b32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b46:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007b4a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	78fb      	ldrb	r3, [r7, #3]
 8007b56:	011b      	lsls	r3, r3, #4
 8007b58:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007b5c:	68f9      	ldr	r1, [r7, #12]
 8007b5e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b62:	4313      	orrs	r3, r2
 8007b64:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007b8e:	f023 0303 	bic.w	r3, r3, #3
 8007b92:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ba2:	f023 0302 	bic.w	r3, r3, #2
 8007ba6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b085      	sub	sp, #20
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007bd0:	f023 0303 	bic.w	r3, r3, #3
 8007bd4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007be4:	f043 0302 	orr.w	r3, r3, #2
 8007be8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3714      	adds	r7, #20
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	695b      	ldr	r3, [r3, #20]
 8007c04:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	699b      	ldr	r3, [r3, #24]
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007c10:	68fb      	ldr	r3, [r7, #12]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3714      	adds	r7, #20
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr

08007c1e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b085      	sub	sp, #20
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c30:	699b      	ldr	r3, [r3, #24]
 8007c32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c3a:	69db      	ldr	r3, [r3, #28]
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	4013      	ands	r3, r2
 8007c40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	0c1b      	lsrs	r3, r3, #16
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3714      	adds	r7, #20
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr

08007c52 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c52:	b480      	push	{r7}
 8007c54:	b085      	sub	sp, #20
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c6e:	69db      	ldr	r3, [r3, #28]
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	4013      	ands	r3, r2
 8007c74:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	b29b      	uxth	r3, r3
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b085      	sub	sp, #20
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	460b      	mov	r3, r1
 8007c90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007c96:	78fb      	ldrb	r3, [r7, #3]
 8007c98:	015a      	lsls	r2, r3, #5
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	68ba      	ldr	r2, [r7, #8]
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007cb4:	68bb      	ldr	r3, [r7, #8]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3714      	adds	r7, #20
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr

08007cc2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b087      	sub	sp, #28
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	460b      	mov	r3, r1
 8007ccc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ce4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007ce6:	78fb      	ldrb	r3, [r7, #3]
 8007ce8:	f003 030f 	and.w	r3, r3, #15
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	fa22 f303 	lsr.w	r3, r2, r3
 8007cf2:	01db      	lsls	r3, r3, #7
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007cfc:	78fb      	ldrb	r3, [r7, #3]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d10:	68bb      	ldr	r3, [r7, #8]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	371c      	adds	r7, #28
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b083      	sub	sp, #12
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	695b      	ldr	r3, [r3, #20]
 8007d2a:	f003 0301 	and.w	r3, r3, #1
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	370c      	adds	r7, #12
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b085      	sub	sp, #20
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d54:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007d58:	f023 0307 	bic.w	r3, r3, #7
 8007d5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3714      	adds	r7, #20
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b087      	sub	sp, #28
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	607a      	str	r2, [r7, #4]
 8007d8c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	333c      	adds	r3, #60	@ 0x3c
 8007d96:	3304      	adds	r3, #4
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	4a26      	ldr	r2, [pc, #152]	@ (8007e38 <USB_EP0_OutStart+0xb8>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d90a      	bls.n	8007dba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007db0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007db4:	d101      	bne.n	8007dba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007db6:	2300      	movs	r3, #0
 8007db8:	e037      	b.n	8007e2a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dd4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007dd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	697a      	ldr	r2, [r7, #20]
 8007de4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007de8:	f043 0318 	orr.w	r3, r3, #24
 8007dec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	697a      	ldr	r2, [r7, #20]
 8007df8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dfc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007e00:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007e02:	7afb      	ldrb	r3, [r7, #11]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d10f      	bne.n	8007e28 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e0e:	461a      	mov	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	697a      	ldr	r2, [r7, #20]
 8007e1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e22:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007e26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	371c      	adds	r7, #28
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	4f54300a 	.word	0x4f54300a

08007e3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e44:	2300      	movs	r3, #0
 8007e46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e54:	d901      	bls.n	8007e5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007e56:	2303      	movs	r3, #3
 8007e58:	e01b      	b.n	8007e92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	daf2      	bge.n	8007e48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007e62:	2300      	movs	r3, #0
 8007e64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	f043 0201 	orr.w	r2, r3, #1
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	3301      	adds	r3, #1
 8007e76:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e7e:	d901      	bls.n	8007e84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007e80:	2303      	movs	r3, #3
 8007e82:	e006      	b.n	8007e92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	f003 0301 	and.w	r3, r3, #1
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d0f0      	beq.n	8007e72 <USB_CoreReset+0x36>

  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
	...

08007ea0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007eac:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007eb0:	f002 fc9e 	bl	800a7f0 <USBD_static_malloc>
 8007eb4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d109      	bne.n	8007ed0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	32b0      	adds	r2, #176	@ 0xb0
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007ecc:	2302      	movs	r3, #2
 8007ece:	e0d4      	b.n	800807a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007ed0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f002 fd4a 	bl	800a970 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	32b0      	adds	r2, #176	@ 0xb0
 8007ee6:	68f9      	ldr	r1, [r7, #12]
 8007ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	32b0      	adds	r2, #176	@ 0xb0
 8007ef6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	7c1b      	ldrb	r3, [r3, #16]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d138      	bne.n	8007f7a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007f08:	4b5e      	ldr	r3, [pc, #376]	@ (8008084 <USBD_CDC_Init+0x1e4>)
 8007f0a:	7819      	ldrb	r1, [r3, #0]
 8007f0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f10:	2202      	movs	r2, #2
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f002 fb49 	bl	800a5aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007f18:	4b5a      	ldr	r3, [pc, #360]	@ (8008084 <USBD_CDC_Init+0x1e4>)
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	f003 020f 	and.w	r2, r3, #15
 8007f20:	6879      	ldr	r1, [r7, #4]
 8007f22:	4613      	mov	r3, r2
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4413      	add	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	440b      	add	r3, r1
 8007f2c:	3324      	adds	r3, #36	@ 0x24
 8007f2e:	2201      	movs	r2, #1
 8007f30:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007f32:	4b55      	ldr	r3, [pc, #340]	@ (8008088 <USBD_CDC_Init+0x1e8>)
 8007f34:	7819      	ldrb	r1, [r3, #0]
 8007f36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f3a:	2202      	movs	r2, #2
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f002 fb34 	bl	800a5aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007f42:	4b51      	ldr	r3, [pc, #324]	@ (8008088 <USBD_CDC_Init+0x1e8>)
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	f003 020f 	and.w	r2, r3, #15
 8007f4a:	6879      	ldr	r1, [r7, #4]
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4413      	add	r3, r2
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	440b      	add	r3, r1
 8007f56:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007f5e:	4b4b      	ldr	r3, [pc, #300]	@ (800808c <USBD_CDC_Init+0x1ec>)
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	f003 020f 	and.w	r2, r3, #15
 8007f66:	6879      	ldr	r1, [r7, #4]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4413      	add	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	440b      	add	r3, r1
 8007f72:	3326      	adds	r3, #38	@ 0x26
 8007f74:	2210      	movs	r2, #16
 8007f76:	801a      	strh	r2, [r3, #0]
 8007f78:	e035      	b.n	8007fe6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007f7a:	4b42      	ldr	r3, [pc, #264]	@ (8008084 <USBD_CDC_Init+0x1e4>)
 8007f7c:	7819      	ldrb	r1, [r3, #0]
 8007f7e:	2340      	movs	r3, #64	@ 0x40
 8007f80:	2202      	movs	r2, #2
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f002 fb11 	bl	800a5aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007f88:	4b3e      	ldr	r3, [pc, #248]	@ (8008084 <USBD_CDC_Init+0x1e4>)
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	f003 020f 	and.w	r2, r3, #15
 8007f90:	6879      	ldr	r1, [r7, #4]
 8007f92:	4613      	mov	r3, r2
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	4413      	add	r3, r2
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	440b      	add	r3, r1
 8007f9c:	3324      	adds	r3, #36	@ 0x24
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007fa2:	4b39      	ldr	r3, [pc, #228]	@ (8008088 <USBD_CDC_Init+0x1e8>)
 8007fa4:	7819      	ldrb	r1, [r3, #0]
 8007fa6:	2340      	movs	r3, #64	@ 0x40
 8007fa8:	2202      	movs	r2, #2
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f002 fafd 	bl	800a5aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007fb0:	4b35      	ldr	r3, [pc, #212]	@ (8008088 <USBD_CDC_Init+0x1e8>)
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	f003 020f 	and.w	r2, r3, #15
 8007fb8:	6879      	ldr	r1, [r7, #4]
 8007fba:	4613      	mov	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4413      	add	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	440b      	add	r3, r1
 8007fc4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007fc8:	2201      	movs	r2, #1
 8007fca:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007fcc:	4b2f      	ldr	r3, [pc, #188]	@ (800808c <USBD_CDC_Init+0x1ec>)
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	f003 020f 	and.w	r2, r3, #15
 8007fd4:	6879      	ldr	r1, [r7, #4]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4413      	add	r3, r2
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	440b      	add	r3, r1
 8007fe0:	3326      	adds	r3, #38	@ 0x26
 8007fe2:	2210      	movs	r2, #16
 8007fe4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007fe6:	4b29      	ldr	r3, [pc, #164]	@ (800808c <USBD_CDC_Init+0x1ec>)
 8007fe8:	7819      	ldrb	r1, [r3, #0]
 8007fea:	2308      	movs	r3, #8
 8007fec:	2203      	movs	r2, #3
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f002 fadb 	bl	800a5aa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007ff4:	4b25      	ldr	r3, [pc, #148]	@ (800808c <USBD_CDC_Init+0x1ec>)
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	f003 020f 	and.w	r2, r3, #15
 8007ffc:	6879      	ldr	r1, [r7, #4]
 8007ffe:	4613      	mov	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	440b      	add	r3, r1
 8008008:	3324      	adds	r3, #36	@ 0x24
 800800a:	2201      	movs	r2, #1
 800800c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2200      	movs	r2, #0
 8008012:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	33b0      	adds	r3, #176	@ 0xb0
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	4413      	add	r3, r2
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008040:	2b00      	cmp	r3, #0
 8008042:	d101      	bne.n	8008048 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008044:	2302      	movs	r3, #2
 8008046:	e018      	b.n	800807a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	7c1b      	ldrb	r3, [r3, #16]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10a      	bne.n	8008066 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008050:	4b0d      	ldr	r3, [pc, #52]	@ (8008088 <USBD_CDC_Init+0x1e8>)
 8008052:	7819      	ldrb	r1, [r3, #0]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800805a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f002 fb92 	bl	800a788 <USBD_LL_PrepareReceive>
 8008064:	e008      	b.n	8008078 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008066:	4b08      	ldr	r3, [pc, #32]	@ (8008088 <USBD_CDC_Init+0x1e8>)
 8008068:	7819      	ldrb	r1, [r3, #0]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008070:	2340      	movs	r3, #64	@ 0x40
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f002 fb88 	bl	800a788 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	20000093 	.word	0x20000093
 8008088:	20000094 	.word	0x20000094
 800808c:	20000095 	.word	0x20000095

08008090 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	460b      	mov	r3, r1
 800809a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800809c:	4b3a      	ldr	r3, [pc, #232]	@ (8008188 <USBD_CDC_DeInit+0xf8>)
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	4619      	mov	r1, r3
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f002 faa7 	bl	800a5f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80080a8:	4b37      	ldr	r3, [pc, #220]	@ (8008188 <USBD_CDC_DeInit+0xf8>)
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	f003 020f 	and.w	r2, r3, #15
 80080b0:	6879      	ldr	r1, [r7, #4]
 80080b2:	4613      	mov	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4413      	add	r3, r2
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	440b      	add	r3, r1
 80080bc:	3324      	adds	r3, #36	@ 0x24
 80080be:	2200      	movs	r2, #0
 80080c0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80080c2:	4b32      	ldr	r3, [pc, #200]	@ (800818c <USBD_CDC_DeInit+0xfc>)
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	4619      	mov	r1, r3
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f002 fa94 	bl	800a5f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80080ce:	4b2f      	ldr	r3, [pc, #188]	@ (800818c <USBD_CDC_DeInit+0xfc>)
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	f003 020f 	and.w	r2, r3, #15
 80080d6:	6879      	ldr	r1, [r7, #4]
 80080d8:	4613      	mov	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	440b      	add	r3, r1
 80080e2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80080e6:	2200      	movs	r2, #0
 80080e8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80080ea:	4b29      	ldr	r3, [pc, #164]	@ (8008190 <USBD_CDC_DeInit+0x100>)
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	4619      	mov	r1, r3
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f002 fa80 	bl	800a5f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80080f6:	4b26      	ldr	r3, [pc, #152]	@ (8008190 <USBD_CDC_DeInit+0x100>)
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	f003 020f 	and.w	r2, r3, #15
 80080fe:	6879      	ldr	r1, [r7, #4]
 8008100:	4613      	mov	r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	4413      	add	r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	440b      	add	r3, r1
 800810a:	3324      	adds	r3, #36	@ 0x24
 800810c:	2200      	movs	r2, #0
 800810e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008110:	4b1f      	ldr	r3, [pc, #124]	@ (8008190 <USBD_CDC_DeInit+0x100>)
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	f003 020f 	and.w	r2, r3, #15
 8008118:	6879      	ldr	r1, [r7, #4]
 800811a:	4613      	mov	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	4413      	add	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	440b      	add	r3, r1
 8008124:	3326      	adds	r3, #38	@ 0x26
 8008126:	2200      	movs	r2, #0
 8008128:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	32b0      	adds	r2, #176	@ 0xb0
 8008134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d01f      	beq.n	800817c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	33b0      	adds	r3, #176	@ 0xb0
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	4413      	add	r3, r2
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	32b0      	adds	r2, #176	@ 0xb0
 800815a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800815e:	4618      	mov	r0, r3
 8008160:	f002 fb54 	bl	800a80c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	32b0      	adds	r2, #176	@ 0xb0
 800816e:	2100      	movs	r1, #0
 8008170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	20000093 	.word	0x20000093
 800818c:	20000094 	.word	0x20000094
 8008190:	20000095 	.word	0x20000095

08008194 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	32b0      	adds	r2, #176	@ 0xb0
 80081a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80081ae:	2300      	movs	r3, #0
 80081b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80081b2:	2300      	movs	r3, #0
 80081b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d101      	bne.n	80081c4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80081c0:	2303      	movs	r3, #3
 80081c2:	e0bf      	b.n	8008344 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d050      	beq.n	8008272 <USBD_CDC_Setup+0xde>
 80081d0:	2b20      	cmp	r3, #32
 80081d2:	f040 80af 	bne.w	8008334 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	88db      	ldrh	r3, [r3, #6]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d03a      	beq.n	8008254 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	b25b      	sxtb	r3, r3
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	da1b      	bge.n	8008220 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	33b0      	adds	r3, #176	@ 0xb0
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	4413      	add	r3, r2
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	683a      	ldr	r2, [r7, #0]
 80081fc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80081fe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	88d2      	ldrh	r2, [r2, #6]
 8008204:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	88db      	ldrh	r3, [r3, #6]
 800820a:	2b07      	cmp	r3, #7
 800820c:	bf28      	it	cs
 800820e:	2307      	movcs	r3, #7
 8008210:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	89fa      	ldrh	r2, [r7, #14]
 8008216:	4619      	mov	r1, r3
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f001 fd93 	bl	8009d44 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800821e:	e090      	b.n	8008342 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	785a      	ldrb	r2, [r3, #1]
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	88db      	ldrh	r3, [r3, #6]
 800822e:	2b3f      	cmp	r3, #63	@ 0x3f
 8008230:	d803      	bhi.n	800823a <USBD_CDC_Setup+0xa6>
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	88db      	ldrh	r3, [r3, #6]
 8008236:	b2da      	uxtb	r2, r3
 8008238:	e000      	b.n	800823c <USBD_CDC_Setup+0xa8>
 800823a:	2240      	movs	r2, #64	@ 0x40
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008242:	6939      	ldr	r1, [r7, #16]
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800824a:	461a      	mov	r2, r3
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f001 fda5 	bl	8009d9c <USBD_CtlPrepareRx>
      break;
 8008252:	e076      	b.n	8008342 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	33b0      	adds	r3, #176	@ 0xb0
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	4413      	add	r3, r2
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	683a      	ldr	r2, [r7, #0]
 8008268:	7850      	ldrb	r0, [r2, #1]
 800826a:	2200      	movs	r2, #0
 800826c:	6839      	ldr	r1, [r7, #0]
 800826e:	4798      	blx	r3
      break;
 8008270:	e067      	b.n	8008342 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	785b      	ldrb	r3, [r3, #1]
 8008276:	2b0b      	cmp	r3, #11
 8008278:	d851      	bhi.n	800831e <USBD_CDC_Setup+0x18a>
 800827a:	a201      	add	r2, pc, #4	@ (adr r2, 8008280 <USBD_CDC_Setup+0xec>)
 800827c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008280:	080082b1 	.word	0x080082b1
 8008284:	0800832d 	.word	0x0800832d
 8008288:	0800831f 	.word	0x0800831f
 800828c:	0800831f 	.word	0x0800831f
 8008290:	0800831f 	.word	0x0800831f
 8008294:	0800831f 	.word	0x0800831f
 8008298:	0800831f 	.word	0x0800831f
 800829c:	0800831f 	.word	0x0800831f
 80082a0:	0800831f 	.word	0x0800831f
 80082a4:	0800831f 	.word	0x0800831f
 80082a8:	080082db 	.word	0x080082db
 80082ac:	08008305 	.word	0x08008305
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	2b03      	cmp	r3, #3
 80082ba:	d107      	bne.n	80082cc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80082bc:	f107 030a 	add.w	r3, r7, #10
 80082c0:	2202      	movs	r2, #2
 80082c2:	4619      	mov	r1, r3
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f001 fd3d 	bl	8009d44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80082ca:	e032      	b.n	8008332 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80082cc:	6839      	ldr	r1, [r7, #0]
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f001 fcbb 	bl	8009c4a <USBD_CtlError>
            ret = USBD_FAIL;
 80082d4:	2303      	movs	r3, #3
 80082d6:	75fb      	strb	r3, [r7, #23]
          break;
 80082d8:	e02b      	b.n	8008332 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b03      	cmp	r3, #3
 80082e4:	d107      	bne.n	80082f6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80082e6:	f107 030d 	add.w	r3, r7, #13
 80082ea:	2201      	movs	r2, #1
 80082ec:	4619      	mov	r1, r3
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f001 fd28 	bl	8009d44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80082f4:	e01d      	b.n	8008332 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80082f6:	6839      	ldr	r1, [r7, #0]
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f001 fca6 	bl	8009c4a <USBD_CtlError>
            ret = USBD_FAIL;
 80082fe:	2303      	movs	r3, #3
 8008300:	75fb      	strb	r3, [r7, #23]
          break;
 8008302:	e016      	b.n	8008332 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800830a:	b2db      	uxtb	r3, r3
 800830c:	2b03      	cmp	r3, #3
 800830e:	d00f      	beq.n	8008330 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008310:	6839      	ldr	r1, [r7, #0]
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f001 fc99 	bl	8009c4a <USBD_CtlError>
            ret = USBD_FAIL;
 8008318:	2303      	movs	r3, #3
 800831a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800831c:	e008      	b.n	8008330 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800831e:	6839      	ldr	r1, [r7, #0]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f001 fc92 	bl	8009c4a <USBD_CtlError>
          ret = USBD_FAIL;
 8008326:	2303      	movs	r3, #3
 8008328:	75fb      	strb	r3, [r7, #23]
          break;
 800832a:	e002      	b.n	8008332 <USBD_CDC_Setup+0x19e>
          break;
 800832c:	bf00      	nop
 800832e:	e008      	b.n	8008342 <USBD_CDC_Setup+0x1ae>
          break;
 8008330:	bf00      	nop
      }
      break;
 8008332:	e006      	b.n	8008342 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008334:	6839      	ldr	r1, [r7, #0]
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f001 fc87 	bl	8009c4a <USBD_CtlError>
      ret = USBD_FAIL;
 800833c:	2303      	movs	r3, #3
 800833e:	75fb      	strb	r3, [r7, #23]
      break;
 8008340:	bf00      	nop
  }

  return (uint8_t)ret;
 8008342:	7dfb      	ldrb	r3, [r7, #23]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3718      	adds	r7, #24
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	460b      	mov	r3, r1
 8008356:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800835e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	32b0      	adds	r2, #176	@ 0xb0
 800836a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d101      	bne.n	8008376 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008372:	2303      	movs	r3, #3
 8008374:	e065      	b.n	8008442 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	32b0      	adds	r2, #176	@ 0xb0
 8008380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008384:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008386:	78fb      	ldrb	r3, [r7, #3]
 8008388:	f003 020f 	and.w	r2, r3, #15
 800838c:	6879      	ldr	r1, [r7, #4]
 800838e:	4613      	mov	r3, r2
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	4413      	add	r3, r2
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	440b      	add	r3, r1
 8008398:	3318      	adds	r3, #24
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d02f      	beq.n	8008400 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80083a0:	78fb      	ldrb	r3, [r7, #3]
 80083a2:	f003 020f 	and.w	r2, r3, #15
 80083a6:	6879      	ldr	r1, [r7, #4]
 80083a8:	4613      	mov	r3, r2
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	4413      	add	r3, r2
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	440b      	add	r3, r1
 80083b2:	3318      	adds	r3, #24
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	78fb      	ldrb	r3, [r7, #3]
 80083b8:	f003 010f 	and.w	r1, r3, #15
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	460b      	mov	r3, r1
 80083c0:	00db      	lsls	r3, r3, #3
 80083c2:	440b      	add	r3, r1
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	4403      	add	r3, r0
 80083c8:	331c      	adds	r3, #28
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	fbb2 f1f3 	udiv	r1, r2, r3
 80083d0:	fb01 f303 	mul.w	r3, r1, r3
 80083d4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d112      	bne.n	8008400 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80083da:	78fb      	ldrb	r3, [r7, #3]
 80083dc:	f003 020f 	and.w	r2, r3, #15
 80083e0:	6879      	ldr	r1, [r7, #4]
 80083e2:	4613      	mov	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	4413      	add	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	440b      	add	r3, r1
 80083ec:	3318      	adds	r3, #24
 80083ee:	2200      	movs	r2, #0
 80083f0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80083f2:	78f9      	ldrb	r1, [r7, #3]
 80083f4:	2300      	movs	r3, #0
 80083f6:	2200      	movs	r2, #0
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f002 f9a4 	bl	800a746 <USBD_LL_Transmit>
 80083fe:	e01f      	b.n	8008440 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	2200      	movs	r2, #0
 8008404:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	33b0      	adds	r3, #176	@ 0xb0
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4413      	add	r3, r2
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d010      	beq.n	8008440 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	33b0      	adds	r3, #176	@ 0xb0
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	4413      	add	r3, r2
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	691b      	ldr	r3, [r3, #16]
 8008430:	68ba      	ldr	r2, [r7, #8]
 8008432:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008436:	68ba      	ldr	r2, [r7, #8]
 8008438:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800843c:	78fa      	ldrb	r2, [r7, #3]
 800843e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b084      	sub	sp, #16
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	460b      	mov	r3, r1
 8008454:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	32b0      	adds	r2, #176	@ 0xb0
 8008460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008464:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	32b0      	adds	r2, #176	@ 0xb0
 8008470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d101      	bne.n	800847c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008478:	2303      	movs	r3, #3
 800847a:	e01a      	b.n	80084b2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800847c:	78fb      	ldrb	r3, [r7, #3]
 800847e:	4619      	mov	r1, r3
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f002 f9a2 	bl	800a7ca <USBD_LL_GetRxDataSize>
 8008486:	4602      	mov	r2, r0
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	33b0      	adds	r3, #176	@ 0xb0
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4413      	add	r3, r2
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80084ac:	4611      	mov	r1, r2
 80084ae:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b084      	sub	sp, #16
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	32b0      	adds	r2, #176	@ 0xb0
 80084cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d101      	bne.n	80084dc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80084d8:	2303      	movs	r3, #3
 80084da:	e024      	b.n	8008526 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	33b0      	adds	r3, #176	@ 0xb0
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	4413      	add	r3, r2
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d019      	beq.n	8008524 <USBD_CDC_EP0_RxReady+0x6a>
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80084f6:	2bff      	cmp	r3, #255	@ 0xff
 80084f8:	d014      	beq.n	8008524 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	33b0      	adds	r3, #176	@ 0xb0
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	4413      	add	r3, r2
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008512:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800851a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	22ff      	movs	r2, #255	@ 0xff
 8008520:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
	...

08008530 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008538:	2182      	movs	r1, #130	@ 0x82
 800853a:	4818      	ldr	r0, [pc, #96]	@ (800859c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800853c:	f000 fd4f 	bl	8008fde <USBD_GetEpDesc>
 8008540:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008542:	2101      	movs	r1, #1
 8008544:	4815      	ldr	r0, [pc, #84]	@ (800859c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008546:	f000 fd4a 	bl	8008fde <USBD_GetEpDesc>
 800854a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800854c:	2181      	movs	r1, #129	@ 0x81
 800854e:	4813      	ldr	r0, [pc, #76]	@ (800859c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008550:	f000 fd45 	bl	8008fde <USBD_GetEpDesc>
 8008554:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d002      	beq.n	8008562 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	2210      	movs	r2, #16
 8008560:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d006      	beq.n	8008576 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	2200      	movs	r2, #0
 800856c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008570:	711a      	strb	r2, [r3, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d006      	beq.n	800858a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008584:	711a      	strb	r2, [r3, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2243      	movs	r2, #67	@ 0x43
 800858e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008590:	4b02      	ldr	r3, [pc, #8]	@ (800859c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008592:	4618      	mov	r0, r3
 8008594:	3718      	adds	r7, #24
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	20000050 	.word	0x20000050

080085a0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80085a8:	2182      	movs	r1, #130	@ 0x82
 80085aa:	4818      	ldr	r0, [pc, #96]	@ (800860c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80085ac:	f000 fd17 	bl	8008fde <USBD_GetEpDesc>
 80085b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80085b2:	2101      	movs	r1, #1
 80085b4:	4815      	ldr	r0, [pc, #84]	@ (800860c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80085b6:	f000 fd12 	bl	8008fde <USBD_GetEpDesc>
 80085ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80085bc:	2181      	movs	r1, #129	@ 0x81
 80085be:	4813      	ldr	r0, [pc, #76]	@ (800860c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80085c0:	f000 fd0d 	bl	8008fde <USBD_GetEpDesc>
 80085c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d002      	beq.n	80085d2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	2210      	movs	r2, #16
 80085d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d006      	beq.n	80085e6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	2200      	movs	r2, #0
 80085dc:	711a      	strb	r2, [r3, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	f042 0202 	orr.w	r2, r2, #2
 80085e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d006      	beq.n	80085fa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2200      	movs	r2, #0
 80085f0:	711a      	strb	r2, [r3, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f042 0202 	orr.w	r2, r2, #2
 80085f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2243      	movs	r2, #67	@ 0x43
 80085fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008600:	4b02      	ldr	r3, [pc, #8]	@ (800860c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008602:	4618      	mov	r0, r3
 8008604:	3718      	adds	r7, #24
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	20000050 	.word	0x20000050

08008610 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b086      	sub	sp, #24
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008618:	2182      	movs	r1, #130	@ 0x82
 800861a:	4818      	ldr	r0, [pc, #96]	@ (800867c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800861c:	f000 fcdf 	bl	8008fde <USBD_GetEpDesc>
 8008620:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008622:	2101      	movs	r1, #1
 8008624:	4815      	ldr	r0, [pc, #84]	@ (800867c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008626:	f000 fcda 	bl	8008fde <USBD_GetEpDesc>
 800862a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800862c:	2181      	movs	r1, #129	@ 0x81
 800862e:	4813      	ldr	r0, [pc, #76]	@ (800867c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008630:	f000 fcd5 	bl	8008fde <USBD_GetEpDesc>
 8008634:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d002      	beq.n	8008642 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	2210      	movs	r2, #16
 8008640:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d006      	beq.n	8008656 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	2200      	movs	r2, #0
 800864c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008650:	711a      	strb	r2, [r3, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d006      	beq.n	800866a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2200      	movs	r2, #0
 8008660:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008664:	711a      	strb	r2, [r3, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2243      	movs	r2, #67	@ 0x43
 800866e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008670:	4b02      	ldr	r3, [pc, #8]	@ (800867c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008672:	4618      	mov	r0, r3
 8008674:	3718      	adds	r7, #24
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	20000050 	.word	0x20000050

08008680 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	220a      	movs	r2, #10
 800868c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800868e:	4b03      	ldr	r3, [pc, #12]	@ (800869c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008690:	4618      	mov	r0, r3
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr
 800869c:	2000000c 	.word	0x2000000c

080086a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d101      	bne.n	80086b4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80086b0:	2303      	movs	r3, #3
 80086b2:	e009      	b.n	80086c8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	33b0      	adds	r3, #176	@ 0xb0
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	4413      	add	r3, r2
 80086c2:	683a      	ldr	r2, [r7, #0]
 80086c4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	370c      	adds	r7, #12
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b087      	sub	sp, #28
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	32b0      	adds	r2, #176	@ 0xb0
 80086ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ee:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d101      	bne.n	80086fa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80086f6:	2303      	movs	r3, #3
 80086f8:	e008      	b.n	800870c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	68ba      	ldr	r2, [r7, #8]
 80086fe:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	371c      	adds	r7, #28
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	32b0      	adds	r2, #176	@ 0xb0
 800872c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008730:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d101      	bne.n	800873c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008738:	2303      	movs	r3, #3
 800873a:	e004      	b.n	8008746 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	683a      	ldr	r2, [r7, #0]
 8008740:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3714      	adds	r7, #20
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
	...

08008754 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	32b0      	adds	r2, #176	@ 0xb0
 8008766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800876a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800876c:	2301      	movs	r3, #1
 800876e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d101      	bne.n	800877a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008776:	2303      	movs	r3, #3
 8008778:	e025      	b.n	80087c6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008780:	2b00      	cmp	r3, #0
 8008782:	d11f      	bne.n	80087c4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	2201      	movs	r2, #1
 8008788:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800878c:	4b10      	ldr	r3, [pc, #64]	@ (80087d0 <USBD_CDC_TransmitPacket+0x7c>)
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	f003 020f 	and.w	r2, r3, #15
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	4613      	mov	r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	4413      	add	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4403      	add	r3, r0
 80087a6:	3318      	adds	r3, #24
 80087a8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80087aa:	4b09      	ldr	r3, [pc, #36]	@ (80087d0 <USBD_CDC_TransmitPacket+0x7c>)
 80087ac:	7819      	ldrb	r1, [r3, #0]
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f001 ffc3 	bl	800a746 <USBD_LL_Transmit>

    ret = USBD_OK;
 80087c0:	2300      	movs	r3, #0
 80087c2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80087c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	20000093 	.word	0x20000093

080087d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	32b0      	adds	r2, #176	@ 0xb0
 80087e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	32b0      	adds	r2, #176	@ 0xb0
 80087f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d101      	bne.n	8008802 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80087fe:	2303      	movs	r3, #3
 8008800:	e018      	b.n	8008834 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	7c1b      	ldrb	r3, [r3, #16]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d10a      	bne.n	8008820 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800880a:	4b0c      	ldr	r3, [pc, #48]	@ (800883c <USBD_CDC_ReceivePacket+0x68>)
 800880c:	7819      	ldrb	r1, [r3, #0]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008814:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f001 ffb5 	bl	800a788 <USBD_LL_PrepareReceive>
 800881e:	e008      	b.n	8008832 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008820:	4b06      	ldr	r3, [pc, #24]	@ (800883c <USBD_CDC_ReceivePacket+0x68>)
 8008822:	7819      	ldrb	r1, [r3, #0]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800882a:	2340      	movs	r3, #64	@ 0x40
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f001 ffab 	bl	800a788 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	20000094 	.word	0x20000094

08008840 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b086      	sub	sp, #24
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	4613      	mov	r3, r2
 800884c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d101      	bne.n	8008858 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008854:	2303      	movs	r3, #3
 8008856:	e01f      	b.n	8008898 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2200      	movs	r2, #0
 800885c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2200      	movs	r2, #0
 8008864:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d003      	beq.n	800887e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	68ba      	ldr	r2, [r7, #8]
 800887a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2201      	movs	r2, #1
 8008882:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	79fa      	ldrb	r2, [r7, #7]
 800888a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f001 fe25 	bl	800a4dc <USBD_LL_Init>
 8008892:	4603      	mov	r3, r0
 8008894:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008896:	7dfb      	ldrb	r3, [r7, #23]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3718      	adds	r7, #24
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80088aa:	2300      	movs	r3, #0
 80088ac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d101      	bne.n	80088b8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80088b4:	2303      	movs	r3, #3
 80088b6:	e025      	b.n	8008904 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	32ae      	adds	r2, #174	@ 0xae
 80088ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00f      	beq.n	80088f4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	32ae      	adds	r2, #174	@ 0xae
 80088de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e4:	f107 020e 	add.w	r2, r7, #14
 80088e8:	4610      	mov	r0, r2
 80088ea:	4798      	blx	r3
 80088ec:	4602      	mov	r2, r0
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80088fa:	1c5a      	adds	r2, r3, #1
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f001 fe2d 	bl	800a574 <USBD_LL_Start>
 800891a:	4603      	mov	r3, r0
}
 800891c:	4618      	mov	r0, r3
 800891e:	3708      	adds	r7, #8
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800892c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800892e:	4618      	mov	r0, r3
 8008930:	370c      	adds	r7, #12
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr

0800893a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b084      	sub	sp, #16
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
 8008942:	460b      	mov	r3, r1
 8008944:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008946:	2300      	movs	r3, #0
 8008948:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008950:	2b00      	cmp	r3, #0
 8008952:	d009      	beq.n	8008968 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	78fa      	ldrb	r2, [r7, #3]
 800895e:	4611      	mov	r1, r2
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	4798      	blx	r3
 8008964:	4603      	mov	r3, r0
 8008966:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008968:	7bfb      	ldrb	r3, [r7, #15]
}
 800896a:	4618      	mov	r0, r3
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b084      	sub	sp, #16
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
 800897a:	460b      	mov	r3, r1
 800897c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800897e:	2300      	movs	r3, #0
 8008980:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	78fa      	ldrb	r2, [r7, #3]
 800898c:	4611      	mov	r1, r2
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	4798      	blx	r3
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d001      	beq.n	800899c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008998:	2303      	movs	r3, #3
 800899a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800899c:	7bfb      	ldrb	r3, [r7, #15]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b084      	sub	sp, #16
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
 80089ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80089b6:	6839      	ldr	r1, [r7, #0]
 80089b8:	4618      	mov	r0, r3
 80089ba:	f001 f90c 	bl	8009bd6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2201      	movs	r2, #1
 80089c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80089cc:	461a      	mov	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80089da:	f003 031f 	and.w	r3, r3, #31
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d01a      	beq.n	8008a18 <USBD_LL_SetupStage+0x72>
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	d822      	bhi.n	8008a2c <USBD_LL_SetupStage+0x86>
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d002      	beq.n	80089f0 <USBD_LL_SetupStage+0x4a>
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d00a      	beq.n	8008a04 <USBD_LL_SetupStage+0x5e>
 80089ee:	e01d      	b.n	8008a2c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80089f6:	4619      	mov	r1, r3
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 fb63 	bl	80090c4 <USBD_StdDevReq>
 80089fe:	4603      	mov	r3, r0
 8008a00:	73fb      	strb	r3, [r7, #15]
      break;
 8008a02:	e020      	b.n	8008a46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 fbcb 	bl	80091a8 <USBD_StdItfReq>
 8008a12:	4603      	mov	r3, r0
 8008a14:	73fb      	strb	r3, [r7, #15]
      break;
 8008a16:	e016      	b.n	8008a46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008a1e:	4619      	mov	r1, r3
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 fc2d 	bl	8009280 <USBD_StdEPReq>
 8008a26:	4603      	mov	r3, r0
 8008a28:	73fb      	strb	r3, [r7, #15]
      break;
 8008a2a:	e00c      	b.n	8008a46 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008a32:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	4619      	mov	r1, r3
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f001 fdfa 	bl	800a634 <USBD_LL_StallEP>
 8008a40:	4603      	mov	r3, r0
 8008a42:	73fb      	strb	r3, [r7, #15]
      break;
 8008a44:	bf00      	nop
  }

  return ret;
 8008a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	460b      	mov	r3, r1
 8008a5a:	607a      	str	r2, [r7, #4]
 8008a5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008a62:	7afb      	ldrb	r3, [r7, #11]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d16e      	bne.n	8008b46 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008a6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008a76:	2b03      	cmp	r3, #3
 8008a78:	f040 8098 	bne.w	8008bac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	689a      	ldr	r2, [r3, #8]
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d913      	bls.n	8008ab0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	689a      	ldr	r2, [r3, #8]
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	1ad2      	subs	r2, r2, r3
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	68da      	ldr	r2, [r3, #12]
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	bf28      	it	cs
 8008aa2:	4613      	movcs	r3, r2
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	6879      	ldr	r1, [r7, #4]
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	f001 f994 	bl	8009dd6 <USBD_CtlContinueRx>
 8008aae:	e07d      	b.n	8008bac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008ab6:	f003 031f 	and.w	r3, r3, #31
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d014      	beq.n	8008ae8 <USBD_LL_DataOutStage+0x98>
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d81d      	bhi.n	8008afe <USBD_LL_DataOutStage+0xae>
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d002      	beq.n	8008acc <USBD_LL_DataOutStage+0x7c>
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d003      	beq.n	8008ad2 <USBD_LL_DataOutStage+0x82>
 8008aca:	e018      	b.n	8008afe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008acc:	2300      	movs	r3, #0
 8008ace:	75bb      	strb	r3, [r7, #22]
            break;
 8008ad0:	e018      	b.n	8008b04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	4619      	mov	r1, r3
 8008adc:	68f8      	ldr	r0, [r7, #12]
 8008ade:	f000 fa64 	bl	8008faa <USBD_CoreFindIF>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	75bb      	strb	r3, [r7, #22]
            break;
 8008ae6:	e00d      	b.n	8008b04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	4619      	mov	r1, r3
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	f000 fa66 	bl	8008fc4 <USBD_CoreFindEP>
 8008af8:	4603      	mov	r3, r0
 8008afa:	75bb      	strb	r3, [r7, #22]
            break;
 8008afc:	e002      	b.n	8008b04 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008afe:	2300      	movs	r3, #0
 8008b00:	75bb      	strb	r3, [r7, #22]
            break;
 8008b02:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008b04:	7dbb      	ldrb	r3, [r7, #22]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d119      	bne.n	8008b3e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	2b03      	cmp	r3, #3
 8008b14:	d113      	bne.n	8008b3e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008b16:	7dba      	ldrb	r2, [r7, #22]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	32ae      	adds	r2, #174	@ 0xae
 8008b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00b      	beq.n	8008b3e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008b26:	7dba      	ldrb	r2, [r7, #22]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008b2e:	7dba      	ldrb	r2, [r7, #22]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	32ae      	adds	r2, #174	@ 0xae
 8008b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	68f8      	ldr	r0, [r7, #12]
 8008b3c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	f001 f95a 	bl	8009df8 <USBD_CtlSendStatus>
 8008b44:	e032      	b.n	8008bac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008b46:	7afb      	ldrb	r3, [r7, #11]
 8008b48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	4619      	mov	r1, r3
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f000 fa37 	bl	8008fc4 <USBD_CoreFindEP>
 8008b56:	4603      	mov	r3, r0
 8008b58:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b5a:	7dbb      	ldrb	r3, [r7, #22]
 8008b5c:	2bff      	cmp	r3, #255	@ 0xff
 8008b5e:	d025      	beq.n	8008bac <USBD_LL_DataOutStage+0x15c>
 8008b60:	7dbb      	ldrb	r3, [r7, #22]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d122      	bne.n	8008bac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	2b03      	cmp	r3, #3
 8008b70:	d117      	bne.n	8008ba2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008b72:	7dba      	ldrb	r2, [r7, #22]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	32ae      	adds	r2, #174	@ 0xae
 8008b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00f      	beq.n	8008ba2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008b82:	7dba      	ldrb	r2, [r7, #22]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008b8a:	7dba      	ldrb	r2, [r7, #22]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	32ae      	adds	r2, #174	@ 0xae
 8008b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b94:	699b      	ldr	r3, [r3, #24]
 8008b96:	7afa      	ldrb	r2, [r7, #11]
 8008b98:	4611      	mov	r1, r2
 8008b9a:	68f8      	ldr	r0, [r7, #12]
 8008b9c:	4798      	blx	r3
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008ba2:	7dfb      	ldrb	r3, [r7, #23]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d001      	beq.n	8008bac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008ba8:	7dfb      	ldrb	r3, [r7, #23]
 8008baa:	e000      	b.n	8008bae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3718      	adds	r7, #24
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b086      	sub	sp, #24
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	60f8      	str	r0, [r7, #12]
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	607a      	str	r2, [r7, #4]
 8008bc2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008bc4:	7afb      	ldrb	r3, [r7, #11]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d16f      	bne.n	8008caa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	3314      	adds	r3, #20
 8008bce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008bd6:	2b02      	cmp	r3, #2
 8008bd8:	d15a      	bne.n	8008c90 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	689a      	ldr	r2, [r3, #8]
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d914      	bls.n	8008c10 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	689a      	ldr	r2, [r3, #8]
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	1ad2      	subs	r2, r2, r3
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	6879      	ldr	r1, [r7, #4]
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f001 f8bc 	bl	8009d7a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c02:	2300      	movs	r3, #0
 8008c04:	2200      	movs	r2, #0
 8008c06:	2100      	movs	r1, #0
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	f001 fdbd 	bl	800a788 <USBD_LL_PrepareReceive>
 8008c0e:	e03f      	b.n	8008c90 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	68da      	ldr	r2, [r3, #12]
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d11c      	bne.n	8008c56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	685a      	ldr	r2, [r3, #4]
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d316      	bcc.n	8008c56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d20f      	bcs.n	8008c56 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c36:	2200      	movs	r2, #0
 8008c38:	2100      	movs	r1, #0
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f001 f89d 	bl	8009d7a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c48:	2300      	movs	r3, #0
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f001 fd9a 	bl	800a788 <USBD_LL_PrepareReceive>
 8008c54:	e01c      	b.n	8008c90 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	2b03      	cmp	r3, #3
 8008c60:	d10f      	bne.n	8008c82 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d009      	beq.n	8008c82 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c82:	2180      	movs	r1, #128	@ 0x80
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	f001 fcd5 	bl	800a634 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f001 f8c7 	bl	8009e1e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d03a      	beq.n	8008d10 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f7ff fe42 	bl	8008924 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008ca8:	e032      	b.n	8008d10 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008caa:	7afb      	ldrb	r3, [r7, #11]
 8008cac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f000 f985 	bl	8008fc4 <USBD_CoreFindEP>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008cbe:	7dfb      	ldrb	r3, [r7, #23]
 8008cc0:	2bff      	cmp	r3, #255	@ 0xff
 8008cc2:	d025      	beq.n	8008d10 <USBD_LL_DataInStage+0x15a>
 8008cc4:	7dfb      	ldrb	r3, [r7, #23]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d122      	bne.n	8008d10 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	2b03      	cmp	r3, #3
 8008cd4:	d11c      	bne.n	8008d10 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008cd6:	7dfa      	ldrb	r2, [r7, #23]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	32ae      	adds	r2, #174	@ 0xae
 8008cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ce0:	695b      	ldr	r3, [r3, #20]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d014      	beq.n	8008d10 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008ce6:	7dfa      	ldrb	r2, [r7, #23]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008cee:	7dfa      	ldrb	r2, [r7, #23]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	32ae      	adds	r2, #174	@ 0xae
 8008cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf8:	695b      	ldr	r3, [r3, #20]
 8008cfa:	7afa      	ldrb	r2, [r7, #11]
 8008cfc:	4611      	mov	r1, r2
 8008cfe:	68f8      	ldr	r0, [r7, #12]
 8008d00:	4798      	blx	r3
 8008d02:	4603      	mov	r3, r0
 8008d04:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008d06:	7dbb      	ldrb	r3, [r7, #22]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d001      	beq.n	8008d10 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008d0c:	7dbb      	ldrb	r3, [r7, #22]
 8008d0e:	e000      	b.n	8008d12 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3718      	adds	r7, #24
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b084      	sub	sp, #16
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d22:	2300      	movs	r3, #0
 8008d24:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d014      	beq.n	8008d80 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00e      	beq.n	8008d80 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	6852      	ldr	r2, [r2, #4]
 8008d6e:	b2d2      	uxtb	r2, r2
 8008d70:	4611      	mov	r1, r2
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	4798      	blx	r3
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d001      	beq.n	8008d80 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d80:	2340      	movs	r3, #64	@ 0x40
 8008d82:	2200      	movs	r2, #0
 8008d84:	2100      	movs	r1, #0
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f001 fc0f 	bl	800a5aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2240      	movs	r2, #64	@ 0x40
 8008d98:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d9c:	2340      	movs	r3, #64	@ 0x40
 8008d9e:	2200      	movs	r2, #0
 8008da0:	2180      	movs	r1, #128	@ 0x80
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f001 fc01 	bl	800a5aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2240      	movs	r2, #64	@ 0x40
 8008db2:	621a      	str	r2, [r3, #32]

  return ret;
 8008db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008dbe:	b480      	push	{r7}
 8008dc0:	b083      	sub	sp, #12
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	78fa      	ldrb	r2, [r7, #3]
 8008dce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	370c      	adds	r7, #12
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr

08008dde <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008dde:	b480      	push	{r7}
 8008de0:	b083      	sub	sp, #12
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	2b04      	cmp	r3, #4
 8008df0:	d006      	beq.n	8008e00 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008df8:	b2da      	uxtb	r2, r3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2204      	movs	r2, #4
 8008e04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	370c      	adds	r7, #12
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr

08008e16 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008e16:	b480      	push	{r7}
 8008e18:	b083      	sub	sp, #12
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	2b04      	cmp	r3, #4
 8008e28:	d106      	bne.n	8008e38 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008e30:	b2da      	uxtb	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	370c      	adds	r7, #12
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr

08008e46 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b082      	sub	sp, #8
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	2b03      	cmp	r3, #3
 8008e58:	d110      	bne.n	8008e7c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00b      	beq.n	8008e7c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e6a:	69db      	ldr	r3, [r3, #28]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d005      	beq.n	8008e7c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e76:	69db      	ldr	r3, [r3, #28]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3708      	adds	r7, #8
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b082      	sub	sp, #8
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
 8008e8e:	460b      	mov	r3, r1
 8008e90:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	32ae      	adds	r2, #174	@ 0xae
 8008e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d101      	bne.n	8008ea8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	e01c      	b.n	8008ee2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	2b03      	cmp	r3, #3
 8008eb2:	d115      	bne.n	8008ee0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	32ae      	adds	r2, #174	@ 0xae
 8008ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec2:	6a1b      	ldr	r3, [r3, #32]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d00b      	beq.n	8008ee0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	32ae      	adds	r2, #174	@ 0xae
 8008ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ed6:	6a1b      	ldr	r3, [r3, #32]
 8008ed8:	78fa      	ldrb	r2, [r7, #3]
 8008eda:	4611      	mov	r1, r2
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3708      	adds	r7, #8
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b082      	sub	sp, #8
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	32ae      	adds	r2, #174	@ 0xae
 8008f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d101      	bne.n	8008f0c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008f08:	2303      	movs	r3, #3
 8008f0a:	e01c      	b.n	8008f46 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	2b03      	cmp	r3, #3
 8008f16:	d115      	bne.n	8008f44 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	32ae      	adds	r2, #174	@ 0xae
 8008f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00b      	beq.n	8008f44 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	32ae      	adds	r2, #174	@ 0xae
 8008f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f3c:	78fa      	ldrb	r2, [r7, #3]
 8008f3e:	4611      	mov	r1, r2
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3708      	adds	r7, #8
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008f4e:	b480      	push	{r7}
 8008f50:	b083      	sub	sp, #12
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00e      	beq.n	8008fa0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	6852      	ldr	r2, [r2, #4]
 8008f8e:	b2d2      	uxtb	r2, r2
 8008f90:	4611      	mov	r1, r2
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	4798      	blx	r3
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d001      	beq.n	8008fa0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008faa:	b480      	push	{r7}
 8008fac:	b083      	sub	sp, #12
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008fb6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	460b      	mov	r3, r1
 8008fce:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008fd0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	370c      	adds	r7, #12
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr

08008fde <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b086      	sub	sp, #24
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	885b      	ldrh	r3, [r3, #2]
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	7812      	ldrb	r2, [r2, #0]
 8009000:	4293      	cmp	r3, r2
 8009002:	d91f      	bls.n	8009044 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800900a:	e013      	b.n	8009034 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800900c:	f107 030a 	add.w	r3, r7, #10
 8009010:	4619      	mov	r1, r3
 8009012:	6978      	ldr	r0, [r7, #20]
 8009014:	f000 f81b 	bl	800904e <USBD_GetNextDesc>
 8009018:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	785b      	ldrb	r3, [r3, #1]
 800901e:	2b05      	cmp	r3, #5
 8009020:	d108      	bne.n	8009034 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	789b      	ldrb	r3, [r3, #2]
 800902a:	78fa      	ldrb	r2, [r7, #3]
 800902c:	429a      	cmp	r2, r3
 800902e:	d008      	beq.n	8009042 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009030:	2300      	movs	r3, #0
 8009032:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	885b      	ldrh	r3, [r3, #2]
 8009038:	b29a      	uxth	r2, r3
 800903a:	897b      	ldrh	r3, [r7, #10]
 800903c:	429a      	cmp	r2, r3
 800903e:	d8e5      	bhi.n	800900c <USBD_GetEpDesc+0x2e>
 8009040:	e000      	b.n	8009044 <USBD_GetEpDesc+0x66>
          break;
 8009042:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009044:	693b      	ldr	r3, [r7, #16]
}
 8009046:	4618      	mov	r0, r3
 8009048:	3718      	adds	r7, #24
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800904e:	b480      	push	{r7}
 8009050:	b085      	sub	sp, #20
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
 8009056:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	881b      	ldrh	r3, [r3, #0]
 8009060:	68fa      	ldr	r2, [r7, #12]
 8009062:	7812      	ldrb	r2, [r2, #0]
 8009064:	4413      	add	r3, r2
 8009066:	b29a      	uxth	r2, r3
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	461a      	mov	r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	4413      	add	r3, r2
 8009076:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009078:	68fb      	ldr	r3, [r7, #12]
}
 800907a:	4618      	mov	r0, r3
 800907c:	3714      	adds	r7, #20
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr

08009086 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009086:	b480      	push	{r7}
 8009088:	b087      	sub	sp, #28
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	3301      	adds	r3, #1
 800909c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80090a4:	8a3b      	ldrh	r3, [r7, #16]
 80090a6:	021b      	lsls	r3, r3, #8
 80090a8:	b21a      	sxth	r2, r3
 80090aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80090ae:	4313      	orrs	r3, r2
 80090b0:	b21b      	sxth	r3, r3
 80090b2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80090b4:	89fb      	ldrh	r3, [r7, #14]
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	371c      	adds	r7, #28
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
	...

080090c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090ce:	2300      	movs	r3, #0
 80090d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80090da:	2b40      	cmp	r3, #64	@ 0x40
 80090dc:	d005      	beq.n	80090ea <USBD_StdDevReq+0x26>
 80090de:	2b40      	cmp	r3, #64	@ 0x40
 80090e0:	d857      	bhi.n	8009192 <USBD_StdDevReq+0xce>
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d00f      	beq.n	8009106 <USBD_StdDevReq+0x42>
 80090e6:	2b20      	cmp	r3, #32
 80090e8:	d153      	bne.n	8009192 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	32ae      	adds	r2, #174	@ 0xae
 80090f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	6839      	ldr	r1, [r7, #0]
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	4798      	blx	r3
 8009100:	4603      	mov	r3, r0
 8009102:	73fb      	strb	r3, [r7, #15]
      break;
 8009104:	e04a      	b.n	800919c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	785b      	ldrb	r3, [r3, #1]
 800910a:	2b09      	cmp	r3, #9
 800910c:	d83b      	bhi.n	8009186 <USBD_StdDevReq+0xc2>
 800910e:	a201      	add	r2, pc, #4	@ (adr r2, 8009114 <USBD_StdDevReq+0x50>)
 8009110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009114:	08009169 	.word	0x08009169
 8009118:	0800917d 	.word	0x0800917d
 800911c:	08009187 	.word	0x08009187
 8009120:	08009173 	.word	0x08009173
 8009124:	08009187 	.word	0x08009187
 8009128:	08009147 	.word	0x08009147
 800912c:	0800913d 	.word	0x0800913d
 8009130:	08009187 	.word	0x08009187
 8009134:	0800915f 	.word	0x0800915f
 8009138:	08009151 	.word	0x08009151
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800913c:	6839      	ldr	r1, [r7, #0]
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fa3c 	bl	80095bc <USBD_GetDescriptor>
          break;
 8009144:	e024      	b.n	8009190 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009146:	6839      	ldr	r1, [r7, #0]
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 fba1 	bl	8009890 <USBD_SetAddress>
          break;
 800914e:	e01f      	b.n	8009190 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009150:	6839      	ldr	r1, [r7, #0]
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fbe0 	bl	8009918 <USBD_SetConfig>
 8009158:	4603      	mov	r3, r0
 800915a:	73fb      	strb	r3, [r7, #15]
          break;
 800915c:	e018      	b.n	8009190 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800915e:	6839      	ldr	r1, [r7, #0]
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 fc83 	bl	8009a6c <USBD_GetConfig>
          break;
 8009166:	e013      	b.n	8009190 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009168:	6839      	ldr	r1, [r7, #0]
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 fcb4 	bl	8009ad8 <USBD_GetStatus>
          break;
 8009170:	e00e      	b.n	8009190 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009172:	6839      	ldr	r1, [r7, #0]
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 fce3 	bl	8009b40 <USBD_SetFeature>
          break;
 800917a:	e009      	b.n	8009190 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800917c:	6839      	ldr	r1, [r7, #0]
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 fd07 	bl	8009b92 <USBD_ClrFeature>
          break;
 8009184:	e004      	b.n	8009190 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009186:	6839      	ldr	r1, [r7, #0]
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fd5e 	bl	8009c4a <USBD_CtlError>
          break;
 800918e:	bf00      	nop
      }
      break;
 8009190:	e004      	b.n	800919c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009192:	6839      	ldr	r1, [r7, #0]
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 fd58 	bl	8009c4a <USBD_CtlError>
      break;
 800919a:	bf00      	nop
  }

  return ret;
 800919c:	7bfb      	ldrb	r3, [r7, #15]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3710      	adds	r7, #16
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop

080091a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091b2:	2300      	movs	r3, #0
 80091b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80091be:	2b40      	cmp	r3, #64	@ 0x40
 80091c0:	d005      	beq.n	80091ce <USBD_StdItfReq+0x26>
 80091c2:	2b40      	cmp	r3, #64	@ 0x40
 80091c4:	d852      	bhi.n	800926c <USBD_StdItfReq+0xc4>
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d001      	beq.n	80091ce <USBD_StdItfReq+0x26>
 80091ca:	2b20      	cmp	r3, #32
 80091cc:	d14e      	bne.n	800926c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	3b01      	subs	r3, #1
 80091d8:	2b02      	cmp	r3, #2
 80091da:	d840      	bhi.n	800925e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	889b      	ldrh	r3, [r3, #4]
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d836      	bhi.n	8009254 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	889b      	ldrh	r3, [r3, #4]
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	4619      	mov	r1, r3
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f7ff fedb 	bl	8008faa <USBD_CoreFindIF>
 80091f4:	4603      	mov	r3, r0
 80091f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80091f8:	7bbb      	ldrb	r3, [r7, #14]
 80091fa:	2bff      	cmp	r3, #255	@ 0xff
 80091fc:	d01d      	beq.n	800923a <USBD_StdItfReq+0x92>
 80091fe:	7bbb      	ldrb	r3, [r7, #14]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d11a      	bne.n	800923a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009204:	7bba      	ldrb	r2, [r7, #14]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	32ae      	adds	r2, #174	@ 0xae
 800920a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00f      	beq.n	8009234 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009214:	7bba      	ldrb	r2, [r7, #14]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800921c:	7bba      	ldrb	r2, [r7, #14]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	32ae      	adds	r2, #174	@ 0xae
 8009222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	6839      	ldr	r1, [r7, #0]
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	4798      	blx	r3
 800922e:	4603      	mov	r3, r0
 8009230:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009232:	e004      	b.n	800923e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009234:	2303      	movs	r3, #3
 8009236:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009238:	e001      	b.n	800923e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800923a:	2303      	movs	r3, #3
 800923c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	88db      	ldrh	r3, [r3, #6]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d110      	bne.n	8009268 <USBD_StdItfReq+0xc0>
 8009246:	7bfb      	ldrb	r3, [r7, #15]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d10d      	bne.n	8009268 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 fdd3 	bl	8009df8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009252:	e009      	b.n	8009268 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009254:	6839      	ldr	r1, [r7, #0]
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 fcf7 	bl	8009c4a <USBD_CtlError>
          break;
 800925c:	e004      	b.n	8009268 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800925e:	6839      	ldr	r1, [r7, #0]
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 fcf2 	bl	8009c4a <USBD_CtlError>
          break;
 8009266:	e000      	b.n	800926a <USBD_StdItfReq+0xc2>
          break;
 8009268:	bf00      	nop
      }
      break;
 800926a:	e004      	b.n	8009276 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800926c:	6839      	ldr	r1, [r7, #0]
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 fceb 	bl	8009c4a <USBD_CtlError>
      break;
 8009274:	bf00      	nop
  }

  return ret;
 8009276:	7bfb      	ldrb	r3, [r7, #15]
}
 8009278:	4618      	mov	r0, r3
 800927a:	3710      	adds	r7, #16
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800928a:	2300      	movs	r3, #0
 800928c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	889b      	ldrh	r3, [r3, #4]
 8009292:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800929c:	2b40      	cmp	r3, #64	@ 0x40
 800929e:	d007      	beq.n	80092b0 <USBD_StdEPReq+0x30>
 80092a0:	2b40      	cmp	r3, #64	@ 0x40
 80092a2:	f200 817f 	bhi.w	80095a4 <USBD_StdEPReq+0x324>
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d02a      	beq.n	8009300 <USBD_StdEPReq+0x80>
 80092aa:	2b20      	cmp	r3, #32
 80092ac:	f040 817a 	bne.w	80095a4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80092b0:	7bbb      	ldrb	r3, [r7, #14]
 80092b2:	4619      	mov	r1, r3
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f7ff fe85 	bl	8008fc4 <USBD_CoreFindEP>
 80092ba:	4603      	mov	r3, r0
 80092bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80092be:	7b7b      	ldrb	r3, [r7, #13]
 80092c0:	2bff      	cmp	r3, #255	@ 0xff
 80092c2:	f000 8174 	beq.w	80095ae <USBD_StdEPReq+0x32e>
 80092c6:	7b7b      	ldrb	r3, [r7, #13]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f040 8170 	bne.w	80095ae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80092ce:	7b7a      	ldrb	r2, [r7, #13]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80092d6:	7b7a      	ldrb	r2, [r7, #13]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	32ae      	adds	r2, #174	@ 0xae
 80092dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f000 8163 	beq.w	80095ae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80092e8:	7b7a      	ldrb	r2, [r7, #13]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	32ae      	adds	r2, #174	@ 0xae
 80092ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	6839      	ldr	r1, [r7, #0]
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	4798      	blx	r3
 80092fa:	4603      	mov	r3, r0
 80092fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80092fe:	e156      	b.n	80095ae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	785b      	ldrb	r3, [r3, #1]
 8009304:	2b03      	cmp	r3, #3
 8009306:	d008      	beq.n	800931a <USBD_StdEPReq+0x9a>
 8009308:	2b03      	cmp	r3, #3
 800930a:	f300 8145 	bgt.w	8009598 <USBD_StdEPReq+0x318>
 800930e:	2b00      	cmp	r3, #0
 8009310:	f000 809b 	beq.w	800944a <USBD_StdEPReq+0x1ca>
 8009314:	2b01      	cmp	r3, #1
 8009316:	d03c      	beq.n	8009392 <USBD_StdEPReq+0x112>
 8009318:	e13e      	b.n	8009598 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009320:	b2db      	uxtb	r3, r3
 8009322:	2b02      	cmp	r3, #2
 8009324:	d002      	beq.n	800932c <USBD_StdEPReq+0xac>
 8009326:	2b03      	cmp	r3, #3
 8009328:	d016      	beq.n	8009358 <USBD_StdEPReq+0xd8>
 800932a:	e02c      	b.n	8009386 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800932c:	7bbb      	ldrb	r3, [r7, #14]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00d      	beq.n	800934e <USBD_StdEPReq+0xce>
 8009332:	7bbb      	ldrb	r3, [r7, #14]
 8009334:	2b80      	cmp	r3, #128	@ 0x80
 8009336:	d00a      	beq.n	800934e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009338:	7bbb      	ldrb	r3, [r7, #14]
 800933a:	4619      	mov	r1, r3
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f001 f979 	bl	800a634 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009342:	2180      	movs	r1, #128	@ 0x80
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f001 f975 	bl	800a634 <USBD_LL_StallEP>
 800934a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800934c:	e020      	b.n	8009390 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800934e:	6839      	ldr	r1, [r7, #0]
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 fc7a 	bl	8009c4a <USBD_CtlError>
              break;
 8009356:	e01b      	b.n	8009390 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	885b      	ldrh	r3, [r3, #2]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d10e      	bne.n	800937e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009360:	7bbb      	ldrb	r3, [r7, #14]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00b      	beq.n	800937e <USBD_StdEPReq+0xfe>
 8009366:	7bbb      	ldrb	r3, [r7, #14]
 8009368:	2b80      	cmp	r3, #128	@ 0x80
 800936a:	d008      	beq.n	800937e <USBD_StdEPReq+0xfe>
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	88db      	ldrh	r3, [r3, #6]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d104      	bne.n	800937e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009374:	7bbb      	ldrb	r3, [r7, #14]
 8009376:	4619      	mov	r1, r3
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f001 f95b 	bl	800a634 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 fd3a 	bl	8009df8 <USBD_CtlSendStatus>

              break;
 8009384:	e004      	b.n	8009390 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009386:	6839      	ldr	r1, [r7, #0]
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 fc5e 	bl	8009c4a <USBD_CtlError>
              break;
 800938e:	bf00      	nop
          }
          break;
 8009390:	e107      	b.n	80095a2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009398:	b2db      	uxtb	r3, r3
 800939a:	2b02      	cmp	r3, #2
 800939c:	d002      	beq.n	80093a4 <USBD_StdEPReq+0x124>
 800939e:	2b03      	cmp	r3, #3
 80093a0:	d016      	beq.n	80093d0 <USBD_StdEPReq+0x150>
 80093a2:	e04b      	b.n	800943c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093a4:	7bbb      	ldrb	r3, [r7, #14]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00d      	beq.n	80093c6 <USBD_StdEPReq+0x146>
 80093aa:	7bbb      	ldrb	r3, [r7, #14]
 80093ac:	2b80      	cmp	r3, #128	@ 0x80
 80093ae:	d00a      	beq.n	80093c6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80093b0:	7bbb      	ldrb	r3, [r7, #14]
 80093b2:	4619      	mov	r1, r3
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f001 f93d 	bl	800a634 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80093ba:	2180      	movs	r1, #128	@ 0x80
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f001 f939 	bl	800a634 <USBD_LL_StallEP>
 80093c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093c4:	e040      	b.n	8009448 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80093c6:	6839      	ldr	r1, [r7, #0]
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 fc3e 	bl	8009c4a <USBD_CtlError>
              break;
 80093ce:	e03b      	b.n	8009448 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	885b      	ldrh	r3, [r3, #2]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d136      	bne.n	8009446 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80093d8:	7bbb      	ldrb	r3, [r7, #14]
 80093da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d004      	beq.n	80093ec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80093e2:	7bbb      	ldrb	r3, [r7, #14]
 80093e4:	4619      	mov	r1, r3
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f001 f943 	bl	800a672 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 fd03 	bl	8009df8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80093f2:	7bbb      	ldrb	r3, [r7, #14]
 80093f4:	4619      	mov	r1, r3
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f7ff fde4 	bl	8008fc4 <USBD_CoreFindEP>
 80093fc:	4603      	mov	r3, r0
 80093fe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009400:	7b7b      	ldrb	r3, [r7, #13]
 8009402:	2bff      	cmp	r3, #255	@ 0xff
 8009404:	d01f      	beq.n	8009446 <USBD_StdEPReq+0x1c6>
 8009406:	7b7b      	ldrb	r3, [r7, #13]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d11c      	bne.n	8009446 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800940c:	7b7a      	ldrb	r2, [r7, #13]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009414:	7b7a      	ldrb	r2, [r7, #13]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	32ae      	adds	r2, #174	@ 0xae
 800941a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d010      	beq.n	8009446 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009424:	7b7a      	ldrb	r2, [r7, #13]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	32ae      	adds	r2, #174	@ 0xae
 800942a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	6839      	ldr	r1, [r7, #0]
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	4798      	blx	r3
 8009436:	4603      	mov	r3, r0
 8009438:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800943a:	e004      	b.n	8009446 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800943c:	6839      	ldr	r1, [r7, #0]
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 fc03 	bl	8009c4a <USBD_CtlError>
              break;
 8009444:	e000      	b.n	8009448 <USBD_StdEPReq+0x1c8>
              break;
 8009446:	bf00      	nop
          }
          break;
 8009448:	e0ab      	b.n	80095a2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009450:	b2db      	uxtb	r3, r3
 8009452:	2b02      	cmp	r3, #2
 8009454:	d002      	beq.n	800945c <USBD_StdEPReq+0x1dc>
 8009456:	2b03      	cmp	r3, #3
 8009458:	d032      	beq.n	80094c0 <USBD_StdEPReq+0x240>
 800945a:	e097      	b.n	800958c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800945c:	7bbb      	ldrb	r3, [r7, #14]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d007      	beq.n	8009472 <USBD_StdEPReq+0x1f2>
 8009462:	7bbb      	ldrb	r3, [r7, #14]
 8009464:	2b80      	cmp	r3, #128	@ 0x80
 8009466:	d004      	beq.n	8009472 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009468:	6839      	ldr	r1, [r7, #0]
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fbed 	bl	8009c4a <USBD_CtlError>
                break;
 8009470:	e091      	b.n	8009596 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009472:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009476:	2b00      	cmp	r3, #0
 8009478:	da0b      	bge.n	8009492 <USBD_StdEPReq+0x212>
 800947a:	7bbb      	ldrb	r3, [r7, #14]
 800947c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009480:	4613      	mov	r3, r2
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	4413      	add	r3, r2
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	3310      	adds	r3, #16
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	4413      	add	r3, r2
 800948e:	3304      	adds	r3, #4
 8009490:	e00b      	b.n	80094aa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009492:	7bbb      	ldrb	r3, [r7, #14]
 8009494:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009498:	4613      	mov	r3, r2
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	4413      	add	r3, r2
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	4413      	add	r3, r2
 80094a8:	3304      	adds	r3, #4
 80094aa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	2200      	movs	r2, #0
 80094b0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	2202      	movs	r2, #2
 80094b6:	4619      	mov	r1, r3
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 fc43 	bl	8009d44 <USBD_CtlSendData>
              break;
 80094be:	e06a      	b.n	8009596 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80094c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	da11      	bge.n	80094ec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80094c8:	7bbb      	ldrb	r3, [r7, #14]
 80094ca:	f003 020f 	and.w	r2, r3, #15
 80094ce:	6879      	ldr	r1, [r7, #4]
 80094d0:	4613      	mov	r3, r2
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	4413      	add	r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	440b      	add	r3, r1
 80094da:	3324      	adds	r3, #36	@ 0x24
 80094dc:	881b      	ldrh	r3, [r3, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d117      	bne.n	8009512 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80094e2:	6839      	ldr	r1, [r7, #0]
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 fbb0 	bl	8009c4a <USBD_CtlError>
                  break;
 80094ea:	e054      	b.n	8009596 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80094ec:	7bbb      	ldrb	r3, [r7, #14]
 80094ee:	f003 020f 	and.w	r2, r3, #15
 80094f2:	6879      	ldr	r1, [r7, #4]
 80094f4:	4613      	mov	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4413      	add	r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	440b      	add	r3, r1
 80094fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009502:	881b      	ldrh	r3, [r3, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d104      	bne.n	8009512 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009508:	6839      	ldr	r1, [r7, #0]
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 fb9d 	bl	8009c4a <USBD_CtlError>
                  break;
 8009510:	e041      	b.n	8009596 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009512:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009516:	2b00      	cmp	r3, #0
 8009518:	da0b      	bge.n	8009532 <USBD_StdEPReq+0x2b2>
 800951a:	7bbb      	ldrb	r3, [r7, #14]
 800951c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009520:	4613      	mov	r3, r2
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	4413      	add	r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	3310      	adds	r3, #16
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	4413      	add	r3, r2
 800952e:	3304      	adds	r3, #4
 8009530:	e00b      	b.n	800954a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009532:	7bbb      	ldrb	r3, [r7, #14]
 8009534:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009538:	4613      	mov	r3, r2
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	4413      	add	r3, r2
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	4413      	add	r3, r2
 8009548:	3304      	adds	r3, #4
 800954a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800954c:	7bbb      	ldrb	r3, [r7, #14]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d002      	beq.n	8009558 <USBD_StdEPReq+0x2d8>
 8009552:	7bbb      	ldrb	r3, [r7, #14]
 8009554:	2b80      	cmp	r3, #128	@ 0x80
 8009556:	d103      	bne.n	8009560 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	2200      	movs	r2, #0
 800955c:	601a      	str	r2, [r3, #0]
 800955e:	e00e      	b.n	800957e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009560:	7bbb      	ldrb	r3, [r7, #14]
 8009562:	4619      	mov	r1, r3
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f001 f8a3 	bl	800a6b0 <USBD_LL_IsStallEP>
 800956a:	4603      	mov	r3, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d003      	beq.n	8009578 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	2201      	movs	r2, #1
 8009574:	601a      	str	r2, [r3, #0]
 8009576:	e002      	b.n	800957e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	2200      	movs	r2, #0
 800957c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	2202      	movs	r2, #2
 8009582:	4619      	mov	r1, r3
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 fbdd 	bl	8009d44 <USBD_CtlSendData>
              break;
 800958a:	e004      	b.n	8009596 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800958c:	6839      	ldr	r1, [r7, #0]
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 fb5b 	bl	8009c4a <USBD_CtlError>
              break;
 8009594:	bf00      	nop
          }
          break;
 8009596:	e004      	b.n	80095a2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009598:	6839      	ldr	r1, [r7, #0]
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 fb55 	bl	8009c4a <USBD_CtlError>
          break;
 80095a0:	bf00      	nop
      }
      break;
 80095a2:	e005      	b.n	80095b0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80095a4:	6839      	ldr	r1, [r7, #0]
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 fb4f 	bl	8009c4a <USBD_CtlError>
      break;
 80095ac:	e000      	b.n	80095b0 <USBD_StdEPReq+0x330>
      break;
 80095ae:	bf00      	nop
  }

  return ret;
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3710      	adds	r7, #16
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
	...

080095bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80095c6:	2300      	movs	r3, #0
 80095c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80095ca:	2300      	movs	r3, #0
 80095cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80095ce:	2300      	movs	r3, #0
 80095d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	885b      	ldrh	r3, [r3, #2]
 80095d6:	0a1b      	lsrs	r3, r3, #8
 80095d8:	b29b      	uxth	r3, r3
 80095da:	3b01      	subs	r3, #1
 80095dc:	2b06      	cmp	r3, #6
 80095de:	f200 8128 	bhi.w	8009832 <USBD_GetDescriptor+0x276>
 80095e2:	a201      	add	r2, pc, #4	@ (adr r2, 80095e8 <USBD_GetDescriptor+0x2c>)
 80095e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e8:	08009605 	.word	0x08009605
 80095ec:	0800961d 	.word	0x0800961d
 80095f0:	0800965d 	.word	0x0800965d
 80095f4:	08009833 	.word	0x08009833
 80095f8:	08009833 	.word	0x08009833
 80095fc:	080097d3 	.word	0x080097d3
 8009600:	080097ff 	.word	0x080097ff
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	7c12      	ldrb	r2, [r2, #16]
 8009610:	f107 0108 	add.w	r1, r7, #8
 8009614:	4610      	mov	r0, r2
 8009616:	4798      	blx	r3
 8009618:	60f8      	str	r0, [r7, #12]
      break;
 800961a:	e112      	b.n	8009842 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	7c1b      	ldrb	r3, [r3, #16]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d10d      	bne.n	8009640 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800962a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800962c:	f107 0208 	add.w	r2, r7, #8
 8009630:	4610      	mov	r0, r2
 8009632:	4798      	blx	r3
 8009634:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	3301      	adds	r3, #1
 800963a:	2202      	movs	r2, #2
 800963c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800963e:	e100      	b.n	8009842 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009648:	f107 0208 	add.w	r2, r7, #8
 800964c:	4610      	mov	r0, r2
 800964e:	4798      	blx	r3
 8009650:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	3301      	adds	r3, #1
 8009656:	2202      	movs	r2, #2
 8009658:	701a      	strb	r2, [r3, #0]
      break;
 800965a:	e0f2      	b.n	8009842 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	885b      	ldrh	r3, [r3, #2]
 8009660:	b2db      	uxtb	r3, r3
 8009662:	2b05      	cmp	r3, #5
 8009664:	f200 80ac 	bhi.w	80097c0 <USBD_GetDescriptor+0x204>
 8009668:	a201      	add	r2, pc, #4	@ (adr r2, 8009670 <USBD_GetDescriptor+0xb4>)
 800966a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800966e:	bf00      	nop
 8009670:	08009689 	.word	0x08009689
 8009674:	080096bd 	.word	0x080096bd
 8009678:	080096f1 	.word	0x080096f1
 800967c:	08009725 	.word	0x08009725
 8009680:	08009759 	.word	0x08009759
 8009684:	0800978d 	.word	0x0800978d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d00b      	beq.n	80096ac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	7c12      	ldrb	r2, [r2, #16]
 80096a0:	f107 0108 	add.w	r1, r7, #8
 80096a4:	4610      	mov	r0, r2
 80096a6:	4798      	blx	r3
 80096a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096aa:	e091      	b.n	80097d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096ac:	6839      	ldr	r1, [r7, #0]
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 facb 	bl	8009c4a <USBD_CtlError>
            err++;
 80096b4:	7afb      	ldrb	r3, [r7, #11]
 80096b6:	3301      	adds	r3, #1
 80096b8:	72fb      	strb	r3, [r7, #11]
          break;
 80096ba:	e089      	b.n	80097d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00b      	beq.n	80096e0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	7c12      	ldrb	r2, [r2, #16]
 80096d4:	f107 0108 	add.w	r1, r7, #8
 80096d8:	4610      	mov	r0, r2
 80096da:	4798      	blx	r3
 80096dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096de:	e077      	b.n	80097d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096e0:	6839      	ldr	r1, [r7, #0]
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fab1 	bl	8009c4a <USBD_CtlError>
            err++;
 80096e8:	7afb      	ldrb	r3, [r7, #11]
 80096ea:	3301      	adds	r3, #1
 80096ec:	72fb      	strb	r3, [r7, #11]
          break;
 80096ee:	e06f      	b.n	80097d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00b      	beq.n	8009714 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	7c12      	ldrb	r2, [r2, #16]
 8009708:	f107 0108 	add.w	r1, r7, #8
 800970c:	4610      	mov	r0, r2
 800970e:	4798      	blx	r3
 8009710:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009712:	e05d      	b.n	80097d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009714:	6839      	ldr	r1, [r7, #0]
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 fa97 	bl	8009c4a <USBD_CtlError>
            err++;
 800971c:	7afb      	ldrb	r3, [r7, #11]
 800971e:	3301      	adds	r3, #1
 8009720:	72fb      	strb	r3, [r7, #11]
          break;
 8009722:	e055      	b.n	80097d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800972a:	691b      	ldr	r3, [r3, #16]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00b      	beq.n	8009748 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009736:	691b      	ldr	r3, [r3, #16]
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	7c12      	ldrb	r2, [r2, #16]
 800973c:	f107 0108 	add.w	r1, r7, #8
 8009740:	4610      	mov	r0, r2
 8009742:	4798      	blx	r3
 8009744:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009746:	e043      	b.n	80097d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009748:	6839      	ldr	r1, [r7, #0]
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 fa7d 	bl	8009c4a <USBD_CtlError>
            err++;
 8009750:	7afb      	ldrb	r3, [r7, #11]
 8009752:	3301      	adds	r3, #1
 8009754:	72fb      	strb	r3, [r7, #11]
          break;
 8009756:	e03b      	b.n	80097d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800975e:	695b      	ldr	r3, [r3, #20]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d00b      	beq.n	800977c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800976a:	695b      	ldr	r3, [r3, #20]
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	7c12      	ldrb	r2, [r2, #16]
 8009770:	f107 0108 	add.w	r1, r7, #8
 8009774:	4610      	mov	r0, r2
 8009776:	4798      	blx	r3
 8009778:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800977a:	e029      	b.n	80097d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800977c:	6839      	ldr	r1, [r7, #0]
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 fa63 	bl	8009c4a <USBD_CtlError>
            err++;
 8009784:	7afb      	ldrb	r3, [r7, #11]
 8009786:	3301      	adds	r3, #1
 8009788:	72fb      	strb	r3, [r7, #11]
          break;
 800978a:	e021      	b.n	80097d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009792:	699b      	ldr	r3, [r3, #24]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00b      	beq.n	80097b0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800979e:	699b      	ldr	r3, [r3, #24]
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	7c12      	ldrb	r2, [r2, #16]
 80097a4:	f107 0108 	add.w	r1, r7, #8
 80097a8:	4610      	mov	r0, r2
 80097aa:	4798      	blx	r3
 80097ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097ae:	e00f      	b.n	80097d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 fa49 	bl	8009c4a <USBD_CtlError>
            err++;
 80097b8:	7afb      	ldrb	r3, [r7, #11]
 80097ba:	3301      	adds	r3, #1
 80097bc:	72fb      	strb	r3, [r7, #11]
          break;
 80097be:	e007      	b.n	80097d0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80097c0:	6839      	ldr	r1, [r7, #0]
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 fa41 	bl	8009c4a <USBD_CtlError>
          err++;
 80097c8:	7afb      	ldrb	r3, [r7, #11]
 80097ca:	3301      	adds	r3, #1
 80097cc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80097ce:	bf00      	nop
      }
      break;
 80097d0:	e037      	b.n	8009842 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	7c1b      	ldrb	r3, [r3, #16]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d109      	bne.n	80097ee <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097e2:	f107 0208 	add.w	r2, r7, #8
 80097e6:	4610      	mov	r0, r2
 80097e8:	4798      	blx	r3
 80097ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80097ec:	e029      	b.n	8009842 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80097ee:	6839      	ldr	r1, [r7, #0]
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 fa2a 	bl	8009c4a <USBD_CtlError>
        err++;
 80097f6:	7afb      	ldrb	r3, [r7, #11]
 80097f8:	3301      	adds	r3, #1
 80097fa:	72fb      	strb	r3, [r7, #11]
      break;
 80097fc:	e021      	b.n	8009842 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	7c1b      	ldrb	r3, [r3, #16]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d10d      	bne.n	8009822 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800980c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800980e:	f107 0208 	add.w	r2, r7, #8
 8009812:	4610      	mov	r0, r2
 8009814:	4798      	blx	r3
 8009816:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	3301      	adds	r3, #1
 800981c:	2207      	movs	r2, #7
 800981e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009820:	e00f      	b.n	8009842 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009822:	6839      	ldr	r1, [r7, #0]
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 fa10 	bl	8009c4a <USBD_CtlError>
        err++;
 800982a:	7afb      	ldrb	r3, [r7, #11]
 800982c:	3301      	adds	r3, #1
 800982e:	72fb      	strb	r3, [r7, #11]
      break;
 8009830:	e007      	b.n	8009842 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009832:	6839      	ldr	r1, [r7, #0]
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 fa08 	bl	8009c4a <USBD_CtlError>
      err++;
 800983a:	7afb      	ldrb	r3, [r7, #11]
 800983c:	3301      	adds	r3, #1
 800983e:	72fb      	strb	r3, [r7, #11]
      break;
 8009840:	bf00      	nop
  }

  if (err != 0U)
 8009842:	7afb      	ldrb	r3, [r7, #11]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d11e      	bne.n	8009886 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	88db      	ldrh	r3, [r3, #6]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d016      	beq.n	800987e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009850:	893b      	ldrh	r3, [r7, #8]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d00e      	beq.n	8009874 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	88da      	ldrh	r2, [r3, #6]
 800985a:	893b      	ldrh	r3, [r7, #8]
 800985c:	4293      	cmp	r3, r2
 800985e:	bf28      	it	cs
 8009860:	4613      	movcs	r3, r2
 8009862:	b29b      	uxth	r3, r3
 8009864:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009866:	893b      	ldrh	r3, [r7, #8]
 8009868:	461a      	mov	r2, r3
 800986a:	68f9      	ldr	r1, [r7, #12]
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 fa69 	bl	8009d44 <USBD_CtlSendData>
 8009872:	e009      	b.n	8009888 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009874:	6839      	ldr	r1, [r7, #0]
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 f9e7 	bl	8009c4a <USBD_CtlError>
 800987c:	e004      	b.n	8009888 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 faba 	bl	8009df8 <USBD_CtlSendStatus>
 8009884:	e000      	b.n	8009888 <USBD_GetDescriptor+0x2cc>
    return;
 8009886:	bf00      	nop
  }
}
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop

08009890 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	889b      	ldrh	r3, [r3, #4]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d131      	bne.n	8009906 <USBD_SetAddress+0x76>
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	88db      	ldrh	r3, [r3, #6]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d12d      	bne.n	8009906 <USBD_SetAddress+0x76>
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	885b      	ldrh	r3, [r3, #2]
 80098ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80098b0:	d829      	bhi.n	8009906 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	885b      	ldrh	r3, [r3, #2]
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	2b03      	cmp	r3, #3
 80098c8:	d104      	bne.n	80098d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80098ca:	6839      	ldr	r1, [r7, #0]
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 f9bc 	bl	8009c4a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098d2:	e01d      	b.n	8009910 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	7bfa      	ldrb	r2, [r7, #15]
 80098d8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80098dc:	7bfb      	ldrb	r3, [r7, #15]
 80098de:	4619      	mov	r1, r3
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 ff11 	bl	800a708 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fa86 	bl	8009df8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80098ec:	7bfb      	ldrb	r3, [r7, #15]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d004      	beq.n	80098fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2202      	movs	r2, #2
 80098f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098fa:	e009      	b.n	8009910 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2201      	movs	r2, #1
 8009900:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009904:	e004      	b.n	8009910 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009906:	6839      	ldr	r1, [r7, #0]
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 f99e 	bl	8009c4a <USBD_CtlError>
  }
}
 800990e:	bf00      	nop
 8009910:	bf00      	nop
 8009912:	3710      	adds	r7, #16
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009922:	2300      	movs	r3, #0
 8009924:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	885b      	ldrh	r3, [r3, #2]
 800992a:	b2da      	uxtb	r2, r3
 800992c:	4b4e      	ldr	r3, [pc, #312]	@ (8009a68 <USBD_SetConfig+0x150>)
 800992e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009930:	4b4d      	ldr	r3, [pc, #308]	@ (8009a68 <USBD_SetConfig+0x150>)
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	2b01      	cmp	r3, #1
 8009936:	d905      	bls.n	8009944 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009938:	6839      	ldr	r1, [r7, #0]
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 f985 	bl	8009c4a <USBD_CtlError>
    return USBD_FAIL;
 8009940:	2303      	movs	r3, #3
 8009942:	e08c      	b.n	8009a5e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800994a:	b2db      	uxtb	r3, r3
 800994c:	2b02      	cmp	r3, #2
 800994e:	d002      	beq.n	8009956 <USBD_SetConfig+0x3e>
 8009950:	2b03      	cmp	r3, #3
 8009952:	d029      	beq.n	80099a8 <USBD_SetConfig+0x90>
 8009954:	e075      	b.n	8009a42 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009956:	4b44      	ldr	r3, [pc, #272]	@ (8009a68 <USBD_SetConfig+0x150>)
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d020      	beq.n	80099a0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800995e:	4b42      	ldr	r3, [pc, #264]	@ (8009a68 <USBD_SetConfig+0x150>)
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	461a      	mov	r2, r3
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009968:	4b3f      	ldr	r3, [pc, #252]	@ (8009a68 <USBD_SetConfig+0x150>)
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	4619      	mov	r1, r3
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f7fe ffe3 	bl	800893a <USBD_SetClassConfig>
 8009974:	4603      	mov	r3, r0
 8009976:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009978:	7bfb      	ldrb	r3, [r7, #15]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d008      	beq.n	8009990 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800997e:	6839      	ldr	r1, [r7, #0]
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f962 	bl	8009c4a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2202      	movs	r2, #2
 800998a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800998e:	e065      	b.n	8009a5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 fa31 	bl	8009df8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2203      	movs	r2, #3
 800999a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800999e:	e05d      	b.n	8009a5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 fa29 	bl	8009df8 <USBD_CtlSendStatus>
      break;
 80099a6:	e059      	b.n	8009a5c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80099a8:	4b2f      	ldr	r3, [pc, #188]	@ (8009a68 <USBD_SetConfig+0x150>)
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d112      	bne.n	80099d6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2202      	movs	r2, #2
 80099b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80099b8:	4b2b      	ldr	r3, [pc, #172]	@ (8009a68 <USBD_SetConfig+0x150>)
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	461a      	mov	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80099c2:	4b29      	ldr	r3, [pc, #164]	@ (8009a68 <USBD_SetConfig+0x150>)
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	4619      	mov	r1, r3
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f7fe ffd2 	bl	8008972 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 fa12 	bl	8009df8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80099d4:	e042      	b.n	8009a5c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80099d6:	4b24      	ldr	r3, [pc, #144]	@ (8009a68 <USBD_SetConfig+0x150>)
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	461a      	mov	r2, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d02a      	beq.n	8009a3a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	4619      	mov	r1, r3
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f7fe ffc0 	bl	8008972 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80099f2:	4b1d      	ldr	r3, [pc, #116]	@ (8009a68 <USBD_SetConfig+0x150>)
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	461a      	mov	r2, r3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80099fc:	4b1a      	ldr	r3, [pc, #104]	@ (8009a68 <USBD_SetConfig+0x150>)
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	4619      	mov	r1, r3
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f7fe ff99 	bl	800893a <USBD_SetClassConfig>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009a0c:	7bfb      	ldrb	r3, [r7, #15]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00f      	beq.n	8009a32 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009a12:	6839      	ldr	r1, [r7, #0]
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 f918 	bl	8009c4a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	4619      	mov	r1, r3
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f7fe ffa5 	bl	8008972 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2202      	movs	r2, #2
 8009a2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009a30:	e014      	b.n	8009a5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 f9e0 	bl	8009df8 <USBD_CtlSendStatus>
      break;
 8009a38:	e010      	b.n	8009a5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 f9dc 	bl	8009df8 <USBD_CtlSendStatus>
      break;
 8009a40:	e00c      	b.n	8009a5c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009a42:	6839      	ldr	r1, [r7, #0]
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 f900 	bl	8009c4a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a4a:	4b07      	ldr	r3, [pc, #28]	@ (8009a68 <USBD_SetConfig+0x150>)
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	4619      	mov	r1, r3
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f7fe ff8e 	bl	8008972 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009a56:	2303      	movs	r3, #3
 8009a58:	73fb      	strb	r3, [r7, #15]
      break;
 8009a5a:	bf00      	nop
  }

  return ret;
 8009a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3710      	adds	r7, #16
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	20000728 	.word	0x20000728

08009a6c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	88db      	ldrh	r3, [r3, #6]
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	d004      	beq.n	8009a88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009a7e:	6839      	ldr	r1, [r7, #0]
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 f8e2 	bl	8009c4a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009a86:	e023      	b.n	8009ad0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	2b02      	cmp	r3, #2
 8009a92:	dc02      	bgt.n	8009a9a <USBD_GetConfig+0x2e>
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	dc03      	bgt.n	8009aa0 <USBD_GetConfig+0x34>
 8009a98:	e015      	b.n	8009ac6 <USBD_GetConfig+0x5a>
 8009a9a:	2b03      	cmp	r3, #3
 8009a9c:	d00b      	beq.n	8009ab6 <USBD_GetConfig+0x4a>
 8009a9e:	e012      	b.n	8009ac6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	3308      	adds	r3, #8
 8009aaa:	2201      	movs	r2, #1
 8009aac:	4619      	mov	r1, r3
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 f948 	bl	8009d44 <USBD_CtlSendData>
        break;
 8009ab4:	e00c      	b.n	8009ad0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	3304      	adds	r3, #4
 8009aba:	2201      	movs	r2, #1
 8009abc:	4619      	mov	r1, r3
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 f940 	bl	8009d44 <USBD_CtlSendData>
        break;
 8009ac4:	e004      	b.n	8009ad0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009ac6:	6839      	ldr	r1, [r7, #0]
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 f8be 	bl	8009c4a <USBD_CtlError>
        break;
 8009ace:	bf00      	nop
}
 8009ad0:	bf00      	nop
 8009ad2:	3708      	adds	r7, #8
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	3b01      	subs	r3, #1
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	d81e      	bhi.n	8009b2e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	88db      	ldrh	r3, [r3, #6]
 8009af4:	2b02      	cmp	r3, #2
 8009af6:	d004      	beq.n	8009b02 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009af8:	6839      	ldr	r1, [r7, #0]
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 f8a5 	bl	8009c4a <USBD_CtlError>
        break;
 8009b00:	e01a      	b.n	8009b38 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2201      	movs	r2, #1
 8009b06:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d005      	beq.n	8009b1e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	68db      	ldr	r3, [r3, #12]
 8009b16:	f043 0202 	orr.w	r2, r3, #2
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	330c      	adds	r3, #12
 8009b22:	2202      	movs	r2, #2
 8009b24:	4619      	mov	r1, r3
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f90c 	bl	8009d44 <USBD_CtlSendData>
      break;
 8009b2c:	e004      	b.n	8009b38 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009b2e:	6839      	ldr	r1, [r7, #0]
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 f88a 	bl	8009c4a <USBD_CtlError>
      break;
 8009b36:	bf00      	nop
  }
}
 8009b38:	bf00      	nop
 8009b3a:	3708      	adds	r7, #8
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	885b      	ldrh	r3, [r3, #2]
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d107      	bne.n	8009b62 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2201      	movs	r2, #1
 8009b56:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 f94c 	bl	8009df8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009b60:	e013      	b.n	8009b8a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	885b      	ldrh	r3, [r3, #2]
 8009b66:	2b02      	cmp	r3, #2
 8009b68:	d10b      	bne.n	8009b82 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	889b      	ldrh	r3, [r3, #4]
 8009b6e:	0a1b      	lsrs	r3, r3, #8
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	b2da      	uxtb	r2, r3
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 f93c 	bl	8009df8 <USBD_CtlSendStatus>
}
 8009b80:	e003      	b.n	8009b8a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009b82:	6839      	ldr	r1, [r7, #0]
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 f860 	bl	8009c4a <USBD_CtlError>
}
 8009b8a:	bf00      	nop
 8009b8c:	3708      	adds	r7, #8
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}

08009b92 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b082      	sub	sp, #8
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
 8009b9a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	d80b      	bhi.n	8009bc2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	885b      	ldrh	r3, [r3, #2]
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d10c      	bne.n	8009bcc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 f91c 	bl	8009df8 <USBD_CtlSendStatus>
      }
      break;
 8009bc0:	e004      	b.n	8009bcc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009bc2:	6839      	ldr	r1, [r7, #0]
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 f840 	bl	8009c4a <USBD_CtlError>
      break;
 8009bca:	e000      	b.n	8009bce <USBD_ClrFeature+0x3c>
      break;
 8009bcc:	bf00      	nop
  }
}
 8009bce:	bf00      	nop
 8009bd0:	3708      	adds	r7, #8
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b084      	sub	sp, #16
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
 8009bde:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	781a      	ldrb	r2, [r3, #0]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	3301      	adds	r3, #1
 8009bf0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	781a      	ldrb	r2, [r3, #0]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f7ff fa40 	bl	8009086 <SWAPBYTE>
 8009c06:	4603      	mov	r3, r0
 8009c08:	461a      	mov	r2, r3
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	3301      	adds	r3, #1
 8009c12:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	3301      	adds	r3, #1
 8009c18:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009c1a:	68f8      	ldr	r0, [r7, #12]
 8009c1c:	f7ff fa33 	bl	8009086 <SWAPBYTE>
 8009c20:	4603      	mov	r3, r0
 8009c22:	461a      	mov	r2, r3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	3301      	adds	r3, #1
 8009c32:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009c34:	68f8      	ldr	r0, [r7, #12]
 8009c36:	f7ff fa26 	bl	8009086 <SWAPBYTE>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	80da      	strh	r2, [r3, #6]
}
 8009c42:	bf00      	nop
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}

08009c4a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c4a:	b580      	push	{r7, lr}
 8009c4c:	b082      	sub	sp, #8
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
 8009c52:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c54:	2180      	movs	r1, #128	@ 0x80
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 fcec 	bl	800a634 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009c5c:	2100      	movs	r1, #0
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 fce8 	bl	800a634 <USBD_LL_StallEP>
}
 8009c64:	bf00      	nop
 8009c66:	3708      	adds	r7, #8
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b086      	sub	sp, #24
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d042      	beq.n	8009d08 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009c86:	6938      	ldr	r0, [r7, #16]
 8009c88:	f000 f842 	bl	8009d10 <USBD_GetLen>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	3301      	adds	r3, #1
 8009c90:	005b      	lsls	r3, r3, #1
 8009c92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c96:	d808      	bhi.n	8009caa <USBD_GetString+0x3e>
 8009c98:	6938      	ldr	r0, [r7, #16]
 8009c9a:	f000 f839 	bl	8009d10 <USBD_GetLen>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	005b      	lsls	r3, r3, #1
 8009ca6:	b29a      	uxth	r2, r3
 8009ca8:	e001      	b.n	8009cae <USBD_GetString+0x42>
 8009caa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009cb2:	7dfb      	ldrb	r3, [r7, #23]
 8009cb4:	68ba      	ldr	r2, [r7, #8]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	7812      	ldrb	r2, [r2, #0]
 8009cbc:	701a      	strb	r2, [r3, #0]
  idx++;
 8009cbe:	7dfb      	ldrb	r3, [r7, #23]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009cc4:	7dfb      	ldrb	r3, [r7, #23]
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	4413      	add	r3, r2
 8009cca:	2203      	movs	r2, #3
 8009ccc:	701a      	strb	r2, [r3, #0]
  idx++;
 8009cce:	7dfb      	ldrb	r3, [r7, #23]
 8009cd0:	3301      	adds	r3, #1
 8009cd2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009cd4:	e013      	b.n	8009cfe <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009cd6:	7dfb      	ldrb	r3, [r7, #23]
 8009cd8:	68ba      	ldr	r2, [r7, #8]
 8009cda:	4413      	add	r3, r2
 8009cdc:	693a      	ldr	r2, [r7, #16]
 8009cde:	7812      	ldrb	r2, [r2, #0]
 8009ce0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	613b      	str	r3, [r7, #16]
    idx++;
 8009ce8:	7dfb      	ldrb	r3, [r7, #23]
 8009cea:	3301      	adds	r3, #1
 8009cec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009cee:	7dfb      	ldrb	r3, [r7, #23]
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	701a      	strb	r2, [r3, #0]
    idx++;
 8009cf8:	7dfb      	ldrb	r3, [r7, #23]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d1e7      	bne.n	8009cd6 <USBD_GetString+0x6a>
 8009d06:	e000      	b.n	8009d0a <USBD_GetString+0x9e>
    return;
 8009d08:	bf00      	nop
  }
}
 8009d0a:	3718      	adds	r7, #24
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b085      	sub	sp, #20
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009d20:	e005      	b.n	8009d2e <USBD_GetLen+0x1e>
  {
    len++;
 8009d22:	7bfb      	ldrb	r3, [r7, #15]
 8009d24:	3301      	adds	r3, #1
 8009d26:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d1f5      	bne.n	8009d22 <USBD_GetLen+0x12>
  }

  return len;
 8009d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3714      	adds	r7, #20
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	60b9      	str	r1, [r7, #8]
 8009d4e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2202      	movs	r2, #2
 8009d54:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	68ba      	ldr	r2, [r7, #8]
 8009d68:	2100      	movs	r1, #0
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f000 fceb 	bl	800a746 <USBD_LL_Transmit>

  return USBD_OK;
 8009d70:	2300      	movs	r3, #0
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3710      	adds	r7, #16
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b084      	sub	sp, #16
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	60f8      	str	r0, [r7, #12]
 8009d82:	60b9      	str	r1, [r7, #8]
 8009d84:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	68ba      	ldr	r2, [r7, #8]
 8009d8a:	2100      	movs	r1, #0
 8009d8c:	68f8      	ldr	r0, [r7, #12]
 8009d8e:	f000 fcda 	bl	800a746 <USBD_LL_Transmit>

  return USBD_OK;
 8009d92:	2300      	movs	r3, #0
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3710      	adds	r7, #16
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2203      	movs	r2, #3
 8009dac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	68ba      	ldr	r2, [r7, #8]
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	68f8      	ldr	r0, [r7, #12]
 8009dc8:	f000 fcde 	bl	800a788 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009dcc:	2300      	movs	r3, #0
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3710      	adds	r7, #16
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}

08009dd6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009dd6:	b580      	push	{r7, lr}
 8009dd8:	b084      	sub	sp, #16
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	60f8      	str	r0, [r7, #12]
 8009dde:	60b9      	str	r1, [r7, #8]
 8009de0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	68ba      	ldr	r2, [r7, #8]
 8009de6:	2100      	movs	r1, #0
 8009de8:	68f8      	ldr	r0, [r7, #12]
 8009dea:	f000 fccd 	bl	800a788 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009dee:	2300      	movs	r3, #0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3710      	adds	r7, #16
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2204      	movs	r2, #4
 8009e04:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009e08:	2300      	movs	r3, #0
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 fc99 	bl	800a746 <USBD_LL_Transmit>

  return USBD_OK;
 8009e14:	2300      	movs	r3, #0
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3708      	adds	r7, #8
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b082      	sub	sp, #8
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2205      	movs	r2, #5
 8009e2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e2e:	2300      	movs	r3, #0
 8009e30:	2200      	movs	r2, #0
 8009e32:	2100      	movs	r1, #0
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 fca7 	bl	800a788 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3708      	adds	r7, #8
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009e48:	2200      	movs	r2, #0
 8009e4a:	4912      	ldr	r1, [pc, #72]	@ (8009e94 <MX_USB_DEVICE_Init+0x50>)
 8009e4c:	4812      	ldr	r0, [pc, #72]	@ (8009e98 <MX_USB_DEVICE_Init+0x54>)
 8009e4e:	f7fe fcf7 	bl	8008840 <USBD_Init>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d001      	beq.n	8009e5c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009e58:	f7f7 fb8c 	bl	8001574 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009e5c:	490f      	ldr	r1, [pc, #60]	@ (8009e9c <MX_USB_DEVICE_Init+0x58>)
 8009e5e:	480e      	ldr	r0, [pc, #56]	@ (8009e98 <MX_USB_DEVICE_Init+0x54>)
 8009e60:	f7fe fd1e 	bl	80088a0 <USBD_RegisterClass>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d001      	beq.n	8009e6e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009e6a:	f7f7 fb83 	bl	8001574 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009e6e:	490c      	ldr	r1, [pc, #48]	@ (8009ea0 <MX_USB_DEVICE_Init+0x5c>)
 8009e70:	4809      	ldr	r0, [pc, #36]	@ (8009e98 <MX_USB_DEVICE_Init+0x54>)
 8009e72:	f7fe fc15 	bl	80086a0 <USBD_CDC_RegisterInterface>
 8009e76:	4603      	mov	r3, r0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d001      	beq.n	8009e80 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009e7c:	f7f7 fb7a 	bl	8001574 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009e80:	4805      	ldr	r0, [pc, #20]	@ (8009e98 <MX_USB_DEVICE_Init+0x54>)
 8009e82:	f7fe fd43 	bl	800890c <USBD_Start>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d001      	beq.n	8009e90 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009e8c:	f7f7 fb72 	bl	8001574 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009e90:	bf00      	nop
 8009e92:	bd80      	pop	{r7, pc}
 8009e94:	200000ac 	.word	0x200000ac
 8009e98:	2000072c 	.word	0x2000072c
 8009e9c:	20000018 	.word	0x20000018
 8009ea0:	20000098 	.word	0x20000098

08009ea4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	4905      	ldr	r1, [pc, #20]	@ (8009ec0 <CDC_Init_FS+0x1c>)
 8009eac:	4805      	ldr	r0, [pc, #20]	@ (8009ec4 <CDC_Init_FS+0x20>)
 8009eae:	f7fe fc11 	bl	80086d4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009eb2:	4905      	ldr	r1, [pc, #20]	@ (8009ec8 <CDC_Init_FS+0x24>)
 8009eb4:	4803      	ldr	r0, [pc, #12]	@ (8009ec4 <CDC_Init_FS+0x20>)
 8009eb6:	f7fe fc2f 	bl	8008718 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009eba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	20001208 	.word	0x20001208
 8009ec4:	2000072c 	.word	0x2000072c
 8009ec8:	20000a08 	.word	0x20000a08

08009ecc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009ed0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	6039      	str	r1, [r7, #0]
 8009ee6:	71fb      	strb	r3, [r7, #7]
 8009ee8:	4613      	mov	r3, r2
 8009eea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009eec:	79fb      	ldrb	r3, [r7, #7]
 8009eee:	2b23      	cmp	r3, #35	@ 0x23
 8009ef0:	d84a      	bhi.n	8009f88 <CDC_Control_FS+0xac>
 8009ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ef8 <CDC_Control_FS+0x1c>)
 8009ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef8:	08009f89 	.word	0x08009f89
 8009efc:	08009f89 	.word	0x08009f89
 8009f00:	08009f89 	.word	0x08009f89
 8009f04:	08009f89 	.word	0x08009f89
 8009f08:	08009f89 	.word	0x08009f89
 8009f0c:	08009f89 	.word	0x08009f89
 8009f10:	08009f89 	.word	0x08009f89
 8009f14:	08009f89 	.word	0x08009f89
 8009f18:	08009f89 	.word	0x08009f89
 8009f1c:	08009f89 	.word	0x08009f89
 8009f20:	08009f89 	.word	0x08009f89
 8009f24:	08009f89 	.word	0x08009f89
 8009f28:	08009f89 	.word	0x08009f89
 8009f2c:	08009f89 	.word	0x08009f89
 8009f30:	08009f89 	.word	0x08009f89
 8009f34:	08009f89 	.word	0x08009f89
 8009f38:	08009f89 	.word	0x08009f89
 8009f3c:	08009f89 	.word	0x08009f89
 8009f40:	08009f89 	.word	0x08009f89
 8009f44:	08009f89 	.word	0x08009f89
 8009f48:	08009f89 	.word	0x08009f89
 8009f4c:	08009f89 	.word	0x08009f89
 8009f50:	08009f89 	.word	0x08009f89
 8009f54:	08009f89 	.word	0x08009f89
 8009f58:	08009f89 	.word	0x08009f89
 8009f5c:	08009f89 	.word	0x08009f89
 8009f60:	08009f89 	.word	0x08009f89
 8009f64:	08009f89 	.word	0x08009f89
 8009f68:	08009f89 	.word	0x08009f89
 8009f6c:	08009f89 	.word	0x08009f89
 8009f70:	08009f89 	.word	0x08009f89
 8009f74:	08009f89 	.word	0x08009f89
 8009f78:	08009f89 	.word	0x08009f89
 8009f7c:	08009f89 	.word	0x08009f89
 8009f80:	08009f89 	.word	0x08009f89
 8009f84:	08009f89 	.word	0x08009f89
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009f88:	bf00      	nop
  }

  return (USBD_OK);
 8009f8a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	370c      	adds	r7, #12
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr

08009f98 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009fa2:	6879      	ldr	r1, [r7, #4]
 8009fa4:	4805      	ldr	r0, [pc, #20]	@ (8009fbc <CDC_Receive_FS+0x24>)
 8009fa6:	f7fe fbb7 	bl	8008718 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009faa:	4804      	ldr	r0, [pc, #16]	@ (8009fbc <CDC_Receive_FS+0x24>)
 8009fac:	f7fe fc12 	bl	80087d4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009fb0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3708      	adds	r7, #8
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	2000072c 	.word	0x2000072c

08009fc0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	460b      	mov	r3, r1
 8009fca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009fd0:	4b0d      	ldr	r3, [pc, #52]	@ (800a008 <CDC_Transmit_FS+0x48>)
 8009fd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009fd6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d001      	beq.n	8009fe6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e00b      	b.n	8009ffe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009fe6:	887b      	ldrh	r3, [r7, #2]
 8009fe8:	461a      	mov	r2, r3
 8009fea:	6879      	ldr	r1, [r7, #4]
 8009fec:	4806      	ldr	r0, [pc, #24]	@ (800a008 <CDC_Transmit_FS+0x48>)
 8009fee:	f7fe fb71 	bl	80086d4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009ff2:	4805      	ldr	r0, [pc, #20]	@ (800a008 <CDC_Transmit_FS+0x48>)
 8009ff4:	f7fe fbae 	bl	8008754 <USBD_CDC_TransmitPacket>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3710      	adds	r7, #16
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	2000072c 	.word	0x2000072c

0800a00c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b087      	sub	sp, #28
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	4613      	mov	r3, r2
 800a018:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a01a:	2300      	movs	r3, #0
 800a01c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a01e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a022:	4618      	mov	r0, r3
 800a024:	371c      	adds	r7, #28
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr
	...

0800a030 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	4603      	mov	r3, r0
 800a038:	6039      	str	r1, [r7, #0]
 800a03a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	2212      	movs	r2, #18
 800a040:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a042:	4b03      	ldr	r3, [pc, #12]	@ (800a050 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a044:	4618      	mov	r0, r3
 800a046:	370c      	adds	r7, #12
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr
 800a050:	200000c8 	.word	0x200000c8

0800a054 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a054:	b480      	push	{r7}
 800a056:	b083      	sub	sp, #12
 800a058:	af00      	add	r7, sp, #0
 800a05a:	4603      	mov	r3, r0
 800a05c:	6039      	str	r1, [r7, #0]
 800a05e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	2204      	movs	r2, #4
 800a064:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a066:	4b03      	ldr	r3, [pc, #12]	@ (800a074 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a068:	4618      	mov	r0, r3
 800a06a:	370c      	adds	r7, #12
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr
 800a074:	200000dc 	.word	0x200000dc

0800a078 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	4603      	mov	r3, r0
 800a080:	6039      	str	r1, [r7, #0]
 800a082:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a084:	79fb      	ldrb	r3, [r7, #7]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d105      	bne.n	800a096 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a08a:	683a      	ldr	r2, [r7, #0]
 800a08c:	4907      	ldr	r1, [pc, #28]	@ (800a0ac <USBD_FS_ProductStrDescriptor+0x34>)
 800a08e:	4808      	ldr	r0, [pc, #32]	@ (800a0b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a090:	f7ff fdec 	bl	8009c6c <USBD_GetString>
 800a094:	e004      	b.n	800a0a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a096:	683a      	ldr	r2, [r7, #0]
 800a098:	4904      	ldr	r1, [pc, #16]	@ (800a0ac <USBD_FS_ProductStrDescriptor+0x34>)
 800a09a:	4805      	ldr	r0, [pc, #20]	@ (800a0b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a09c:	f7ff fde6 	bl	8009c6c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0a0:	4b02      	ldr	r3, [pc, #8]	@ (800a0ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3708      	adds	r7, #8
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	20001a08 	.word	0x20001a08
 800a0b0:	0800b2e4 	.word	0x0800b2e4

0800a0b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	6039      	str	r1, [r7, #0]
 800a0be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a0c0:	683a      	ldr	r2, [r7, #0]
 800a0c2:	4904      	ldr	r1, [pc, #16]	@ (800a0d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a0c4:	4804      	ldr	r0, [pc, #16]	@ (800a0d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a0c6:	f7ff fdd1 	bl	8009c6c <USBD_GetString>
  return USBD_StrDesc;
 800a0ca:	4b02      	ldr	r3, [pc, #8]	@ (800a0d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3708      	adds	r7, #8
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	20001a08 	.word	0x20001a08
 800a0d8:	0800b2fc 	.word	0x0800b2fc

0800a0dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	6039      	str	r1, [r7, #0]
 800a0e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	221a      	movs	r2, #26
 800a0ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a0ee:	f000 f843 	bl	800a178 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a0f2:	4b02      	ldr	r3, [pc, #8]	@ (800a0fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3708      	adds	r7, #8
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	200000e0 	.word	0x200000e0

0800a100 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b082      	sub	sp, #8
 800a104:	af00      	add	r7, sp, #0
 800a106:	4603      	mov	r3, r0
 800a108:	6039      	str	r1, [r7, #0]
 800a10a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a10c:	79fb      	ldrb	r3, [r7, #7]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d105      	bne.n	800a11e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a112:	683a      	ldr	r2, [r7, #0]
 800a114:	4907      	ldr	r1, [pc, #28]	@ (800a134 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a116:	4808      	ldr	r0, [pc, #32]	@ (800a138 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a118:	f7ff fda8 	bl	8009c6c <USBD_GetString>
 800a11c:	e004      	b.n	800a128 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a11e:	683a      	ldr	r2, [r7, #0]
 800a120:	4904      	ldr	r1, [pc, #16]	@ (800a134 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a122:	4805      	ldr	r0, [pc, #20]	@ (800a138 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a124:	f7ff fda2 	bl	8009c6c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a128:	4b02      	ldr	r3, [pc, #8]	@ (800a134 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3708      	adds	r7, #8
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	20001a08 	.word	0x20001a08
 800a138:	0800b310 	.word	0x0800b310

0800a13c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	4603      	mov	r3, r0
 800a144:	6039      	str	r1, [r7, #0]
 800a146:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a148:	79fb      	ldrb	r3, [r7, #7]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d105      	bne.n	800a15a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a14e:	683a      	ldr	r2, [r7, #0]
 800a150:	4907      	ldr	r1, [pc, #28]	@ (800a170 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a152:	4808      	ldr	r0, [pc, #32]	@ (800a174 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a154:	f7ff fd8a 	bl	8009c6c <USBD_GetString>
 800a158:	e004      	b.n	800a164 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a15a:	683a      	ldr	r2, [r7, #0]
 800a15c:	4904      	ldr	r1, [pc, #16]	@ (800a170 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a15e:	4805      	ldr	r0, [pc, #20]	@ (800a174 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a160:	f7ff fd84 	bl	8009c6c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a164:	4b02      	ldr	r3, [pc, #8]	@ (800a170 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a166:	4618      	mov	r0, r3
 800a168:	3708      	adds	r7, #8
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	20001a08 	.word	0x20001a08
 800a174:	0800b31c 	.word	0x0800b31c

0800a178 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a17e:	4b0f      	ldr	r3, [pc, #60]	@ (800a1bc <Get_SerialNum+0x44>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a184:	4b0e      	ldr	r3, [pc, #56]	@ (800a1c0 <Get_SerialNum+0x48>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a18a:	4b0e      	ldr	r3, [pc, #56]	@ (800a1c4 <Get_SerialNum+0x4c>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a190:	68fa      	ldr	r2, [r7, #12]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4413      	add	r3, r2
 800a196:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d009      	beq.n	800a1b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a19e:	2208      	movs	r2, #8
 800a1a0:	4909      	ldr	r1, [pc, #36]	@ (800a1c8 <Get_SerialNum+0x50>)
 800a1a2:	68f8      	ldr	r0, [r7, #12]
 800a1a4:	f000 f814 	bl	800a1d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a1a8:	2204      	movs	r2, #4
 800a1aa:	4908      	ldr	r1, [pc, #32]	@ (800a1cc <Get_SerialNum+0x54>)
 800a1ac:	68b8      	ldr	r0, [r7, #8]
 800a1ae:	f000 f80f 	bl	800a1d0 <IntToUnicode>
  }
}
 800a1b2:	bf00      	nop
 800a1b4:	3710      	adds	r7, #16
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	1fff7a10 	.word	0x1fff7a10
 800a1c0:	1fff7a14 	.word	0x1fff7a14
 800a1c4:	1fff7a18 	.word	0x1fff7a18
 800a1c8:	200000e2 	.word	0x200000e2
 800a1cc:	200000f2 	.word	0x200000f2

0800a1d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b087      	sub	sp, #28
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	75fb      	strb	r3, [r7, #23]
 800a1e6:	e027      	b.n	800a238 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	0f1b      	lsrs	r3, r3, #28
 800a1ec:	2b09      	cmp	r3, #9
 800a1ee:	d80b      	bhi.n	800a208 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	0f1b      	lsrs	r3, r3, #28
 800a1f4:	b2da      	uxtb	r2, r3
 800a1f6:	7dfb      	ldrb	r3, [r7, #23]
 800a1f8:	005b      	lsls	r3, r3, #1
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	440b      	add	r3, r1
 800a200:	3230      	adds	r2, #48	@ 0x30
 800a202:	b2d2      	uxtb	r2, r2
 800a204:	701a      	strb	r2, [r3, #0]
 800a206:	e00a      	b.n	800a21e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	0f1b      	lsrs	r3, r3, #28
 800a20c:	b2da      	uxtb	r2, r3
 800a20e:	7dfb      	ldrb	r3, [r7, #23]
 800a210:	005b      	lsls	r3, r3, #1
 800a212:	4619      	mov	r1, r3
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	440b      	add	r3, r1
 800a218:	3237      	adds	r2, #55	@ 0x37
 800a21a:	b2d2      	uxtb	r2, r2
 800a21c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	011b      	lsls	r3, r3, #4
 800a222:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a224:	7dfb      	ldrb	r3, [r7, #23]
 800a226:	005b      	lsls	r3, r3, #1
 800a228:	3301      	adds	r3, #1
 800a22a:	68ba      	ldr	r2, [r7, #8]
 800a22c:	4413      	add	r3, r2
 800a22e:	2200      	movs	r2, #0
 800a230:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a232:	7dfb      	ldrb	r3, [r7, #23]
 800a234:	3301      	adds	r3, #1
 800a236:	75fb      	strb	r3, [r7, #23]
 800a238:	7dfa      	ldrb	r2, [r7, #23]
 800a23a:	79fb      	ldrb	r3, [r7, #7]
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d3d3      	bcc.n	800a1e8 <IntToUnicode+0x18>
  }
}
 800a240:	bf00      	nop
 800a242:	bf00      	nop
 800a244:	371c      	adds	r7, #28
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
	...

0800a250 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b08a      	sub	sp, #40	@ 0x28
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a258:	f107 0314 	add.w	r3, r7, #20
 800a25c:	2200      	movs	r2, #0
 800a25e:	601a      	str	r2, [r3, #0]
 800a260:	605a      	str	r2, [r3, #4]
 800a262:	609a      	str	r2, [r3, #8]
 800a264:	60da      	str	r2, [r3, #12]
 800a266:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a270:	d13a      	bne.n	800a2e8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a272:	2300      	movs	r3, #0
 800a274:	613b      	str	r3, [r7, #16]
 800a276:	4b1e      	ldr	r3, [pc, #120]	@ (800a2f0 <HAL_PCD_MspInit+0xa0>)
 800a278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a27a:	4a1d      	ldr	r2, [pc, #116]	@ (800a2f0 <HAL_PCD_MspInit+0xa0>)
 800a27c:	f043 0301 	orr.w	r3, r3, #1
 800a280:	6313      	str	r3, [r2, #48]	@ 0x30
 800a282:	4b1b      	ldr	r3, [pc, #108]	@ (800a2f0 <HAL_PCD_MspInit+0xa0>)
 800a284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a286:	f003 0301 	and.w	r3, r3, #1
 800a28a:	613b      	str	r3, [r7, #16]
 800a28c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a28e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a294:	2302      	movs	r3, #2
 800a296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a298:	2300      	movs	r3, #0
 800a29a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a29c:	2303      	movs	r3, #3
 800a29e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a2a0:	230a      	movs	r3, #10
 800a2a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a2a4:	f107 0314 	add.w	r3, r7, #20
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	4812      	ldr	r0, [pc, #72]	@ (800a2f4 <HAL_PCD_MspInit+0xa4>)
 800a2ac:	f7f8 f87e 	bl	80023ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a2b0:	4b0f      	ldr	r3, [pc, #60]	@ (800a2f0 <HAL_PCD_MspInit+0xa0>)
 800a2b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2b4:	4a0e      	ldr	r2, [pc, #56]	@ (800a2f0 <HAL_PCD_MspInit+0xa0>)
 800a2b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2ba:	6353      	str	r3, [r2, #52]	@ 0x34
 800a2bc:	2300      	movs	r3, #0
 800a2be:	60fb      	str	r3, [r7, #12]
 800a2c0:	4b0b      	ldr	r3, [pc, #44]	@ (800a2f0 <HAL_PCD_MspInit+0xa0>)
 800a2c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2c4:	4a0a      	ldr	r2, [pc, #40]	@ (800a2f0 <HAL_PCD_MspInit+0xa0>)
 800a2c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a2ca:	6453      	str	r3, [r2, #68]	@ 0x44
 800a2cc:	4b08      	ldr	r3, [pc, #32]	@ (800a2f0 <HAL_PCD_MspInit+0xa0>)
 800a2ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a2d4:	60fb      	str	r3, [r7, #12]
 800a2d6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a2d8:	2200      	movs	r2, #0
 800a2da:	2100      	movs	r1, #0
 800a2dc:	2043      	movs	r0, #67	@ 0x43
 800a2de:	f7f7 fc82 	bl	8001be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a2e2:	2043      	movs	r0, #67	@ 0x43
 800a2e4:	f7f7 fc9b 	bl	8001c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a2e8:	bf00      	nop
 800a2ea:	3728      	adds	r7, #40	@ 0x28
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	40023800 	.word	0x40023800
 800a2f4:	40020000 	.word	0x40020000

0800a2f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a30c:	4619      	mov	r1, r3
 800a30e:	4610      	mov	r0, r2
 800a310:	f7fe fb49 	bl	80089a6 <USBD_LL_SetupStage>
}
 800a314:	bf00      	nop
 800a316:	3708      	adds	r7, #8
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	460b      	mov	r3, r1
 800a326:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a32e:	78fa      	ldrb	r2, [r7, #3]
 800a330:	6879      	ldr	r1, [r7, #4]
 800a332:	4613      	mov	r3, r2
 800a334:	00db      	lsls	r3, r3, #3
 800a336:	4413      	add	r3, r2
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	440b      	add	r3, r1
 800a33c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	78fb      	ldrb	r3, [r7, #3]
 800a344:	4619      	mov	r1, r3
 800a346:	f7fe fb83 	bl	8008a50 <USBD_LL_DataOutStage>
}
 800a34a:	bf00      	nop
 800a34c:	3708      	adds	r7, #8
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b082      	sub	sp, #8
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
 800a35a:	460b      	mov	r3, r1
 800a35c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a364:	78fa      	ldrb	r2, [r7, #3]
 800a366:	6879      	ldr	r1, [r7, #4]
 800a368:	4613      	mov	r3, r2
 800a36a:	00db      	lsls	r3, r3, #3
 800a36c:	4413      	add	r3, r2
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	440b      	add	r3, r1
 800a372:	3320      	adds	r3, #32
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	78fb      	ldrb	r3, [r7, #3]
 800a378:	4619      	mov	r1, r3
 800a37a:	f7fe fc1c 	bl	8008bb6 <USBD_LL_DataInStage>
}
 800a37e:	bf00      	nop
 800a380:	3708      	adds	r7, #8
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}

0800a386 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a386:	b580      	push	{r7, lr}
 800a388:	b082      	sub	sp, #8
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a394:	4618      	mov	r0, r3
 800a396:	f7fe fd56 	bl	8008e46 <USBD_LL_SOF>
}
 800a39a:	bf00      	nop
 800a39c:	3708      	adds	r7, #8
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b084      	sub	sp, #16
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	79db      	ldrb	r3, [r3, #7]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d102      	bne.n	800a3bc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	73fb      	strb	r3, [r7, #15]
 800a3ba:	e008      	b.n	800a3ce <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	79db      	ldrb	r3, [r3, #7]
 800a3c0:	2b02      	cmp	r3, #2
 800a3c2:	d102      	bne.n	800a3ca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	73fb      	strb	r3, [r7, #15]
 800a3c8:	e001      	b.n	800a3ce <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a3ca:	f7f7 f8d3 	bl	8001574 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a3d4:	7bfa      	ldrb	r2, [r7, #15]
 800a3d6:	4611      	mov	r1, r2
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7fe fcf0 	bl	8008dbe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7fe fc98 	bl	8008d1a <USBD_LL_Reset>
}
 800a3ea:	bf00      	nop
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
	...

0800a3f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a402:	4618      	mov	r0, r3
 800a404:	f7fe fceb 	bl	8008dde <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	6812      	ldr	r2, [r2, #0]
 800a416:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a41a:	f043 0301 	orr.w	r3, r3, #1
 800a41e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	7adb      	ldrb	r3, [r3, #11]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d005      	beq.n	800a434 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a428:	4b04      	ldr	r3, [pc, #16]	@ (800a43c <HAL_PCD_SuspendCallback+0x48>)
 800a42a:	691b      	ldr	r3, [r3, #16]
 800a42c:	4a03      	ldr	r2, [pc, #12]	@ (800a43c <HAL_PCD_SuspendCallback+0x48>)
 800a42e:	f043 0306 	orr.w	r3, r3, #6
 800a432:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a434:	bf00      	nop
 800a436:	3708      	adds	r7, #8
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	e000ed00 	.word	0xe000ed00

0800a440 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a44e:	4618      	mov	r0, r3
 800a450:	f7fe fce1 	bl	8008e16 <USBD_LL_Resume>
}
 800a454:	bf00      	nop
 800a456:	3708      	adds	r7, #8
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	460b      	mov	r3, r1
 800a466:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a46e:	78fa      	ldrb	r2, [r7, #3]
 800a470:	4611      	mov	r1, r2
 800a472:	4618      	mov	r0, r3
 800a474:	f7fe fd39 	bl	8008eea <USBD_LL_IsoOUTIncomplete>
}
 800a478:	bf00      	nop
 800a47a:	3708      	adds	r7, #8
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	460b      	mov	r3, r1
 800a48a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a492:	78fa      	ldrb	r2, [r7, #3]
 800a494:	4611      	mov	r1, r2
 800a496:	4618      	mov	r0, r3
 800a498:	f7fe fcf5 	bl	8008e86 <USBD_LL_IsoINIncomplete>
}
 800a49c:	bf00      	nop
 800a49e:	3708      	adds	r7, #8
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7fe fd4b 	bl	8008f4e <USBD_LL_DevConnected>
}
 800a4b8:	bf00      	nop
 800a4ba:	3708      	adds	r7, #8
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7fe fd48 	bl	8008f64 <USBD_LL_DevDisconnected>
}
 800a4d4:	bf00      	nop
 800a4d6:	3708      	adds	r7, #8
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d13c      	bne.n	800a566 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a4ec:	4a20      	ldr	r2, [pc, #128]	@ (800a570 <USBD_LL_Init+0x94>)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	4a1e      	ldr	r2, [pc, #120]	@ (800a570 <USBD_LL_Init+0x94>)
 800a4f8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a4fc:	4b1c      	ldr	r3, [pc, #112]	@ (800a570 <USBD_LL_Init+0x94>)
 800a4fe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a502:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a504:	4b1a      	ldr	r3, [pc, #104]	@ (800a570 <USBD_LL_Init+0x94>)
 800a506:	2204      	movs	r2, #4
 800a508:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a50a:	4b19      	ldr	r3, [pc, #100]	@ (800a570 <USBD_LL_Init+0x94>)
 800a50c:	2202      	movs	r2, #2
 800a50e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a510:	4b17      	ldr	r3, [pc, #92]	@ (800a570 <USBD_LL_Init+0x94>)
 800a512:	2200      	movs	r2, #0
 800a514:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a516:	4b16      	ldr	r3, [pc, #88]	@ (800a570 <USBD_LL_Init+0x94>)
 800a518:	2202      	movs	r2, #2
 800a51a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a51c:	4b14      	ldr	r3, [pc, #80]	@ (800a570 <USBD_LL_Init+0x94>)
 800a51e:	2200      	movs	r2, #0
 800a520:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a522:	4b13      	ldr	r3, [pc, #76]	@ (800a570 <USBD_LL_Init+0x94>)
 800a524:	2200      	movs	r2, #0
 800a526:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a528:	4b11      	ldr	r3, [pc, #68]	@ (800a570 <USBD_LL_Init+0x94>)
 800a52a:	2200      	movs	r2, #0
 800a52c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a52e:	4b10      	ldr	r3, [pc, #64]	@ (800a570 <USBD_LL_Init+0x94>)
 800a530:	2200      	movs	r2, #0
 800a532:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a534:	4b0e      	ldr	r3, [pc, #56]	@ (800a570 <USBD_LL_Init+0x94>)
 800a536:	2200      	movs	r2, #0
 800a538:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a53a:	480d      	ldr	r0, [pc, #52]	@ (800a570 <USBD_LL_Init+0x94>)
 800a53c:	f7fa fa91 	bl	8004a62 <HAL_PCD_Init>
 800a540:	4603      	mov	r3, r0
 800a542:	2b00      	cmp	r3, #0
 800a544:	d001      	beq.n	800a54a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a546:	f7f7 f815 	bl	8001574 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a54a:	2180      	movs	r1, #128	@ 0x80
 800a54c:	4808      	ldr	r0, [pc, #32]	@ (800a570 <USBD_LL_Init+0x94>)
 800a54e:	f7fb fcbe 	bl	8005ece <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a552:	2240      	movs	r2, #64	@ 0x40
 800a554:	2100      	movs	r1, #0
 800a556:	4806      	ldr	r0, [pc, #24]	@ (800a570 <USBD_LL_Init+0x94>)
 800a558:	f7fb fc72 	bl	8005e40 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a55c:	2280      	movs	r2, #128	@ 0x80
 800a55e:	2101      	movs	r1, #1
 800a560:	4803      	ldr	r0, [pc, #12]	@ (800a570 <USBD_LL_Init+0x94>)
 800a562:	f7fb fc6d 	bl	8005e40 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a566:	2300      	movs	r3, #0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3708      	adds	r7, #8
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	20001c08 	.word	0x20001c08

0800a574 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a57c:	2300      	movs	r3, #0
 800a57e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a580:	2300      	movs	r3, #0
 800a582:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a58a:	4618      	mov	r0, r3
 800a58c:	f7fa fb78 	bl	8004c80 <HAL_PCD_Start>
 800a590:	4603      	mov	r3, r0
 800a592:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a594:	7bfb      	ldrb	r3, [r7, #15]
 800a596:	4618      	mov	r0, r3
 800a598:	f000 f942 	bl	800a820 <USBD_Get_USB_Status>
 800a59c:	4603      	mov	r3, r0
 800a59e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3710      	adds	r7, #16
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b084      	sub	sp, #16
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
 800a5b2:	4608      	mov	r0, r1
 800a5b4:	4611      	mov	r1, r2
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	70fb      	strb	r3, [r7, #3]
 800a5bc:	460b      	mov	r3, r1
 800a5be:	70bb      	strb	r3, [r7, #2]
 800a5c0:	4613      	mov	r3, r2
 800a5c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a5d2:	78bb      	ldrb	r3, [r7, #2]
 800a5d4:	883a      	ldrh	r2, [r7, #0]
 800a5d6:	78f9      	ldrb	r1, [r7, #3]
 800a5d8:	f7fb f84c 	bl	8005674 <HAL_PCD_EP_Open>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5e0:	7bfb      	ldrb	r3, [r7, #15]
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f000 f91c 	bl	800a820 <USBD_Get_USB_Status>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}

0800a5f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5f6:	b580      	push	{r7, lr}
 800a5f8:	b084      	sub	sp, #16
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
 800a5fe:	460b      	mov	r3, r1
 800a600:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a602:	2300      	movs	r3, #0
 800a604:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a606:	2300      	movs	r3, #0
 800a608:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a610:	78fa      	ldrb	r2, [r7, #3]
 800a612:	4611      	mov	r1, r2
 800a614:	4618      	mov	r0, r3
 800a616:	f7fb f897 	bl	8005748 <HAL_PCD_EP_Close>
 800a61a:	4603      	mov	r3, r0
 800a61c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a61e:	7bfb      	ldrb	r3, [r7, #15]
 800a620:	4618      	mov	r0, r3
 800a622:	f000 f8fd 	bl	800a820 <USBD_Get_USB_Status>
 800a626:	4603      	mov	r3, r0
 800a628:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a62a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	460b      	mov	r3, r1
 800a63e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a640:	2300      	movs	r3, #0
 800a642:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a644:	2300      	movs	r3, #0
 800a646:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a64e:	78fa      	ldrb	r2, [r7, #3]
 800a650:	4611      	mov	r1, r2
 800a652:	4618      	mov	r0, r3
 800a654:	f7fb f94f 	bl	80058f6 <HAL_PCD_EP_SetStall>
 800a658:	4603      	mov	r3, r0
 800a65a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a65c:	7bfb      	ldrb	r3, [r7, #15]
 800a65e:	4618      	mov	r0, r3
 800a660:	f000 f8de 	bl	800a820 <USBD_Get_USB_Status>
 800a664:	4603      	mov	r3, r0
 800a666:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a668:	7bbb      	ldrb	r3, [r7, #14]
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3710      	adds	r7, #16
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}

0800a672 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a672:	b580      	push	{r7, lr}
 800a674:	b084      	sub	sp, #16
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
 800a67a:	460b      	mov	r3, r1
 800a67c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a67e:	2300      	movs	r3, #0
 800a680:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a682:	2300      	movs	r3, #0
 800a684:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a68c:	78fa      	ldrb	r2, [r7, #3]
 800a68e:	4611      	mov	r1, r2
 800a690:	4618      	mov	r0, r3
 800a692:	f7fb f993 	bl	80059bc <HAL_PCD_EP_ClrStall>
 800a696:	4603      	mov	r3, r0
 800a698:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a69a:	7bfb      	ldrb	r3, [r7, #15]
 800a69c:	4618      	mov	r0, r3
 800a69e:	f000 f8bf 	bl	800a820 <USBD_Get_USB_Status>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3710      	adds	r7, #16
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a6c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a6c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	da0b      	bge.n	800a6e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a6cc:	78fb      	ldrb	r3, [r7, #3]
 800a6ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a6d2:	68f9      	ldr	r1, [r7, #12]
 800a6d4:	4613      	mov	r3, r2
 800a6d6:	00db      	lsls	r3, r3, #3
 800a6d8:	4413      	add	r3, r2
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	440b      	add	r3, r1
 800a6de:	3316      	adds	r3, #22
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	e00b      	b.n	800a6fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a6e4:	78fb      	ldrb	r3, [r7, #3]
 800a6e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a6ea:	68f9      	ldr	r1, [r7, #12]
 800a6ec:	4613      	mov	r3, r2
 800a6ee:	00db      	lsls	r3, r3, #3
 800a6f0:	4413      	add	r3, r2
 800a6f2:	009b      	lsls	r3, r3, #2
 800a6f4:	440b      	add	r3, r1
 800a6f6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a6fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3714      	adds	r7, #20
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	460b      	mov	r3, r1
 800a712:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a714:	2300      	movs	r3, #0
 800a716:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a718:	2300      	movs	r3, #0
 800a71a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a722:	78fa      	ldrb	r2, [r7, #3]
 800a724:	4611      	mov	r1, r2
 800a726:	4618      	mov	r0, r3
 800a728:	f7fa ff80 	bl	800562c <HAL_PCD_SetAddress>
 800a72c:	4603      	mov	r3, r0
 800a72e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a730:	7bfb      	ldrb	r3, [r7, #15]
 800a732:	4618      	mov	r0, r3
 800a734:	f000 f874 	bl	800a820 <USBD_Get_USB_Status>
 800a738:	4603      	mov	r3, r0
 800a73a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a73c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3710      	adds	r7, #16
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}

0800a746 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a746:	b580      	push	{r7, lr}
 800a748:	b086      	sub	sp, #24
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	60f8      	str	r0, [r7, #12]
 800a74e:	607a      	str	r2, [r7, #4]
 800a750:	603b      	str	r3, [r7, #0]
 800a752:	460b      	mov	r3, r1
 800a754:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a756:	2300      	movs	r3, #0
 800a758:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a75a:	2300      	movs	r3, #0
 800a75c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a764:	7af9      	ldrb	r1, [r7, #11]
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	687a      	ldr	r2, [r7, #4]
 800a76a:	f7fb f88a 	bl	8005882 <HAL_PCD_EP_Transmit>
 800a76e:	4603      	mov	r3, r0
 800a770:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a772:	7dfb      	ldrb	r3, [r7, #23]
 800a774:	4618      	mov	r0, r3
 800a776:	f000 f853 	bl	800a820 <USBD_Get_USB_Status>
 800a77a:	4603      	mov	r3, r0
 800a77c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a77e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a780:	4618      	mov	r0, r3
 800a782:	3718      	adds	r7, #24
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b086      	sub	sp, #24
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	607a      	str	r2, [r7, #4]
 800a792:	603b      	str	r3, [r7, #0]
 800a794:	460b      	mov	r3, r1
 800a796:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a798:	2300      	movs	r3, #0
 800a79a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a79c:	2300      	movs	r3, #0
 800a79e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a7a6:	7af9      	ldrb	r1, [r7, #11]
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	f7fb f816 	bl	80057dc <HAL_PCD_EP_Receive>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7b4:	7dfb      	ldrb	r3, [r7, #23]
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f000 f832 	bl	800a820 <USBD_Get_USB_Status>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a7c0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3718      	adds	r7, #24
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}

0800a7ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7ca:	b580      	push	{r7, lr}
 800a7cc:	b082      	sub	sp, #8
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
 800a7d2:	460b      	mov	r3, r1
 800a7d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a7dc:	78fa      	ldrb	r2, [r7, #3]
 800a7de:	4611      	mov	r1, r2
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7fb f836 	bl	8005852 <HAL_PCD_EP_GetRxCount>
 800a7e6:	4603      	mov	r3, r0
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3708      	adds	r7, #8
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a7f8:	4b03      	ldr	r3, [pc, #12]	@ (800a808 <USBD_static_malloc+0x18>)
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	370c      	adds	r7, #12
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr
 800a806:	bf00      	nop
 800a808:	200020ec 	.word	0x200020ec

0800a80c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]

}
 800a814:	bf00      	nop
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a820:	b480      	push	{r7}
 800a822:	b085      	sub	sp, #20
 800a824:	af00      	add	r7, sp, #0
 800a826:	4603      	mov	r3, r0
 800a828:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a82a:	2300      	movs	r3, #0
 800a82c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a82e:	79fb      	ldrb	r3, [r7, #7]
 800a830:	2b03      	cmp	r3, #3
 800a832:	d817      	bhi.n	800a864 <USBD_Get_USB_Status+0x44>
 800a834:	a201      	add	r2, pc, #4	@ (adr r2, 800a83c <USBD_Get_USB_Status+0x1c>)
 800a836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a83a:	bf00      	nop
 800a83c:	0800a84d 	.word	0x0800a84d
 800a840:	0800a853 	.word	0x0800a853
 800a844:	0800a859 	.word	0x0800a859
 800a848:	0800a85f 	.word	0x0800a85f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a84c:	2300      	movs	r3, #0
 800a84e:	73fb      	strb	r3, [r7, #15]
    break;
 800a850:	e00b      	b.n	800a86a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a852:	2303      	movs	r3, #3
 800a854:	73fb      	strb	r3, [r7, #15]
    break;
 800a856:	e008      	b.n	800a86a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a858:	2301      	movs	r3, #1
 800a85a:	73fb      	strb	r3, [r7, #15]
    break;
 800a85c:	e005      	b.n	800a86a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a85e:	2303      	movs	r3, #3
 800a860:	73fb      	strb	r3, [r7, #15]
    break;
 800a862:	e002      	b.n	800a86a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a864:	2303      	movs	r3, #3
 800a866:	73fb      	strb	r3, [r7, #15]
    break;
 800a868:	bf00      	nop
  }
  return usb_status;
 800a86a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3714      	adds	r7, #20
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <__itoa>:
 800a878:	1e93      	subs	r3, r2, #2
 800a87a:	2b22      	cmp	r3, #34	@ 0x22
 800a87c:	b510      	push	{r4, lr}
 800a87e:	460c      	mov	r4, r1
 800a880:	d904      	bls.n	800a88c <__itoa+0x14>
 800a882:	2300      	movs	r3, #0
 800a884:	700b      	strb	r3, [r1, #0]
 800a886:	461c      	mov	r4, r3
 800a888:	4620      	mov	r0, r4
 800a88a:	bd10      	pop	{r4, pc}
 800a88c:	2a0a      	cmp	r2, #10
 800a88e:	d109      	bne.n	800a8a4 <__itoa+0x2c>
 800a890:	2800      	cmp	r0, #0
 800a892:	da07      	bge.n	800a8a4 <__itoa+0x2c>
 800a894:	232d      	movs	r3, #45	@ 0x2d
 800a896:	700b      	strb	r3, [r1, #0]
 800a898:	4240      	negs	r0, r0
 800a89a:	2101      	movs	r1, #1
 800a89c:	4421      	add	r1, r4
 800a89e:	f000 f805 	bl	800a8ac <__utoa>
 800a8a2:	e7f1      	b.n	800a888 <__itoa+0x10>
 800a8a4:	2100      	movs	r1, #0
 800a8a6:	e7f9      	b.n	800a89c <__itoa+0x24>

0800a8a8 <itoa>:
 800a8a8:	f7ff bfe6 	b.w	800a878 <__itoa>

0800a8ac <__utoa>:
 800a8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8ae:	4c1f      	ldr	r4, [pc, #124]	@ (800a92c <__utoa+0x80>)
 800a8b0:	b08b      	sub	sp, #44	@ 0x2c
 800a8b2:	4605      	mov	r5, r0
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	466e      	mov	r6, sp
 800a8b8:	f104 0c20 	add.w	ip, r4, #32
 800a8bc:	6820      	ldr	r0, [r4, #0]
 800a8be:	6861      	ldr	r1, [r4, #4]
 800a8c0:	4637      	mov	r7, r6
 800a8c2:	c703      	stmia	r7!, {r0, r1}
 800a8c4:	3408      	adds	r4, #8
 800a8c6:	4564      	cmp	r4, ip
 800a8c8:	463e      	mov	r6, r7
 800a8ca:	d1f7      	bne.n	800a8bc <__utoa+0x10>
 800a8cc:	7921      	ldrb	r1, [r4, #4]
 800a8ce:	7139      	strb	r1, [r7, #4]
 800a8d0:	1e91      	subs	r1, r2, #2
 800a8d2:	6820      	ldr	r0, [r4, #0]
 800a8d4:	6038      	str	r0, [r7, #0]
 800a8d6:	2922      	cmp	r1, #34	@ 0x22
 800a8d8:	f04f 0100 	mov.w	r1, #0
 800a8dc:	d904      	bls.n	800a8e8 <__utoa+0x3c>
 800a8de:	7019      	strb	r1, [r3, #0]
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	b00b      	add	sp, #44	@ 0x2c
 800a8e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8e8:	1e58      	subs	r0, r3, #1
 800a8ea:	4684      	mov	ip, r0
 800a8ec:	fbb5 f7f2 	udiv	r7, r5, r2
 800a8f0:	fb02 5617 	mls	r6, r2, r7, r5
 800a8f4:	3628      	adds	r6, #40	@ 0x28
 800a8f6:	446e      	add	r6, sp
 800a8f8:	460c      	mov	r4, r1
 800a8fa:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800a8fe:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800a902:	462e      	mov	r6, r5
 800a904:	42b2      	cmp	r2, r6
 800a906:	f101 0101 	add.w	r1, r1, #1
 800a90a:	463d      	mov	r5, r7
 800a90c:	d9ee      	bls.n	800a8ec <__utoa+0x40>
 800a90e:	2200      	movs	r2, #0
 800a910:	545a      	strb	r2, [r3, r1]
 800a912:	1919      	adds	r1, r3, r4
 800a914:	1aa5      	subs	r5, r4, r2
 800a916:	42aa      	cmp	r2, r5
 800a918:	dae3      	bge.n	800a8e2 <__utoa+0x36>
 800a91a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800a91e:	780e      	ldrb	r6, [r1, #0]
 800a920:	7006      	strb	r6, [r0, #0]
 800a922:	3201      	adds	r2, #1
 800a924:	f801 5901 	strb.w	r5, [r1], #-1
 800a928:	e7f4      	b.n	800a914 <__utoa+0x68>
 800a92a:	bf00      	nop
 800a92c:	0800b34c 	.word	0x0800b34c

0800a930 <siprintf>:
 800a930:	b40e      	push	{r1, r2, r3}
 800a932:	b500      	push	{lr}
 800a934:	b09c      	sub	sp, #112	@ 0x70
 800a936:	ab1d      	add	r3, sp, #116	@ 0x74
 800a938:	9002      	str	r0, [sp, #8]
 800a93a:	9006      	str	r0, [sp, #24]
 800a93c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a940:	4809      	ldr	r0, [pc, #36]	@ (800a968 <siprintf+0x38>)
 800a942:	9107      	str	r1, [sp, #28]
 800a944:	9104      	str	r1, [sp, #16]
 800a946:	4909      	ldr	r1, [pc, #36]	@ (800a96c <siprintf+0x3c>)
 800a948:	f853 2b04 	ldr.w	r2, [r3], #4
 800a94c:	9105      	str	r1, [sp, #20]
 800a94e:	6800      	ldr	r0, [r0, #0]
 800a950:	9301      	str	r3, [sp, #4]
 800a952:	a902      	add	r1, sp, #8
 800a954:	f000 f994 	bl	800ac80 <_svfiprintf_r>
 800a958:	9b02      	ldr	r3, [sp, #8]
 800a95a:	2200      	movs	r2, #0
 800a95c:	701a      	strb	r2, [r3, #0]
 800a95e:	b01c      	add	sp, #112	@ 0x70
 800a960:	f85d eb04 	ldr.w	lr, [sp], #4
 800a964:	b003      	add	sp, #12
 800a966:	4770      	bx	lr
 800a968:	200000fc 	.word	0x200000fc
 800a96c:	ffff0208 	.word	0xffff0208

0800a970 <memset>:
 800a970:	4402      	add	r2, r0
 800a972:	4603      	mov	r3, r0
 800a974:	4293      	cmp	r3, r2
 800a976:	d100      	bne.n	800a97a <memset+0xa>
 800a978:	4770      	bx	lr
 800a97a:	f803 1b01 	strb.w	r1, [r3], #1
 800a97e:	e7f9      	b.n	800a974 <memset+0x4>

0800a980 <__errno>:
 800a980:	4b01      	ldr	r3, [pc, #4]	@ (800a988 <__errno+0x8>)
 800a982:	6818      	ldr	r0, [r3, #0]
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	200000fc 	.word	0x200000fc

0800a98c <__libc_init_array>:
 800a98c:	b570      	push	{r4, r5, r6, lr}
 800a98e:	4d0d      	ldr	r5, [pc, #52]	@ (800a9c4 <__libc_init_array+0x38>)
 800a990:	4c0d      	ldr	r4, [pc, #52]	@ (800a9c8 <__libc_init_array+0x3c>)
 800a992:	1b64      	subs	r4, r4, r5
 800a994:	10a4      	asrs	r4, r4, #2
 800a996:	2600      	movs	r6, #0
 800a998:	42a6      	cmp	r6, r4
 800a99a:	d109      	bne.n	800a9b0 <__libc_init_array+0x24>
 800a99c:	4d0b      	ldr	r5, [pc, #44]	@ (800a9cc <__libc_init_array+0x40>)
 800a99e:	4c0c      	ldr	r4, [pc, #48]	@ (800a9d0 <__libc_init_array+0x44>)
 800a9a0:	f000 fc66 	bl	800b270 <_init>
 800a9a4:	1b64      	subs	r4, r4, r5
 800a9a6:	10a4      	asrs	r4, r4, #2
 800a9a8:	2600      	movs	r6, #0
 800a9aa:	42a6      	cmp	r6, r4
 800a9ac:	d105      	bne.n	800a9ba <__libc_init_array+0x2e>
 800a9ae:	bd70      	pop	{r4, r5, r6, pc}
 800a9b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9b4:	4798      	blx	r3
 800a9b6:	3601      	adds	r6, #1
 800a9b8:	e7ee      	b.n	800a998 <__libc_init_array+0xc>
 800a9ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9be:	4798      	blx	r3
 800a9c0:	3601      	adds	r6, #1
 800a9c2:	e7f2      	b.n	800a9aa <__libc_init_array+0x1e>
 800a9c4:	0800b3ac 	.word	0x0800b3ac
 800a9c8:	0800b3ac 	.word	0x0800b3ac
 800a9cc:	0800b3ac 	.word	0x0800b3ac
 800a9d0:	0800b3b0 	.word	0x0800b3b0

0800a9d4 <__retarget_lock_acquire_recursive>:
 800a9d4:	4770      	bx	lr

0800a9d6 <__retarget_lock_release_recursive>:
 800a9d6:	4770      	bx	lr

0800a9d8 <_free_r>:
 800a9d8:	b538      	push	{r3, r4, r5, lr}
 800a9da:	4605      	mov	r5, r0
 800a9dc:	2900      	cmp	r1, #0
 800a9de:	d041      	beq.n	800aa64 <_free_r+0x8c>
 800a9e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9e4:	1f0c      	subs	r4, r1, #4
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	bfb8      	it	lt
 800a9ea:	18e4      	addlt	r4, r4, r3
 800a9ec:	f000 f8e0 	bl	800abb0 <__malloc_lock>
 800a9f0:	4a1d      	ldr	r2, [pc, #116]	@ (800aa68 <_free_r+0x90>)
 800a9f2:	6813      	ldr	r3, [r2, #0]
 800a9f4:	b933      	cbnz	r3, 800aa04 <_free_r+0x2c>
 800a9f6:	6063      	str	r3, [r4, #4]
 800a9f8:	6014      	str	r4, [r2, #0]
 800a9fa:	4628      	mov	r0, r5
 800a9fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa00:	f000 b8dc 	b.w	800abbc <__malloc_unlock>
 800aa04:	42a3      	cmp	r3, r4
 800aa06:	d908      	bls.n	800aa1a <_free_r+0x42>
 800aa08:	6820      	ldr	r0, [r4, #0]
 800aa0a:	1821      	adds	r1, r4, r0
 800aa0c:	428b      	cmp	r3, r1
 800aa0e:	bf01      	itttt	eq
 800aa10:	6819      	ldreq	r1, [r3, #0]
 800aa12:	685b      	ldreq	r3, [r3, #4]
 800aa14:	1809      	addeq	r1, r1, r0
 800aa16:	6021      	streq	r1, [r4, #0]
 800aa18:	e7ed      	b.n	800a9f6 <_free_r+0x1e>
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	b10b      	cbz	r3, 800aa24 <_free_r+0x4c>
 800aa20:	42a3      	cmp	r3, r4
 800aa22:	d9fa      	bls.n	800aa1a <_free_r+0x42>
 800aa24:	6811      	ldr	r1, [r2, #0]
 800aa26:	1850      	adds	r0, r2, r1
 800aa28:	42a0      	cmp	r0, r4
 800aa2a:	d10b      	bne.n	800aa44 <_free_r+0x6c>
 800aa2c:	6820      	ldr	r0, [r4, #0]
 800aa2e:	4401      	add	r1, r0
 800aa30:	1850      	adds	r0, r2, r1
 800aa32:	4283      	cmp	r3, r0
 800aa34:	6011      	str	r1, [r2, #0]
 800aa36:	d1e0      	bne.n	800a9fa <_free_r+0x22>
 800aa38:	6818      	ldr	r0, [r3, #0]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	6053      	str	r3, [r2, #4]
 800aa3e:	4408      	add	r0, r1
 800aa40:	6010      	str	r0, [r2, #0]
 800aa42:	e7da      	b.n	800a9fa <_free_r+0x22>
 800aa44:	d902      	bls.n	800aa4c <_free_r+0x74>
 800aa46:	230c      	movs	r3, #12
 800aa48:	602b      	str	r3, [r5, #0]
 800aa4a:	e7d6      	b.n	800a9fa <_free_r+0x22>
 800aa4c:	6820      	ldr	r0, [r4, #0]
 800aa4e:	1821      	adds	r1, r4, r0
 800aa50:	428b      	cmp	r3, r1
 800aa52:	bf04      	itt	eq
 800aa54:	6819      	ldreq	r1, [r3, #0]
 800aa56:	685b      	ldreq	r3, [r3, #4]
 800aa58:	6063      	str	r3, [r4, #4]
 800aa5a:	bf04      	itt	eq
 800aa5c:	1809      	addeq	r1, r1, r0
 800aa5e:	6021      	streq	r1, [r4, #0]
 800aa60:	6054      	str	r4, [r2, #4]
 800aa62:	e7ca      	b.n	800a9fa <_free_r+0x22>
 800aa64:	bd38      	pop	{r3, r4, r5, pc}
 800aa66:	bf00      	nop
 800aa68:	20002450 	.word	0x20002450

0800aa6c <sbrk_aligned>:
 800aa6c:	b570      	push	{r4, r5, r6, lr}
 800aa6e:	4e0f      	ldr	r6, [pc, #60]	@ (800aaac <sbrk_aligned+0x40>)
 800aa70:	460c      	mov	r4, r1
 800aa72:	6831      	ldr	r1, [r6, #0]
 800aa74:	4605      	mov	r5, r0
 800aa76:	b911      	cbnz	r1, 800aa7e <sbrk_aligned+0x12>
 800aa78:	f000 fba6 	bl	800b1c8 <_sbrk_r>
 800aa7c:	6030      	str	r0, [r6, #0]
 800aa7e:	4621      	mov	r1, r4
 800aa80:	4628      	mov	r0, r5
 800aa82:	f000 fba1 	bl	800b1c8 <_sbrk_r>
 800aa86:	1c43      	adds	r3, r0, #1
 800aa88:	d103      	bne.n	800aa92 <sbrk_aligned+0x26>
 800aa8a:	f04f 34ff 	mov.w	r4, #4294967295
 800aa8e:	4620      	mov	r0, r4
 800aa90:	bd70      	pop	{r4, r5, r6, pc}
 800aa92:	1cc4      	adds	r4, r0, #3
 800aa94:	f024 0403 	bic.w	r4, r4, #3
 800aa98:	42a0      	cmp	r0, r4
 800aa9a:	d0f8      	beq.n	800aa8e <sbrk_aligned+0x22>
 800aa9c:	1a21      	subs	r1, r4, r0
 800aa9e:	4628      	mov	r0, r5
 800aaa0:	f000 fb92 	bl	800b1c8 <_sbrk_r>
 800aaa4:	3001      	adds	r0, #1
 800aaa6:	d1f2      	bne.n	800aa8e <sbrk_aligned+0x22>
 800aaa8:	e7ef      	b.n	800aa8a <sbrk_aligned+0x1e>
 800aaaa:	bf00      	nop
 800aaac:	2000244c 	.word	0x2000244c

0800aab0 <_malloc_r>:
 800aab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aab4:	1ccd      	adds	r5, r1, #3
 800aab6:	f025 0503 	bic.w	r5, r5, #3
 800aaba:	3508      	adds	r5, #8
 800aabc:	2d0c      	cmp	r5, #12
 800aabe:	bf38      	it	cc
 800aac0:	250c      	movcc	r5, #12
 800aac2:	2d00      	cmp	r5, #0
 800aac4:	4606      	mov	r6, r0
 800aac6:	db01      	blt.n	800aacc <_malloc_r+0x1c>
 800aac8:	42a9      	cmp	r1, r5
 800aaca:	d904      	bls.n	800aad6 <_malloc_r+0x26>
 800aacc:	230c      	movs	r3, #12
 800aace:	6033      	str	r3, [r6, #0]
 800aad0:	2000      	movs	r0, #0
 800aad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aad6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800abac <_malloc_r+0xfc>
 800aada:	f000 f869 	bl	800abb0 <__malloc_lock>
 800aade:	f8d8 3000 	ldr.w	r3, [r8]
 800aae2:	461c      	mov	r4, r3
 800aae4:	bb44      	cbnz	r4, 800ab38 <_malloc_r+0x88>
 800aae6:	4629      	mov	r1, r5
 800aae8:	4630      	mov	r0, r6
 800aaea:	f7ff ffbf 	bl	800aa6c <sbrk_aligned>
 800aaee:	1c43      	adds	r3, r0, #1
 800aaf0:	4604      	mov	r4, r0
 800aaf2:	d158      	bne.n	800aba6 <_malloc_r+0xf6>
 800aaf4:	f8d8 4000 	ldr.w	r4, [r8]
 800aaf8:	4627      	mov	r7, r4
 800aafa:	2f00      	cmp	r7, #0
 800aafc:	d143      	bne.n	800ab86 <_malloc_r+0xd6>
 800aafe:	2c00      	cmp	r4, #0
 800ab00:	d04b      	beq.n	800ab9a <_malloc_r+0xea>
 800ab02:	6823      	ldr	r3, [r4, #0]
 800ab04:	4639      	mov	r1, r7
 800ab06:	4630      	mov	r0, r6
 800ab08:	eb04 0903 	add.w	r9, r4, r3
 800ab0c:	f000 fb5c 	bl	800b1c8 <_sbrk_r>
 800ab10:	4581      	cmp	r9, r0
 800ab12:	d142      	bne.n	800ab9a <_malloc_r+0xea>
 800ab14:	6821      	ldr	r1, [r4, #0]
 800ab16:	1a6d      	subs	r5, r5, r1
 800ab18:	4629      	mov	r1, r5
 800ab1a:	4630      	mov	r0, r6
 800ab1c:	f7ff ffa6 	bl	800aa6c <sbrk_aligned>
 800ab20:	3001      	adds	r0, #1
 800ab22:	d03a      	beq.n	800ab9a <_malloc_r+0xea>
 800ab24:	6823      	ldr	r3, [r4, #0]
 800ab26:	442b      	add	r3, r5
 800ab28:	6023      	str	r3, [r4, #0]
 800ab2a:	f8d8 3000 	ldr.w	r3, [r8]
 800ab2e:	685a      	ldr	r2, [r3, #4]
 800ab30:	bb62      	cbnz	r2, 800ab8c <_malloc_r+0xdc>
 800ab32:	f8c8 7000 	str.w	r7, [r8]
 800ab36:	e00f      	b.n	800ab58 <_malloc_r+0xa8>
 800ab38:	6822      	ldr	r2, [r4, #0]
 800ab3a:	1b52      	subs	r2, r2, r5
 800ab3c:	d420      	bmi.n	800ab80 <_malloc_r+0xd0>
 800ab3e:	2a0b      	cmp	r2, #11
 800ab40:	d917      	bls.n	800ab72 <_malloc_r+0xc2>
 800ab42:	1961      	adds	r1, r4, r5
 800ab44:	42a3      	cmp	r3, r4
 800ab46:	6025      	str	r5, [r4, #0]
 800ab48:	bf18      	it	ne
 800ab4a:	6059      	strne	r1, [r3, #4]
 800ab4c:	6863      	ldr	r3, [r4, #4]
 800ab4e:	bf08      	it	eq
 800ab50:	f8c8 1000 	streq.w	r1, [r8]
 800ab54:	5162      	str	r2, [r4, r5]
 800ab56:	604b      	str	r3, [r1, #4]
 800ab58:	4630      	mov	r0, r6
 800ab5a:	f000 f82f 	bl	800abbc <__malloc_unlock>
 800ab5e:	f104 000b 	add.w	r0, r4, #11
 800ab62:	1d23      	adds	r3, r4, #4
 800ab64:	f020 0007 	bic.w	r0, r0, #7
 800ab68:	1ac2      	subs	r2, r0, r3
 800ab6a:	bf1c      	itt	ne
 800ab6c:	1a1b      	subne	r3, r3, r0
 800ab6e:	50a3      	strne	r3, [r4, r2]
 800ab70:	e7af      	b.n	800aad2 <_malloc_r+0x22>
 800ab72:	6862      	ldr	r2, [r4, #4]
 800ab74:	42a3      	cmp	r3, r4
 800ab76:	bf0c      	ite	eq
 800ab78:	f8c8 2000 	streq.w	r2, [r8]
 800ab7c:	605a      	strne	r2, [r3, #4]
 800ab7e:	e7eb      	b.n	800ab58 <_malloc_r+0xa8>
 800ab80:	4623      	mov	r3, r4
 800ab82:	6864      	ldr	r4, [r4, #4]
 800ab84:	e7ae      	b.n	800aae4 <_malloc_r+0x34>
 800ab86:	463c      	mov	r4, r7
 800ab88:	687f      	ldr	r7, [r7, #4]
 800ab8a:	e7b6      	b.n	800aafa <_malloc_r+0x4a>
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	42a3      	cmp	r3, r4
 800ab92:	d1fb      	bne.n	800ab8c <_malloc_r+0xdc>
 800ab94:	2300      	movs	r3, #0
 800ab96:	6053      	str	r3, [r2, #4]
 800ab98:	e7de      	b.n	800ab58 <_malloc_r+0xa8>
 800ab9a:	230c      	movs	r3, #12
 800ab9c:	6033      	str	r3, [r6, #0]
 800ab9e:	4630      	mov	r0, r6
 800aba0:	f000 f80c 	bl	800abbc <__malloc_unlock>
 800aba4:	e794      	b.n	800aad0 <_malloc_r+0x20>
 800aba6:	6005      	str	r5, [r0, #0]
 800aba8:	e7d6      	b.n	800ab58 <_malloc_r+0xa8>
 800abaa:	bf00      	nop
 800abac:	20002450 	.word	0x20002450

0800abb0 <__malloc_lock>:
 800abb0:	4801      	ldr	r0, [pc, #4]	@ (800abb8 <__malloc_lock+0x8>)
 800abb2:	f7ff bf0f 	b.w	800a9d4 <__retarget_lock_acquire_recursive>
 800abb6:	bf00      	nop
 800abb8:	20002448 	.word	0x20002448

0800abbc <__malloc_unlock>:
 800abbc:	4801      	ldr	r0, [pc, #4]	@ (800abc4 <__malloc_unlock+0x8>)
 800abbe:	f7ff bf0a 	b.w	800a9d6 <__retarget_lock_release_recursive>
 800abc2:	bf00      	nop
 800abc4:	20002448 	.word	0x20002448

0800abc8 <__ssputs_r>:
 800abc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abcc:	688e      	ldr	r6, [r1, #8]
 800abce:	461f      	mov	r7, r3
 800abd0:	42be      	cmp	r6, r7
 800abd2:	680b      	ldr	r3, [r1, #0]
 800abd4:	4682      	mov	sl, r0
 800abd6:	460c      	mov	r4, r1
 800abd8:	4690      	mov	r8, r2
 800abda:	d82d      	bhi.n	800ac38 <__ssputs_r+0x70>
 800abdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800abe0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800abe4:	d026      	beq.n	800ac34 <__ssputs_r+0x6c>
 800abe6:	6965      	ldr	r5, [r4, #20]
 800abe8:	6909      	ldr	r1, [r1, #16]
 800abea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800abee:	eba3 0901 	sub.w	r9, r3, r1
 800abf2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800abf6:	1c7b      	adds	r3, r7, #1
 800abf8:	444b      	add	r3, r9
 800abfa:	106d      	asrs	r5, r5, #1
 800abfc:	429d      	cmp	r5, r3
 800abfe:	bf38      	it	cc
 800ac00:	461d      	movcc	r5, r3
 800ac02:	0553      	lsls	r3, r2, #21
 800ac04:	d527      	bpl.n	800ac56 <__ssputs_r+0x8e>
 800ac06:	4629      	mov	r1, r5
 800ac08:	f7ff ff52 	bl	800aab0 <_malloc_r>
 800ac0c:	4606      	mov	r6, r0
 800ac0e:	b360      	cbz	r0, 800ac6a <__ssputs_r+0xa2>
 800ac10:	6921      	ldr	r1, [r4, #16]
 800ac12:	464a      	mov	r2, r9
 800ac14:	f000 fae8 	bl	800b1e8 <memcpy>
 800ac18:	89a3      	ldrh	r3, [r4, #12]
 800ac1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ac1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac22:	81a3      	strh	r3, [r4, #12]
 800ac24:	6126      	str	r6, [r4, #16]
 800ac26:	6165      	str	r5, [r4, #20]
 800ac28:	444e      	add	r6, r9
 800ac2a:	eba5 0509 	sub.w	r5, r5, r9
 800ac2e:	6026      	str	r6, [r4, #0]
 800ac30:	60a5      	str	r5, [r4, #8]
 800ac32:	463e      	mov	r6, r7
 800ac34:	42be      	cmp	r6, r7
 800ac36:	d900      	bls.n	800ac3a <__ssputs_r+0x72>
 800ac38:	463e      	mov	r6, r7
 800ac3a:	6820      	ldr	r0, [r4, #0]
 800ac3c:	4632      	mov	r2, r6
 800ac3e:	4641      	mov	r1, r8
 800ac40:	f000 faa8 	bl	800b194 <memmove>
 800ac44:	68a3      	ldr	r3, [r4, #8]
 800ac46:	1b9b      	subs	r3, r3, r6
 800ac48:	60a3      	str	r3, [r4, #8]
 800ac4a:	6823      	ldr	r3, [r4, #0]
 800ac4c:	4433      	add	r3, r6
 800ac4e:	6023      	str	r3, [r4, #0]
 800ac50:	2000      	movs	r0, #0
 800ac52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac56:	462a      	mov	r2, r5
 800ac58:	f000 fad4 	bl	800b204 <_realloc_r>
 800ac5c:	4606      	mov	r6, r0
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	d1e0      	bne.n	800ac24 <__ssputs_r+0x5c>
 800ac62:	6921      	ldr	r1, [r4, #16]
 800ac64:	4650      	mov	r0, sl
 800ac66:	f7ff feb7 	bl	800a9d8 <_free_r>
 800ac6a:	230c      	movs	r3, #12
 800ac6c:	f8ca 3000 	str.w	r3, [sl]
 800ac70:	89a3      	ldrh	r3, [r4, #12]
 800ac72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac76:	81a3      	strh	r3, [r4, #12]
 800ac78:	f04f 30ff 	mov.w	r0, #4294967295
 800ac7c:	e7e9      	b.n	800ac52 <__ssputs_r+0x8a>
	...

0800ac80 <_svfiprintf_r>:
 800ac80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac84:	4698      	mov	r8, r3
 800ac86:	898b      	ldrh	r3, [r1, #12]
 800ac88:	061b      	lsls	r3, r3, #24
 800ac8a:	b09d      	sub	sp, #116	@ 0x74
 800ac8c:	4607      	mov	r7, r0
 800ac8e:	460d      	mov	r5, r1
 800ac90:	4614      	mov	r4, r2
 800ac92:	d510      	bpl.n	800acb6 <_svfiprintf_r+0x36>
 800ac94:	690b      	ldr	r3, [r1, #16]
 800ac96:	b973      	cbnz	r3, 800acb6 <_svfiprintf_r+0x36>
 800ac98:	2140      	movs	r1, #64	@ 0x40
 800ac9a:	f7ff ff09 	bl	800aab0 <_malloc_r>
 800ac9e:	6028      	str	r0, [r5, #0]
 800aca0:	6128      	str	r0, [r5, #16]
 800aca2:	b930      	cbnz	r0, 800acb2 <_svfiprintf_r+0x32>
 800aca4:	230c      	movs	r3, #12
 800aca6:	603b      	str	r3, [r7, #0]
 800aca8:	f04f 30ff 	mov.w	r0, #4294967295
 800acac:	b01d      	add	sp, #116	@ 0x74
 800acae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acb2:	2340      	movs	r3, #64	@ 0x40
 800acb4:	616b      	str	r3, [r5, #20]
 800acb6:	2300      	movs	r3, #0
 800acb8:	9309      	str	r3, [sp, #36]	@ 0x24
 800acba:	2320      	movs	r3, #32
 800acbc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800acc0:	f8cd 800c 	str.w	r8, [sp, #12]
 800acc4:	2330      	movs	r3, #48	@ 0x30
 800acc6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ae64 <_svfiprintf_r+0x1e4>
 800acca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800acce:	f04f 0901 	mov.w	r9, #1
 800acd2:	4623      	mov	r3, r4
 800acd4:	469a      	mov	sl, r3
 800acd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acda:	b10a      	cbz	r2, 800ace0 <_svfiprintf_r+0x60>
 800acdc:	2a25      	cmp	r2, #37	@ 0x25
 800acde:	d1f9      	bne.n	800acd4 <_svfiprintf_r+0x54>
 800ace0:	ebba 0b04 	subs.w	fp, sl, r4
 800ace4:	d00b      	beq.n	800acfe <_svfiprintf_r+0x7e>
 800ace6:	465b      	mov	r3, fp
 800ace8:	4622      	mov	r2, r4
 800acea:	4629      	mov	r1, r5
 800acec:	4638      	mov	r0, r7
 800acee:	f7ff ff6b 	bl	800abc8 <__ssputs_r>
 800acf2:	3001      	adds	r0, #1
 800acf4:	f000 80a7 	beq.w	800ae46 <_svfiprintf_r+0x1c6>
 800acf8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800acfa:	445a      	add	r2, fp
 800acfc:	9209      	str	r2, [sp, #36]	@ 0x24
 800acfe:	f89a 3000 	ldrb.w	r3, [sl]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	f000 809f 	beq.w	800ae46 <_svfiprintf_r+0x1c6>
 800ad08:	2300      	movs	r3, #0
 800ad0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad12:	f10a 0a01 	add.w	sl, sl, #1
 800ad16:	9304      	str	r3, [sp, #16]
 800ad18:	9307      	str	r3, [sp, #28]
 800ad1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ad1e:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad20:	4654      	mov	r4, sl
 800ad22:	2205      	movs	r2, #5
 800ad24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad28:	484e      	ldr	r0, [pc, #312]	@ (800ae64 <_svfiprintf_r+0x1e4>)
 800ad2a:	f7f5 fa59 	bl	80001e0 <memchr>
 800ad2e:	9a04      	ldr	r2, [sp, #16]
 800ad30:	b9d8      	cbnz	r0, 800ad6a <_svfiprintf_r+0xea>
 800ad32:	06d0      	lsls	r0, r2, #27
 800ad34:	bf44      	itt	mi
 800ad36:	2320      	movmi	r3, #32
 800ad38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad3c:	0711      	lsls	r1, r2, #28
 800ad3e:	bf44      	itt	mi
 800ad40:	232b      	movmi	r3, #43	@ 0x2b
 800ad42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad46:	f89a 3000 	ldrb.w	r3, [sl]
 800ad4a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad4c:	d015      	beq.n	800ad7a <_svfiprintf_r+0xfa>
 800ad4e:	9a07      	ldr	r2, [sp, #28]
 800ad50:	4654      	mov	r4, sl
 800ad52:	2000      	movs	r0, #0
 800ad54:	f04f 0c0a 	mov.w	ip, #10
 800ad58:	4621      	mov	r1, r4
 800ad5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad5e:	3b30      	subs	r3, #48	@ 0x30
 800ad60:	2b09      	cmp	r3, #9
 800ad62:	d94b      	bls.n	800adfc <_svfiprintf_r+0x17c>
 800ad64:	b1b0      	cbz	r0, 800ad94 <_svfiprintf_r+0x114>
 800ad66:	9207      	str	r2, [sp, #28]
 800ad68:	e014      	b.n	800ad94 <_svfiprintf_r+0x114>
 800ad6a:	eba0 0308 	sub.w	r3, r0, r8
 800ad6e:	fa09 f303 	lsl.w	r3, r9, r3
 800ad72:	4313      	orrs	r3, r2
 800ad74:	9304      	str	r3, [sp, #16]
 800ad76:	46a2      	mov	sl, r4
 800ad78:	e7d2      	b.n	800ad20 <_svfiprintf_r+0xa0>
 800ad7a:	9b03      	ldr	r3, [sp, #12]
 800ad7c:	1d19      	adds	r1, r3, #4
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	9103      	str	r1, [sp, #12]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	bfbb      	ittet	lt
 800ad86:	425b      	neglt	r3, r3
 800ad88:	f042 0202 	orrlt.w	r2, r2, #2
 800ad8c:	9307      	strge	r3, [sp, #28]
 800ad8e:	9307      	strlt	r3, [sp, #28]
 800ad90:	bfb8      	it	lt
 800ad92:	9204      	strlt	r2, [sp, #16]
 800ad94:	7823      	ldrb	r3, [r4, #0]
 800ad96:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad98:	d10a      	bne.n	800adb0 <_svfiprintf_r+0x130>
 800ad9a:	7863      	ldrb	r3, [r4, #1]
 800ad9c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad9e:	d132      	bne.n	800ae06 <_svfiprintf_r+0x186>
 800ada0:	9b03      	ldr	r3, [sp, #12]
 800ada2:	1d1a      	adds	r2, r3, #4
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	9203      	str	r2, [sp, #12]
 800ada8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800adac:	3402      	adds	r4, #2
 800adae:	9305      	str	r3, [sp, #20]
 800adb0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ae74 <_svfiprintf_r+0x1f4>
 800adb4:	7821      	ldrb	r1, [r4, #0]
 800adb6:	2203      	movs	r2, #3
 800adb8:	4650      	mov	r0, sl
 800adba:	f7f5 fa11 	bl	80001e0 <memchr>
 800adbe:	b138      	cbz	r0, 800add0 <_svfiprintf_r+0x150>
 800adc0:	9b04      	ldr	r3, [sp, #16]
 800adc2:	eba0 000a 	sub.w	r0, r0, sl
 800adc6:	2240      	movs	r2, #64	@ 0x40
 800adc8:	4082      	lsls	r2, r0
 800adca:	4313      	orrs	r3, r2
 800adcc:	3401      	adds	r4, #1
 800adce:	9304      	str	r3, [sp, #16]
 800add0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800add4:	4824      	ldr	r0, [pc, #144]	@ (800ae68 <_svfiprintf_r+0x1e8>)
 800add6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800adda:	2206      	movs	r2, #6
 800addc:	f7f5 fa00 	bl	80001e0 <memchr>
 800ade0:	2800      	cmp	r0, #0
 800ade2:	d036      	beq.n	800ae52 <_svfiprintf_r+0x1d2>
 800ade4:	4b21      	ldr	r3, [pc, #132]	@ (800ae6c <_svfiprintf_r+0x1ec>)
 800ade6:	bb1b      	cbnz	r3, 800ae30 <_svfiprintf_r+0x1b0>
 800ade8:	9b03      	ldr	r3, [sp, #12]
 800adea:	3307      	adds	r3, #7
 800adec:	f023 0307 	bic.w	r3, r3, #7
 800adf0:	3308      	adds	r3, #8
 800adf2:	9303      	str	r3, [sp, #12]
 800adf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adf6:	4433      	add	r3, r6
 800adf8:	9309      	str	r3, [sp, #36]	@ 0x24
 800adfa:	e76a      	b.n	800acd2 <_svfiprintf_r+0x52>
 800adfc:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae00:	460c      	mov	r4, r1
 800ae02:	2001      	movs	r0, #1
 800ae04:	e7a8      	b.n	800ad58 <_svfiprintf_r+0xd8>
 800ae06:	2300      	movs	r3, #0
 800ae08:	3401      	adds	r4, #1
 800ae0a:	9305      	str	r3, [sp, #20]
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	f04f 0c0a 	mov.w	ip, #10
 800ae12:	4620      	mov	r0, r4
 800ae14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae18:	3a30      	subs	r2, #48	@ 0x30
 800ae1a:	2a09      	cmp	r2, #9
 800ae1c:	d903      	bls.n	800ae26 <_svfiprintf_r+0x1a6>
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d0c6      	beq.n	800adb0 <_svfiprintf_r+0x130>
 800ae22:	9105      	str	r1, [sp, #20]
 800ae24:	e7c4      	b.n	800adb0 <_svfiprintf_r+0x130>
 800ae26:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae2a:	4604      	mov	r4, r0
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	e7f0      	b.n	800ae12 <_svfiprintf_r+0x192>
 800ae30:	ab03      	add	r3, sp, #12
 800ae32:	9300      	str	r3, [sp, #0]
 800ae34:	462a      	mov	r2, r5
 800ae36:	4b0e      	ldr	r3, [pc, #56]	@ (800ae70 <_svfiprintf_r+0x1f0>)
 800ae38:	a904      	add	r1, sp, #16
 800ae3a:	4638      	mov	r0, r7
 800ae3c:	f3af 8000 	nop.w
 800ae40:	1c42      	adds	r2, r0, #1
 800ae42:	4606      	mov	r6, r0
 800ae44:	d1d6      	bne.n	800adf4 <_svfiprintf_r+0x174>
 800ae46:	89ab      	ldrh	r3, [r5, #12]
 800ae48:	065b      	lsls	r3, r3, #25
 800ae4a:	f53f af2d 	bmi.w	800aca8 <_svfiprintf_r+0x28>
 800ae4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae50:	e72c      	b.n	800acac <_svfiprintf_r+0x2c>
 800ae52:	ab03      	add	r3, sp, #12
 800ae54:	9300      	str	r3, [sp, #0]
 800ae56:	462a      	mov	r2, r5
 800ae58:	4b05      	ldr	r3, [pc, #20]	@ (800ae70 <_svfiprintf_r+0x1f0>)
 800ae5a:	a904      	add	r1, sp, #16
 800ae5c:	4638      	mov	r0, r7
 800ae5e:	f000 f879 	bl	800af54 <_printf_i>
 800ae62:	e7ed      	b.n	800ae40 <_svfiprintf_r+0x1c0>
 800ae64:	0800b371 	.word	0x0800b371
 800ae68:	0800b37b 	.word	0x0800b37b
 800ae6c:	00000000 	.word	0x00000000
 800ae70:	0800abc9 	.word	0x0800abc9
 800ae74:	0800b377 	.word	0x0800b377

0800ae78 <_printf_common>:
 800ae78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae7c:	4616      	mov	r6, r2
 800ae7e:	4698      	mov	r8, r3
 800ae80:	688a      	ldr	r2, [r1, #8]
 800ae82:	690b      	ldr	r3, [r1, #16]
 800ae84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	bfb8      	it	lt
 800ae8c:	4613      	movlt	r3, r2
 800ae8e:	6033      	str	r3, [r6, #0]
 800ae90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ae94:	4607      	mov	r7, r0
 800ae96:	460c      	mov	r4, r1
 800ae98:	b10a      	cbz	r2, 800ae9e <_printf_common+0x26>
 800ae9a:	3301      	adds	r3, #1
 800ae9c:	6033      	str	r3, [r6, #0]
 800ae9e:	6823      	ldr	r3, [r4, #0]
 800aea0:	0699      	lsls	r1, r3, #26
 800aea2:	bf42      	ittt	mi
 800aea4:	6833      	ldrmi	r3, [r6, #0]
 800aea6:	3302      	addmi	r3, #2
 800aea8:	6033      	strmi	r3, [r6, #0]
 800aeaa:	6825      	ldr	r5, [r4, #0]
 800aeac:	f015 0506 	ands.w	r5, r5, #6
 800aeb0:	d106      	bne.n	800aec0 <_printf_common+0x48>
 800aeb2:	f104 0a19 	add.w	sl, r4, #25
 800aeb6:	68e3      	ldr	r3, [r4, #12]
 800aeb8:	6832      	ldr	r2, [r6, #0]
 800aeba:	1a9b      	subs	r3, r3, r2
 800aebc:	42ab      	cmp	r3, r5
 800aebe:	dc26      	bgt.n	800af0e <_printf_common+0x96>
 800aec0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aec4:	6822      	ldr	r2, [r4, #0]
 800aec6:	3b00      	subs	r3, #0
 800aec8:	bf18      	it	ne
 800aeca:	2301      	movne	r3, #1
 800aecc:	0692      	lsls	r2, r2, #26
 800aece:	d42b      	bmi.n	800af28 <_printf_common+0xb0>
 800aed0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aed4:	4641      	mov	r1, r8
 800aed6:	4638      	mov	r0, r7
 800aed8:	47c8      	blx	r9
 800aeda:	3001      	adds	r0, #1
 800aedc:	d01e      	beq.n	800af1c <_printf_common+0xa4>
 800aede:	6823      	ldr	r3, [r4, #0]
 800aee0:	6922      	ldr	r2, [r4, #16]
 800aee2:	f003 0306 	and.w	r3, r3, #6
 800aee6:	2b04      	cmp	r3, #4
 800aee8:	bf02      	ittt	eq
 800aeea:	68e5      	ldreq	r5, [r4, #12]
 800aeec:	6833      	ldreq	r3, [r6, #0]
 800aeee:	1aed      	subeq	r5, r5, r3
 800aef0:	68a3      	ldr	r3, [r4, #8]
 800aef2:	bf0c      	ite	eq
 800aef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aef8:	2500      	movne	r5, #0
 800aefa:	4293      	cmp	r3, r2
 800aefc:	bfc4      	itt	gt
 800aefe:	1a9b      	subgt	r3, r3, r2
 800af00:	18ed      	addgt	r5, r5, r3
 800af02:	2600      	movs	r6, #0
 800af04:	341a      	adds	r4, #26
 800af06:	42b5      	cmp	r5, r6
 800af08:	d11a      	bne.n	800af40 <_printf_common+0xc8>
 800af0a:	2000      	movs	r0, #0
 800af0c:	e008      	b.n	800af20 <_printf_common+0xa8>
 800af0e:	2301      	movs	r3, #1
 800af10:	4652      	mov	r2, sl
 800af12:	4641      	mov	r1, r8
 800af14:	4638      	mov	r0, r7
 800af16:	47c8      	blx	r9
 800af18:	3001      	adds	r0, #1
 800af1a:	d103      	bne.n	800af24 <_printf_common+0xac>
 800af1c:	f04f 30ff 	mov.w	r0, #4294967295
 800af20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af24:	3501      	adds	r5, #1
 800af26:	e7c6      	b.n	800aeb6 <_printf_common+0x3e>
 800af28:	18e1      	adds	r1, r4, r3
 800af2a:	1c5a      	adds	r2, r3, #1
 800af2c:	2030      	movs	r0, #48	@ 0x30
 800af2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800af32:	4422      	add	r2, r4
 800af34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800af38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800af3c:	3302      	adds	r3, #2
 800af3e:	e7c7      	b.n	800aed0 <_printf_common+0x58>
 800af40:	2301      	movs	r3, #1
 800af42:	4622      	mov	r2, r4
 800af44:	4641      	mov	r1, r8
 800af46:	4638      	mov	r0, r7
 800af48:	47c8      	blx	r9
 800af4a:	3001      	adds	r0, #1
 800af4c:	d0e6      	beq.n	800af1c <_printf_common+0xa4>
 800af4e:	3601      	adds	r6, #1
 800af50:	e7d9      	b.n	800af06 <_printf_common+0x8e>
	...

0800af54 <_printf_i>:
 800af54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af58:	7e0f      	ldrb	r7, [r1, #24]
 800af5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800af5c:	2f78      	cmp	r7, #120	@ 0x78
 800af5e:	4691      	mov	r9, r2
 800af60:	4680      	mov	r8, r0
 800af62:	460c      	mov	r4, r1
 800af64:	469a      	mov	sl, r3
 800af66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800af6a:	d807      	bhi.n	800af7c <_printf_i+0x28>
 800af6c:	2f62      	cmp	r7, #98	@ 0x62
 800af6e:	d80a      	bhi.n	800af86 <_printf_i+0x32>
 800af70:	2f00      	cmp	r7, #0
 800af72:	f000 80d2 	beq.w	800b11a <_printf_i+0x1c6>
 800af76:	2f58      	cmp	r7, #88	@ 0x58
 800af78:	f000 80b9 	beq.w	800b0ee <_printf_i+0x19a>
 800af7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800af84:	e03a      	b.n	800affc <_printf_i+0xa8>
 800af86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800af8a:	2b15      	cmp	r3, #21
 800af8c:	d8f6      	bhi.n	800af7c <_printf_i+0x28>
 800af8e:	a101      	add	r1, pc, #4	@ (adr r1, 800af94 <_printf_i+0x40>)
 800af90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af94:	0800afed 	.word	0x0800afed
 800af98:	0800b001 	.word	0x0800b001
 800af9c:	0800af7d 	.word	0x0800af7d
 800afa0:	0800af7d 	.word	0x0800af7d
 800afa4:	0800af7d 	.word	0x0800af7d
 800afa8:	0800af7d 	.word	0x0800af7d
 800afac:	0800b001 	.word	0x0800b001
 800afb0:	0800af7d 	.word	0x0800af7d
 800afb4:	0800af7d 	.word	0x0800af7d
 800afb8:	0800af7d 	.word	0x0800af7d
 800afbc:	0800af7d 	.word	0x0800af7d
 800afc0:	0800b101 	.word	0x0800b101
 800afc4:	0800b02b 	.word	0x0800b02b
 800afc8:	0800b0bb 	.word	0x0800b0bb
 800afcc:	0800af7d 	.word	0x0800af7d
 800afd0:	0800af7d 	.word	0x0800af7d
 800afd4:	0800b123 	.word	0x0800b123
 800afd8:	0800af7d 	.word	0x0800af7d
 800afdc:	0800b02b 	.word	0x0800b02b
 800afe0:	0800af7d 	.word	0x0800af7d
 800afe4:	0800af7d 	.word	0x0800af7d
 800afe8:	0800b0c3 	.word	0x0800b0c3
 800afec:	6833      	ldr	r3, [r6, #0]
 800afee:	1d1a      	adds	r2, r3, #4
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	6032      	str	r2, [r6, #0]
 800aff4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aff8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800affc:	2301      	movs	r3, #1
 800affe:	e09d      	b.n	800b13c <_printf_i+0x1e8>
 800b000:	6833      	ldr	r3, [r6, #0]
 800b002:	6820      	ldr	r0, [r4, #0]
 800b004:	1d19      	adds	r1, r3, #4
 800b006:	6031      	str	r1, [r6, #0]
 800b008:	0606      	lsls	r6, r0, #24
 800b00a:	d501      	bpl.n	800b010 <_printf_i+0xbc>
 800b00c:	681d      	ldr	r5, [r3, #0]
 800b00e:	e003      	b.n	800b018 <_printf_i+0xc4>
 800b010:	0645      	lsls	r5, r0, #25
 800b012:	d5fb      	bpl.n	800b00c <_printf_i+0xb8>
 800b014:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b018:	2d00      	cmp	r5, #0
 800b01a:	da03      	bge.n	800b024 <_printf_i+0xd0>
 800b01c:	232d      	movs	r3, #45	@ 0x2d
 800b01e:	426d      	negs	r5, r5
 800b020:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b024:	4859      	ldr	r0, [pc, #356]	@ (800b18c <_printf_i+0x238>)
 800b026:	230a      	movs	r3, #10
 800b028:	e011      	b.n	800b04e <_printf_i+0xfa>
 800b02a:	6821      	ldr	r1, [r4, #0]
 800b02c:	6833      	ldr	r3, [r6, #0]
 800b02e:	0608      	lsls	r0, r1, #24
 800b030:	f853 5b04 	ldr.w	r5, [r3], #4
 800b034:	d402      	bmi.n	800b03c <_printf_i+0xe8>
 800b036:	0649      	lsls	r1, r1, #25
 800b038:	bf48      	it	mi
 800b03a:	b2ad      	uxthmi	r5, r5
 800b03c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b03e:	4853      	ldr	r0, [pc, #332]	@ (800b18c <_printf_i+0x238>)
 800b040:	6033      	str	r3, [r6, #0]
 800b042:	bf14      	ite	ne
 800b044:	230a      	movne	r3, #10
 800b046:	2308      	moveq	r3, #8
 800b048:	2100      	movs	r1, #0
 800b04a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b04e:	6866      	ldr	r6, [r4, #4]
 800b050:	60a6      	str	r6, [r4, #8]
 800b052:	2e00      	cmp	r6, #0
 800b054:	bfa2      	ittt	ge
 800b056:	6821      	ldrge	r1, [r4, #0]
 800b058:	f021 0104 	bicge.w	r1, r1, #4
 800b05c:	6021      	strge	r1, [r4, #0]
 800b05e:	b90d      	cbnz	r5, 800b064 <_printf_i+0x110>
 800b060:	2e00      	cmp	r6, #0
 800b062:	d04b      	beq.n	800b0fc <_printf_i+0x1a8>
 800b064:	4616      	mov	r6, r2
 800b066:	fbb5 f1f3 	udiv	r1, r5, r3
 800b06a:	fb03 5711 	mls	r7, r3, r1, r5
 800b06e:	5dc7      	ldrb	r7, [r0, r7]
 800b070:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b074:	462f      	mov	r7, r5
 800b076:	42bb      	cmp	r3, r7
 800b078:	460d      	mov	r5, r1
 800b07a:	d9f4      	bls.n	800b066 <_printf_i+0x112>
 800b07c:	2b08      	cmp	r3, #8
 800b07e:	d10b      	bne.n	800b098 <_printf_i+0x144>
 800b080:	6823      	ldr	r3, [r4, #0]
 800b082:	07df      	lsls	r7, r3, #31
 800b084:	d508      	bpl.n	800b098 <_printf_i+0x144>
 800b086:	6923      	ldr	r3, [r4, #16]
 800b088:	6861      	ldr	r1, [r4, #4]
 800b08a:	4299      	cmp	r1, r3
 800b08c:	bfde      	ittt	le
 800b08e:	2330      	movle	r3, #48	@ 0x30
 800b090:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b094:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b098:	1b92      	subs	r2, r2, r6
 800b09a:	6122      	str	r2, [r4, #16]
 800b09c:	f8cd a000 	str.w	sl, [sp]
 800b0a0:	464b      	mov	r3, r9
 800b0a2:	aa03      	add	r2, sp, #12
 800b0a4:	4621      	mov	r1, r4
 800b0a6:	4640      	mov	r0, r8
 800b0a8:	f7ff fee6 	bl	800ae78 <_printf_common>
 800b0ac:	3001      	adds	r0, #1
 800b0ae:	d14a      	bne.n	800b146 <_printf_i+0x1f2>
 800b0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b4:	b004      	add	sp, #16
 800b0b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ba:	6823      	ldr	r3, [r4, #0]
 800b0bc:	f043 0320 	orr.w	r3, r3, #32
 800b0c0:	6023      	str	r3, [r4, #0]
 800b0c2:	4833      	ldr	r0, [pc, #204]	@ (800b190 <_printf_i+0x23c>)
 800b0c4:	2778      	movs	r7, #120	@ 0x78
 800b0c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b0ca:	6823      	ldr	r3, [r4, #0]
 800b0cc:	6831      	ldr	r1, [r6, #0]
 800b0ce:	061f      	lsls	r7, r3, #24
 800b0d0:	f851 5b04 	ldr.w	r5, [r1], #4
 800b0d4:	d402      	bmi.n	800b0dc <_printf_i+0x188>
 800b0d6:	065f      	lsls	r7, r3, #25
 800b0d8:	bf48      	it	mi
 800b0da:	b2ad      	uxthmi	r5, r5
 800b0dc:	6031      	str	r1, [r6, #0]
 800b0de:	07d9      	lsls	r1, r3, #31
 800b0e0:	bf44      	itt	mi
 800b0e2:	f043 0320 	orrmi.w	r3, r3, #32
 800b0e6:	6023      	strmi	r3, [r4, #0]
 800b0e8:	b11d      	cbz	r5, 800b0f2 <_printf_i+0x19e>
 800b0ea:	2310      	movs	r3, #16
 800b0ec:	e7ac      	b.n	800b048 <_printf_i+0xf4>
 800b0ee:	4827      	ldr	r0, [pc, #156]	@ (800b18c <_printf_i+0x238>)
 800b0f0:	e7e9      	b.n	800b0c6 <_printf_i+0x172>
 800b0f2:	6823      	ldr	r3, [r4, #0]
 800b0f4:	f023 0320 	bic.w	r3, r3, #32
 800b0f8:	6023      	str	r3, [r4, #0]
 800b0fa:	e7f6      	b.n	800b0ea <_printf_i+0x196>
 800b0fc:	4616      	mov	r6, r2
 800b0fe:	e7bd      	b.n	800b07c <_printf_i+0x128>
 800b100:	6833      	ldr	r3, [r6, #0]
 800b102:	6825      	ldr	r5, [r4, #0]
 800b104:	6961      	ldr	r1, [r4, #20]
 800b106:	1d18      	adds	r0, r3, #4
 800b108:	6030      	str	r0, [r6, #0]
 800b10a:	062e      	lsls	r6, r5, #24
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	d501      	bpl.n	800b114 <_printf_i+0x1c0>
 800b110:	6019      	str	r1, [r3, #0]
 800b112:	e002      	b.n	800b11a <_printf_i+0x1c6>
 800b114:	0668      	lsls	r0, r5, #25
 800b116:	d5fb      	bpl.n	800b110 <_printf_i+0x1bc>
 800b118:	8019      	strh	r1, [r3, #0]
 800b11a:	2300      	movs	r3, #0
 800b11c:	6123      	str	r3, [r4, #16]
 800b11e:	4616      	mov	r6, r2
 800b120:	e7bc      	b.n	800b09c <_printf_i+0x148>
 800b122:	6833      	ldr	r3, [r6, #0]
 800b124:	1d1a      	adds	r2, r3, #4
 800b126:	6032      	str	r2, [r6, #0]
 800b128:	681e      	ldr	r6, [r3, #0]
 800b12a:	6862      	ldr	r2, [r4, #4]
 800b12c:	2100      	movs	r1, #0
 800b12e:	4630      	mov	r0, r6
 800b130:	f7f5 f856 	bl	80001e0 <memchr>
 800b134:	b108      	cbz	r0, 800b13a <_printf_i+0x1e6>
 800b136:	1b80      	subs	r0, r0, r6
 800b138:	6060      	str	r0, [r4, #4]
 800b13a:	6863      	ldr	r3, [r4, #4]
 800b13c:	6123      	str	r3, [r4, #16]
 800b13e:	2300      	movs	r3, #0
 800b140:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b144:	e7aa      	b.n	800b09c <_printf_i+0x148>
 800b146:	6923      	ldr	r3, [r4, #16]
 800b148:	4632      	mov	r2, r6
 800b14a:	4649      	mov	r1, r9
 800b14c:	4640      	mov	r0, r8
 800b14e:	47d0      	blx	sl
 800b150:	3001      	adds	r0, #1
 800b152:	d0ad      	beq.n	800b0b0 <_printf_i+0x15c>
 800b154:	6823      	ldr	r3, [r4, #0]
 800b156:	079b      	lsls	r3, r3, #30
 800b158:	d413      	bmi.n	800b182 <_printf_i+0x22e>
 800b15a:	68e0      	ldr	r0, [r4, #12]
 800b15c:	9b03      	ldr	r3, [sp, #12]
 800b15e:	4298      	cmp	r0, r3
 800b160:	bfb8      	it	lt
 800b162:	4618      	movlt	r0, r3
 800b164:	e7a6      	b.n	800b0b4 <_printf_i+0x160>
 800b166:	2301      	movs	r3, #1
 800b168:	4632      	mov	r2, r6
 800b16a:	4649      	mov	r1, r9
 800b16c:	4640      	mov	r0, r8
 800b16e:	47d0      	blx	sl
 800b170:	3001      	adds	r0, #1
 800b172:	d09d      	beq.n	800b0b0 <_printf_i+0x15c>
 800b174:	3501      	adds	r5, #1
 800b176:	68e3      	ldr	r3, [r4, #12]
 800b178:	9903      	ldr	r1, [sp, #12]
 800b17a:	1a5b      	subs	r3, r3, r1
 800b17c:	42ab      	cmp	r3, r5
 800b17e:	dcf2      	bgt.n	800b166 <_printf_i+0x212>
 800b180:	e7eb      	b.n	800b15a <_printf_i+0x206>
 800b182:	2500      	movs	r5, #0
 800b184:	f104 0619 	add.w	r6, r4, #25
 800b188:	e7f5      	b.n	800b176 <_printf_i+0x222>
 800b18a:	bf00      	nop
 800b18c:	0800b382 	.word	0x0800b382
 800b190:	0800b393 	.word	0x0800b393

0800b194 <memmove>:
 800b194:	4288      	cmp	r0, r1
 800b196:	b510      	push	{r4, lr}
 800b198:	eb01 0402 	add.w	r4, r1, r2
 800b19c:	d902      	bls.n	800b1a4 <memmove+0x10>
 800b19e:	4284      	cmp	r4, r0
 800b1a0:	4623      	mov	r3, r4
 800b1a2:	d807      	bhi.n	800b1b4 <memmove+0x20>
 800b1a4:	1e43      	subs	r3, r0, #1
 800b1a6:	42a1      	cmp	r1, r4
 800b1a8:	d008      	beq.n	800b1bc <memmove+0x28>
 800b1aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1b2:	e7f8      	b.n	800b1a6 <memmove+0x12>
 800b1b4:	4402      	add	r2, r0
 800b1b6:	4601      	mov	r1, r0
 800b1b8:	428a      	cmp	r2, r1
 800b1ba:	d100      	bne.n	800b1be <memmove+0x2a>
 800b1bc:	bd10      	pop	{r4, pc}
 800b1be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1c6:	e7f7      	b.n	800b1b8 <memmove+0x24>

0800b1c8 <_sbrk_r>:
 800b1c8:	b538      	push	{r3, r4, r5, lr}
 800b1ca:	4d06      	ldr	r5, [pc, #24]	@ (800b1e4 <_sbrk_r+0x1c>)
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	4604      	mov	r4, r0
 800b1d0:	4608      	mov	r0, r1
 800b1d2:	602b      	str	r3, [r5, #0]
 800b1d4:	f7f6 fb24 	bl	8001820 <_sbrk>
 800b1d8:	1c43      	adds	r3, r0, #1
 800b1da:	d102      	bne.n	800b1e2 <_sbrk_r+0x1a>
 800b1dc:	682b      	ldr	r3, [r5, #0]
 800b1de:	b103      	cbz	r3, 800b1e2 <_sbrk_r+0x1a>
 800b1e0:	6023      	str	r3, [r4, #0]
 800b1e2:	bd38      	pop	{r3, r4, r5, pc}
 800b1e4:	20002444 	.word	0x20002444

0800b1e8 <memcpy>:
 800b1e8:	440a      	add	r2, r1
 800b1ea:	4291      	cmp	r1, r2
 800b1ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1f0:	d100      	bne.n	800b1f4 <memcpy+0xc>
 800b1f2:	4770      	bx	lr
 800b1f4:	b510      	push	{r4, lr}
 800b1f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1fe:	4291      	cmp	r1, r2
 800b200:	d1f9      	bne.n	800b1f6 <memcpy+0xe>
 800b202:	bd10      	pop	{r4, pc}

0800b204 <_realloc_r>:
 800b204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b208:	4680      	mov	r8, r0
 800b20a:	4615      	mov	r5, r2
 800b20c:	460c      	mov	r4, r1
 800b20e:	b921      	cbnz	r1, 800b21a <_realloc_r+0x16>
 800b210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b214:	4611      	mov	r1, r2
 800b216:	f7ff bc4b 	b.w	800aab0 <_malloc_r>
 800b21a:	b92a      	cbnz	r2, 800b228 <_realloc_r+0x24>
 800b21c:	f7ff fbdc 	bl	800a9d8 <_free_r>
 800b220:	2400      	movs	r4, #0
 800b222:	4620      	mov	r0, r4
 800b224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b228:	f000 f81a 	bl	800b260 <_malloc_usable_size_r>
 800b22c:	4285      	cmp	r5, r0
 800b22e:	4606      	mov	r6, r0
 800b230:	d802      	bhi.n	800b238 <_realloc_r+0x34>
 800b232:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b236:	d8f4      	bhi.n	800b222 <_realloc_r+0x1e>
 800b238:	4629      	mov	r1, r5
 800b23a:	4640      	mov	r0, r8
 800b23c:	f7ff fc38 	bl	800aab0 <_malloc_r>
 800b240:	4607      	mov	r7, r0
 800b242:	2800      	cmp	r0, #0
 800b244:	d0ec      	beq.n	800b220 <_realloc_r+0x1c>
 800b246:	42b5      	cmp	r5, r6
 800b248:	462a      	mov	r2, r5
 800b24a:	4621      	mov	r1, r4
 800b24c:	bf28      	it	cs
 800b24e:	4632      	movcs	r2, r6
 800b250:	f7ff ffca 	bl	800b1e8 <memcpy>
 800b254:	4621      	mov	r1, r4
 800b256:	4640      	mov	r0, r8
 800b258:	f7ff fbbe 	bl	800a9d8 <_free_r>
 800b25c:	463c      	mov	r4, r7
 800b25e:	e7e0      	b.n	800b222 <_realloc_r+0x1e>

0800b260 <_malloc_usable_size_r>:
 800b260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b264:	1f18      	subs	r0, r3, #4
 800b266:	2b00      	cmp	r3, #0
 800b268:	bfbc      	itt	lt
 800b26a:	580b      	ldrlt	r3, [r1, r0]
 800b26c:	18c0      	addlt	r0, r0, r3
 800b26e:	4770      	bx	lr

0800b270 <_init>:
 800b270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b272:	bf00      	nop
 800b274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b276:	bc08      	pop	{r3}
 800b278:	469e      	mov	lr, r3
 800b27a:	4770      	bx	lr

0800b27c <_fini>:
 800b27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b27e:	bf00      	nop
 800b280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b282:	bc08      	pop	{r3}
 800b284:	469e      	mov	lr, r3
 800b286:	4770      	bx	lr
