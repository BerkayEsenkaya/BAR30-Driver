
BAR30-F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081cc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008354  08008354  00009354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083c4  080083c4  0000a0fc  2**0
                  CONTENTS
  4 .ARM          00000008  080083c4  080083c4  000093c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083cc  080083cc  0000a0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083cc  080083cc  000093cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080083d0  080083d0  000093d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  080083d4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a0fc  2**0
                  CONTENTS
 10 .bss          00001cb4  200000fc  200000fc  0000a0fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001db0  20001db0  0000a0fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a0fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000124d2  00000000  00000000  0000a12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003375  00000000  00000000  0001c5fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  0001f978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bd5  00000000  00000000  00020930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002287c  00000000  00000000  00021505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015758  00000000  00000000  00043d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c835a  00000000  00000000  000594d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00121833  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003fc8  00000000  00000000  00121878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00125840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800833c 	.word	0x0800833c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	0800833c 	.word	0x0800833c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <I2C_Init>:
 * GLOBAL FUNCTIONS
 ********************************************************/
/** Brief description which ends at this dot. Details follow
 *  here.
 */
void I2C_Init(void *handle, uint8_t I2CNo){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	460b      	mov	r3, r1
 80004c2:	70fb      	strb	r3, [r7, #3]
	I2C_HandleTypeDef_T *i2c;
	i2c = I2C_GetModule(I2CNo);
 80004c4:	78fb      	ldrb	r3, [r7, #3]
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 f864 	bl	8000594 <I2C_GetModule>
 80004cc:	60f8      	str	r0, [r7, #12]
    i2c->handle = handle;
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	687a      	ldr	r2, [r7, #4]
 80004d2:	601a      	str	r2, [r3, #0]
}
 80004d4:	bf00      	nop
 80004d6:	3710      	adds	r7, #16
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}

080004dc <I2C_ReadWrite_Poll>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
I2C_ReturnTypeDef_T I2C_ReadWrite_Poll(uint8_t I2CNo, uint8_t DevAddress, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af02      	add	r7, sp, #8
 80004e2:	603a      	str	r2, [r7, #0]
 80004e4:	461a      	mov	r2, r3
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]
 80004ea:	460b      	mov	r3, r1
 80004ec:	71bb      	strb	r3, [r7, #6]
 80004ee:	4613      	mov	r3, r2
 80004f0:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef_T *i2c;
	HAL_StatusTypeDef res;
	uint8_t txAddr, rxAddr;
	txAddr = DevAddress<<1;
 80004f2:	79bb      	ldrb	r3, [r7, #6]
 80004f4:	005b      	lsls	r3, r3, #1
 80004f6:	75fb      	strb	r3, [r7, #23]
	rxAddr = ((DevAddress<<1) | 0x01);
 80004f8:	79bb      	ldrb	r3, [r7, #6]
 80004fa:	005b      	lsls	r3, r3, #1
 80004fc:	b25b      	sxtb	r3, r3
 80004fe:	f043 0301 	orr.w	r3, r3, #1
 8000502:	b25b      	sxtb	r3, r3
 8000504:	75bb      	strb	r3, [r7, #22]
	i2c = I2C_GetModule(I2CNo);
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	4618      	mov	r0, r3
 800050a:	f000 f843 	bl	8000594 <I2C_GetModule>
 800050e:	6138      	str	r0, [r7, #16]
	if(rxLenght == 0){
 8000510:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000514:	2b00      	cmp	r3, #0
 8000516:	d114      	bne.n	8000542 <I2C_ReadWrite_Poll+0x66>
		res = HAL_I2C_Master_Transmit(i2c->handle , txAddr, txBuff, txLenght,300);
 8000518:	693b      	ldr	r3, [r7, #16]
 800051a:	6818      	ldr	r0, [r3, #0]
 800051c:	7dfb      	ldrb	r3, [r7, #23]
 800051e:	b299      	uxth	r1, r3
 8000520:	797b      	ldrb	r3, [r7, #5]
 8000522:	b29b      	uxth	r3, r3
 8000524:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000528:	9200      	str	r2, [sp, #0]
 800052a:	683a      	ldr	r2, [r7, #0]
 800052c:	f001 f980 	bl	8001830 <HAL_I2C_Master_Transmit>
 8000530:	4603      	mov	r3, r0
 8000532:	73fb      	strb	r3, [r7, #15]
		return res == I2C_ERROR;
 8000534:	7bfb      	ldrb	r3, [r7, #15]
 8000536:	2b01      	cmp	r3, #1
 8000538:	bf0c      	ite	eq
 800053a:	2301      	moveq	r3, #1
 800053c:	2300      	movne	r3, #0
 800053e:	b2db      	uxtb	r3, r3
 8000540:	e023      	b.n	800058a <I2C_ReadWrite_Poll+0xae>
	}else{
		HAL_I2C_Master_Transmit(i2c->handle , txAddr, txBuff, txLenght,300);
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	6818      	ldr	r0, [r3, #0]
 8000546:	7dfb      	ldrb	r3, [r7, #23]
 8000548:	b299      	uxth	r1, r3
 800054a:	797b      	ldrb	r3, [r7, #5]
 800054c:	b29b      	uxth	r3, r3
 800054e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000552:	9200      	str	r2, [sp, #0]
 8000554:	683a      	ldr	r2, [r7, #0]
 8000556:	f001 f96b 	bl	8001830 <HAL_I2C_Master_Transmit>
		HAL_Delay(2);
 800055a:	2002      	movs	r0, #2
 800055c:	f000 fd20 	bl	8000fa0 <HAL_Delay>
		res = HAL_I2C_Master_Receive(i2c->handle, rxAddr, rxBuff, rxLenght,300);
 8000560:	693b      	ldr	r3, [r7, #16]
 8000562:	6818      	ldr	r0, [r3, #0]
 8000564:	7dbb      	ldrb	r3, [r7, #22]
 8000566:	b299      	uxth	r1, r3
 8000568:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800056c:	b29b      	uxth	r3, r3
 800056e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000572:	9200      	str	r2, [sp, #0]
 8000574:	6a3a      	ldr	r2, [r7, #32]
 8000576:	f001 fa59 	bl	8001a2c <HAL_I2C_Master_Receive>
 800057a:	4603      	mov	r3, r0
 800057c:	73fb      	strb	r3, [r7, #15]
		return res == I2C_ERROR;
 800057e:	7bfb      	ldrb	r3, [r7, #15]
 8000580:	2b01      	cmp	r3, #1
 8000582:	bf0c      	ite	eq
 8000584:	2301      	moveq	r3, #1
 8000586:	2300      	movne	r3, #0
 8000588:	b2db      	uxtb	r3, r3
	}
}
 800058a:	4618      	mov	r0, r3
 800058c:	3718      	adds	r7, #24
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <I2C_GetModule>:
 * PRIVATE FUNCTIONS
 *********************************************************/
/** Brief description which ends at this dot. Details follow
 *  here.
 */
I2C_HandleTypeDef_T* I2C_GetModule(uint8_t I2CNo){
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	switch(I2CNo){
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	2b03      	cmp	r3, #3
 80005a2:	d00a      	beq.n	80005ba <I2C_GetModule+0x26>
 80005a4:	2b03      	cmp	r3, #3
 80005a6:	dc0a      	bgt.n	80005be <I2C_GetModule+0x2a>
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d002      	beq.n	80005b2 <I2C_GetModule+0x1e>
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	d002      	beq.n	80005b6 <I2C_GetModule+0x22>
 80005b0:	e005      	b.n	80005be <I2C_GetModule+0x2a>
		case I2CNO_1 : return &I2C_1; break;
 80005b2:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <I2C_GetModule+0x38>)
 80005b4:	e004      	b.n	80005c0 <I2C_GetModule+0x2c>
		case I2CNO_2 : return &I2C_2; break;
 80005b6:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <I2C_GetModule+0x3c>)
 80005b8:	e002      	b.n	80005c0 <I2C_GetModule+0x2c>
		case I2CNO_3 : return &I2C_3; break;
 80005ba:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <I2C_GetModule+0x40>)
 80005bc:	e000      	b.n	80005c0 <I2C_GetModule+0x2c>
		default : return NULL; break;
 80005be:	2300      	movs	r3, #0
	}
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	20000118 	.word	0x20000118
 80005d0:	20000120 	.word	0x20000120
 80005d4:	20000128 	.word	0x20000128

080005d8 <BAR30_Calc_Crc>:
/**
 * @brief MS5837 için 4-bit CRC hesaplayıcı
 * @param prom PROM registerlarının dizisi (8 eleman, her biri 16-bit)
 * @return 4-bit CRC değeri (0-15)
 */
uint8_t BAR30_Calc_Crc(uint16_t AllPromData[8]) {
 80005d8:	b480      	push	{r7}
 80005da:	b087      	sub	sp, #28
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
    uint8_t n_rem = 0x00;
 80005e0:	2300      	movs	r3, #0
 80005e2:	75fb      	strb	r3, [r7, #23]
    uint16_t crc_read = AllPromData[0] & 0x000F; // PROM'dan okunan CRC (4 bit)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	f003 030f 	and.w	r3, r3, #15
 80005ec:	81bb      	strh	r3, [r7, #12]
    AllPromData[0] &= 0xFFF0; // CRC alanını sıfırla (hesaplamayı etkileyen kısmı temizle)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	f023 030f 	bic.w	r3, r3, #15
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	801a      	strh	r2, [r3, #0]

    for (int cnt = 0; cnt < 16; cnt++) {
 80005fc:	2300      	movs	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]
 8000600:	e044      	b.n	800068c <BAR30_Calc_Crc+0xb4>
        uint8_t byte;
        if (cnt % 2 == 0)
 8000602:	693b      	ldr	r3, [r7, #16]
 8000604:	f003 0301 	and.w	r3, r3, #1
 8000608:	2b00      	cmp	r3, #0
 800060a:	d109      	bne.n	8000620 <BAR30_Calc_Crc+0x48>
            byte = (uint8_t)(AllPromData[cnt >> 1] >> 8);
 800060c:	693b      	ldr	r3, [r7, #16]
 800060e:	105b      	asrs	r3, r3, #1
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	4413      	add	r3, r2
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	0a1b      	lsrs	r3, r3, #8
 800061a:	b29b      	uxth	r3, r3
 800061c:	73fb      	strb	r3, [r7, #15]
 800061e:	e006      	b.n	800062e <BAR30_Calc_Crc+0x56>
        else
            byte = (uint8_t)(AllPromData[cnt >> 1] & 0x00FF);
 8000620:	693b      	ldr	r3, [r7, #16]
 8000622:	105b      	asrs	r3, r3, #1
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	73fb      	strb	r3, [r7, #15]

        uint8_t tmp = (n_rem >> 4) ^ (byte >> 4);
 800062e:	7dfb      	ldrb	r3, [r7, #23]
 8000630:	091b      	lsrs	r3, r3, #4
 8000632:	b2da      	uxtb	r2, r3
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	091b      	lsrs	r3, r3, #4
 8000638:	b2db      	uxtb	r3, r3
 800063a:	4053      	eors	r3, r2
 800063c:	72fb      	strb	r3, [r7, #11]
        n_rem = (n_rem << 4) ^ BAR30_CRC_LU_Table[tmp & 0x0F];
 800063e:	7dfb      	ldrb	r3, [r7, #23]
 8000640:	011b      	lsls	r3, r3, #4
 8000642:	b25a      	sxtb	r2, r3
 8000644:	7afb      	ldrb	r3, [r7, #11]
 8000646:	f003 030f 	and.w	r3, r3, #15
 800064a:	491a      	ldr	r1, [pc, #104]	@ (80006b4 <BAR30_Calc_Crc+0xdc>)
 800064c:	5ccb      	ldrb	r3, [r1, r3]
 800064e:	b25b      	sxtb	r3, r3
 8000650:	4053      	eors	r3, r2
 8000652:	b25b      	sxtb	r3, r3
 8000654:	75fb      	strb	r3, [r7, #23]

        tmp = (n_rem >> 4) ^ (byte & 0x0F);
 8000656:	7dfb      	ldrb	r3, [r7, #23]
 8000658:	091b      	lsrs	r3, r3, #4
 800065a:	b2db      	uxtb	r3, r3
 800065c:	b25a      	sxtb	r2, r3
 800065e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000662:	f003 030f 	and.w	r3, r3, #15
 8000666:	b25b      	sxtb	r3, r3
 8000668:	4053      	eors	r3, r2
 800066a:	b25b      	sxtb	r3, r3
 800066c:	72fb      	strb	r3, [r7, #11]
        n_rem = (n_rem << 4) ^ BAR30_CRC_LU_Table[tmp & 0x0F];
 800066e:	7dfb      	ldrb	r3, [r7, #23]
 8000670:	011b      	lsls	r3, r3, #4
 8000672:	b25a      	sxtb	r2, r3
 8000674:	7afb      	ldrb	r3, [r7, #11]
 8000676:	f003 030f 	and.w	r3, r3, #15
 800067a:	490e      	ldr	r1, [pc, #56]	@ (80006b4 <BAR30_Calc_Crc+0xdc>)
 800067c:	5ccb      	ldrb	r3, [r1, r3]
 800067e:	b25b      	sxtb	r3, r3
 8000680:	4053      	eors	r3, r2
 8000682:	b25b      	sxtb	r3, r3
 8000684:	75fb      	strb	r3, [r7, #23]
    for (int cnt = 0; cnt < 16; cnt++) {
 8000686:	693b      	ldr	r3, [r7, #16]
 8000688:	3301      	adds	r3, #1
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	693b      	ldr	r3, [r7, #16]
 800068e:	2b0f      	cmp	r3, #15
 8000690:	ddb7      	ble.n	8000602 <BAR30_Calc_Crc+0x2a>
    }

    n_rem = (n_rem >> 12) & 0x0F; // Sadece 4 bitlik CRC değeri kalır
 8000692:	2300      	movs	r3, #0
 8000694:	75fb      	strb	r3, [r7, #23]

//    handle->PromData[7] |= crc_read; // CRC alanını geri yükle (opsiyonel)

    if((n_rem ^ 0x00) == crc_read)
 8000696:	7dfb      	ldrb	r3, [r7, #23]
 8000698:	b29b      	uxth	r3, r3
 800069a:	89ba      	ldrh	r2, [r7, #12]
 800069c:	429a      	cmp	r2, r3
 800069e:	d101      	bne.n	80006a4 <BAR30_Calc_Crc+0xcc>
    	return BAR30_OK;
 80006a0:	2300      	movs	r3, #0
 80006a2:	e000      	b.n	80006a6 <BAR30_Calc_Crc+0xce>
    else
    	return BAR30_ERROR;
 80006a4:	2301      	movs	r3, #1
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	371c      	adds	r7, #28
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	0800839c 	.word	0x0800839c

080006b8 <BAR30_Init>:
/** Brief description which ends at this dot. Details follow
 *  here.
 */
BAR30_ReturnTypeDef_T BAR30_Init(BAR30_Sensor_T *handle, uint8_t i2cNo, uint8_t devI2CAddress){
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]
 80006c4:	4613      	mov	r3, r2
 80006c6:	70bb      	strb	r3, [r7, #2]
	handle->devParam.I2C_No = i2cNo;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	78fa      	ldrb	r2, [r7, #3]
 80006cc:	701a      	strb	r2, [r3, #0]
	handle->devParam.DevAdress = devI2CAddress;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	78ba      	ldrb	r2, [r7, #2]
 80006d2:	705a      	strb	r2, [r3, #1]
	return BAR30_OK;
 80006d4:	2300      	movs	r3, #0
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <BAR30_Reset>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BAR30_ReturnTypeDef_T BAR30_Reset(BAR30_Sensor_T *handle){
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b082      	sub	sp, #8
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
	return BAR30_Write(handle, BAR30_COMMAND_RESET);
 80006ea:	2178      	movs	r1, #120	@ 0x78
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f000 f8cb 	bl	8000888 <BAR30_Write>
 80006f2:	4603      	mov	r3, r0
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <BAR30_StartPressureConversion>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BAR30_ReturnTypeDef_T BAR30_StartPressureConversion(BAR30_Sensor_T *handle){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	return BAR30_Write(handle, BAR30_COMMAND_START_PRESSURE_CONVERT_WITH_OSR_1024);
 8000704:	2144      	movs	r1, #68	@ 0x44
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f000 f8be 	bl	8000888 <BAR30_Write>
 800070c:	4603      	mov	r3, r0
}
 800070e:	4618      	mov	r0, r3
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <BAR30_ReadPressure>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BAR30_ReturnTypeDef_T BAR30_ReadPressure(BAR30_Sensor_T *handle){
 8000716:	b580      	push	{r7, lr}
 8000718:	b084      	sub	sp, #16
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
	uint8_t RxBuff[3];
	if(!BAR30_ReadMeasData(handle, BAR30_COMMAND_ADC_READ, RxBuff))
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	461a      	mov	r2, r3
 8000724:	2100      	movs	r1, #0
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f000 f8db 	bl	80008e2 <BAR30_ReadMeasData>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d10b      	bne.n	800074a <BAR30_ReadPressure+0x34>
		handle->PressureData = RxBuff[0] | (RxBuff[1]<<8) | RxBuff[2]<<16;
 8000732:	7b3b      	ldrb	r3, [r7, #12]
 8000734:	461a      	mov	r2, r3
 8000736:	7b7b      	ldrb	r3, [r7, #13]
 8000738:	021b      	lsls	r3, r3, #8
 800073a:	431a      	orrs	r2, r3
 800073c:	7bbb      	ldrb	r3, [r7, #14]
 800073e:	041b      	lsls	r3, r3, #16
 8000740:	4313      	orrs	r3, r2
 8000742:	461a      	mov	r2, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	615a      	str	r2, [r3, #20]
	else
		return BAR30_ERROR;
}
 8000748:	e000      	b.n	800074c <BAR30_ReadPressure+0x36>
		return BAR30_ERROR;
 800074a:	2301      	movs	r3, #1
}
 800074c:	4618      	mov	r0, r3
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <BAR30_Get_AllPromData>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BAR30_ReturnTypeDef_T BAR30_Get_AllPromData(BAR30_Sensor_T *handle){
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	BAR30_ReturnTypeDef_T res = 0, crc;
 800075c:	2300      	movs	r3, #0
 800075e:	76fb      	strb	r3, [r7, #27]
	uint8_t RxBuff[2];
	uint16_t AllPromData[7];
	BAR30_Read(handle, BAR30_COMMAND_PROM_READ_1,  RxBuff);
 8000760:	f107 0318 	add.w	r3, r7, #24
 8000764:	461a      	mov	r2, r3
 8000766:	21a0      	movs	r1, #160	@ 0xa0
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f000 f8a3 	bl	80008b4 <BAR30_Read>
	AllPromData[0] = RxBuff[1] | (RxBuff[0]<<8);
 800076e:	7e7b      	ldrb	r3, [r7, #25]
 8000770:	b21a      	sxth	r2, r3
 8000772:	7e3b      	ldrb	r3, [r7, #24]
 8000774:	021b      	lsls	r3, r3, #8
 8000776:	b21b      	sxth	r3, r3
 8000778:	4313      	orrs	r3, r2
 800077a:	b21b      	sxth	r3, r3
 800077c:	b29b      	uxth	r3, r3
 800077e:	813b      	strh	r3, [r7, #8]
	BAR30_Read(handle, BAR30_COMMAND_PROM_READ_2,  RxBuff);
 8000780:	f107 0318 	add.w	r3, r7, #24
 8000784:	461a      	mov	r2, r3
 8000786:	21a2      	movs	r1, #162	@ 0xa2
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f000 f893 	bl	80008b4 <BAR30_Read>
	AllPromData[1] = RxBuff[1] | (RxBuff[0]<<8);
 800078e:	7e7b      	ldrb	r3, [r7, #25]
 8000790:	b21a      	sxth	r2, r3
 8000792:	7e3b      	ldrb	r3, [r7, #24]
 8000794:	021b      	lsls	r3, r3, #8
 8000796:	b21b      	sxth	r3, r3
 8000798:	4313      	orrs	r3, r2
 800079a:	b21b      	sxth	r3, r3
 800079c:	b29b      	uxth	r3, r3
 800079e:	817b      	strh	r3, [r7, #10]
	BAR30_Read(handle, BAR30_COMMAND_PROM_READ_3,  RxBuff);
 80007a0:	f107 0318 	add.w	r3, r7, #24
 80007a4:	461a      	mov	r2, r3
 80007a6:	21a4      	movs	r1, #164	@ 0xa4
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f000 f883 	bl	80008b4 <BAR30_Read>
	AllPromData[2] = RxBuff[1] | (RxBuff[0]<<8);
 80007ae:	7e7b      	ldrb	r3, [r7, #25]
 80007b0:	b21a      	sxth	r2, r3
 80007b2:	7e3b      	ldrb	r3, [r7, #24]
 80007b4:	021b      	lsls	r3, r3, #8
 80007b6:	b21b      	sxth	r3, r3
 80007b8:	4313      	orrs	r3, r2
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	b29b      	uxth	r3, r3
 80007be:	81bb      	strh	r3, [r7, #12]
	BAR30_Read(handle, BAR30_COMMAND_PROM_READ_4,  RxBuff);
 80007c0:	f107 0318 	add.w	r3, r7, #24
 80007c4:	461a      	mov	r2, r3
 80007c6:	21a6      	movs	r1, #166	@ 0xa6
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f000 f873 	bl	80008b4 <BAR30_Read>
	AllPromData[3] = RxBuff[1] | (RxBuff[0]<<8);
 80007ce:	7e7b      	ldrb	r3, [r7, #25]
 80007d0:	b21a      	sxth	r2, r3
 80007d2:	7e3b      	ldrb	r3, [r7, #24]
 80007d4:	021b      	lsls	r3, r3, #8
 80007d6:	b21b      	sxth	r3, r3
 80007d8:	4313      	orrs	r3, r2
 80007da:	b21b      	sxth	r3, r3
 80007dc:	b29b      	uxth	r3, r3
 80007de:	81fb      	strh	r3, [r7, #14]
    BAR30_Read(handle, BAR30_COMMAND_PROM_READ_5,  RxBuff);
 80007e0:	f107 0318 	add.w	r3, r7, #24
 80007e4:	461a      	mov	r2, r3
 80007e6:	21a8      	movs	r1, #168	@ 0xa8
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f000 f863 	bl	80008b4 <BAR30_Read>
    AllPromData[4] = RxBuff[1] | (RxBuff[0]<<8);
 80007ee:	7e7b      	ldrb	r3, [r7, #25]
 80007f0:	b21a      	sxth	r2, r3
 80007f2:	7e3b      	ldrb	r3, [r7, #24]
 80007f4:	021b      	lsls	r3, r3, #8
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	b21b      	sxth	r3, r3
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	823b      	strh	r3, [r7, #16]
	BAR30_Read(handle, BAR30_COMMAND_PROM_READ_6,  RxBuff);
 8000800:	f107 0318 	add.w	r3, r7, #24
 8000804:	461a      	mov	r2, r3
 8000806:	21aa      	movs	r1, #170	@ 0xaa
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f000 f853 	bl	80008b4 <BAR30_Read>
	AllPromData[5] = RxBuff[1] | (RxBuff[0]<<8);
 800080e:	7e7b      	ldrb	r3, [r7, #25]
 8000810:	b21a      	sxth	r2, r3
 8000812:	7e3b      	ldrb	r3, [r7, #24]
 8000814:	021b      	lsls	r3, r3, #8
 8000816:	b21b      	sxth	r3, r3
 8000818:	4313      	orrs	r3, r2
 800081a:	b21b      	sxth	r3, r3
 800081c:	b29b      	uxth	r3, r3
 800081e:	827b      	strh	r3, [r7, #18]
    BAR30_Read(handle, BAR30_COMMAND_PROM_READ_7,  RxBuff);
 8000820:	f107 0318 	add.w	r3, r7, #24
 8000824:	461a      	mov	r2, r3
 8000826:	21ac      	movs	r1, #172	@ 0xac
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f000 f843 	bl	80008b4 <BAR30_Read>
    AllPromData[6] = RxBuff[1] | (RxBuff[0]<<8);
 800082e:	7e7b      	ldrb	r3, [r7, #25]
 8000830:	b21a      	sxth	r2, r3
 8000832:	7e3b      	ldrb	r3, [r7, #24]
 8000834:	021b      	lsls	r3, r3, #8
 8000836:	b21b      	sxth	r3, r3
 8000838:	4313      	orrs	r3, r2
 800083a:	b21b      	sxth	r3, r3
 800083c:	b29b      	uxth	r3, r3
 800083e:	82bb      	strh	r3, [r7, #20]
//    BAR30_Read(handle, BAR30_COMMAND_PROM_READ_8,  RxBuff);
//    AllPromData[7] = RxBuff[1] | (RxBuff[0]<<8);
//    BAR30_Read(handle, BAR30_COMMAND_PROM_READ_9,  RxBuff);
//    AllPromData[8] = RxBuff[1] | (RxBuff[0]<<8);
    if(BAR30_Calc_Crc(AllPromData) == BAR30_OK){
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff fec7 	bl	80005d8 <BAR30_Calc_Crc>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d116      	bne.n	800087e <BAR30_Get_AllPromData+0x12a>
    	for(int i=0; i<7; i++){
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
 8000854:	e00e      	b.n	8000874 <BAR30_Get_AllPromData+0x120>
    		handle->PromData[i] = AllPromData[i];
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	3320      	adds	r3, #32
 800085c:	443b      	add	r3, r7
 800085e:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	4413      	add	r3, r2
 800086a:	460a      	mov	r2, r1
 800086c:	805a      	strh	r2, [r3, #2]
    	for(int i=0; i<7; i++){
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	3301      	adds	r3, #1
 8000872:	61fb      	str	r3, [r7, #28]
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	2b06      	cmp	r3, #6
 8000878:	dded      	ble.n	8000856 <BAR30_Get_AllPromData+0x102>
    	}
    	return BAR30_OK;
 800087a:	2300      	movs	r3, #0
 800087c:	e000      	b.n	8000880 <BAR30_Get_AllPromData+0x12c>
    }else
    	return BAR30_ERROR;
 800087e:	2301      	movs	r3, #1

	if(res)
		return BAR30_ERROR;
	else
		return BAR30_OK;*/
}
 8000880:	4618      	mov	r0, r3
 8000882:	3720      	adds	r7, #32
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <BAR30_Write>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BAR30_ReturnTypeDef_T BAR30_Write(BAR30_Sensor_T *handle, uint8_t command){
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af02      	add	r7, sp, #8
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	460b      	mov	r3, r1
 8000892:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[1];
	TxBuff[0] = command;
 8000894:	78fb      	ldrb	r3, [r7, #3]
 8000896:	733b      	strb	r3, [r7, #12]
	return BAR30_SendReceive(handle, TxBuff, 2, NULL, 0);
 8000898:	f107 010c 	add.w	r1, r7, #12
 800089c:	2300      	movs	r3, #0
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	2300      	movs	r3, #0
 80008a2:	2202      	movs	r2, #2
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f000 f833 	bl	8000910 <BAR30_SendReceive>
 80008aa:	4603      	mov	r3, r0
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <BAR30_Read>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BAR30_ReturnTypeDef_T BAR30_Read(BAR30_Sensor_T *handle, uint8_t command, uint8_t *buffer){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af02      	add	r7, sp, #8
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	460b      	mov	r3, r1
 80008be:	607a      	str	r2, [r7, #4]
 80008c0:	72fb      	strb	r3, [r7, #11]
	uint8_t TxBuff[1];
	TxBuff[0] = command;
 80008c2:	7afb      	ldrb	r3, [r7, #11]
 80008c4:	753b      	strb	r3, [r7, #20]
	return BAR30_SendReceive(handle, TxBuff, 1, buffer, 2);
 80008c6:	f107 0114 	add.w	r1, r7, #20
 80008ca:	2302      	movs	r3, #2
 80008cc:	9300      	str	r3, [sp, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2201      	movs	r2, #1
 80008d2:	68f8      	ldr	r0, [r7, #12]
 80008d4:	f000 f81c 	bl	8000910 <BAR30_SendReceive>
 80008d8:	4603      	mov	r3, r0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <BAR30_ReadMeasData>:

BAR30_ReturnTypeDef_T BAR30_ReadMeasData(BAR30_Sensor_T *handle, uint8_t command, uint8_t *buffer){
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b088      	sub	sp, #32
 80008e6:	af02      	add	r7, sp, #8
 80008e8:	60f8      	str	r0, [r7, #12]
 80008ea:	460b      	mov	r3, r1
 80008ec:	607a      	str	r2, [r7, #4]
 80008ee:	72fb      	strb	r3, [r7, #11]
	uint8_t TxBuff[1];
	TxBuff[0] = command;
 80008f0:	7afb      	ldrb	r3, [r7, #11]
 80008f2:	753b      	strb	r3, [r7, #20]
	return BAR30_SendReceive(handle, TxBuff, 1, buffer, 3);
 80008f4:	f107 0114 	add.w	r1, r7, #20
 80008f8:	2303      	movs	r3, #3
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2201      	movs	r2, #1
 8000900:	68f8      	ldr	r0, [r7, #12]
 8000902:	f000 f805 	bl	8000910 <BAR30_SendReceive>
 8000906:	4603      	mov	r3, r0
}
 8000908:	4618      	mov	r0, r3
 800090a:	3718      	adds	r7, #24
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <BAR30_SendReceive>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BAR30_ReturnTypeDef_T BAR30_SendReceive(BAR30_Sensor_T *handle, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af02      	add	r7, sp, #8
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	4613      	mov	r3, r2
 800091e:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(10);
 8000920:	200a      	movs	r0, #10
 8000922:	f000 fb3d 	bl	8000fa0 <HAL_Delay>
	return BAR30_CommPorter_SendReceive(handle->devParam.I2C_No, handle->devParam.DevAdress, txBuff, txLenght, rxBuff, rxLenght);
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	7818      	ldrb	r0, [r3, #0]
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	7859      	ldrb	r1, [r3, #1]
 800092e:	79fa      	ldrb	r2, [r7, #7]
 8000930:	7e3b      	ldrb	r3, [r7, #24]
 8000932:	9301      	str	r3, [sp, #4]
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	4613      	mov	r3, r2
 800093a:	68ba      	ldr	r2, [r7, #8]
 800093c:	f000 f805 	bl	800094a <BAR30_CommPorter_SendReceive>
 8000940:	4603      	mov	r3, r0
}
 8000942:	4618      	mov	r0, r3
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <BAR30_CommPorter_SendReceive>:
#include <stdint.h>
#include "BAR30_CommPorter.h"
#include "I2C.h"

uint8_t BAR30_CommPorter_SendReceive(uint8_t I2CNo, uint8_t DevAddress, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 800094a:	b580      	push	{r7, lr}
 800094c:	b084      	sub	sp, #16
 800094e:	af02      	add	r7, sp, #8
 8000950:	603a      	str	r2, [r7, #0]
 8000952:	461a      	mov	r2, r3
 8000954:	4603      	mov	r3, r0
 8000956:	71fb      	strb	r3, [r7, #7]
 8000958:	460b      	mov	r3, r1
 800095a:	71bb      	strb	r3, [r7, #6]
 800095c:	4613      	mov	r3, r2
 800095e:	717b      	strb	r3, [r7, #5]
	return I2C_ReadWrite_Poll(I2CNo, DevAddress, txBuff, txLenght, rxBuff, rxLenght);
 8000960:	797a      	ldrb	r2, [r7, #5]
 8000962:	79b9      	ldrb	r1, [r7, #6]
 8000964:	79f8      	ldrb	r0, [r7, #7]
 8000966:	7d3b      	ldrb	r3, [r7, #20]
 8000968:	9301      	str	r3, [sp, #4]
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	9300      	str	r3, [sp, #0]
 800096e:	4613      	mov	r3, r2
 8000970:	683a      	ldr	r2, [r7, #0]
 8000972:	f7ff fdb3 	bl	80004dc <I2C_ReadWrite_Poll>
 8000976:	4603      	mov	r3, r0
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000984:	f000 fa9a 	bl	8000ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000988:	f000 f824 	bl	80009d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098c:	f000 f8be 	bl	8000b0c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000990:	f006 ffb4 	bl	80078fc <MX_USB_DEVICE_Init>
  MX_I2C3_Init();
 8000994:	f000 f888 	bl	8000aa8 <MX_I2C3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  BAR30_Init(&BAR30_1, I2CNO_3, (0x40));
 8000998:	2240      	movs	r2, #64	@ 0x40
 800099a:	2103      	movs	r1, #3
 800099c:	480c      	ldr	r0, [pc, #48]	@ (80009d0 <main+0x50>)
 800099e:	f7ff fe8b 	bl	80006b8 <BAR30_Init>
//          HAL_I2C_Master_Transmit(&hi2c3, 0x40, Txbuffer, 1, 100);
//          HAL_I2C_Master_Receive(&hi2c3, 0x40, RxBuffer, 2, 100);
//          Txbuffer[0] = BAR30_COMAND_PROM_READ_7;
//            HAL_I2C_Master_Transmit(&hi2c3, 0x40, Txbuffer, 1, 100);
//            HAL_I2C_Master_Receive(&hi2c3, 0x40, RxBuffer, 2, 100);
  HAL_Delay(50);
 80009a2:	2032      	movs	r0, #50	@ 0x32
 80009a4:	f000 fafc 	bl	8000fa0 <HAL_Delay>
  BAR30_Reset(&BAR30_1);
 80009a8:	4809      	ldr	r0, [pc, #36]	@ (80009d0 <main+0x50>)
 80009aa:	f7ff fe9a 	bl	80006e2 <BAR30_Reset>
  HAL_Delay(50);
 80009ae:	2032      	movs	r0, #50	@ 0x32
 80009b0:	f000 faf6 	bl	8000fa0 <HAL_Delay>
while (1)
{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	BAR30_Get_AllPromData(&BAR30_1);
 80009b4:	4806      	ldr	r0, [pc, #24]	@ (80009d0 <main+0x50>)
 80009b6:	f7ff fecd 	bl	8000754 <BAR30_Get_AllPromData>
	BAR30_StartPressureConversion(&BAR30_1);
 80009ba:	4805      	ldr	r0, [pc, #20]	@ (80009d0 <main+0x50>)
 80009bc:	f7ff fe9e 	bl	80006fc <BAR30_StartPressureConversion>
	HAL_Delay(100);
 80009c0:	2064      	movs	r0, #100	@ 0x64
 80009c2:	f000 faed 	bl	8000fa0 <HAL_Delay>
	BAR30_ReadPressure(&BAR30_1);
 80009c6:	4802      	ldr	r0, [pc, #8]	@ (80009d0 <main+0x50>)
 80009c8:	f7ff fea5 	bl	8000716 <BAR30_ReadPressure>
	BAR30_Get_AllPromData(&BAR30_1);
 80009cc:	bf00      	nop
 80009ce:	e7f1      	b.n	80009b4 <main+0x34>
 80009d0:	20000130 	.word	0x20000130

080009d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b094      	sub	sp, #80	@ 0x50
 80009d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009da:	f107 0320 	add.w	r3, r7, #32
 80009de:	2230      	movs	r2, #48	@ 0x30
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f007 fc7e 	bl	80082e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f8:	2300      	movs	r3, #0
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	4b28      	ldr	r3, [pc, #160]	@ (8000aa0 <SystemClock_Config+0xcc>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a00:	4a27      	ldr	r2, [pc, #156]	@ (8000aa0 <SystemClock_Config+0xcc>)
 8000a02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a08:	4b25      	ldr	r3, [pc, #148]	@ (8000aa0 <SystemClock_Config+0xcc>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a14:	2300      	movs	r3, #0
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	4b22      	ldr	r3, [pc, #136]	@ (8000aa4 <SystemClock_Config+0xd0>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a21      	ldr	r2, [pc, #132]	@ (8000aa4 <SystemClock_Config+0xd0>)
 8000a1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a22:	6013      	str	r3, [r2, #0]
 8000a24:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa4 <SystemClock_Config+0xd0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a30:	2301      	movs	r3, #1
 8000a32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a38:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a3e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a44:	2308      	movs	r3, #8
 8000a46:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a48:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a4c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a52:	2307      	movs	r3, #7
 8000a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a56:	f107 0320 	add.w	r3, r7, #32
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f002 fff0 	bl	8003a40 <HAL_RCC_OscConfig>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a66:	f000 f913 	bl	8000c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6a:	230f      	movs	r3, #15
 8000a6c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a76:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	2105      	movs	r1, #5
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f003 fa51 	bl	8003f30 <HAL_RCC_ClockConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a94:	f000 f8fc 	bl	8000c90 <Error_Handler>
  }
}
 8000a98:	bf00      	nop
 8000a9a:	3750      	adds	r7, #80	@ 0x50
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40007000 	.word	0x40007000

08000aa8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000aac:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <MX_I2C3_Init+0x58>)
 8000aae:	4a15      	ldr	r2, [pc, #84]	@ (8000b04 <MX_I2C3_Init+0x5c>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000ab2:	4b13      	ldr	r3, [pc, #76]	@ (8000b00 <MX_I2C3_Init+0x58>)
 8000ab4:	4a14      	ldr	r2, [pc, #80]	@ (8000b08 <MX_I2C3_Init+0x60>)
 8000ab6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <MX_I2C3_Init+0x58>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000abe:	4b10      	ldr	r3, [pc, #64]	@ (8000b00 <MX_I2C3_Init+0x58>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <MX_I2C3_Init+0x58>)
 8000ac6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000aca:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <MX_I2C3_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <MX_I2C3_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <MX_I2C3_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <MX_I2C3_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ae4:	4806      	ldr	r0, [pc, #24]	@ (8000b00 <MX_I2C3_Init+0x58>)
 8000ae6:	f000 fd5f 	bl	80015a8 <HAL_I2C_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000af0:	f000 f8ce 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */
  I2C_Init(&hi2c3, I2CNO_3);
 8000af4:	2103      	movs	r1, #3
 8000af6:	4802      	ldr	r0, [pc, #8]	@ (8000b00 <MX_I2C3_Init+0x58>)
 8000af8:	f7ff fcde 	bl	80004b8 <I2C_Init>
  /* USER CODE END I2C3_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000174 	.word	0x20000174
 8000b04:	40005c00 	.word	0x40005c00
 8000b08:	000186a0 	.word	0x000186a0

08000b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08c      	sub	sp, #48	@ 0x30
 8000b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	61bb      	str	r3, [r7, #24]
 8000b26:	4b4d      	ldr	r3, [pc, #308]	@ (8000c5c <MX_GPIO_Init+0x150>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	4a4c      	ldr	r2, [pc, #304]	@ (8000c5c <MX_GPIO_Init+0x150>)
 8000b2c:	f043 0304 	orr.w	r3, r3, #4
 8000b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b32:	4b4a      	ldr	r3, [pc, #296]	@ (8000c5c <MX_GPIO_Init+0x150>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	f003 0304 	and.w	r3, r3, #4
 8000b3a:	61bb      	str	r3, [r7, #24]
 8000b3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
 8000b42:	4b46      	ldr	r3, [pc, #280]	@ (8000c5c <MX_GPIO_Init+0x150>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a45      	ldr	r2, [pc, #276]	@ (8000c5c <MX_GPIO_Init+0x150>)
 8000b48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b43      	ldr	r3, [pc, #268]	@ (8000c5c <MX_GPIO_Init+0x150>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	4b3f      	ldr	r3, [pc, #252]	@ (8000c5c <MX_GPIO_Init+0x150>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	4a3e      	ldr	r2, [pc, #248]	@ (8000c5c <MX_GPIO_Init+0x150>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6a:	4b3c      	ldr	r3, [pc, #240]	@ (8000c5c <MX_GPIO_Init+0x150>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b38      	ldr	r3, [pc, #224]	@ (8000c5c <MX_GPIO_Init+0x150>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	4a37      	ldr	r2, [pc, #220]	@ (8000c5c <MX_GPIO_Init+0x150>)
 8000b80:	f043 0310 	orr.w	r3, r3, #16
 8000b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b86:	4b35      	ldr	r3, [pc, #212]	@ (8000c5c <MX_GPIO_Init+0x150>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	f003 0310 	and.w	r3, r3, #16
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	4b31      	ldr	r3, [pc, #196]	@ (8000c5c <MX_GPIO_Init+0x150>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4a30      	ldr	r2, [pc, #192]	@ (8000c5c <MX_GPIO_Init+0x150>)
 8000b9c:	f043 0308 	orr.w	r3, r3, #8
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4b2e      	ldr	r3, [pc, #184]	@ (8000c5c <MX_GPIO_Init+0x150>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0308 	and.w	r3, r3, #8
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c5c <MX_GPIO_Init+0x150>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a29      	ldr	r2, [pc, #164]	@ (8000c5c <MX_GPIO_Init+0x150>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b27      	ldr	r3, [pc, #156]	@ (8000c5c <MX_GPIO_Init+0x150>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000bd0:	4823      	ldr	r0, [pc, #140]	@ (8000c60 <MX_GPIO_Init+0x154>)
 8000bd2:	f000 fcb7 	bl	8001544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bda:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be4:	f107 031c 	add.w	r3, r7, #28
 8000be8:	4619      	mov	r1, r3
 8000bea:	481e      	ldr	r0, [pc, #120]	@ (8000c64 <MX_GPIO_Init+0x158>)
 8000bec:	f000 fb0e 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	4619      	mov	r1, r3
 8000c02:	4819      	ldr	r0, [pc, #100]	@ (8000c68 <MX_GPIO_Init+0x15c>)
 8000c04:	f000 fb02 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c0e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c14:	2302      	movs	r3, #2
 8000c16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4813      	ldr	r0, [pc, #76]	@ (8000c6c <MX_GPIO_Init+0x160>)
 8000c20:	f000 faf4 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8000c24:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4808      	ldr	r0, [pc, #32]	@ (8000c60 <MX_GPIO_Init+0x154>)
 8000c3e:	f000 fae5 	bl	800120c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	2017      	movs	r0, #23
 8000c48:	f000 faa9 	bl	800119e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c4c:	2017      	movs	r0, #23
 8000c4e:	f000 fac2 	bl	80011d6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c52:	bf00      	nop
 8000c54:	3730      	adds	r7, #48	@ 0x30
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020c00 	.word	0x40020c00
 8000c64:	40020800 	.word	0x40020800
 8000c68:	40020400 	.word	0x40020400
 8000c6c:	40021000 	.word	0x40021000

08000c70 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  if(GPIO_PIN_9)
	  MPU6050_1.dataReadyFlag = 1;
 8000c7a:	4b04      	ldr	r3, [pc, #16]	@ (8000c8c <HAL_GPIO_EXTI_Callback+0x1c>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	701a      	strb	r2, [r3, #0]
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	20000148 	.word	0x20000148

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <Error_Handler+0x8>

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	4b10      	ldr	r3, [pc, #64]	@ (8000ce8 <HAL_MspInit+0x4c>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000caa:	4a0f      	ldr	r2, [pc, #60]	@ (8000ce8 <HAL_MspInit+0x4c>)
 8000cac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce8 <HAL_MspInit+0x4c>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <HAL_MspInit+0x4c>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc6:	4a08      	ldr	r2, [pc, #32]	@ (8000ce8 <HAL_MspInit+0x4c>)
 8000cc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cce:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <HAL_MspInit+0x4c>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cda:	2007      	movs	r0, #7
 8000cdc:	f000 fa54 	bl	8001188 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40023800 	.word	0x40023800

08000cec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	@ 0x28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a29      	ldr	r2, [pc, #164]	@ (8000db0 <HAL_I2C_MspInit+0xc4>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d14b      	bne.n	8000da6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	4b28      	ldr	r3, [pc, #160]	@ (8000db4 <HAL_I2C_MspInit+0xc8>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	4a27      	ldr	r2, [pc, #156]	@ (8000db4 <HAL_I2C_MspInit+0xc8>)
 8000d18:	f043 0304 	orr.w	r3, r3, #4
 8000d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1e:	4b25      	ldr	r3, [pc, #148]	@ (8000db4 <HAL_I2C_MspInit+0xc8>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	f003 0304 	and.w	r3, r3, #4
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	4b21      	ldr	r3, [pc, #132]	@ (8000db4 <HAL_I2C_MspInit+0xc8>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	4a20      	ldr	r2, [pc, #128]	@ (8000db4 <HAL_I2C_MspInit+0xc8>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000db4 <HAL_I2C_MspInit+0xc8>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d4c:	2312      	movs	r3, #18
 8000d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d54:	2303      	movs	r3, #3
 8000d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d58:	2304      	movs	r3, #4
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	4815      	ldr	r0, [pc, #84]	@ (8000db8 <HAL_I2C_MspInit+0xcc>)
 8000d64:	f000 fa52 	bl	800120c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d6e:	2312      	movs	r3, #18
 8000d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d76:	2303      	movs	r3, #3
 8000d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	480d      	ldr	r0, [pc, #52]	@ (8000dbc <HAL_I2C_MspInit+0xd0>)
 8000d86:	f000 fa41 	bl	800120c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <HAL_I2C_MspInit+0xc8>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d92:	4a08      	ldr	r2, [pc, #32]	@ (8000db4 <HAL_I2C_MspInit+0xc8>)
 8000d94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9a:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <HAL_I2C_MspInit+0xc8>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	@ 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40005c00 	.word	0x40005c00
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020800 	.word	0x40020800
 8000dbc:	40020000 	.word	0x40020000

08000dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <NMI_Handler+0x4>

08000dc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <HardFault_Handler+0x4>

08000dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <MemManage_Handler+0x4>

08000dd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <BusFault_Handler+0x4>

08000de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <UsageFault_Handler+0x4>

08000de8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e16:	f000 f8a3 	bl	8000f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000e22:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e26:	f000 fba7 	bl	8001578 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e34:	4802      	ldr	r0, [pc, #8]	@ (8000e40 <OTG_FS_IRQHandler+0x10>)
 8000e36:	f001 fcf5 	bl	8002824 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200016ac 	.word	0x200016ac

08000e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e48:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <SystemInit+0x20>)
 8000e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e4e:	4a05      	ldr	r2, [pc, #20]	@ (8000e64 <SystemInit+0x20>)
 8000e50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ea0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e6c:	f7ff ffea 	bl	8000e44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e70:	480c      	ldr	r0, [pc, #48]	@ (8000ea4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e72:	490d      	ldr	r1, [pc, #52]	@ (8000ea8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e74:	4a0d      	ldr	r2, [pc, #52]	@ (8000eac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e78:	e002      	b.n	8000e80 <LoopCopyDataInit>

08000e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7e:	3304      	adds	r3, #4

08000e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e84:	d3f9      	bcc.n	8000e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e86:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e88:	4c0a      	ldr	r4, [pc, #40]	@ (8000eb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e8c:	e001      	b.n	8000e92 <LoopFillZerobss>

08000e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e90:	3204      	adds	r2, #4

08000e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e94:	d3fb      	bcc.n	8000e8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e96:	f007 fa2d 	bl	80082f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e9a:	f7ff fd71 	bl	8000980 <main>
  bx  lr    
 8000e9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ea0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea8:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000eac:	080083d4 	.word	0x080083d4
  ldr r2, =_sbss
 8000eb0:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000eb4:	20001db0 	.word	0x20001db0

08000eb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb8:	e7fe      	b.n	8000eb8 <ADC_IRQHandler>
	...

08000ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8000efc <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8000efc <HAL_Init+0x40>)
 8000ec6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8000efc <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8000efc <HAL_Init+0x40>)
 8000ed2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed8:	4b08      	ldr	r3, [pc, #32]	@ (8000efc <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a07      	ldr	r2, [pc, #28]	@ (8000efc <HAL_Init+0x40>)
 8000ede:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	f000 f94f 	bl	8001188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eea:	2000      	movs	r0, #0
 8000eec:	f000 f808 	bl	8000f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef0:	f7ff fed4 	bl	8000c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40023c00 	.word	0x40023c00

08000f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f08:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <HAL_InitTick+0x54>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <HAL_InitTick+0x58>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f967 	bl	80011f2 <HAL_SYSTICK_Config>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00e      	b.n	8000f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b0f      	cmp	r3, #15
 8000f32:	d80a      	bhi.n	8000f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f34:	2200      	movs	r2, #0
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f000 f92f 	bl	800119e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f40:	4a06      	ldr	r2, [pc, #24]	@ (8000f5c <HAL_InitTick+0x5c>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	e000      	b.n	8000f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000000 	.word	0x20000000
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	20000004 	.word	0x20000004

08000f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <HAL_IncTick+0x20>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <HAL_IncTick+0x24>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a04      	ldr	r2, [pc, #16]	@ (8000f84 <HAL_IncTick+0x24>)
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008
 8000f84:	200001c8 	.word	0x200001c8

08000f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	@ (8000f9c <HAL_GetTick+0x14>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	200001c8 	.word	0x200001c8

08000fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa8:	f7ff ffee 	bl	8000f88 <HAL_GetTick>
 8000fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb8:	d005      	beq.n	8000fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fba:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe4 <HAL_Delay+0x44>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fc6:	bf00      	nop
 8000fc8:	f7ff ffde 	bl	8000f88 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d8f7      	bhi.n	8000fc8 <HAL_Delay+0x28>
  {
  }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000008 	.word	0x20000008

08000fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001004:	4013      	ands	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001010:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101a:	4a04      	ldr	r2, [pc, #16]	@ (800102c <__NVIC_SetPriorityGrouping+0x44>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	60d3      	str	r3, [r2, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001034:	4b04      	ldr	r3, [pc, #16]	@ (8001048 <__NVIC_GetPriorityGrouping+0x18>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	f003 0307 	and.w	r3, r3, #7
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	2b00      	cmp	r3, #0
 800105c:	db0b      	blt.n	8001076 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f003 021f 	and.w	r2, r3, #31
 8001064:	4907      	ldr	r1, [pc, #28]	@ (8001084 <__NVIC_EnableIRQ+0x38>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	095b      	lsrs	r3, r3, #5
 800106c:	2001      	movs	r0, #1
 800106e:	fa00 f202 	lsl.w	r2, r0, r2
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000e100 	.word	0xe000e100

08001088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	2b00      	cmp	r3, #0
 800109a:	db0a      	blt.n	80010b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	490c      	ldr	r1, [pc, #48]	@ (80010d4 <__NVIC_SetPriority+0x4c>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	0112      	lsls	r2, r2, #4
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	440b      	add	r3, r1
 80010ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b0:	e00a      	b.n	80010c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4908      	ldr	r1, [pc, #32]	@ (80010d8 <__NVIC_SetPriority+0x50>)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	3b04      	subs	r3, #4
 80010c0:	0112      	lsls	r2, r2, #4
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	440b      	add	r3, r1
 80010c6:	761a      	strb	r2, [r3, #24]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000e100 	.word	0xe000e100
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	@ 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f1c3 0307 	rsb	r3, r3, #7
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	bf28      	it	cs
 80010fa:	2304      	movcs	r3, #4
 80010fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3304      	adds	r3, #4
 8001102:	2b06      	cmp	r3, #6
 8001104:	d902      	bls.n	800110c <NVIC_EncodePriority+0x30>
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3b03      	subs	r3, #3
 800110a:	e000      	b.n	800110e <NVIC_EncodePriority+0x32>
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	f04f 32ff 	mov.w	r2, #4294967295
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43da      	mvns	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	401a      	ands	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001124:	f04f 31ff 	mov.w	r1, #4294967295
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	43d9      	mvns	r1, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	4313      	orrs	r3, r2
         );
}
 8001136:	4618      	mov	r0, r3
 8001138:	3724      	adds	r7, #36	@ 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001154:	d301      	bcc.n	800115a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001156:	2301      	movs	r3, #1
 8001158:	e00f      	b.n	800117a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115a:	4a0a      	ldr	r2, [pc, #40]	@ (8001184 <SysTick_Config+0x40>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001162:	210f      	movs	r1, #15
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f7ff ff8e 	bl	8001088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800116c:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <SysTick_Config+0x40>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001172:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <SysTick_Config+0x40>)
 8001174:	2207      	movs	r2, #7
 8001176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	e000e010 	.word	0xe000e010

08001188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ff29 	bl	8000fe8 <__NVIC_SetPriorityGrouping>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800119e:	b580      	push	{r7, lr}
 80011a0:	b086      	sub	sp, #24
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b0:	f7ff ff3e 	bl	8001030 <__NVIC_GetPriorityGrouping>
 80011b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	68b9      	ldr	r1, [r7, #8]
 80011ba:	6978      	ldr	r0, [r7, #20]
 80011bc:	f7ff ff8e 	bl	80010dc <NVIC_EncodePriority>
 80011c0:	4602      	mov	r2, r0
 80011c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c6:	4611      	mov	r1, r2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff5d 	bl	8001088 <__NVIC_SetPriority>
}
 80011ce:	bf00      	nop
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff31 	bl	800104c <__NVIC_EnableIRQ>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ffa2 	bl	8001144 <SysTick_Config>
 8001200:	4603      	mov	r3, r0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	@ 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800121e:	2300      	movs	r3, #0
 8001220:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
 8001226:	e16b      	b.n	8001500 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001228:	2201      	movs	r2, #1
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	429a      	cmp	r2, r3
 8001242:	f040 815a 	bne.w	80014fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	2b01      	cmp	r3, #1
 8001250:	d005      	beq.n	800125e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800125a:	2b02      	cmp	r3, #2
 800125c:	d130      	bne.n	80012c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	2203      	movs	r2, #3
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001294:	2201      	movs	r2, #1
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	091b      	lsrs	r3, r3, #4
 80012aa:	f003 0201 	and.w	r2, r3, #1
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b03      	cmp	r3, #3
 80012ca:	d017      	beq.n	80012fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d123      	bne.n	8001350 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	08da      	lsrs	r2, r3, #3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3208      	adds	r2, #8
 8001310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001314:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	f003 0307 	and.w	r3, r3, #7
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	220f      	movs	r2, #15
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	691a      	ldr	r2, [r3, #16]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	08da      	lsrs	r2, r3, #3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3208      	adds	r2, #8
 800134a:	69b9      	ldr	r1, [r7, #24]
 800134c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	2203      	movs	r2, #3
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0203 	and.w	r2, r3, #3
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800138c:	2b00      	cmp	r3, #0
 800138e:	f000 80b4 	beq.w	80014fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b60      	ldr	r3, [pc, #384]	@ (8001518 <HAL_GPIO_Init+0x30c>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139a:	4a5f      	ldr	r2, [pc, #380]	@ (8001518 <HAL_GPIO_Init+0x30c>)
 800139c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001518 <HAL_GPIO_Init+0x30c>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ae:	4a5b      	ldr	r2, [pc, #364]	@ (800151c <HAL_GPIO_Init+0x310>)
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	089b      	lsrs	r3, r3, #2
 80013b4:	3302      	adds	r3, #2
 80013b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	220f      	movs	r2, #15
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a52      	ldr	r2, [pc, #328]	@ (8001520 <HAL_GPIO_Init+0x314>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d02b      	beq.n	8001432 <HAL_GPIO_Init+0x226>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a51      	ldr	r2, [pc, #324]	@ (8001524 <HAL_GPIO_Init+0x318>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d025      	beq.n	800142e <HAL_GPIO_Init+0x222>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a50      	ldr	r2, [pc, #320]	@ (8001528 <HAL_GPIO_Init+0x31c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d01f      	beq.n	800142a <HAL_GPIO_Init+0x21e>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4f      	ldr	r2, [pc, #316]	@ (800152c <HAL_GPIO_Init+0x320>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d019      	beq.n	8001426 <HAL_GPIO_Init+0x21a>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a4e      	ldr	r2, [pc, #312]	@ (8001530 <HAL_GPIO_Init+0x324>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d013      	beq.n	8001422 <HAL_GPIO_Init+0x216>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a4d      	ldr	r2, [pc, #308]	@ (8001534 <HAL_GPIO_Init+0x328>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d00d      	beq.n	800141e <HAL_GPIO_Init+0x212>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a4c      	ldr	r2, [pc, #304]	@ (8001538 <HAL_GPIO_Init+0x32c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d007      	beq.n	800141a <HAL_GPIO_Init+0x20e>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a4b      	ldr	r2, [pc, #300]	@ (800153c <HAL_GPIO_Init+0x330>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d101      	bne.n	8001416 <HAL_GPIO_Init+0x20a>
 8001412:	2307      	movs	r3, #7
 8001414:	e00e      	b.n	8001434 <HAL_GPIO_Init+0x228>
 8001416:	2308      	movs	r3, #8
 8001418:	e00c      	b.n	8001434 <HAL_GPIO_Init+0x228>
 800141a:	2306      	movs	r3, #6
 800141c:	e00a      	b.n	8001434 <HAL_GPIO_Init+0x228>
 800141e:	2305      	movs	r3, #5
 8001420:	e008      	b.n	8001434 <HAL_GPIO_Init+0x228>
 8001422:	2304      	movs	r3, #4
 8001424:	e006      	b.n	8001434 <HAL_GPIO_Init+0x228>
 8001426:	2303      	movs	r3, #3
 8001428:	e004      	b.n	8001434 <HAL_GPIO_Init+0x228>
 800142a:	2302      	movs	r3, #2
 800142c:	e002      	b.n	8001434 <HAL_GPIO_Init+0x228>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <HAL_GPIO_Init+0x228>
 8001432:	2300      	movs	r3, #0
 8001434:	69fa      	ldr	r2, [r7, #28]
 8001436:	f002 0203 	and.w	r2, r2, #3
 800143a:	0092      	lsls	r2, r2, #2
 800143c:	4093      	lsls	r3, r2
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001444:	4935      	ldr	r1, [pc, #212]	@ (800151c <HAL_GPIO_Init+0x310>)
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	089b      	lsrs	r3, r3, #2
 800144a:	3302      	adds	r3, #2
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001452:	4b3b      	ldr	r3, [pc, #236]	@ (8001540 <HAL_GPIO_Init+0x334>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001476:	4a32      	ldr	r2, [pc, #200]	@ (8001540 <HAL_GPIO_Init+0x334>)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800147c:	4b30      	ldr	r3, [pc, #192]	@ (8001540 <HAL_GPIO_Init+0x334>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014a0:	4a27      	ldr	r2, [pc, #156]	@ (8001540 <HAL_GPIO_Init+0x334>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014a6:	4b26      	ldr	r3, [pc, #152]	@ (8001540 <HAL_GPIO_Init+0x334>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ca:	4a1d      	ldr	r2, [pc, #116]	@ (8001540 <HAL_GPIO_Init+0x334>)
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001540 <HAL_GPIO_Init+0x334>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014f4:	4a12      	ldr	r2, [pc, #72]	@ (8001540 <HAL_GPIO_Init+0x334>)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3301      	adds	r3, #1
 80014fe:	61fb      	str	r3, [r7, #28]
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	2b0f      	cmp	r3, #15
 8001504:	f67f ae90 	bls.w	8001228 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001508:	bf00      	nop
 800150a:	bf00      	nop
 800150c:	3724      	adds	r7, #36	@ 0x24
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40013800 	.word	0x40013800
 8001520:	40020000 	.word	0x40020000
 8001524:	40020400 	.word	0x40020400
 8001528:	40020800 	.word	0x40020800
 800152c:	40020c00 	.word	0x40020c00
 8001530:	40021000 	.word	0x40021000
 8001534:	40021400 	.word	0x40021400
 8001538:	40021800 	.word	0x40021800
 800153c:	40021c00 	.word	0x40021c00
 8001540:	40013c00 	.word	0x40013c00

08001544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
 8001550:	4613      	mov	r3, r2
 8001552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001554:	787b      	ldrb	r3, [r7, #1]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800155a:	887a      	ldrh	r2, [r7, #2]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001560:	e003      	b.n	800156a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001562:	887b      	ldrh	r3, [r7, #2]
 8001564:	041a      	lsls	r2, r3, #16
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	619a      	str	r2, [r3, #24]
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001582:	4b08      	ldr	r3, [pc, #32]	@ (80015a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001584:	695a      	ldr	r2, [r3, #20]
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	4013      	ands	r3, r2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d006      	beq.n	800159c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800158e:	4a05      	ldr	r2, [pc, #20]	@ (80015a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001590:	88fb      	ldrh	r3, [r7, #6]
 8001592:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001594:	88fb      	ldrh	r3, [r7, #6]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fb6a 	bl	8000c70 <HAL_GPIO_EXTI_Callback>
  }
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40013c00 	.word	0x40013c00

080015a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e12b      	b.n	8001812 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d106      	bne.n	80015d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff fb8c 	bl	8000cec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2224      	movs	r2, #36	@ 0x24
 80015d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 0201 	bic.w	r2, r2, #1
 80015ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80015fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800160a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800160c:	f002 fe88 	bl	8004320 <HAL_RCC_GetPCLK1Freq>
 8001610:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	4a81      	ldr	r2, [pc, #516]	@ (800181c <HAL_I2C_Init+0x274>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d807      	bhi.n	800162c <HAL_I2C_Init+0x84>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4a80      	ldr	r2, [pc, #512]	@ (8001820 <HAL_I2C_Init+0x278>)
 8001620:	4293      	cmp	r3, r2
 8001622:	bf94      	ite	ls
 8001624:	2301      	movls	r3, #1
 8001626:	2300      	movhi	r3, #0
 8001628:	b2db      	uxtb	r3, r3
 800162a:	e006      	b.n	800163a <HAL_I2C_Init+0x92>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4a7d      	ldr	r2, [pc, #500]	@ (8001824 <HAL_I2C_Init+0x27c>)
 8001630:	4293      	cmp	r3, r2
 8001632:	bf94      	ite	ls
 8001634:	2301      	movls	r3, #1
 8001636:	2300      	movhi	r3, #0
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e0e7      	b.n	8001812 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4a78      	ldr	r2, [pc, #480]	@ (8001828 <HAL_I2C_Init+0x280>)
 8001646:	fba2 2303 	umull	r2, r3, r2, r3
 800164a:	0c9b      	lsrs	r3, r3, #18
 800164c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	430a      	orrs	r2, r1
 8001660:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	4a6a      	ldr	r2, [pc, #424]	@ (800181c <HAL_I2C_Init+0x274>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d802      	bhi.n	800167c <HAL_I2C_Init+0xd4>
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	3301      	adds	r3, #1
 800167a:	e009      	b.n	8001690 <HAL_I2C_Init+0xe8>
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001682:	fb02 f303 	mul.w	r3, r2, r3
 8001686:	4a69      	ldr	r2, [pc, #420]	@ (800182c <HAL_I2C_Init+0x284>)
 8001688:	fba2 2303 	umull	r2, r3, r2, r3
 800168c:	099b      	lsrs	r3, r3, #6
 800168e:	3301      	adds	r3, #1
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	430b      	orrs	r3, r1
 8001696:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80016a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	495c      	ldr	r1, [pc, #368]	@ (800181c <HAL_I2C_Init+0x274>)
 80016ac:	428b      	cmp	r3, r1
 80016ae:	d819      	bhi.n	80016e4 <HAL_I2C_Init+0x13c>
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	1e59      	subs	r1, r3, #1
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80016be:	1c59      	adds	r1, r3, #1
 80016c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80016c4:	400b      	ands	r3, r1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00a      	beq.n	80016e0 <HAL_I2C_Init+0x138>
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	1e59      	subs	r1, r3, #1
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80016d8:	3301      	adds	r3, #1
 80016da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016de:	e051      	b.n	8001784 <HAL_I2C_Init+0x1dc>
 80016e0:	2304      	movs	r3, #4
 80016e2:	e04f      	b.n	8001784 <HAL_I2C_Init+0x1dc>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d111      	bne.n	8001710 <HAL_I2C_Init+0x168>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	1e58      	subs	r0, r3, #1
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6859      	ldr	r1, [r3, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	440b      	add	r3, r1
 80016fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80016fe:	3301      	adds	r3, #1
 8001700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001704:	2b00      	cmp	r3, #0
 8001706:	bf0c      	ite	eq
 8001708:	2301      	moveq	r3, #1
 800170a:	2300      	movne	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	e012      	b.n	8001736 <HAL_I2C_Init+0x18e>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	1e58      	subs	r0, r3, #1
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6859      	ldr	r1, [r3, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	440b      	add	r3, r1
 800171e:	0099      	lsls	r1, r3, #2
 8001720:	440b      	add	r3, r1
 8001722:	fbb0 f3f3 	udiv	r3, r0, r3
 8001726:	3301      	adds	r3, #1
 8001728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800172c:	2b00      	cmp	r3, #0
 800172e:	bf0c      	ite	eq
 8001730:	2301      	moveq	r3, #1
 8001732:	2300      	movne	r3, #0
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_I2C_Init+0x196>
 800173a:	2301      	movs	r3, #1
 800173c:	e022      	b.n	8001784 <HAL_I2C_Init+0x1dc>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10e      	bne.n	8001764 <HAL_I2C_Init+0x1bc>
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	1e58      	subs	r0, r3, #1
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6859      	ldr	r1, [r3, #4]
 800174e:	460b      	mov	r3, r1
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	440b      	add	r3, r1
 8001754:	fbb0 f3f3 	udiv	r3, r0, r3
 8001758:	3301      	adds	r3, #1
 800175a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800175e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001762:	e00f      	b.n	8001784 <HAL_I2C_Init+0x1dc>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	1e58      	subs	r0, r3, #1
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6859      	ldr	r1, [r3, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	440b      	add	r3, r1
 8001772:	0099      	lsls	r1, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	fbb0 f3f3 	udiv	r3, r0, r3
 800177a:	3301      	adds	r3, #1
 800177c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001780:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	6809      	ldr	r1, [r1, #0]
 8001788:	4313      	orrs	r3, r2
 800178a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69da      	ldr	r2, [r3, #28]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80017b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6911      	ldr	r1, [r2, #16]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	68d2      	ldr	r2, [r2, #12]
 80017be:	4311      	orrs	r1, r2
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	430b      	orrs	r3, r1
 80017c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	695a      	ldr	r2, [r3, #20]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f042 0201 	orr.w	r2, r2, #1
 80017f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2220      	movs	r2, #32
 80017fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	000186a0 	.word	0x000186a0
 8001820:	001e847f 	.word	0x001e847f
 8001824:	003d08ff 	.word	0x003d08ff
 8001828:	431bde83 	.word	0x431bde83
 800182c:	10624dd3 	.word	0x10624dd3

08001830 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af02      	add	r7, sp, #8
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	461a      	mov	r2, r3
 800183c:	460b      	mov	r3, r1
 800183e:	817b      	strh	r3, [r7, #10]
 8001840:	4613      	mov	r3, r2
 8001842:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001844:	f7ff fba0 	bl	8000f88 <HAL_GetTick>
 8001848:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b20      	cmp	r3, #32
 8001854:	f040 80e0 	bne.w	8001a18 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	2319      	movs	r3, #25
 800185e:	2201      	movs	r2, #1
 8001860:	4970      	ldr	r1, [pc, #448]	@ (8001a24 <HAL_I2C_Master_Transmit+0x1f4>)
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f000 fc64 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800186e:	2302      	movs	r3, #2
 8001870:	e0d3      	b.n	8001a1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001878:	2b01      	cmp	r3, #1
 800187a:	d101      	bne.n	8001880 <HAL_I2C_Master_Transmit+0x50>
 800187c:	2302      	movs	r3, #2
 800187e:	e0cc      	b.n	8001a1a <HAL_I2C_Master_Transmit+0x1ea>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b01      	cmp	r3, #1
 8001894:	d007      	beq.n	80018a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f042 0201 	orr.w	r2, r2, #1
 80018a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2221      	movs	r2, #33	@ 0x21
 80018ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2210      	movs	r2, #16
 80018c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	893a      	ldrh	r2, [r7, #8]
 80018d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018dc:	b29a      	uxth	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	4a50      	ldr	r2, [pc, #320]	@ (8001a28 <HAL_I2C_Master_Transmit+0x1f8>)
 80018e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018e8:	8979      	ldrh	r1, [r7, #10]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	6a3a      	ldr	r2, [r7, #32]
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f000 face 	bl	8001e90 <I2C_MasterRequestWrite>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e08d      	b.n	8001a1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001914:	e066      	b.n	80019e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	6a39      	ldr	r1, [r7, #32]
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f000 fd22 	bl	8002364 <I2C_WaitOnTXEFlagUntilTimeout>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00d      	beq.n	8001942 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192a:	2b04      	cmp	r3, #4
 800192c:	d107      	bne.n	800193e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800193c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e06b      	b.n	8001a1a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001946:	781a      	ldrb	r2, [r3, #0]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800195c:	b29b      	uxth	r3, r3
 800195e:	3b01      	subs	r3, #1
 8001960:	b29a      	uxth	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800196a:	3b01      	subs	r3, #1
 800196c:	b29a      	uxth	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b04      	cmp	r3, #4
 800197e:	d11b      	bne.n	80019b8 <HAL_I2C_Master_Transmit+0x188>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001984:	2b00      	cmp	r3, #0
 8001986:	d017      	beq.n	80019b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198c:	781a      	ldrb	r2, [r3, #0]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001998:	1c5a      	adds	r2, r3, #1
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	3b01      	subs	r3, #1
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019b0:	3b01      	subs	r3, #1
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	6a39      	ldr	r1, [r7, #32]
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	f000 fd19 	bl	80023f4 <I2C_WaitOnBTFFlagUntilTimeout>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d00d      	beq.n	80019e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d107      	bne.n	80019e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e01a      	b.n	8001a1a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d194      	bne.n	8001916 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2220      	movs	r2, #32
 8001a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	e000      	b.n	8001a1a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a18:	2302      	movs	r3, #2
  }
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	00100002 	.word	0x00100002
 8001a28:	ffff0000 	.word	0xffff0000

08001a2c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08c      	sub	sp, #48	@ 0x30
 8001a30:	af02      	add	r7, sp, #8
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	461a      	mov	r2, r3
 8001a38:	460b      	mov	r3, r1
 8001a3a:	817b      	strh	r3, [r7, #10]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a40:	f7ff faa2 	bl	8000f88 <HAL_GetTick>
 8001a44:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b20      	cmp	r3, #32
 8001a50:	f040 8217 	bne.w	8001e82 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	2319      	movs	r3, #25
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	497c      	ldr	r1, [pc, #496]	@ (8001c50 <HAL_I2C_Master_Receive+0x224>)
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f000 fb66 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	e20a      	b.n	8001e84 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d101      	bne.n	8001a7c <HAL_I2C_Master_Receive+0x50>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e203      	b.n	8001e84 <HAL_I2C_Master_Receive+0x458>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d007      	beq.n	8001aa2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f042 0201 	orr.w	r2, r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ab0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2222      	movs	r2, #34	@ 0x22
 8001ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2210      	movs	r2, #16
 8001abe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	893a      	ldrh	r2, [r7, #8]
 8001ad2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4a5c      	ldr	r2, [pc, #368]	@ (8001c54 <HAL_I2C_Master_Receive+0x228>)
 8001ae2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ae4:	8979      	ldrh	r1, [r7, #10]
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f000 fa52 	bl	8001f94 <I2C_MasterRequestRead>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e1c4      	b.n	8001e84 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d113      	bne.n	8001b2a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b02:	2300      	movs	r3, #0
 8001b04:	623b      	str	r3, [r7, #32]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	623b      	str	r3, [r7, #32]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	623b      	str	r3, [r7, #32]
 8001b16:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	e198      	b.n	8001e5c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d11b      	bne.n	8001b6a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	61fb      	str	r3, [r7, #28]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	61fb      	str	r3, [r7, #28]
 8001b56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	e178      	b.n	8001e5c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d11b      	bne.n	8001baa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b80:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b92:	2300      	movs	r3, #0
 8001b94:	61bb      	str	r3, [r7, #24]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	61bb      	str	r3, [r7, #24]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	61bb      	str	r3, [r7, #24]
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	e158      	b.n	8001e5c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001bb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001bd0:	e144      	b.n	8001e5c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	f200 80f1 	bhi.w	8001dbe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d123      	bne.n	8001c2c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001be4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001be6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f000 fc4b 	bl	8002484 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e145      	b.n	8001e84 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	691a      	ldr	r2, [r3, #16]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c14:	3b01      	subs	r3, #1
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001c2a:	e117      	b.n	8001e5c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d14e      	bne.n	8001cd2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	4906      	ldr	r1, [pc, #24]	@ (8001c58 <HAL_I2C_Master_Receive+0x22c>)
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 fa76 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d008      	beq.n	8001c5c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e11a      	b.n	8001e84 <HAL_I2C_Master_Receive+0x458>
 8001c4e:	bf00      	nop
 8001c50:	00100002 	.word	0x00100002
 8001c54:	ffff0000 	.word	0xffff0000
 8001c58:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	691a      	ldr	r2, [r3, #16]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	3b01      	subs	r3, #1
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	691a      	ldr	r2, [r3, #16]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb0:	1c5a      	adds	r2, r3, #1
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001cd0:	e0c4      	b.n	8001e5c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cd8:	2200      	movs	r2, #0
 8001cda:	496c      	ldr	r1, [pc, #432]	@ (8001e8c <HAL_I2C_Master_Receive+0x460>)
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f000 fa27 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0cb      	b.n	8001e84 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691a      	ldr	r2, [r3, #16]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	3b01      	subs	r3, #1
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d34:	2200      	movs	r2, #0
 8001d36:	4955      	ldr	r1, [pc, #340]	@ (8001e8c <HAL_I2C_Master_Receive+0x460>)
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f000 f9f9 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e09d      	b.n	8001e84 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691a      	ldr	r2, [r3, #16]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d74:	3b01      	subs	r3, #1
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	3b01      	subs	r3, #1
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001da6:	3b01      	subs	r3, #1
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	3b01      	subs	r3, #1
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001dbc:	e04e      	b.n	8001e5c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dc0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f000 fb5e 	bl	8002484 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e058      	b.n	8001e84 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dee:	3b01      	subs	r3, #1
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d124      	bne.n	8001e5c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	d107      	bne.n	8001e2a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e28:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e46:	3b01      	subs	r3, #1
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	3b01      	subs	r3, #1
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f47f aeb6 	bne.w	8001bd2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2220      	movs	r2, #32
 8001e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e000      	b.n	8001e84 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001e82:	2302      	movs	r3, #2
  }
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3728      	adds	r7, #40	@ 0x28
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	00010004 	.word	0x00010004

08001e90 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b088      	sub	sp, #32
 8001e94:	af02      	add	r7, sp, #8
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	607a      	str	r2, [r7, #4]
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d006      	beq.n	8001eba <I2C_MasterRequestWrite+0x2a>
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d003      	beq.n	8001eba <I2C_MasterRequestWrite+0x2a>
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001eb8:	d108      	bne.n	8001ecc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	e00b      	b.n	8001ee4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed0:	2b12      	cmp	r3, #18
 8001ed2:	d107      	bne.n	8001ee4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ee2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f000 f91d 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00d      	beq.n	8001f18 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f0a:	d103      	bne.n	8001f14 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e035      	b.n	8001f84 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f20:	d108      	bne.n	8001f34 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f22:	897b      	ldrh	r3, [r7, #10]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	461a      	mov	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f30:	611a      	str	r2, [r3, #16]
 8001f32:	e01b      	b.n	8001f6c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f34:	897b      	ldrh	r3, [r7, #10]
 8001f36:	11db      	asrs	r3, r3, #7
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	f003 0306 	and.w	r3, r3, #6
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	f063 030f 	orn	r3, r3, #15
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	490e      	ldr	r1, [pc, #56]	@ (8001f8c <I2C_MasterRequestWrite+0xfc>)
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 f966 	bl	8002224 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e010      	b.n	8001f84 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f62:	897b      	ldrh	r3, [r7, #10]
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	4907      	ldr	r1, [pc, #28]	@ (8001f90 <I2C_MasterRequestWrite+0x100>)
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f000 f956 	bl	8002224 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	00010008 	.word	0x00010008
 8001f90:	00010002 	.word	0x00010002

08001f94 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af02      	add	r7, sp, #8
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	607a      	str	r2, [r7, #4]
 8001f9e:	603b      	str	r3, [r7, #0]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001fb8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d006      	beq.n	8001fce <I2C_MasterRequestRead+0x3a>
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d003      	beq.n	8001fce <I2C_MasterRequestRead+0x3a>
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001fcc:	d108      	bne.n	8001fe0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	e00b      	b.n	8001ff8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe4:	2b11      	cmp	r3, #17
 8001fe6:	d107      	bne.n	8001ff8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ff6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 f893 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00d      	beq.n	800202c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800201a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800201e:	d103      	bne.n	8002028 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002026:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e079      	b.n	8002120 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002034:	d108      	bne.n	8002048 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002036:	897b      	ldrh	r3, [r7, #10]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	b2da      	uxtb	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	611a      	str	r2, [r3, #16]
 8002046:	e05f      	b.n	8002108 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002048:	897b      	ldrh	r3, [r7, #10]
 800204a:	11db      	asrs	r3, r3, #7
 800204c:	b2db      	uxtb	r3, r3
 800204e:	f003 0306 	and.w	r3, r3, #6
 8002052:	b2db      	uxtb	r3, r3
 8002054:	f063 030f 	orn	r3, r3, #15
 8002058:	b2da      	uxtb	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	4930      	ldr	r1, [pc, #192]	@ (8002128 <I2C_MasterRequestRead+0x194>)
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 f8dc 	bl	8002224 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e054      	b.n	8002120 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002076:	897b      	ldrh	r3, [r7, #10]
 8002078:	b2da      	uxtb	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	4929      	ldr	r1, [pc, #164]	@ (800212c <I2C_MasterRequestRead+0x198>)
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 f8cc 	bl	8002224 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e044      	b.n	8002120 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020ba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 f831 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00d      	beq.n	80020f0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020e2:	d103      	bne.n	80020ec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020ea:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e017      	b.n	8002120 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80020f0:	897b      	ldrh	r3, [r7, #10]
 80020f2:	11db      	asrs	r3, r3, #7
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	f003 0306 	and.w	r3, r3, #6
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	f063 030e 	orn	r3, r3, #14
 8002100:	b2da      	uxtb	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	4907      	ldr	r1, [pc, #28]	@ (800212c <I2C_MasterRequestRead+0x198>)
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 f888 	bl	8002224 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e000      	b.n	8002120 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	00010008 	.word	0x00010008
 800212c:	00010002 	.word	0x00010002

08002130 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	4613      	mov	r3, r2
 800213e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002140:	e048      	b.n	80021d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002148:	d044      	beq.n	80021d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800214a:	f7fe ff1d 	bl	8000f88 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d302      	bcc.n	8002160 <I2C_WaitOnFlagUntilTimeout+0x30>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d139      	bne.n	80021d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	0c1b      	lsrs	r3, r3, #16
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b01      	cmp	r3, #1
 8002168:	d10d      	bne.n	8002186 <I2C_WaitOnFlagUntilTimeout+0x56>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	43da      	mvns	r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	4013      	ands	r3, r2
 8002176:	b29b      	uxth	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	bf0c      	ite	eq
 800217c:	2301      	moveq	r3, #1
 800217e:	2300      	movne	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	e00c      	b.n	80021a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	43da      	mvns	r2, r3
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	4013      	ands	r3, r2
 8002192:	b29b      	uxth	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	bf0c      	ite	eq
 8002198:	2301      	moveq	r3, #1
 800219a:	2300      	movne	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	461a      	mov	r2, r3
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d116      	bne.n	80021d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2220      	movs	r2, #32
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c0:	f043 0220 	orr.w	r2, r3, #32
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e023      	b.n	800221c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	0c1b      	lsrs	r3, r3, #16
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d10d      	bne.n	80021fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	43da      	mvns	r2, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	4013      	ands	r3, r2
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf0c      	ite	eq
 80021f0:	2301      	moveq	r3, #1
 80021f2:	2300      	movne	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	461a      	mov	r2, r3
 80021f8:	e00c      	b.n	8002214 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	43da      	mvns	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	4013      	ands	r3, r2
 8002206:	b29b      	uxth	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	bf0c      	ite	eq
 800220c:	2301      	moveq	r3, #1
 800220e:	2300      	movne	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	461a      	mov	r2, r3
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	429a      	cmp	r2, r3
 8002218:	d093      	beq.n	8002142 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002232:	e071      	b.n	8002318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800223e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002242:	d123      	bne.n	800228c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002252:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800225c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002278:	f043 0204 	orr.w	r2, r3, #4
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e067      	b.n	800235c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002292:	d041      	beq.n	8002318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002294:	f7fe fe78 	bl	8000f88 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d302      	bcc.n	80022aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d136      	bne.n	8002318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	0c1b      	lsrs	r3, r3, #16
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d10c      	bne.n	80022ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	43da      	mvns	r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	4013      	ands	r3, r2
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	bf14      	ite	ne
 80022c6:	2301      	movne	r3, #1
 80022c8:	2300      	moveq	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	e00b      	b.n	80022e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	43da      	mvns	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	4013      	ands	r3, r2
 80022da:	b29b      	uxth	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	bf14      	ite	ne
 80022e0:	2301      	movne	r3, #1
 80022e2:	2300      	moveq	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d016      	beq.n	8002318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002304:	f043 0220 	orr.w	r2, r3, #32
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e021      	b.n	800235c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	0c1b      	lsrs	r3, r3, #16
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b01      	cmp	r3, #1
 8002320:	d10c      	bne.n	800233c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	43da      	mvns	r2, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	4013      	ands	r3, r2
 800232e:	b29b      	uxth	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	bf14      	ite	ne
 8002334:	2301      	movne	r3, #1
 8002336:	2300      	moveq	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	e00b      	b.n	8002354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	43da      	mvns	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	4013      	ands	r3, r2
 8002348:	b29b      	uxth	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	bf14      	ite	ne
 800234e:	2301      	movne	r3, #1
 8002350:	2300      	moveq	r3, #0
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	f47f af6d 	bne.w	8002234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002370:	e034      	b.n	80023dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 f8e3 	bl	800253e <I2C_IsAcknowledgeFailed>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e034      	b.n	80023ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002388:	d028      	beq.n	80023dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800238a:	f7fe fdfd 	bl	8000f88 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	429a      	cmp	r2, r3
 8002398:	d302      	bcc.n	80023a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d11d      	bne.n	80023dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023aa:	2b80      	cmp	r3, #128	@ 0x80
 80023ac:	d016      	beq.n	80023dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c8:	f043 0220 	orr.w	r2, r3, #32
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e007      	b.n	80023ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023e6:	2b80      	cmp	r3, #128	@ 0x80
 80023e8:	d1c3      	bne.n	8002372 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002400:	e034      	b.n	800246c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 f89b 	bl	800253e <I2C_IsAcknowledgeFailed>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e034      	b.n	800247c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002418:	d028      	beq.n	800246c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800241a:	f7fe fdb5 	bl	8000f88 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	429a      	cmp	r2, r3
 8002428:	d302      	bcc.n	8002430 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d11d      	bne.n	800246c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	2b04      	cmp	r3, #4
 800243c:	d016      	beq.n	800246c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002458:	f043 0220 	orr.w	r2, r3, #32
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e007      	b.n	800247c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b04      	cmp	r3, #4
 8002478:	d1c3      	bne.n	8002402 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002490:	e049      	b.n	8002526 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	f003 0310 	and.w	r3, r3, #16
 800249c:	2b10      	cmp	r3, #16
 800249e:	d119      	bne.n	80024d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 0210 	mvn.w	r2, #16
 80024a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2220      	movs	r2, #32
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e030      	b.n	8002536 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024d4:	f7fe fd58 	bl	8000f88 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d302      	bcc.n	80024ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d11d      	bne.n	8002526 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024f4:	2b40      	cmp	r3, #64	@ 0x40
 80024f6:	d016      	beq.n	8002526 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2220      	movs	r2, #32
 8002502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002512:	f043 0220 	orr.w	r2, r3, #32
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e007      	b.n	8002536 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002530:	2b40      	cmp	r3, #64	@ 0x40
 8002532:	d1ae      	bne.n	8002492 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002550:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002554:	d11b      	bne.n	800258e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800255e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2220      	movs	r2, #32
 800256a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257a:	f043 0204 	orr.w	r2, r3, #4
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af02      	add	r7, sp, #8
 80025a2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e101      	b.n	80027b2 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d106      	bne.n	80025ce <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f005 fb77 	bl	8007cbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2203      	movs	r2, #3
 80025d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025dc:	d102      	bne.n	80025e4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f001 ffc4 	bl	8004576 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	7c1a      	ldrb	r2, [r3, #16]
 80025f6:	f88d 2000 	strb.w	r2, [sp]
 80025fa:	3304      	adds	r3, #4
 80025fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025fe:	f001 fea3 	bl	8004348 <USB_CoreInit>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2202      	movs	r2, #2
 800260c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0ce      	b.n	80027b2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2100      	movs	r1, #0
 800261a:	4618      	mov	r0, r3
 800261c:	f001 ffbc 	bl	8004598 <USB_SetCurrentMode>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d005      	beq.n	8002632 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2202      	movs	r2, #2
 800262a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e0bf      	b.n	80027b2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002632:	2300      	movs	r3, #0
 8002634:	73fb      	strb	r3, [r7, #15]
 8002636:	e04a      	b.n	80026ce <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002638:	7bfa      	ldrb	r2, [r7, #15]
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	3315      	adds	r3, #21
 8002648:	2201      	movs	r2, #1
 800264a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800264c:	7bfa      	ldrb	r2, [r7, #15]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4413      	add	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	3314      	adds	r3, #20
 800265c:	7bfa      	ldrb	r2, [r7, #15]
 800265e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002660:	7bfa      	ldrb	r2, [r7, #15]
 8002662:	7bfb      	ldrb	r3, [r7, #15]
 8002664:	b298      	uxth	r0, r3
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	332e      	adds	r3, #46	@ 0x2e
 8002674:	4602      	mov	r2, r0
 8002676:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002678:	7bfa      	ldrb	r2, [r7, #15]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	4413      	add	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	3318      	adds	r3, #24
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800268c:	7bfa      	ldrb	r2, [r7, #15]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	4413      	add	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	331c      	adds	r3, #28
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026a0:	7bfa      	ldrb	r2, [r7, #15]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4413      	add	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	3320      	adds	r3, #32
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026b4:	7bfa      	ldrb	r2, [r7, #15]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4413      	add	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	3324      	adds	r3, #36	@ 0x24
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	3301      	adds	r3, #1
 80026cc:	73fb      	strb	r3, [r7, #15]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	791b      	ldrb	r3, [r3, #4]
 80026d2:	7bfa      	ldrb	r2, [r7, #15]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d3af      	bcc.n	8002638 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d8:	2300      	movs	r3, #0
 80026da:	73fb      	strb	r3, [r7, #15]
 80026dc:	e044      	b.n	8002768 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026de:	7bfa      	ldrb	r2, [r7, #15]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4413      	add	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80026f0:	2200      	movs	r2, #0
 80026f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026f4:	7bfa      	ldrb	r2, [r7, #15]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4413      	add	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002706:	7bfa      	ldrb	r2, [r7, #15]
 8002708:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800270a:	7bfa      	ldrb	r2, [r7, #15]
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002720:	7bfa      	ldrb	r2, [r7, #15]
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002736:	7bfa      	ldrb	r2, [r7, #15]
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4413      	add	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800274c:	7bfa      	ldrb	r2, [r7, #15]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	4413      	add	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	3301      	adds	r3, #1
 8002766:	73fb      	strb	r3, [r7, #15]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	791b      	ldrb	r3, [r3, #4]
 800276c:	7bfa      	ldrb	r2, [r7, #15]
 800276e:	429a      	cmp	r2, r3
 8002770:	d3b5      	bcc.n	80026de <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	7c1a      	ldrb	r2, [r3, #16]
 800277a:	f88d 2000 	strb.w	r2, [sp]
 800277e:	3304      	adds	r3, #4
 8002780:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002782:	f001 ff55 	bl	8004630 <USB_DevInit>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e00c      	b.n	80027b2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f002 ff9f 	bl	80056ee <USB_DevDisconnect>

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d101      	bne.n	80027d6 <HAL_PCD_Start+0x1c>
 80027d2:	2302      	movs	r3, #2
 80027d4:	e022      	b.n	800281c <HAL_PCD_Start+0x62>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d009      	beq.n	80027fe <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d105      	bne.n	80027fe <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f001 fea6 	bl	8004554 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f002 ff4d 	bl	80056ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002824:	b590      	push	{r4, r7, lr}
 8002826:	b08d      	sub	sp, #52	@ 0x34
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f003 f80b 	bl	8005856 <USB_GetMode>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	f040 848c 	bne.w	8003160 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f002 ff6f 	bl	8005730 <USB_ReadInterrupts>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 8482 	beq.w	800315e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	0a1b      	lsrs	r3, r3, #8
 8002864:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f002 ff5c 	bl	8005730 <USB_ReadInterrupts>
 8002878:	4603      	mov	r3, r0
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b02      	cmp	r3, #2
 8002880:	d107      	bne.n	8002892 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	695a      	ldr	r2, [r3, #20]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f002 0202 	and.w	r2, r2, #2
 8002890:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f002 ff4a 	bl	8005730 <USB_ReadInterrupts>
 800289c:	4603      	mov	r3, r0
 800289e:	f003 0310 	and.w	r3, r3, #16
 80028a2:	2b10      	cmp	r3, #16
 80028a4:	d161      	bne.n	800296a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	699a      	ldr	r2, [r3, #24]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0210 	bic.w	r2, r2, #16
 80028b4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80028b6:	6a3b      	ldr	r3, [r7, #32]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	f003 020f 	and.w	r2, r3, #15
 80028c2:	4613      	mov	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	4413      	add	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	4413      	add	r3, r2
 80028d2:	3304      	adds	r3, #4
 80028d4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	0c5b      	lsrs	r3, r3, #17
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d124      	bne.n	800292c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80028e8:	4013      	ands	r3, r2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d035      	beq.n	800295a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	091b      	lsrs	r3, r3, #4
 80028f6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80028f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	461a      	mov	r2, r3
 8002900:	6a38      	ldr	r0, [r7, #32]
 8002902:	f002 fd81 	bl	8005408 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	091b      	lsrs	r3, r3, #4
 800290e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002912:	441a      	add	r2, r3
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	695a      	ldr	r2, [r3, #20]
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	091b      	lsrs	r3, r3, #4
 8002920:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002924:	441a      	add	r2, r3
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	615a      	str	r2, [r3, #20]
 800292a:	e016      	b.n	800295a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	0c5b      	lsrs	r3, r3, #17
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	2b06      	cmp	r3, #6
 8002936:	d110      	bne.n	800295a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800293e:	2208      	movs	r2, #8
 8002940:	4619      	mov	r1, r3
 8002942:	6a38      	ldr	r0, [r7, #32]
 8002944:	f002 fd60 	bl	8005408 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	695a      	ldr	r2, [r3, #20]
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	091b      	lsrs	r3, r3, #4
 8002950:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002954:	441a      	add	r2, r3
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	699a      	ldr	r2, [r3, #24]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 0210 	orr.w	r2, r2, #16
 8002968:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f002 fede 	bl	8005730 <USB_ReadInterrupts>
 8002974:	4603      	mov	r3, r0
 8002976:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800297a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800297e:	f040 80a7 	bne.w	8002ad0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002982:	2300      	movs	r3, #0
 8002984:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f002 fee3 	bl	8005756 <USB_ReadDevAllOutEpInterrupt>
 8002990:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002992:	e099      	b.n	8002ac8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 808e 	beq.w	8002abc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	4611      	mov	r1, r2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f002 ff07 	bl	80057be <USB_ReadDevOutEPInterrupt>
 80029b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00c      	beq.n	80029d6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80029bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029be:	015a      	lsls	r2, r3, #5
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	4413      	add	r3, r2
 80029c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029c8:	461a      	mov	r2, r3
 80029ca:	2301      	movs	r3, #1
 80029cc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80029ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 fea3 	bl	800371c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00c      	beq.n	80029fa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80029e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e2:	015a      	lsls	r2, r3, #5
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	4413      	add	r3, r2
 80029e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029ec:	461a      	mov	r2, r3
 80029ee:	2308      	movs	r3, #8
 80029f0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80029f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 ff79 	bl	80038ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d008      	beq.n	8002a16 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a06:	015a      	lsls	r2, r3, #5
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a10:	461a      	mov	r2, r3
 8002a12:	2310      	movs	r3, #16
 8002a14:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d030      	beq.n	8002a82 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a28:	2b80      	cmp	r3, #128	@ 0x80
 8002a2a:	d109      	bne.n	8002a40 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	69fa      	ldr	r2, [r7, #28]
 8002a36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a3e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002a40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a42:	4613      	mov	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	4413      	add	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	4413      	add	r3, r2
 8002a52:	3304      	adds	r3, #4
 8002a54:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	78db      	ldrb	r3, [r3, #3]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d108      	bne.n	8002a70 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	2200      	movs	r2, #0
 8002a62:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	4619      	mov	r1, r3
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f005 fa2c 	bl	8007ec8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	2302      	movs	r3, #2
 8002a80:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	f003 0320 	and.w	r3, r3, #32
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d008      	beq.n	8002a9e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a98:	461a      	mov	r2, r3
 8002a9a:	2320      	movs	r3, #32
 8002a9c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d009      	beq.n	8002abc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aaa:	015a      	lsls	r2, r3, #5
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002aba:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abe:	3301      	adds	r3, #1
 8002ac0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac4:	085b      	lsrs	r3, r3, #1
 8002ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f47f af62 	bne.w	8002994 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f002 fe2b 	bl	8005730 <USB_ReadInterrupts>
 8002ada:	4603      	mov	r3, r0
 8002adc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ae0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ae4:	f040 80db 	bne.w	8002c9e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f002 fe4c 	bl	800578a <USB_ReadDevAllInEpInterrupt>
 8002af2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002af8:	e0cd      	b.n	8002c96 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 80c2 	beq.w	8002c8a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	4611      	mov	r1, r2
 8002b10:	4618      	mov	r0, r3
 8002b12:	f002 fe72 	bl	80057fa <USB_ReadDevInEPInterrupt>
 8002b16:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d057      	beq.n	8002bd2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b24:	f003 030f 	and.w	r3, r3, #15
 8002b28:	2201      	movs	r2, #1
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69f9      	ldr	r1, [r7, #28]
 8002b3e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002b42:	4013      	ands	r3, r2
 8002b44:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b48:	015a      	lsls	r2, r3, #5
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b52:	461a      	mov	r2, r3
 8002b54:	2301      	movs	r3, #1
 8002b56:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	799b      	ldrb	r3, [r3, #6]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d132      	bne.n	8002bc6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b64:	4613      	mov	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	3320      	adds	r3, #32
 8002b70:	6819      	ldr	r1, [r3, #0]
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b76:	4613      	mov	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4403      	add	r3, r0
 8002b80:	331c      	adds	r3, #28
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4419      	add	r1, r3
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	4413      	add	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4403      	add	r3, r0
 8002b94:	3320      	adds	r3, #32
 8002b96:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d113      	bne.n	8002bc6 <HAL_PCD_IRQHandler+0x3a2>
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	3324      	adds	r3, #36	@ 0x24
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d108      	bne.n	8002bc6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6818      	ldr	r0, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	f002 fe79 	bl	80058b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	4619      	mov	r1, r3
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f005 f8f6 	bl	8007dbe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bde:	015a      	lsls	r2, r3, #5
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002be8:	461a      	mov	r2, r3
 8002bea:	2308      	movs	r3, #8
 8002bec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfa:	015a      	lsls	r2, r3, #5
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c04:	461a      	mov	r2, r3
 8002c06:	2310      	movs	r3, #16
 8002c08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d008      	beq.n	8002c26 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c16:	015a      	lsls	r2, r3, #5
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c20:	461a      	mov	r2, r3
 8002c22:	2340      	movs	r3, #64	@ 0x40
 8002c24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d023      	beq.n	8002c78 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002c30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c32:	6a38      	ldr	r0, [r7, #32]
 8002c34:	f001 fe60 	bl	80048f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002c38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	4413      	add	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	3310      	adds	r3, #16
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	4413      	add	r3, r2
 8002c48:	3304      	adds	r3, #4
 8002c4a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	78db      	ldrb	r3, [r3, #3]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d108      	bne.n	8002c66 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	2200      	movs	r2, #0
 8002c58:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	4619      	mov	r1, r3
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f005 f943 	bl	8007eec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c72:	461a      	mov	r2, r3
 8002c74:	2302      	movs	r3, #2
 8002c76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 fcbd 	bl	8003604 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c92:	085b      	lsrs	r3, r3, #1
 8002c94:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f47f af2e 	bne.w	8002afa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f002 fd44 	bl	8005730 <USB_ReadInterrupts>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002cae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002cb2:	d122      	bne.n	8002cfa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	69fa      	ldr	r2, [r7, #28]
 8002cbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cc2:	f023 0301 	bic.w	r3, r3, #1
 8002cc6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d108      	bne.n	8002ce4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002cda:	2100      	movs	r1, #0
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 fea3 	bl	8003a28 <HAL_PCDEx_LPM_Callback>
 8002ce2:	e002      	b.n	8002cea <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f005 f8e1 	bl	8007eac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695a      	ldr	r2, [r3, #20]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002cf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f002 fd16 	bl	8005730 <USB_ReadInterrupts>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d0e:	d112      	bne.n	8002d36 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d102      	bne.n	8002d26 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f005 f89d 	bl	8007e60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695a      	ldr	r2, [r3, #20]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002d34:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f002 fcf8 	bl	8005730 <USB_ReadInterrupts>
 8002d40:	4603      	mov	r3, r0
 8002d42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d4a:	f040 80b7 	bne.w	8002ebc <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	69fa      	ldr	r2, [r7, #28]
 8002d58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d5c:	f023 0301 	bic.w	r3, r3, #1
 8002d60:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2110      	movs	r1, #16
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f001 fdc5 	bl	80048f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d6e:	2300      	movs	r3, #0
 8002d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d72:	e046      	b.n	8002e02 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d80:	461a      	mov	r2, r3
 8002d82:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d86:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d8a:	015a      	lsls	r2, r3, #5
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	4413      	add	r3, r2
 8002d90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d98:	0151      	lsls	r1, r2, #5
 8002d9a:	69fa      	ldr	r2, [r7, #28]
 8002d9c:	440a      	add	r2, r1
 8002d9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002da2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002da6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002db4:	461a      	mov	r2, r3
 8002db6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002dba:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dcc:	0151      	lsls	r1, r2, #5
 8002dce:	69fa      	ldr	r2, [r7, #28]
 8002dd0:	440a      	add	r2, r1
 8002dd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002dd6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002dda:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dec:	0151      	lsls	r1, r2, #5
 8002dee:	69fa      	ldr	r2, [r7, #28]
 8002df0:	440a      	add	r2, r1
 8002df2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002df6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002dfa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dfe:	3301      	adds	r3, #1
 8002e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	791b      	ldrb	r3, [r3, #4]
 8002e06:	461a      	mov	r2, r3
 8002e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d3b2      	bcc.n	8002d74 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e1c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002e20:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	7bdb      	ldrb	r3, [r3, #15]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d016      	beq.n	8002e58 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e34:	69fa      	ldr	r2, [r7, #28]
 8002e36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e3a:	f043 030b 	orr.w	r3, r3, #11
 8002e3e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4a:	69fa      	ldr	r2, [r7, #28]
 8002e4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e50:	f043 030b 	orr.w	r3, r3, #11
 8002e54:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e56:	e015      	b.n	8002e84 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	69fa      	ldr	r2, [r7, #28]
 8002e62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e66:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e6a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002e6e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	69fa      	ldr	r2, [r7, #28]
 8002e7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e7e:	f043 030b 	orr.w	r3, r3, #11
 8002e82:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	69fa      	ldr	r2, [r7, #28]
 8002e8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e92:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002e96:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6818      	ldr	r0, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f002 fd06 	bl	80058b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695a      	ldr	r2, [r3, #20]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002eba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f002 fc35 	bl	8005730 <USB_ReadInterrupts>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ecc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ed0:	d123      	bne.n	8002f1a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f002 fccb 	bl	8005872 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f001 fd82 	bl	80049ea <USB_GetDevSpeed>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	461a      	mov	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681c      	ldr	r4, [r3, #0]
 8002ef2:	f001 fa09 	bl	8004308 <HAL_RCC_GetHCLKFreq>
 8002ef6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002efc:	461a      	mov	r2, r3
 8002efe:	4620      	mov	r0, r4
 8002f00:	f001 fa86 	bl	8004410 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f004 ff82 	bl	8007e0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695a      	ldr	r2, [r3, #20]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002f18:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f002 fc06 	bl	8005730 <USB_ReadInterrupts>
 8002f24:	4603      	mov	r3, r0
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d10a      	bne.n	8002f44 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f004 ff5f 	bl	8007df2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695a      	ldr	r2, [r3, #20]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f002 0208 	and.w	r2, r2, #8
 8002f42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f002 fbf1 	bl	8005730 <USB_ReadInterrupts>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f54:	2b80      	cmp	r3, #128	@ 0x80
 8002f56:	d123      	bne.n	8002fa0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f64:	2301      	movs	r3, #1
 8002f66:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f68:	e014      	b.n	8002f94 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f6e:	4613      	mov	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	4413      	add	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d105      	bne.n	8002f8e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	4619      	mov	r1, r3
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 fb0a 	bl	80035a2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f90:	3301      	adds	r3, #1
 8002f92:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	791b      	ldrb	r3, [r3, #4]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d3e4      	bcc.n	8002f6a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f002 fbc3 	bl	8005730 <USB_ReadInterrupts>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fb0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fb4:	d13c      	bne.n	8003030 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fba:	e02b      	b.n	8003014 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbe:	015a      	lsls	r2, r3, #5
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	3318      	adds	r3, #24
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d115      	bne.n	800300e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002fe2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	da12      	bge.n	800300e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fec:	4613      	mov	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	3317      	adds	r3, #23
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003004:	b2db      	uxtb	r3, r3
 8003006:	4619      	mov	r1, r3
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 faca 	bl	80035a2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800300e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003010:	3301      	adds	r3, #1
 8003012:	627b      	str	r3, [r7, #36]	@ 0x24
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	791b      	ldrb	r3, [r3, #4]
 8003018:	461a      	mov	r2, r3
 800301a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301c:	4293      	cmp	r3, r2
 800301e:	d3cd      	bcc.n	8002fbc <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695a      	ldr	r2, [r3, #20]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800302e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f002 fb7b 	bl	8005730 <USB_ReadInterrupts>
 800303a:	4603      	mov	r3, r0
 800303c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003040:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003044:	d156      	bne.n	80030f4 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003046:	2301      	movs	r3, #1
 8003048:	627b      	str	r3, [r7, #36]	@ 0x24
 800304a:	e045      	b.n	80030d8 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800304c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304e:	015a      	lsls	r2, r3, #5
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	4413      	add	r3, r2
 8003054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003060:	4613      	mov	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d12e      	bne.n	80030d2 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003074:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003076:	2b00      	cmp	r3, #0
 8003078:	da2b      	bge.n	80030d2 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003086:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800308a:	429a      	cmp	r2, r3
 800308c:	d121      	bne.n	80030d2 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003092:	4613      	mov	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	4413      	add	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80030a0:	2201      	movs	r2, #1
 80030a2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10a      	bne.n	80030d2 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	69fa      	ldr	r2, [r7, #28]
 80030c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030ce:	6053      	str	r3, [r2, #4]
            break;
 80030d0:	e008      	b.n	80030e4 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d4:	3301      	adds	r3, #1
 80030d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	791b      	ldrb	r3, [r3, #4]
 80030dc:	461a      	mov	r2, r3
 80030de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d3b3      	bcc.n	800304c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695a      	ldr	r2, [r3, #20]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80030f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f002 fb19 	bl	8005730 <USB_ReadInterrupts>
 80030fe:	4603      	mov	r3, r0
 8003100:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003108:	d10a      	bne.n	8003120 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f004 ff00 	bl	8007f10 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695a      	ldr	r2, [r3, #20]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800311e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f002 fb03 	bl	8005730 <USB_ReadInterrupts>
 800312a:	4603      	mov	r3, r0
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b04      	cmp	r3, #4
 8003132:	d115      	bne.n	8003160 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f004 fef0 	bl	8007f2c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6859      	ldr	r1, [r3, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	430a      	orrs	r2, r1
 800315a:	605a      	str	r2, [r3, #4]
 800315c:	e000      	b.n	8003160 <HAL_PCD_IRQHandler+0x93c>
      return;
 800315e:	bf00      	nop
    }
  }
}
 8003160:	3734      	adds	r7, #52	@ 0x34
 8003162:	46bd      	mov	sp, r7
 8003164:	bd90      	pop	{r4, r7, pc}

08003166 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b082      	sub	sp, #8
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	460b      	mov	r3, r1
 8003170:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <HAL_PCD_SetAddress+0x1a>
 800317c:	2302      	movs	r3, #2
 800317e:	e012      	b.n	80031a6 <HAL_PCD_SetAddress+0x40>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	78fa      	ldrb	r2, [r7, #3]
 8003194:	4611      	mov	r1, r2
 8003196:	4618      	mov	r0, r3
 8003198:	f002 fa62 	bl	8005660 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b084      	sub	sp, #16
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	4608      	mov	r0, r1
 80031b8:	4611      	mov	r1, r2
 80031ba:	461a      	mov	r2, r3
 80031bc:	4603      	mov	r3, r0
 80031be:	70fb      	strb	r3, [r7, #3]
 80031c0:	460b      	mov	r3, r1
 80031c2:	803b      	strh	r3, [r7, #0]
 80031c4:	4613      	mov	r3, r2
 80031c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80031c8:	2300      	movs	r3, #0
 80031ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	da0f      	bge.n	80031f4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	f003 020f 	and.w	r2, r3, #15
 80031da:	4613      	mov	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	4413      	add	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	3310      	adds	r3, #16
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	4413      	add	r3, r2
 80031e8:	3304      	adds	r3, #4
 80031ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2201      	movs	r2, #1
 80031f0:	705a      	strb	r2, [r3, #1]
 80031f2:	e00f      	b.n	8003214 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031f4:	78fb      	ldrb	r3, [r7, #3]
 80031f6:	f003 020f 	and.w	r2, r3, #15
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	4413      	add	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	4413      	add	r3, r2
 800320a:	3304      	adds	r3, #4
 800320c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	b2da      	uxtb	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003220:	883b      	ldrh	r3, [r7, #0]
 8003222:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	78ba      	ldrb	r2, [r7, #2]
 800322e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	785b      	ldrb	r3, [r3, #1]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d004      	beq.n	8003242 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003242:	78bb      	ldrb	r3, [r7, #2]
 8003244:	2b02      	cmp	r3, #2
 8003246:	d102      	bne.n	800324e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <HAL_PCD_EP_Open+0xae>
 8003258:	2302      	movs	r3, #2
 800325a:	e00e      	b.n	800327a <HAL_PCD_EP_Open+0xcc>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68f9      	ldr	r1, [r7, #12]
 800326a:	4618      	mov	r0, r3
 800326c:	f001 fbe2 	bl	8004a34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003278:	7afb      	ldrb	r3, [r7, #11]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b084      	sub	sp, #16
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
 800328a:	460b      	mov	r3, r1
 800328c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800328e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003292:	2b00      	cmp	r3, #0
 8003294:	da0f      	bge.n	80032b6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003296:	78fb      	ldrb	r3, [r7, #3]
 8003298:	f003 020f 	and.w	r2, r3, #15
 800329c:	4613      	mov	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	4413      	add	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	3310      	adds	r3, #16
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	4413      	add	r3, r2
 80032aa:	3304      	adds	r3, #4
 80032ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2201      	movs	r2, #1
 80032b2:	705a      	strb	r2, [r3, #1]
 80032b4:	e00f      	b.n	80032d6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032b6:	78fb      	ldrb	r3, [r7, #3]
 80032b8:	f003 020f 	and.w	r2, r3, #15
 80032bc:	4613      	mov	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	4413      	add	r3, r2
 80032cc:	3304      	adds	r3, #4
 80032ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80032d6:	78fb      	ldrb	r3, [r7, #3]
 80032d8:	f003 030f 	and.w	r3, r3, #15
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d101      	bne.n	80032f0 <HAL_PCD_EP_Close+0x6e>
 80032ec:	2302      	movs	r3, #2
 80032ee:	e00e      	b.n	800330e <HAL_PCD_EP_Close+0x8c>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68f9      	ldr	r1, [r7, #12]
 80032fe:	4618      	mov	r0, r3
 8003300:	f001 fc20 	bl	8004b44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b086      	sub	sp, #24
 800331a:	af00      	add	r7, sp, #0
 800331c:	60f8      	str	r0, [r7, #12]
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	603b      	str	r3, [r7, #0]
 8003322:	460b      	mov	r3, r1
 8003324:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003326:	7afb      	ldrb	r3, [r7, #11]
 8003328:	f003 020f 	and.w	r2, r3, #15
 800332c:	4613      	mov	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	4413      	add	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4413      	add	r3, r2
 800333c:	3304      	adds	r3, #4
 800333e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	2200      	movs	r2, #0
 8003350:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2200      	movs	r2, #0
 8003356:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003358:	7afb      	ldrb	r3, [r7, #11]
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	b2da      	uxtb	r2, r3
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	799b      	ldrb	r3, [r3, #6]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d102      	bne.n	8003372 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6818      	ldr	r0, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	799b      	ldrb	r3, [r3, #6]
 800337a:	461a      	mov	r2, r3
 800337c:	6979      	ldr	r1, [r7, #20]
 800337e:	f001 fcbd 	bl	8004cfc <USB_EPStartXfer>

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003398:	78fb      	ldrb	r3, [r7, #3]
 800339a:	f003 020f 	and.w	r2, r3, #15
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	4413      	add	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80033ae:	681b      	ldr	r3, [r3, #0]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	607a      	str	r2, [r7, #4]
 80033c6:	603b      	str	r3, [r7, #0]
 80033c8:	460b      	mov	r3, r1
 80033ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033cc:	7afb      	ldrb	r3, [r7, #11]
 80033ce:	f003 020f 	and.w	r2, r3, #15
 80033d2:	4613      	mov	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	4413      	add	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	3310      	adds	r3, #16
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	4413      	add	r3, r2
 80033e0:	3304      	adds	r3, #4
 80033e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	2200      	movs	r2, #0
 80033f4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	2201      	movs	r2, #1
 80033fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033fc:	7afb      	ldrb	r3, [r7, #11]
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	b2da      	uxtb	r2, r3
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	799b      	ldrb	r3, [r3, #6]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d102      	bne.n	8003416 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6818      	ldr	r0, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	799b      	ldrb	r3, [r3, #6]
 800341e:	461a      	mov	r2, r3
 8003420:	6979      	ldr	r1, [r7, #20]
 8003422:	f001 fc6b 	bl	8004cfc <USB_EPStartXfer>

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800343c:	78fb      	ldrb	r3, [r7, #3]
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	7912      	ldrb	r2, [r2, #4]
 8003446:	4293      	cmp	r3, r2
 8003448:	d901      	bls.n	800344e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e04f      	b.n	80034ee <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800344e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003452:	2b00      	cmp	r3, #0
 8003454:	da0f      	bge.n	8003476 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003456:	78fb      	ldrb	r3, [r7, #3]
 8003458:	f003 020f 	and.w	r2, r3, #15
 800345c:	4613      	mov	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	3310      	adds	r3, #16
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	4413      	add	r3, r2
 800346a:	3304      	adds	r3, #4
 800346c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2201      	movs	r2, #1
 8003472:	705a      	strb	r2, [r3, #1]
 8003474:	e00d      	b.n	8003492 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003476:	78fa      	ldrb	r2, [r7, #3]
 8003478:	4613      	mov	r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	4413      	add	r3, r2
 8003488:	3304      	adds	r3, #4
 800348a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2201      	movs	r2, #1
 8003496:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_PCD_EP_SetStall+0x82>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e01d      	b.n	80034ee <HAL_PCD_EP_SetStall+0xbe>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68f9      	ldr	r1, [r7, #12]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f001 fff9 	bl	80054b8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034c6:	78fb      	ldrb	r3, [r7, #3]
 80034c8:	f003 030f 	and.w	r3, r3, #15
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d109      	bne.n	80034e4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6818      	ldr	r0, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	7999      	ldrb	r1, [r3, #6]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80034de:	461a      	mov	r2, r3
 80034e0:	f002 f9ea 	bl	80058b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b084      	sub	sp, #16
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
 80034fe:	460b      	mov	r3, r1
 8003500:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003502:	78fb      	ldrb	r3, [r7, #3]
 8003504:	f003 030f 	and.w	r3, r3, #15
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	7912      	ldrb	r2, [r2, #4]
 800350c:	4293      	cmp	r3, r2
 800350e:	d901      	bls.n	8003514 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e042      	b.n	800359a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003514:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003518:	2b00      	cmp	r3, #0
 800351a:	da0f      	bge.n	800353c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800351c:	78fb      	ldrb	r3, [r7, #3]
 800351e:	f003 020f 	and.w	r2, r3, #15
 8003522:	4613      	mov	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	4413      	add	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	3310      	adds	r3, #16
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	4413      	add	r3, r2
 8003530:	3304      	adds	r3, #4
 8003532:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2201      	movs	r2, #1
 8003538:	705a      	strb	r2, [r3, #1]
 800353a:	e00f      	b.n	800355c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	f003 020f 	and.w	r2, r3, #15
 8003542:	4613      	mov	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	4413      	add	r3, r2
 8003552:	3304      	adds	r3, #4
 8003554:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003562:	78fb      	ldrb	r3, [r7, #3]
 8003564:	f003 030f 	and.w	r3, r3, #15
 8003568:	b2da      	uxtb	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003574:	2b01      	cmp	r3, #1
 8003576:	d101      	bne.n	800357c <HAL_PCD_EP_ClrStall+0x86>
 8003578:	2302      	movs	r3, #2
 800357a:	e00e      	b.n	800359a <HAL_PCD_EP_ClrStall+0xa4>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68f9      	ldr	r1, [r7, #12]
 800358a:	4618      	mov	r0, r3
 800358c:	f002 f802 	bl	8005594 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b084      	sub	sp, #16
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	460b      	mov	r3, r1
 80035ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80035ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	da0c      	bge.n	80035d0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035b6:	78fb      	ldrb	r3, [r7, #3]
 80035b8:	f003 020f 	and.w	r2, r3, #15
 80035bc:	4613      	mov	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4413      	add	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	3310      	adds	r3, #16
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	4413      	add	r3, r2
 80035ca:	3304      	adds	r3, #4
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	e00c      	b.n	80035ea <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035d0:	78fb      	ldrb	r3, [r7, #3]
 80035d2:	f003 020f 	and.w	r2, r3, #15
 80035d6:	4613      	mov	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4413      	add	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	4413      	add	r3, r2
 80035e6:	3304      	adds	r3, #4
 80035e8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68f9      	ldr	r1, [r7, #12]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f001 fe21 	bl	8005238 <USB_EPStopXfer>
 80035f6:	4603      	mov	r3, r0
 80035f8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80035fa:	7afb      	ldrb	r3, [r7, #11]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08a      	sub	sp, #40	@ 0x28
 8003608:	af02      	add	r7, sp, #8
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	4613      	mov	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	4413      	add	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	3310      	adds	r3, #16
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	4413      	add	r3, r2
 8003628:	3304      	adds	r3, #4
 800362a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	695a      	ldr	r2, [r3, #20]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	429a      	cmp	r2, r3
 8003636:	d901      	bls.n	800363c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e06b      	b.n	8003714 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	691a      	ldr	r2, [r3, #16]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	69fa      	ldr	r2, [r7, #28]
 800364e:	429a      	cmp	r2, r3
 8003650:	d902      	bls.n	8003658 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	3303      	adds	r3, #3
 800365c:	089b      	lsrs	r3, r3, #2
 800365e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003660:	e02a      	b.n	80036b8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	691a      	ldr	r2, [r3, #16]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	429a      	cmp	r2, r3
 8003676:	d902      	bls.n	800367e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	3303      	adds	r3, #3
 8003682:	089b      	lsrs	r3, r3, #2
 8003684:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	68d9      	ldr	r1, [r3, #12]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	b2da      	uxtb	r2, r3
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	4603      	mov	r3, r0
 800369a:	6978      	ldr	r0, [r7, #20]
 800369c:	f001 fe76 	bl	800538c <USB_WritePacket>

    ep->xfer_buff  += len;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	441a      	add	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	695a      	ldr	r2, [r3, #20]
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	441a      	add	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	015a      	lsls	r2, r3, #5
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	4413      	add	r3, r2
 80036c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d809      	bhi.n	80036e2 <PCD_WriteEmptyTxFifo+0xde>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	695a      	ldr	r2, [r3, #20]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d203      	bcs.n	80036e2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1bf      	bne.n	8003662 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	691a      	ldr	r2, [r3, #16]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d811      	bhi.n	8003712 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	f003 030f 	and.w	r3, r3, #15
 80036f4:	2201      	movs	r2, #1
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003702:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	43db      	mvns	r3, r3
 8003708:	6939      	ldr	r1, [r7, #16]
 800370a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800370e:	4013      	ands	r3, r2
 8003710:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3720      	adds	r7, #32
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b088      	sub	sp, #32
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	333c      	adds	r3, #60	@ 0x3c
 8003734:	3304      	adds	r3, #4
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	015a      	lsls	r2, r3, #5
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	4413      	add	r3, r2
 8003742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	799b      	ldrb	r3, [r3, #6]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d17b      	bne.n	800384a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b00      	cmp	r3, #0
 800375a:	d015      	beq.n	8003788 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	4a61      	ldr	r2, [pc, #388]	@ (80038e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003760:	4293      	cmp	r3, r2
 8003762:	f240 80b9 	bls.w	80038d8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 80b3 	beq.w	80038d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	015a      	lsls	r2, r3, #5
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	4413      	add	r3, r2
 800377a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800377e:	461a      	mov	r2, r3
 8003780:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003784:	6093      	str	r3, [r2, #8]
 8003786:	e0a7      	b.n	80038d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	f003 0320 	and.w	r3, r3, #32
 800378e:	2b00      	cmp	r3, #0
 8003790:	d009      	beq.n	80037a6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	4413      	add	r3, r2
 800379a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800379e:	461a      	mov	r2, r3
 80037a0:	2320      	movs	r3, #32
 80037a2:	6093      	str	r3, [r2, #8]
 80037a4:	e098      	b.n	80038d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f040 8093 	bne.w	80038d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	4a4b      	ldr	r2, [pc, #300]	@ (80038e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d90f      	bls.n	80037da <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00a      	beq.n	80037da <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037d0:	461a      	mov	r2, r3
 80037d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037d6:	6093      	str	r3, [r2, #8]
 80037d8:	e07e      	b.n	80038d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	4613      	mov	r3, r2
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	4413      	add	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	4413      	add	r3, r2
 80037ec:	3304      	adds	r3, #4
 80037ee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a1a      	ldr	r2, [r3, #32]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	0159      	lsls	r1, r3, #5
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	440b      	add	r3, r1
 80037fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003806:	1ad2      	subs	r2, r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d114      	bne.n	800383c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d109      	bne.n	800382e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003824:	461a      	mov	r2, r3
 8003826:	2101      	movs	r1, #1
 8003828:	f002 f846 	bl	80058b8 <USB_EP0_OutStart>
 800382c:	e006      	b.n	800383c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	441a      	add	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	b2db      	uxtb	r3, r3
 8003840:	4619      	mov	r1, r3
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f004 faa0 	bl	8007d88 <HAL_PCD_DataOutStageCallback>
 8003848:	e046      	b.n	80038d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	4a26      	ldr	r2, [pc, #152]	@ (80038e8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d124      	bne.n	800389c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00a      	beq.n	8003872 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	015a      	lsls	r2, r3, #5
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	4413      	add	r3, r2
 8003864:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003868:	461a      	mov	r2, r3
 800386a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800386e:	6093      	str	r3, [r2, #8]
 8003870:	e032      	b.n	80038d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f003 0320 	and.w	r3, r3, #32
 8003878:	2b00      	cmp	r3, #0
 800387a:	d008      	beq.n	800388e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	015a      	lsls	r2, r3, #5
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	4413      	add	r3, r2
 8003884:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003888:	461a      	mov	r2, r3
 800388a:	2320      	movs	r3, #32
 800388c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	4619      	mov	r1, r3
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f004 fa77 	bl	8007d88 <HAL_PCD_DataOutStageCallback>
 800389a:	e01d      	b.n	80038d8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d114      	bne.n	80038cc <PCD_EP_OutXfrComplete_int+0x1b0>
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	4613      	mov	r3, r2
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	4413      	add	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	440b      	add	r3, r1
 80038b0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d108      	bne.n	80038cc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80038c4:	461a      	mov	r2, r3
 80038c6:	2100      	movs	r1, #0
 80038c8:	f001 fff6 	bl	80058b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	4619      	mov	r1, r3
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f004 fa58 	bl	8007d88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3720      	adds	r7, #32
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	4f54300a 	.word	0x4f54300a
 80038e8:	4f54310a 	.word	0x4f54310a

080038ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	333c      	adds	r3, #60	@ 0x3c
 8003904:	3304      	adds	r3, #4
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	4413      	add	r3, r2
 8003912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4a15      	ldr	r2, [pc, #84]	@ (8003974 <PCD_EP_OutSetupPacket_int+0x88>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d90e      	bls.n	8003940 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003928:	2b00      	cmp	r3, #0
 800392a:	d009      	beq.n	8003940 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	4413      	add	r3, r2
 8003934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003938:	461a      	mov	r2, r3
 800393a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800393e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f004 fa0f 	bl	8007d64 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4a0a      	ldr	r2, [pc, #40]	@ (8003974 <PCD_EP_OutSetupPacket_int+0x88>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d90c      	bls.n	8003968 <PCD_EP_OutSetupPacket_int+0x7c>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	799b      	ldrb	r3, [r3, #6]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d108      	bne.n	8003968 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003960:	461a      	mov	r2, r3
 8003962:	2101      	movs	r1, #1
 8003964:	f001 ffa8 	bl	80058b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3718      	adds	r7, #24
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	4f54300a 	.word	0x4f54300a

08003978 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	70fb      	strb	r3, [r7, #3]
 8003984:	4613      	mov	r3, r2
 8003986:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003990:	78fb      	ldrb	r3, [r7, #3]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d107      	bne.n	80039a6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003996:	883b      	ldrh	r3, [r7, #0]
 8003998:	0419      	lsls	r1, r3, #16
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80039a4:	e028      	b.n	80039f8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ac:	0c1b      	lsrs	r3, r3, #16
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	4413      	add	r3, r2
 80039b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039b4:	2300      	movs	r3, #0
 80039b6:	73fb      	strb	r3, [r7, #15]
 80039b8:	e00d      	b.n	80039d6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	7bfb      	ldrb	r3, [r7, #15]
 80039c0:	3340      	adds	r3, #64	@ 0x40
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	0c1b      	lsrs	r3, r3, #16
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	4413      	add	r3, r2
 80039ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
 80039d2:	3301      	adds	r3, #1
 80039d4:	73fb      	strb	r3, [r7, #15]
 80039d6:	7bfa      	ldrb	r2, [r7, #15]
 80039d8:	78fb      	ldrb	r3, [r7, #3]
 80039da:	3b01      	subs	r3, #1
 80039dc:	429a      	cmp	r2, r3
 80039de:	d3ec      	bcc.n	80039ba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80039e0:	883b      	ldrh	r3, [r7, #0]
 80039e2:	0418      	lsls	r0, r3, #16
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6819      	ldr	r1, [r3, #0]
 80039e8:	78fb      	ldrb	r3, [r7, #3]
 80039ea:	3b01      	subs	r3, #1
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	4302      	orrs	r2, r0
 80039f0:	3340      	adds	r3, #64	@ 0x40
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
 8003a0e:	460b      	mov	r3, r1
 8003a10:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	887a      	ldrh	r2, [r7, #2]
 8003a18:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e267      	b.n	8003f22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d075      	beq.n	8003b4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a5e:	4b88      	ldr	r3, [pc, #544]	@ (8003c80 <HAL_RCC_OscConfig+0x240>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 030c 	and.w	r3, r3, #12
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d00c      	beq.n	8003a84 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a6a:	4b85      	ldr	r3, [pc, #532]	@ (8003c80 <HAL_RCC_OscConfig+0x240>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d112      	bne.n	8003a9c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a76:	4b82      	ldr	r3, [pc, #520]	@ (8003c80 <HAL_RCC_OscConfig+0x240>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a82:	d10b      	bne.n	8003a9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a84:	4b7e      	ldr	r3, [pc, #504]	@ (8003c80 <HAL_RCC_OscConfig+0x240>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d05b      	beq.n	8003b48 <HAL_RCC_OscConfig+0x108>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d157      	bne.n	8003b48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e242      	b.n	8003f22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aa4:	d106      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x74>
 8003aa6:	4b76      	ldr	r3, [pc, #472]	@ (8003c80 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a75      	ldr	r2, [pc, #468]	@ (8003c80 <HAL_RCC_OscConfig+0x240>)
 8003aac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	e01d      	b.n	8003af0 <HAL_RCC_OscConfig+0xb0>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003abc:	d10c      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x98>
 8003abe:	4b70      	ldr	r3, [pc, #448]	@ (8003c80 <HAL_RCC_OscConfig+0x240>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a6f      	ldr	r2, [pc, #444]	@ (8003c80 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	4b6d      	ldr	r3, [pc, #436]	@ (8003c80 <HAL_RCC_OscConfig+0x240>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a6c      	ldr	r2, [pc, #432]	@ (8003c80 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	e00b      	b.n	8003af0 <HAL_RCC_OscConfig+0xb0>
 8003ad8:	4b69      	ldr	r3, [pc, #420]	@ (8003c80 <HAL_RCC_OscConfig+0x240>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a68      	ldr	r2, [pc, #416]	@ (8003c80 <HAL_RCC_OscConfig+0x240>)
 8003ade:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	4b66      	ldr	r3, [pc, #408]	@ (8003c80 <HAL_RCC_OscConfig+0x240>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a65      	ldr	r2, [pc, #404]	@ (8003c80 <HAL_RCC_OscConfig+0x240>)
 8003aea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003aee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d013      	beq.n	8003b20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af8:	f7fd fa46 	bl	8000f88 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b00:	f7fd fa42 	bl	8000f88 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b64      	cmp	r3, #100	@ 0x64
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e207      	b.n	8003f22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b12:	4b5b      	ldr	r3, [pc, #364]	@ (8003c80 <HAL_RCC_OscConfig+0x240>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0f0      	beq.n	8003b00 <HAL_RCC_OscConfig+0xc0>
 8003b1e:	e014      	b.n	8003b4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b20:	f7fd fa32 	bl	8000f88 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b28:	f7fd fa2e 	bl	8000f88 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b64      	cmp	r3, #100	@ 0x64
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e1f3      	b.n	8003f22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b3a:	4b51      	ldr	r3, [pc, #324]	@ (8003c80 <HAL_RCC_OscConfig+0x240>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0xe8>
 8003b46:	e000      	b.n	8003b4a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d063      	beq.n	8003c1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b56:	4b4a      	ldr	r3, [pc, #296]	@ (8003c80 <HAL_RCC_OscConfig+0x240>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 030c 	and.w	r3, r3, #12
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00b      	beq.n	8003b7a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b62:	4b47      	ldr	r3, [pc, #284]	@ (8003c80 <HAL_RCC_OscConfig+0x240>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d11c      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b6e:	4b44      	ldr	r3, [pc, #272]	@ (8003c80 <HAL_RCC_OscConfig+0x240>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d116      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b7a:	4b41      	ldr	r3, [pc, #260]	@ (8003c80 <HAL_RCC_OscConfig+0x240>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d005      	beq.n	8003b92 <HAL_RCC_OscConfig+0x152>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d001      	beq.n	8003b92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e1c7      	b.n	8003f22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b92:	4b3b      	ldr	r3, [pc, #236]	@ (8003c80 <HAL_RCC_OscConfig+0x240>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	4937      	ldr	r1, [pc, #220]	@ (8003c80 <HAL_RCC_OscConfig+0x240>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ba6:	e03a      	b.n	8003c1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d020      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bb0:	4b34      	ldr	r3, [pc, #208]	@ (8003c84 <HAL_RCC_OscConfig+0x244>)
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb6:	f7fd f9e7 	bl	8000f88 <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bbe:	f7fd f9e3 	bl	8000f88 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e1a8      	b.n	8003f22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd0:	4b2b      	ldr	r3, [pc, #172]	@ (8003c80 <HAL_RCC_OscConfig+0x240>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0f0      	beq.n	8003bbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bdc:	4b28      	ldr	r3, [pc, #160]	@ (8003c80 <HAL_RCC_OscConfig+0x240>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	4925      	ldr	r1, [pc, #148]	@ (8003c80 <HAL_RCC_OscConfig+0x240>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	600b      	str	r3, [r1, #0]
 8003bf0:	e015      	b.n	8003c1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bf2:	4b24      	ldr	r3, [pc, #144]	@ (8003c84 <HAL_RCC_OscConfig+0x244>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf8:	f7fd f9c6 	bl	8000f88 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c00:	f7fd f9c2 	bl	8000f88 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e187      	b.n	8003f22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c12:	4b1b      	ldr	r3, [pc, #108]	@ (8003c80 <HAL_RCC_OscConfig+0x240>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0308 	and.w	r3, r3, #8
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d036      	beq.n	8003c98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d016      	beq.n	8003c60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c32:	4b15      	ldr	r3, [pc, #84]	@ (8003c88 <HAL_RCC_OscConfig+0x248>)
 8003c34:	2201      	movs	r2, #1
 8003c36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c38:	f7fd f9a6 	bl	8000f88 <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c40:	f7fd f9a2 	bl	8000f88 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e167      	b.n	8003f22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c52:	4b0b      	ldr	r3, [pc, #44]	@ (8003c80 <HAL_RCC_OscConfig+0x240>)
 8003c54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0f0      	beq.n	8003c40 <HAL_RCC_OscConfig+0x200>
 8003c5e:	e01b      	b.n	8003c98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c60:	4b09      	ldr	r3, [pc, #36]	@ (8003c88 <HAL_RCC_OscConfig+0x248>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c66:	f7fd f98f 	bl	8000f88 <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c6c:	e00e      	b.n	8003c8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c6e:	f7fd f98b 	bl	8000f88 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d907      	bls.n	8003c8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e150      	b.n	8003f22 <HAL_RCC_OscConfig+0x4e2>
 8003c80:	40023800 	.word	0x40023800
 8003c84:	42470000 	.word	0x42470000
 8003c88:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c8c:	4b88      	ldr	r3, [pc, #544]	@ (8003eb0 <HAL_RCC_OscConfig+0x470>)
 8003c8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1ea      	bne.n	8003c6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 8097 	beq.w	8003dd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003caa:	4b81      	ldr	r3, [pc, #516]	@ (8003eb0 <HAL_RCC_OscConfig+0x470>)
 8003cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10f      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	4b7d      	ldr	r3, [pc, #500]	@ (8003eb0 <HAL_RCC_OscConfig+0x470>)
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbe:	4a7c      	ldr	r2, [pc, #496]	@ (8003eb0 <HAL_RCC_OscConfig+0x470>)
 8003cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cc6:	4b7a      	ldr	r3, [pc, #488]	@ (8003eb0 <HAL_RCC_OscConfig+0x470>)
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cce:	60bb      	str	r3, [r7, #8]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd6:	4b77      	ldr	r3, [pc, #476]	@ (8003eb4 <HAL_RCC_OscConfig+0x474>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d118      	bne.n	8003d14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ce2:	4b74      	ldr	r3, [pc, #464]	@ (8003eb4 <HAL_RCC_OscConfig+0x474>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a73      	ldr	r2, [pc, #460]	@ (8003eb4 <HAL_RCC_OscConfig+0x474>)
 8003ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cee:	f7fd f94b 	bl	8000f88 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cf6:	f7fd f947 	bl	8000f88 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e10c      	b.n	8003f22 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d08:	4b6a      	ldr	r3, [pc, #424]	@ (8003eb4 <HAL_RCC_OscConfig+0x474>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0f0      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d106      	bne.n	8003d2a <HAL_RCC_OscConfig+0x2ea>
 8003d1c:	4b64      	ldr	r3, [pc, #400]	@ (8003eb0 <HAL_RCC_OscConfig+0x470>)
 8003d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d20:	4a63      	ldr	r2, [pc, #396]	@ (8003eb0 <HAL_RCC_OscConfig+0x470>)
 8003d22:	f043 0301 	orr.w	r3, r3, #1
 8003d26:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d28:	e01c      	b.n	8003d64 <HAL_RCC_OscConfig+0x324>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	2b05      	cmp	r3, #5
 8003d30:	d10c      	bne.n	8003d4c <HAL_RCC_OscConfig+0x30c>
 8003d32:	4b5f      	ldr	r3, [pc, #380]	@ (8003eb0 <HAL_RCC_OscConfig+0x470>)
 8003d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d36:	4a5e      	ldr	r2, [pc, #376]	@ (8003eb0 <HAL_RCC_OscConfig+0x470>)
 8003d38:	f043 0304 	orr.w	r3, r3, #4
 8003d3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d3e:	4b5c      	ldr	r3, [pc, #368]	@ (8003eb0 <HAL_RCC_OscConfig+0x470>)
 8003d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d42:	4a5b      	ldr	r2, [pc, #364]	@ (8003eb0 <HAL_RCC_OscConfig+0x470>)
 8003d44:	f043 0301 	orr.w	r3, r3, #1
 8003d48:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d4a:	e00b      	b.n	8003d64 <HAL_RCC_OscConfig+0x324>
 8003d4c:	4b58      	ldr	r3, [pc, #352]	@ (8003eb0 <HAL_RCC_OscConfig+0x470>)
 8003d4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d50:	4a57      	ldr	r2, [pc, #348]	@ (8003eb0 <HAL_RCC_OscConfig+0x470>)
 8003d52:	f023 0301 	bic.w	r3, r3, #1
 8003d56:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d58:	4b55      	ldr	r3, [pc, #340]	@ (8003eb0 <HAL_RCC_OscConfig+0x470>)
 8003d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d5c:	4a54      	ldr	r2, [pc, #336]	@ (8003eb0 <HAL_RCC_OscConfig+0x470>)
 8003d5e:	f023 0304 	bic.w	r3, r3, #4
 8003d62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d015      	beq.n	8003d98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6c:	f7fd f90c 	bl	8000f88 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d72:	e00a      	b.n	8003d8a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d74:	f7fd f908 	bl	8000f88 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e0cb      	b.n	8003f22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d8a:	4b49      	ldr	r3, [pc, #292]	@ (8003eb0 <HAL_RCC_OscConfig+0x470>)
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0ee      	beq.n	8003d74 <HAL_RCC_OscConfig+0x334>
 8003d96:	e014      	b.n	8003dc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d98:	f7fd f8f6 	bl	8000f88 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d9e:	e00a      	b.n	8003db6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da0:	f7fd f8f2 	bl	8000f88 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e0b5      	b.n	8003f22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003db6:	4b3e      	ldr	r3, [pc, #248]	@ (8003eb0 <HAL_RCC_OscConfig+0x470>)
 8003db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1ee      	bne.n	8003da0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dc2:	7dfb      	ldrb	r3, [r7, #23]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d105      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc8:	4b39      	ldr	r3, [pc, #228]	@ (8003eb0 <HAL_RCC_OscConfig+0x470>)
 8003dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dcc:	4a38      	ldr	r2, [pc, #224]	@ (8003eb0 <HAL_RCC_OscConfig+0x470>)
 8003dce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dd2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 80a1 	beq.w	8003f20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dde:	4b34      	ldr	r3, [pc, #208]	@ (8003eb0 <HAL_RCC_OscConfig+0x470>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 030c 	and.w	r3, r3, #12
 8003de6:	2b08      	cmp	r3, #8
 8003de8:	d05c      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d141      	bne.n	8003e76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df2:	4b31      	ldr	r3, [pc, #196]	@ (8003eb8 <HAL_RCC_OscConfig+0x478>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df8:	f7fd f8c6 	bl	8000f88 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e00:	f7fd f8c2 	bl	8000f88 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e087      	b.n	8003f22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e12:	4b27      	ldr	r3, [pc, #156]	@ (8003eb0 <HAL_RCC_OscConfig+0x470>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f0      	bne.n	8003e00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69da      	ldr	r2, [r3, #28]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2c:	019b      	lsls	r3, r3, #6
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e34:	085b      	lsrs	r3, r3, #1
 8003e36:	3b01      	subs	r3, #1
 8003e38:	041b      	lsls	r3, r3, #16
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e40:	061b      	lsls	r3, r3, #24
 8003e42:	491b      	ldr	r1, [pc, #108]	@ (8003eb0 <HAL_RCC_OscConfig+0x470>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e48:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb8 <HAL_RCC_OscConfig+0x478>)
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4e:	f7fd f89b 	bl	8000f88 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e54:	e008      	b.n	8003e68 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e56:	f7fd f897 	bl	8000f88 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e05c      	b.n	8003f22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e68:	4b11      	ldr	r3, [pc, #68]	@ (8003eb0 <HAL_RCC_OscConfig+0x470>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0f0      	beq.n	8003e56 <HAL_RCC_OscConfig+0x416>
 8003e74:	e054      	b.n	8003f20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e76:	4b10      	ldr	r3, [pc, #64]	@ (8003eb8 <HAL_RCC_OscConfig+0x478>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7c:	f7fd f884 	bl	8000f88 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e84:	f7fd f880 	bl	8000f88 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e045      	b.n	8003f22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e96:	4b06      	ldr	r3, [pc, #24]	@ (8003eb0 <HAL_RCC_OscConfig+0x470>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0x444>
 8003ea2:	e03d      	b.n	8003f20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d107      	bne.n	8003ebc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e038      	b.n	8003f22 <HAL_RCC_OscConfig+0x4e2>
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	40007000 	.word	0x40007000
 8003eb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8003f2c <HAL_RCC_OscConfig+0x4ec>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d028      	beq.n	8003f1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d121      	bne.n	8003f1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d11a      	bne.n	8003f1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003eec:	4013      	ands	r3, r2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ef2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d111      	bne.n	8003f1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f02:	085b      	lsrs	r3, r3, #1
 8003f04:	3b01      	subs	r3, #1
 8003f06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d107      	bne.n	8003f1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d001      	beq.n	8003f20 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e000      	b.n	8003f22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40023800 	.word	0x40023800

08003f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e0cc      	b.n	80040de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f44:	4b68      	ldr	r3, [pc, #416]	@ (80040e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d90c      	bls.n	8003f6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f52:	4b65      	ldr	r3, [pc, #404]	@ (80040e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f5a:	4b63      	ldr	r3, [pc, #396]	@ (80040e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d001      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e0b8      	b.n	80040de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d020      	beq.n	8003fba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d005      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f84:	4b59      	ldr	r3, [pc, #356]	@ (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	4a58      	ldr	r2, [pc, #352]	@ (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 8003f8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0308 	and.w	r3, r3, #8
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d005      	beq.n	8003fa8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f9c:	4b53      	ldr	r3, [pc, #332]	@ (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	4a52      	ldr	r2, [pc, #328]	@ (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 8003fa2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003fa6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fa8:	4b50      	ldr	r3, [pc, #320]	@ (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	494d      	ldr	r1, [pc, #308]	@ (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d044      	beq.n	8004050 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d107      	bne.n	8003fde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fce:	4b47      	ldr	r3, [pc, #284]	@ (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d119      	bne.n	800400e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e07f      	b.n	80040de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d003      	beq.n	8003fee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fea:	2b03      	cmp	r3, #3
 8003fec:	d107      	bne.n	8003ffe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fee:	4b3f      	ldr	r3, [pc, #252]	@ (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d109      	bne.n	800400e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e06f      	b.n	80040de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ffe:	4b3b      	ldr	r3, [pc, #236]	@ (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e067      	b.n	80040de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800400e:	4b37      	ldr	r3, [pc, #220]	@ (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f023 0203 	bic.w	r2, r3, #3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	4934      	ldr	r1, [pc, #208]	@ (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 800401c:	4313      	orrs	r3, r2
 800401e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004020:	f7fc ffb2 	bl	8000f88 <HAL_GetTick>
 8004024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004026:	e00a      	b.n	800403e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004028:	f7fc ffae 	bl	8000f88 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004036:	4293      	cmp	r3, r2
 8004038:	d901      	bls.n	800403e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e04f      	b.n	80040de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403e:	4b2b      	ldr	r3, [pc, #172]	@ (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 020c 	and.w	r2, r3, #12
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	429a      	cmp	r2, r3
 800404e:	d1eb      	bne.n	8004028 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004050:	4b25      	ldr	r3, [pc, #148]	@ (80040e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	429a      	cmp	r2, r3
 800405c:	d20c      	bcs.n	8004078 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800405e:	4b22      	ldr	r3, [pc, #136]	@ (80040e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004066:	4b20      	ldr	r3, [pc, #128]	@ (80040e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	429a      	cmp	r2, r3
 8004072:	d001      	beq.n	8004078 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e032      	b.n	80040de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b00      	cmp	r3, #0
 8004082:	d008      	beq.n	8004096 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004084:	4b19      	ldr	r3, [pc, #100]	@ (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	4916      	ldr	r1, [pc, #88]	@ (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 8004092:	4313      	orrs	r3, r2
 8004094:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d009      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040a2:	4b12      	ldr	r3, [pc, #72]	@ (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	490e      	ldr	r1, [pc, #56]	@ (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040b6:	f000 f821 	bl	80040fc <HAL_RCC_GetSysClockFreq>
 80040ba:	4602      	mov	r2, r0
 80040bc:	4b0b      	ldr	r3, [pc, #44]	@ (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	091b      	lsrs	r3, r3, #4
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	490a      	ldr	r1, [pc, #40]	@ (80040f0 <HAL_RCC_ClockConfig+0x1c0>)
 80040c8:	5ccb      	ldrb	r3, [r1, r3]
 80040ca:	fa22 f303 	lsr.w	r3, r2, r3
 80040ce:	4a09      	ldr	r2, [pc, #36]	@ (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 80040d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80040d2:	4b09      	ldr	r3, [pc, #36]	@ (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fc ff12 	bl	8000f00 <HAL_InitTick>

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40023c00 	.word	0x40023c00
 80040ec:	40023800 	.word	0x40023800
 80040f0:	080083ac 	.word	0x080083ac
 80040f4:	20000000 	.word	0x20000000
 80040f8:	20000004 	.word	0x20000004

080040fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004100:	b094      	sub	sp, #80	@ 0x50
 8004102:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004114:	4b79      	ldr	r3, [pc, #484]	@ (80042fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 030c 	and.w	r3, r3, #12
 800411c:	2b08      	cmp	r3, #8
 800411e:	d00d      	beq.n	800413c <HAL_RCC_GetSysClockFreq+0x40>
 8004120:	2b08      	cmp	r3, #8
 8004122:	f200 80e1 	bhi.w	80042e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004126:	2b00      	cmp	r3, #0
 8004128:	d002      	beq.n	8004130 <HAL_RCC_GetSysClockFreq+0x34>
 800412a:	2b04      	cmp	r3, #4
 800412c:	d003      	beq.n	8004136 <HAL_RCC_GetSysClockFreq+0x3a>
 800412e:	e0db      	b.n	80042e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004130:	4b73      	ldr	r3, [pc, #460]	@ (8004300 <HAL_RCC_GetSysClockFreq+0x204>)
 8004132:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004134:	e0db      	b.n	80042ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004136:	4b73      	ldr	r3, [pc, #460]	@ (8004304 <HAL_RCC_GetSysClockFreq+0x208>)
 8004138:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800413a:	e0d8      	b.n	80042ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800413c:	4b6f      	ldr	r3, [pc, #444]	@ (80042fc <HAL_RCC_GetSysClockFreq+0x200>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004144:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004146:	4b6d      	ldr	r3, [pc, #436]	@ (80042fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d063      	beq.n	800421a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004152:	4b6a      	ldr	r3, [pc, #424]	@ (80042fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	099b      	lsrs	r3, r3, #6
 8004158:	2200      	movs	r2, #0
 800415a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800415c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800415e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004164:	633b      	str	r3, [r7, #48]	@ 0x30
 8004166:	2300      	movs	r3, #0
 8004168:	637b      	str	r3, [r7, #52]	@ 0x34
 800416a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800416e:	4622      	mov	r2, r4
 8004170:	462b      	mov	r3, r5
 8004172:	f04f 0000 	mov.w	r0, #0
 8004176:	f04f 0100 	mov.w	r1, #0
 800417a:	0159      	lsls	r1, r3, #5
 800417c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004180:	0150      	lsls	r0, r2, #5
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	4621      	mov	r1, r4
 8004188:	1a51      	subs	r1, r2, r1
 800418a:	6139      	str	r1, [r7, #16]
 800418c:	4629      	mov	r1, r5
 800418e:	eb63 0301 	sbc.w	r3, r3, r1
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	f04f 0200 	mov.w	r2, #0
 8004198:	f04f 0300 	mov.w	r3, #0
 800419c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041a0:	4659      	mov	r1, fp
 80041a2:	018b      	lsls	r3, r1, #6
 80041a4:	4651      	mov	r1, sl
 80041a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041aa:	4651      	mov	r1, sl
 80041ac:	018a      	lsls	r2, r1, #6
 80041ae:	4651      	mov	r1, sl
 80041b0:	ebb2 0801 	subs.w	r8, r2, r1
 80041b4:	4659      	mov	r1, fp
 80041b6:	eb63 0901 	sbc.w	r9, r3, r1
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	f04f 0300 	mov.w	r3, #0
 80041c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041ce:	4690      	mov	r8, r2
 80041d0:	4699      	mov	r9, r3
 80041d2:	4623      	mov	r3, r4
 80041d4:	eb18 0303 	adds.w	r3, r8, r3
 80041d8:	60bb      	str	r3, [r7, #8]
 80041da:	462b      	mov	r3, r5
 80041dc:	eb49 0303 	adc.w	r3, r9, r3
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	f04f 0300 	mov.w	r3, #0
 80041ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041ee:	4629      	mov	r1, r5
 80041f0:	024b      	lsls	r3, r1, #9
 80041f2:	4621      	mov	r1, r4
 80041f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041f8:	4621      	mov	r1, r4
 80041fa:	024a      	lsls	r2, r1, #9
 80041fc:	4610      	mov	r0, r2
 80041fe:	4619      	mov	r1, r3
 8004200:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004202:	2200      	movs	r2, #0
 8004204:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004206:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004208:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800420c:	f7fb ffdc 	bl	80001c8 <__aeabi_uldivmod>
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	4613      	mov	r3, r2
 8004216:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004218:	e058      	b.n	80042cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800421a:	4b38      	ldr	r3, [pc, #224]	@ (80042fc <HAL_RCC_GetSysClockFreq+0x200>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	099b      	lsrs	r3, r3, #6
 8004220:	2200      	movs	r2, #0
 8004222:	4618      	mov	r0, r3
 8004224:	4611      	mov	r1, r2
 8004226:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800422a:	623b      	str	r3, [r7, #32]
 800422c:	2300      	movs	r3, #0
 800422e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004230:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004234:	4642      	mov	r2, r8
 8004236:	464b      	mov	r3, r9
 8004238:	f04f 0000 	mov.w	r0, #0
 800423c:	f04f 0100 	mov.w	r1, #0
 8004240:	0159      	lsls	r1, r3, #5
 8004242:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004246:	0150      	lsls	r0, r2, #5
 8004248:	4602      	mov	r2, r0
 800424a:	460b      	mov	r3, r1
 800424c:	4641      	mov	r1, r8
 800424e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004252:	4649      	mov	r1, r9
 8004254:	eb63 0b01 	sbc.w	fp, r3, r1
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	f04f 0300 	mov.w	r3, #0
 8004260:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004264:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004268:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800426c:	ebb2 040a 	subs.w	r4, r2, sl
 8004270:	eb63 050b 	sbc.w	r5, r3, fp
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	f04f 0300 	mov.w	r3, #0
 800427c:	00eb      	lsls	r3, r5, #3
 800427e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004282:	00e2      	lsls	r2, r4, #3
 8004284:	4614      	mov	r4, r2
 8004286:	461d      	mov	r5, r3
 8004288:	4643      	mov	r3, r8
 800428a:	18e3      	adds	r3, r4, r3
 800428c:	603b      	str	r3, [r7, #0]
 800428e:	464b      	mov	r3, r9
 8004290:	eb45 0303 	adc.w	r3, r5, r3
 8004294:	607b      	str	r3, [r7, #4]
 8004296:	f04f 0200 	mov.w	r2, #0
 800429a:	f04f 0300 	mov.w	r3, #0
 800429e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042a2:	4629      	mov	r1, r5
 80042a4:	028b      	lsls	r3, r1, #10
 80042a6:	4621      	mov	r1, r4
 80042a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042ac:	4621      	mov	r1, r4
 80042ae:	028a      	lsls	r2, r1, #10
 80042b0:	4610      	mov	r0, r2
 80042b2:	4619      	mov	r1, r3
 80042b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042b6:	2200      	movs	r2, #0
 80042b8:	61bb      	str	r3, [r7, #24]
 80042ba:	61fa      	str	r2, [r7, #28]
 80042bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042c0:	f7fb ff82 	bl	80001c8 <__aeabi_uldivmod>
 80042c4:	4602      	mov	r2, r0
 80042c6:	460b      	mov	r3, r1
 80042c8:	4613      	mov	r3, r2
 80042ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80042cc:	4b0b      	ldr	r3, [pc, #44]	@ (80042fc <HAL_RCC_GetSysClockFreq+0x200>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	0c1b      	lsrs	r3, r3, #16
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	3301      	adds	r3, #1
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80042dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042e6:	e002      	b.n	80042ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042e8:	4b05      	ldr	r3, [pc, #20]	@ (8004300 <HAL_RCC_GetSysClockFreq+0x204>)
 80042ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3750      	adds	r7, #80	@ 0x50
 80042f4:	46bd      	mov	sp, r7
 80042f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042fa:	bf00      	nop
 80042fc:	40023800 	.word	0x40023800
 8004300:	00f42400 	.word	0x00f42400
 8004304:	007a1200 	.word	0x007a1200

08004308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800430c:	4b03      	ldr	r3, [pc, #12]	@ (800431c <HAL_RCC_GetHCLKFreq+0x14>)
 800430e:	681b      	ldr	r3, [r3, #0]
}
 8004310:	4618      	mov	r0, r3
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	20000000 	.word	0x20000000

08004320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004324:	f7ff fff0 	bl	8004308 <HAL_RCC_GetHCLKFreq>
 8004328:	4602      	mov	r2, r0
 800432a:	4b05      	ldr	r3, [pc, #20]	@ (8004340 <HAL_RCC_GetPCLK1Freq+0x20>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	0a9b      	lsrs	r3, r3, #10
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	4903      	ldr	r1, [pc, #12]	@ (8004344 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004336:	5ccb      	ldrb	r3, [r1, r3]
 8004338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800433c:	4618      	mov	r0, r3
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40023800 	.word	0x40023800
 8004344:	080083bc 	.word	0x080083bc

08004348 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004348:	b084      	sub	sp, #16
 800434a:	b580      	push	{r7, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
 8004352:	f107 001c 	add.w	r0, r7, #28
 8004356:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800435a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800435e:	2b01      	cmp	r3, #1
 8004360:	d123      	bne.n	80043aa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004366:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004376:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800438a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800438e:	2b01      	cmp	r3, #1
 8004390:	d105      	bne.n	800439e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f001 fae8 	bl	8005974 <USB_CoreReset>
 80043a4:	4603      	mov	r3, r0
 80043a6:	73fb      	strb	r3, [r7, #15]
 80043a8:	e01b      	b.n	80043e2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f001 fadc 	bl	8005974 <USB_CoreReset>
 80043bc:	4603      	mov	r3, r0
 80043be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80043c0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d106      	bne.n	80043d6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	639a      	str	r2, [r3, #56]	@ 0x38
 80043d4:	e005      	b.n	80043e2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043da:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80043e2:	7fbb      	ldrb	r3, [r7, #30]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d10b      	bne.n	8004400 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f043 0206 	orr.w	r2, r3, #6
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f043 0220 	orr.w	r2, r3, #32
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004400:	7bfb      	ldrb	r3, [r7, #15]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800440c:	b004      	add	sp, #16
 800440e:	4770      	bx	lr

08004410 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	4613      	mov	r3, r2
 800441c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800441e:	79fb      	ldrb	r3, [r7, #7]
 8004420:	2b02      	cmp	r3, #2
 8004422:	d165      	bne.n	80044f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4a41      	ldr	r2, [pc, #260]	@ (800452c <USB_SetTurnaroundTime+0x11c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d906      	bls.n	800443a <USB_SetTurnaroundTime+0x2a>
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	4a40      	ldr	r2, [pc, #256]	@ (8004530 <USB_SetTurnaroundTime+0x120>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d202      	bcs.n	800443a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004434:	230f      	movs	r3, #15
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	e062      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	4a3c      	ldr	r2, [pc, #240]	@ (8004530 <USB_SetTurnaroundTime+0x120>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d306      	bcc.n	8004450 <USB_SetTurnaroundTime+0x40>
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	4a3b      	ldr	r2, [pc, #236]	@ (8004534 <USB_SetTurnaroundTime+0x124>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d202      	bcs.n	8004450 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800444a:	230e      	movs	r3, #14
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	e057      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	4a38      	ldr	r2, [pc, #224]	@ (8004534 <USB_SetTurnaroundTime+0x124>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d306      	bcc.n	8004466 <USB_SetTurnaroundTime+0x56>
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	4a37      	ldr	r2, [pc, #220]	@ (8004538 <USB_SetTurnaroundTime+0x128>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d202      	bcs.n	8004466 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004460:	230d      	movs	r3, #13
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	e04c      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	4a33      	ldr	r2, [pc, #204]	@ (8004538 <USB_SetTurnaroundTime+0x128>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d306      	bcc.n	800447c <USB_SetTurnaroundTime+0x6c>
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	4a32      	ldr	r2, [pc, #200]	@ (800453c <USB_SetTurnaroundTime+0x12c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d802      	bhi.n	800447c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004476:	230c      	movs	r3, #12
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	e041      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	4a2f      	ldr	r2, [pc, #188]	@ (800453c <USB_SetTurnaroundTime+0x12c>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d906      	bls.n	8004492 <USB_SetTurnaroundTime+0x82>
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	4a2e      	ldr	r2, [pc, #184]	@ (8004540 <USB_SetTurnaroundTime+0x130>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d802      	bhi.n	8004492 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800448c:	230b      	movs	r3, #11
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	e036      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	4a2a      	ldr	r2, [pc, #168]	@ (8004540 <USB_SetTurnaroundTime+0x130>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d906      	bls.n	80044a8 <USB_SetTurnaroundTime+0x98>
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	4a29      	ldr	r2, [pc, #164]	@ (8004544 <USB_SetTurnaroundTime+0x134>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d802      	bhi.n	80044a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80044a2:	230a      	movs	r3, #10
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	e02b      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4a26      	ldr	r2, [pc, #152]	@ (8004544 <USB_SetTurnaroundTime+0x134>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d906      	bls.n	80044be <USB_SetTurnaroundTime+0xae>
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	4a25      	ldr	r2, [pc, #148]	@ (8004548 <USB_SetTurnaroundTime+0x138>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d202      	bcs.n	80044be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80044b8:	2309      	movs	r3, #9
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	e020      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	4a21      	ldr	r2, [pc, #132]	@ (8004548 <USB_SetTurnaroundTime+0x138>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d306      	bcc.n	80044d4 <USB_SetTurnaroundTime+0xc4>
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	4a20      	ldr	r2, [pc, #128]	@ (800454c <USB_SetTurnaroundTime+0x13c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d802      	bhi.n	80044d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80044ce:	2308      	movs	r3, #8
 80044d0:	617b      	str	r3, [r7, #20]
 80044d2:	e015      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4a1d      	ldr	r2, [pc, #116]	@ (800454c <USB_SetTurnaroundTime+0x13c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d906      	bls.n	80044ea <USB_SetTurnaroundTime+0xda>
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	4a1c      	ldr	r2, [pc, #112]	@ (8004550 <USB_SetTurnaroundTime+0x140>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d202      	bcs.n	80044ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80044e4:	2307      	movs	r3, #7
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	e00a      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80044ea:	2306      	movs	r3, #6
 80044ec:	617b      	str	r3, [r7, #20]
 80044ee:	e007      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80044f0:	79fb      	ldrb	r3, [r7, #7]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d102      	bne.n	80044fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80044f6:	2309      	movs	r3, #9
 80044f8:	617b      	str	r3, [r7, #20]
 80044fa:	e001      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80044fc:	2309      	movs	r3, #9
 80044fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	68da      	ldr	r2, [r3, #12]
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	029b      	lsls	r3, r3, #10
 8004514:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004518:	431a      	orrs	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	371c      	adds	r7, #28
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	00d8acbf 	.word	0x00d8acbf
 8004530:	00e4e1c0 	.word	0x00e4e1c0
 8004534:	00f42400 	.word	0x00f42400
 8004538:	01067380 	.word	0x01067380
 800453c:	011a499f 	.word	0x011a499f
 8004540:	01312cff 	.word	0x01312cff
 8004544:	014ca43f 	.word	0x014ca43f
 8004548:	016e3600 	.word	0x016e3600
 800454c:	01a6ab1f 	.word	0x01a6ab1f
 8004550:	01e84800 	.word	0x01e84800

08004554 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f043 0201 	orr.w	r2, r3, #1
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f023 0201 	bic.w	r2, r3, #1
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	460b      	mov	r3, r1
 80045a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045b4:	78fb      	ldrb	r3, [r7, #3]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d115      	bne.n	80045e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80045c6:	200a      	movs	r0, #10
 80045c8:	f7fc fcea 	bl	8000fa0 <HAL_Delay>
      ms += 10U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	330a      	adds	r3, #10
 80045d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f001 f93f 	bl	8005856 <USB_GetMode>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d01e      	beq.n	800461c <USB_SetCurrentMode+0x84>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2bc7      	cmp	r3, #199	@ 0xc7
 80045e2:	d9f0      	bls.n	80045c6 <USB_SetCurrentMode+0x2e>
 80045e4:	e01a      	b.n	800461c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80045e6:	78fb      	ldrb	r3, [r7, #3]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d115      	bne.n	8004618 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80045f8:	200a      	movs	r0, #10
 80045fa:	f7fc fcd1 	bl	8000fa0 <HAL_Delay>
      ms += 10U;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	330a      	adds	r3, #10
 8004602:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f001 f926 	bl	8005856 <USB_GetMode>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d005      	beq.n	800461c <USB_SetCurrentMode+0x84>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2bc7      	cmp	r3, #199	@ 0xc7
 8004614:	d9f0      	bls.n	80045f8 <USB_SetCurrentMode+0x60>
 8004616:	e001      	b.n	800461c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e005      	b.n	8004628 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2bc8      	cmp	r3, #200	@ 0xc8
 8004620:	d101      	bne.n	8004626 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e000      	b.n	8004628 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004630:	b084      	sub	sp, #16
 8004632:	b580      	push	{r7, lr}
 8004634:	b086      	sub	sp, #24
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800463e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800464a:	2300      	movs	r3, #0
 800464c:	613b      	str	r3, [r7, #16]
 800464e:	e009      	b.n	8004664 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	3340      	adds	r3, #64	@ 0x40
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	2200      	movs	r2, #0
 800465c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	3301      	adds	r3, #1
 8004662:	613b      	str	r3, [r7, #16]
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	2b0e      	cmp	r3, #14
 8004668:	d9f2      	bls.n	8004650 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800466a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800466e:	2b00      	cmp	r3, #0
 8004670:	d11c      	bne.n	80046ac <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004680:	f043 0302 	orr.w	r3, r3, #2
 8004684:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800468a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004696:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80046aa:	e00b      	b.n	80046c4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046bc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80046ca:	461a      	mov	r2, r3
 80046cc:	2300      	movs	r3, #0
 80046ce:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046d0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d10d      	bne.n	80046f4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80046d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d104      	bne.n	80046ea <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80046e0:	2100      	movs	r1, #0
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f968 	bl	80049b8 <USB_SetDevSpeed>
 80046e8:	e008      	b.n	80046fc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80046ea:	2101      	movs	r1, #1
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f963 	bl	80049b8 <USB_SetDevSpeed>
 80046f2:	e003      	b.n	80046fc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046f4:	2103      	movs	r1, #3
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f95e 	bl	80049b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046fc:	2110      	movs	r1, #16
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f8fa 	bl	80048f8 <USB_FlushTxFifo>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f924 	bl	800495c <USB_FlushRxFifo>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004724:	461a      	mov	r2, r3
 8004726:	2300      	movs	r3, #0
 8004728:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004730:	461a      	mov	r2, r3
 8004732:	2300      	movs	r3, #0
 8004734:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800473c:	461a      	mov	r2, r3
 800473e:	2300      	movs	r3, #0
 8004740:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004742:	2300      	movs	r3, #0
 8004744:	613b      	str	r3, [r7, #16]
 8004746:	e043      	b.n	80047d0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800475a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800475e:	d118      	bne.n	8004792 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10a      	bne.n	800477c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4413      	add	r3, r2
 800476e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004772:	461a      	mov	r2, r3
 8004774:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	e013      	b.n	80047a4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004788:	461a      	mov	r2, r3
 800478a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800478e:	6013      	str	r3, [r2, #0]
 8004790:	e008      	b.n	80047a4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	4413      	add	r3, r2
 800479a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800479e:	461a      	mov	r2, r3
 80047a0:	2300      	movs	r3, #0
 80047a2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047b0:	461a      	mov	r2, r3
 80047b2:	2300      	movs	r3, #0
 80047b4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	015a      	lsls	r2, r3, #5
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4413      	add	r3, r2
 80047be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047c2:	461a      	mov	r2, r3
 80047c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80047c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	3301      	adds	r3, #1
 80047ce:	613b      	str	r3, [r7, #16]
 80047d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80047d4:	461a      	mov	r2, r3
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	4293      	cmp	r3, r2
 80047da:	d3b5      	bcc.n	8004748 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047dc:	2300      	movs	r3, #0
 80047de:	613b      	str	r3, [r7, #16]
 80047e0:	e043      	b.n	800486a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80047f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047f8:	d118      	bne.n	800482c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10a      	bne.n	8004816 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	015a      	lsls	r2, r3, #5
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4413      	add	r3, r2
 8004808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800480c:	461a      	mov	r2, r3
 800480e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004812:	6013      	str	r3, [r2, #0]
 8004814:	e013      	b.n	800483e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	015a      	lsls	r2, r3, #5
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4413      	add	r3, r2
 800481e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004822:	461a      	mov	r2, r3
 8004824:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004828:	6013      	str	r3, [r2, #0]
 800482a:	e008      	b.n	800483e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	015a      	lsls	r2, r3, #5
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4413      	add	r3, r2
 8004834:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004838:	461a      	mov	r2, r3
 800483a:	2300      	movs	r3, #0
 800483c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800484a:	461a      	mov	r2, r3
 800484c:	2300      	movs	r3, #0
 800484e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4413      	add	r3, r2
 8004858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800485c:	461a      	mov	r2, r3
 800485e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004862:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	3301      	adds	r3, #1
 8004868:	613b      	str	r3, [r7, #16]
 800486a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800486e:	461a      	mov	r2, r3
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	4293      	cmp	r3, r2
 8004874:	d3b5      	bcc.n	80047e2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004884:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004888:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004896:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004898:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800489c:	2b00      	cmp	r3, #0
 800489e:	d105      	bne.n	80048ac <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	f043 0210 	orr.w	r2, r3, #16
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	699a      	ldr	r2, [r3, #24]
 80048b0:	4b10      	ldr	r3, [pc, #64]	@ (80048f4 <USB_DevInit+0x2c4>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048b8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	f043 0208 	orr.w	r2, r3, #8
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d107      	bne.n	80048e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80048dc:	f043 0304 	orr.w	r3, r3, #4
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3718      	adds	r7, #24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048f0:	b004      	add	sp, #16
 80048f2:	4770      	bx	lr
 80048f4:	803c3800 	.word	0x803c3800

080048f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	3301      	adds	r3, #1
 800490a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004912:	d901      	bls.n	8004918 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e01b      	b.n	8004950 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	daf2      	bge.n	8004906 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	019b      	lsls	r3, r3, #6
 8004928:	f043 0220 	orr.w	r2, r3, #32
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	3301      	adds	r3, #1
 8004934:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800493c:	d901      	bls.n	8004942 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e006      	b.n	8004950 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	f003 0320 	and.w	r3, r3, #32
 800494a:	2b20      	cmp	r3, #32
 800494c:	d0f0      	beq.n	8004930 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004964:	2300      	movs	r3, #0
 8004966:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	3301      	adds	r3, #1
 800496c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004974:	d901      	bls.n	800497a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e018      	b.n	80049ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	2b00      	cmp	r3, #0
 8004980:	daf2      	bge.n	8004968 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004982:	2300      	movs	r3, #0
 8004984:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2210      	movs	r2, #16
 800498a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	3301      	adds	r3, #1
 8004990:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004998:	d901      	bls.n	800499e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e006      	b.n	80049ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	f003 0310 	and.w	r3, r3, #16
 80049a6:	2b10      	cmp	r3, #16
 80049a8:	d0f0      	beq.n	800498c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	460b      	mov	r3, r1
 80049c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	78fb      	ldrb	r3, [r7, #3]
 80049d2:	68f9      	ldr	r1, [r7, #12]
 80049d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049d8:	4313      	orrs	r3, r2
 80049da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b087      	sub	sp, #28
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 0306 	and.w	r3, r3, #6
 8004a02:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d102      	bne.n	8004a10 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	75fb      	strb	r3, [r7, #23]
 8004a0e:	e00a      	b.n	8004a26 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d002      	beq.n	8004a1c <USB_GetDevSpeed+0x32>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2b06      	cmp	r3, #6
 8004a1a:	d102      	bne.n	8004a22 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	75fb      	strb	r3, [r7, #23]
 8004a20:	e001      	b.n	8004a26 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004a22:	230f      	movs	r3, #15
 8004a24:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	371c      	adds	r7, #28
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	785b      	ldrb	r3, [r3, #1]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d13a      	bne.n	8004ac6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a56:	69da      	ldr	r2, [r3, #28]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	f003 030f 	and.w	r3, r3, #15
 8004a60:	2101      	movs	r1, #1
 8004a62:	fa01 f303 	lsl.w	r3, r1, r3
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	68f9      	ldr	r1, [r7, #12]
 8004a6a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d155      	bne.n	8004b34 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	791b      	ldrb	r3, [r3, #4]
 8004aa2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004aa4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	059b      	lsls	r3, r3, #22
 8004aaa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004aac:	4313      	orrs	r3, r2
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	0151      	lsls	r1, r2, #5
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	440a      	add	r2, r1
 8004ab6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004aba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004abe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	e036      	b.n	8004b34 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004acc:	69da      	ldr	r2, [r3, #28]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	f003 030f 	and.w	r3, r3, #15
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8004adc:	041b      	lsls	r3, r3, #16
 8004ade:	68f9      	ldr	r1, [r7, #12]
 8004ae0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d11a      	bne.n	8004b34 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	015a      	lsls	r2, r3, #5
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4413      	add	r3, r2
 8004b06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	791b      	ldrb	r3, [r3, #4]
 8004b18:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b1a:	430b      	orrs	r3, r1
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	0151      	lsls	r1, r2, #5
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	440a      	add	r2, r1
 8004b26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b32:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
	...

08004b44 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	785b      	ldrb	r3, [r3, #1]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d161      	bne.n	8004c24 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b76:	d11f      	bne.n	8004bb8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	0151      	lsls	r1, r2, #5
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	440a      	add	r2, r1
 8004b8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b92:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004b96:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	0151      	lsls	r1, r2, #5
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	440a      	add	r2, r1
 8004bae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bb2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004bb6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	f003 030f 	and.w	r3, r3, #15
 8004bc8:	2101      	movs	r1, #1
 8004bca:	fa01 f303 	lsl.w	r3, r1, r3
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	43db      	mvns	r3, r3
 8004bd2:	68f9      	ldr	r1, [r7, #12]
 8004bd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004bd8:	4013      	ands	r3, r2
 8004bda:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004be2:	69da      	ldr	r2, [r3, #28]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	f003 030f 	and.w	r3, r3, #15
 8004bec:	2101      	movs	r1, #1
 8004bee:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	43db      	mvns	r3, r3
 8004bf6:	68f9      	ldr	r1, [r7, #12]
 8004bf8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	0159      	lsls	r1, r3, #5
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	440b      	add	r3, r1
 8004c16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4b35      	ldr	r3, [pc, #212]	@ (8004cf4 <USB_DeactivateEndpoint+0x1b0>)
 8004c1e:	4013      	ands	r3, r2
 8004c20:	600b      	str	r3, [r1, #0]
 8004c22:	e060      	b.n	8004ce6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c3a:	d11f      	bne.n	8004c7c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	0151      	lsls	r1, r2, #5
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	440a      	add	r2, r1
 8004c52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c56:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004c5a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	0151      	lsls	r1, r2, #5
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	440a      	add	r2, r1
 8004c72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	f003 030f 	and.w	r3, r3, #15
 8004c8c:	2101      	movs	r1, #1
 8004c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c92:	041b      	lsls	r3, r3, #16
 8004c94:	43db      	mvns	r3, r3
 8004c96:	68f9      	ldr	r1, [r7, #12]
 8004c98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ca6:	69da      	ldr	r2, [r3, #28]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	f003 030f 	and.w	r3, r3, #15
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb6:	041b      	lsls	r3, r3, #16
 8004cb8:	43db      	mvns	r3, r3
 8004cba:	68f9      	ldr	r1, [r7, #12]
 8004cbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	0159      	lsls	r1, r3, #5
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	440b      	add	r3, r1
 8004cda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4b05      	ldr	r3, [pc, #20]	@ (8004cf8 <USB_DeactivateEndpoint+0x1b4>)
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	ec337800 	.word	0xec337800
 8004cf8:	eff37800 	.word	0xeff37800

08004cfc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08a      	sub	sp, #40	@ 0x28
 8004d00:	af02      	add	r7, sp, #8
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	4613      	mov	r3, r2
 8004d08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	785b      	ldrb	r3, [r3, #1]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	f040 817f 	bne.w	800501c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d132      	bne.n	8004d8c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	0151      	lsls	r1, r2, #5
 8004d38:	69fa      	ldr	r2, [r7, #28]
 8004d3a:	440a      	add	r2, r1
 8004d3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d40:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004d44:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004d48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	0151      	lsls	r1, r2, #5
 8004d5c:	69fa      	ldr	r2, [r7, #28]
 8004d5e:	440a      	add	r2, r1
 8004d60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	0151      	lsls	r1, r2, #5
 8004d7c:	69fa      	ldr	r2, [r7, #28]
 8004d7e:	440a      	add	r2, r1
 8004d80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d84:	0cdb      	lsrs	r3, r3, #19
 8004d86:	04db      	lsls	r3, r3, #19
 8004d88:	6113      	str	r3, [r2, #16]
 8004d8a:	e097      	b.n	8004ebc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	0151      	lsls	r1, r2, #5
 8004d9e:	69fa      	ldr	r2, [r7, #28]
 8004da0:	440a      	add	r2, r1
 8004da2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004da6:	0cdb      	lsrs	r3, r3, #19
 8004da8:	04db      	lsls	r3, r3, #19
 8004daa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	0151      	lsls	r1, r2, #5
 8004dbe:	69fa      	ldr	r2, [r7, #28]
 8004dc0:	440a      	add	r2, r1
 8004dc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dc6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004dca:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004dce:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d11a      	bne.n	8004e0c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	691a      	ldr	r2, [r3, #16]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d903      	bls.n	8004dea <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	689a      	ldr	r2, [r3, #8]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	0151      	lsls	r1, r2, #5
 8004dfc:	69fa      	ldr	r2, [r7, #28]
 8004dfe:	440a      	add	r2, r1
 8004e00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e08:	6113      	str	r3, [r2, #16]
 8004e0a:	e044      	b.n	8004e96 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	691a      	ldr	r2, [r3, #16]
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	4413      	add	r3, r2
 8004e16:	1e5a      	subs	r2, r3, #1
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e20:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	8afb      	ldrh	r3, [r7, #22]
 8004e32:	04d9      	lsls	r1, r3, #19
 8004e34:	4ba4      	ldr	r3, [pc, #656]	@ (80050c8 <USB_EPStartXfer+0x3cc>)
 8004e36:	400b      	ands	r3, r1
 8004e38:	69b9      	ldr	r1, [r7, #24]
 8004e3a:	0148      	lsls	r0, r1, #5
 8004e3c:	69f9      	ldr	r1, [r7, #28]
 8004e3e:	4401      	add	r1, r0
 8004e40:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004e44:	4313      	orrs	r3, r2
 8004e46:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	791b      	ldrb	r3, [r3, #4]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d122      	bne.n	8004e96 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	0151      	lsls	r1, r2, #5
 8004e62:	69fa      	ldr	r2, [r7, #28]
 8004e64:	440a      	add	r2, r1
 8004e66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e6a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004e6e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e7c:	691a      	ldr	r2, [r3, #16]
 8004e7e:	8afb      	ldrh	r3, [r7, #22]
 8004e80:	075b      	lsls	r3, r3, #29
 8004e82:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004e86:	69b9      	ldr	r1, [r7, #24]
 8004e88:	0148      	lsls	r0, r1, #5
 8004e8a:	69f9      	ldr	r1, [r7, #28]
 8004e8c:	4401      	add	r1, r0
 8004e8e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004e92:	4313      	orrs	r3, r2
 8004e94:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eac:	69b9      	ldr	r1, [r7, #24]
 8004eae:	0148      	lsls	r0, r1, #5
 8004eb0:	69f9      	ldr	r1, [r7, #28]
 8004eb2:	4401      	add	r1, r0
 8004eb4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004ebc:	79fb      	ldrb	r3, [r7, #7]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d14b      	bne.n	8004f5a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d009      	beq.n	8004ede <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	791b      	ldrb	r3, [r3, #4]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d128      	bne.n	8004f38 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d110      	bne.n	8004f18 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	0151      	lsls	r1, r2, #5
 8004f08:	69fa      	ldr	r2, [r7, #28]
 8004f0a:	440a      	add	r2, r1
 8004f0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f10:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	e00f      	b.n	8004f38 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	0151      	lsls	r1, r2, #5
 8004f2a:	69fa      	ldr	r2, [r7, #28]
 8004f2c:	440a      	add	r2, r1
 8004f2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f36:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	0151      	lsls	r1, r2, #5
 8004f4a:	69fa      	ldr	r2, [r7, #28]
 8004f4c:	440a      	add	r2, r1
 8004f4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f52:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004f56:	6013      	str	r3, [r2, #0]
 8004f58:	e166      	b.n	8005228 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	015a      	lsls	r2, r3, #5
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	0151      	lsls	r1, r2, #5
 8004f6c:	69fa      	ldr	r2, [r7, #28]
 8004f6e:	440a      	add	r2, r1
 8004f70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f74:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004f78:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	791b      	ldrb	r3, [r3, #4]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d015      	beq.n	8004fae <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f000 814e 	beq.w	8005228 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	f003 030f 	and.w	r3, r3, #15
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa2:	69f9      	ldr	r1, [r7, #28]
 8004fa4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	634b      	str	r3, [r1, #52]	@ 0x34
 8004fac:	e13c      	b.n	8005228 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d110      	bne.n	8004fe0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	0151      	lsls	r1, r2, #5
 8004fd0:	69fa      	ldr	r2, [r7, #28]
 8004fd2:	440a      	add	r2, r1
 8004fd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fd8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	e00f      	b.n	8005000 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	0151      	lsls	r1, r2, #5
 8004ff2:	69fa      	ldr	r2, [r7, #28]
 8004ff4:	440a      	add	r2, r1
 8004ff6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ffa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ffe:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	68d9      	ldr	r1, [r3, #12]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	781a      	ldrb	r2, [r3, #0]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	b298      	uxth	r0, r3
 800500e:	79fb      	ldrb	r3, [r7, #7]
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	4603      	mov	r3, r0
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 f9b9 	bl	800538c <USB_WritePacket>
 800501a:	e105      	b.n	8005228 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	4413      	add	r3, r2
 8005024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	0151      	lsls	r1, r2, #5
 800502e:	69fa      	ldr	r2, [r7, #28]
 8005030:	440a      	add	r2, r1
 8005032:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005036:	0cdb      	lsrs	r3, r3, #19
 8005038:	04db      	lsls	r3, r3, #19
 800503a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	0151      	lsls	r1, r2, #5
 800504e:	69fa      	ldr	r2, [r7, #28]
 8005050:	440a      	add	r2, r1
 8005052:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005056:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800505a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800505e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d132      	bne.n	80050cc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	689a      	ldr	r2, [r3, #8]
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	4413      	add	r3, r2
 8005086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800508a:	691a      	ldr	r2, [r3, #16]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005094:	69b9      	ldr	r1, [r7, #24]
 8005096:	0148      	lsls	r0, r1, #5
 8005098:	69f9      	ldr	r1, [r7, #28]
 800509a:	4401      	add	r1, r0
 800509c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80050a0:	4313      	orrs	r3, r2
 80050a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	015a      	lsls	r2, r3, #5
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	0151      	lsls	r1, r2, #5
 80050b6:	69fa      	ldr	r2, [r7, #28]
 80050b8:	440a      	add	r2, r1
 80050ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80050c2:	6113      	str	r3, [r2, #16]
 80050c4:	e062      	b.n	800518c <USB_EPStartXfer+0x490>
 80050c6:	bf00      	nop
 80050c8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d123      	bne.n	800511c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050e0:	691a      	ldr	r2, [r3, #16]
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050ea:	69b9      	ldr	r1, [r7, #24]
 80050ec:	0148      	lsls	r0, r1, #5
 80050ee:	69f9      	ldr	r1, [r7, #28]
 80050f0:	4401      	add	r1, r0
 80050f2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80050f6:	4313      	orrs	r3, r2
 80050f8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	4413      	add	r3, r2
 8005102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	0151      	lsls	r1, r2, #5
 800510c:	69fa      	ldr	r2, [r7, #28]
 800510e:	440a      	add	r2, r1
 8005110:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005114:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005118:	6113      	str	r3, [r2, #16]
 800511a:	e037      	b.n	800518c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	691a      	ldr	r2, [r3, #16]
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	4413      	add	r3, r2
 8005126:	1e5a      	subs	r2, r3, #1
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005130:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	8afa      	ldrh	r2, [r7, #22]
 8005138:	fb03 f202 	mul.w	r2, r3, r2
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	4413      	add	r3, r2
 8005148:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800514c:	691a      	ldr	r2, [r3, #16]
 800514e:	8afb      	ldrh	r3, [r7, #22]
 8005150:	04d9      	lsls	r1, r3, #19
 8005152:	4b38      	ldr	r3, [pc, #224]	@ (8005234 <USB_EPStartXfer+0x538>)
 8005154:	400b      	ands	r3, r1
 8005156:	69b9      	ldr	r1, [r7, #24]
 8005158:	0148      	lsls	r0, r1, #5
 800515a:	69f9      	ldr	r1, [r7, #28]
 800515c:	4401      	add	r1, r0
 800515e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005162:	4313      	orrs	r3, r2
 8005164:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	4413      	add	r3, r2
 800516e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005172:	691a      	ldr	r2, [r3, #16]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800517c:	69b9      	ldr	r1, [r7, #24]
 800517e:	0148      	lsls	r0, r1, #5
 8005180:	69f9      	ldr	r1, [r7, #28]
 8005182:	4401      	add	r1, r0
 8005184:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005188:	4313      	orrs	r3, r2
 800518a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800518c:	79fb      	ldrb	r3, [r7, #7]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d10d      	bne.n	80051ae <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d009      	beq.n	80051ae <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	68d9      	ldr	r1, [r3, #12]
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051aa:	460a      	mov	r2, r1
 80051ac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	791b      	ldrb	r3, [r3, #4]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d128      	bne.n	8005208 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d110      	bne.n	80051e8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	0151      	lsls	r1, r2, #5
 80051d8:	69fa      	ldr	r2, [r7, #28]
 80051da:	440a      	add	r2, r1
 80051dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	e00f      	b.n	8005208 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	0151      	lsls	r1, r2, #5
 80051fa:	69fa      	ldr	r2, [r7, #28]
 80051fc:	440a      	add	r2, r1
 80051fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005202:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005206:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	0151      	lsls	r1, r2, #5
 800521a:	69fa      	ldr	r2, [r7, #28]
 800521c:	440a      	add	r2, r1
 800521e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005222:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005226:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3720      	adds	r7, #32
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	1ff80000 	.word	0x1ff80000

08005238 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005242:	2300      	movs	r3, #0
 8005244:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	785b      	ldrb	r3, [r3, #1]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d14a      	bne.n	80052ec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	015a      	lsls	r2, r3, #5
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	4413      	add	r3, r2
 8005260:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800526a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800526e:	f040 8086 	bne.w	800537e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	7812      	ldrb	r2, [r2, #0]
 8005286:	0151      	lsls	r1, r2, #5
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	440a      	add	r2, r1
 800528c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005290:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005294:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	7812      	ldrb	r2, [r2, #0]
 80052aa:	0151      	lsls	r1, r2, #5
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	440a      	add	r2, r1
 80052b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	3301      	adds	r3, #1
 80052be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d902      	bls.n	80052d0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	75fb      	strb	r3, [r7, #23]
          break;
 80052ce:	e056      	b.n	800537e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052e8:	d0e7      	beq.n	80052ba <USB_EPStopXfer+0x82>
 80052ea:	e048      	b.n	800537e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005300:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005304:	d13b      	bne.n	800537e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	7812      	ldrb	r2, [r2, #0]
 800531a:	0151      	lsls	r1, r2, #5
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	440a      	add	r2, r1
 8005320:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005324:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005328:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	4413      	add	r3, r2
 8005334:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	7812      	ldrb	r2, [r2, #0]
 800533e:	0151      	lsls	r1, r2, #5
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	440a      	add	r2, r1
 8005344:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005348:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800534c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	3301      	adds	r3, #1
 8005352:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f242 7210 	movw	r2, #10000	@ 0x2710
 800535a:	4293      	cmp	r3, r2
 800535c:	d902      	bls.n	8005364 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	75fb      	strb	r3, [r7, #23]
          break;
 8005362:	e00c      	b.n	800537e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	4413      	add	r3, r2
 800536e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005378:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800537c:	d0e7      	beq.n	800534e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800537e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005380:	4618      	mov	r0, r3
 8005382:	371c      	adds	r7, #28
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800538c:	b480      	push	{r7}
 800538e:	b089      	sub	sp, #36	@ 0x24
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	4611      	mov	r1, r2
 8005398:	461a      	mov	r2, r3
 800539a:	460b      	mov	r3, r1
 800539c:	71fb      	strb	r3, [r7, #7]
 800539e:	4613      	mov	r3, r2
 80053a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80053aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d123      	bne.n	80053fa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80053b2:	88bb      	ldrh	r3, [r7, #4]
 80053b4:	3303      	adds	r3, #3
 80053b6:	089b      	lsrs	r3, r3, #2
 80053b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80053ba:	2300      	movs	r3, #0
 80053bc:	61bb      	str	r3, [r7, #24]
 80053be:	e018      	b.n	80053f2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80053c0:	79fb      	ldrb	r3, [r7, #7]
 80053c2:	031a      	lsls	r2, r3, #12
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053cc:	461a      	mov	r2, r3
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	3301      	adds	r3, #1
 80053d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	3301      	adds	r3, #1
 80053de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	3301      	adds	r3, #1
 80053e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	3301      	adds	r3, #1
 80053ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	3301      	adds	r3, #1
 80053f0:	61bb      	str	r3, [r7, #24]
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d3e2      	bcc.n	80053c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3724      	adds	r7, #36	@ 0x24
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005408:	b480      	push	{r7}
 800540a:	b08b      	sub	sp, #44	@ 0x2c
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	4613      	mov	r3, r2
 8005414:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800541e:	88fb      	ldrh	r3, [r7, #6]
 8005420:	089b      	lsrs	r3, r3, #2
 8005422:	b29b      	uxth	r3, r3
 8005424:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005426:	88fb      	ldrh	r3, [r7, #6]
 8005428:	f003 0303 	and.w	r3, r3, #3
 800542c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800542e:	2300      	movs	r3, #0
 8005430:	623b      	str	r3, [r7, #32]
 8005432:	e014      	b.n	800545e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005442:	3301      	adds	r3, #1
 8005444:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005448:	3301      	adds	r3, #1
 800544a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800544c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544e:	3301      	adds	r3, #1
 8005450:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005454:	3301      	adds	r3, #1
 8005456:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	3301      	adds	r3, #1
 800545c:	623b      	str	r3, [r7, #32]
 800545e:	6a3a      	ldr	r2, [r7, #32]
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	429a      	cmp	r2, r3
 8005464:	d3e6      	bcc.n	8005434 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005466:	8bfb      	ldrh	r3, [r7, #30]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d01e      	beq.n	80054aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800546c:	2300      	movs	r3, #0
 800546e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005476:	461a      	mov	r2, r3
 8005478:	f107 0310 	add.w	r3, r7, #16
 800547c:	6812      	ldr	r2, [r2, #0]
 800547e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	b2db      	uxtb	r3, r3
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	fa22 f303 	lsr.w	r3, r2, r3
 800548c:	b2da      	uxtb	r2, r3
 800548e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005490:	701a      	strb	r2, [r3, #0]
      i++;
 8005492:	6a3b      	ldr	r3, [r7, #32]
 8005494:	3301      	adds	r3, #1
 8005496:	623b      	str	r3, [r7, #32]
      pDest++;
 8005498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549a:	3301      	adds	r3, #1
 800549c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800549e:	8bfb      	ldrh	r3, [r7, #30]
 80054a0:	3b01      	subs	r3, #1
 80054a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80054a4:	8bfb      	ldrh	r3, [r7, #30]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1ea      	bne.n	8005480 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80054aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	372c      	adds	r7, #44	@ 0x2c
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	785b      	ldrb	r3, [r3, #1]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d12c      	bne.n	800552e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	015a      	lsls	r2, r3, #5
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4413      	add	r3, r2
 80054dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	db12      	blt.n	800550c <USB_EPSetStall+0x54>
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00f      	beq.n	800550c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	0151      	lsls	r1, r2, #5
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	440a      	add	r2, r1
 8005502:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005506:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800550a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	0151      	lsls	r1, r2, #5
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	440a      	add	r2, r1
 8005522:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005526:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800552a:	6013      	str	r3, [r2, #0]
 800552c:	e02b      	b.n	8005586 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	4413      	add	r3, r2
 8005536:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	db12      	blt.n	8005566 <USB_EPSetStall+0xae>
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00f      	beq.n	8005566 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	4413      	add	r3, r2
 800554e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	0151      	lsls	r1, r2, #5
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	440a      	add	r2, r1
 800555c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005560:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005564:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4413      	add	r3, r2
 800556e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	0151      	lsls	r1, r2, #5
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	440a      	add	r2, r1
 800557c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005580:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005584:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	785b      	ldrb	r3, [r3, #1]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d128      	bne.n	8005602 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	0151      	lsls	r1, r2, #5
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	440a      	add	r2, r1
 80055c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80055ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	791b      	ldrb	r3, [r3, #4]
 80055d4:	2b03      	cmp	r3, #3
 80055d6:	d003      	beq.n	80055e0 <USB_EPClearStall+0x4c>
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	791b      	ldrb	r3, [r3, #4]
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d138      	bne.n	8005652 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	0151      	lsls	r1, r2, #5
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	440a      	add	r2, r1
 80055f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055fe:	6013      	str	r3, [r2, #0]
 8005600:	e027      	b.n	8005652 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	0151      	lsls	r1, r2, #5
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	440a      	add	r2, r1
 8005618:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800561c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005620:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	791b      	ldrb	r3, [r3, #4]
 8005626:	2b03      	cmp	r3, #3
 8005628:	d003      	beq.n	8005632 <USB_EPClearStall+0x9e>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	791b      	ldrb	r3, [r3, #4]
 800562e:	2b02      	cmp	r3, #2
 8005630:	d10f      	bne.n	8005652 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	4413      	add	r3, r2
 800563a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	0151      	lsls	r1, r2, #5
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	440a      	add	r2, r1
 8005648:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800564c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005650:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	460b      	mov	r3, r1
 800566a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800567e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005682:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	78fb      	ldrb	r3, [r7, #3]
 800568e:	011b      	lsls	r3, r3, #4
 8005690:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005694:	68f9      	ldr	r1, [r7, #12]
 8005696:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800569a:	4313      	orrs	r3, r2
 800569c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80056c6:	f023 0303 	bic.w	r3, r3, #3
 80056ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056da:	f023 0302 	bic.w	r3, r3, #2
 80056de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b085      	sub	sp, #20
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005708:	f023 0303 	bic.w	r3, r3, #3
 800570c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800571c:	f043 0302 	orr.w	r3, r3, #2
 8005720:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	4013      	ands	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005748:	68fb      	ldr	r3, [r7, #12]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005756:	b480      	push	{r7}
 8005758:	b085      	sub	sp, #20
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	4013      	ands	r3, r2
 8005778:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	0c1b      	lsrs	r3, r3, #16
}
 800577e:	4618      	mov	r0, r3
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800578a:	b480      	push	{r7}
 800578c:	b085      	sub	sp, #20
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	4013      	ands	r3, r2
 80057ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	b29b      	uxth	r3, r3
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057be:	b480      	push	{r7}
 80057c0:	b085      	sub	sp, #20
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
 80057c6:	460b      	mov	r3, r1
 80057c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80057ce:	78fb      	ldrb	r3, [r7, #3]
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	4013      	ands	r3, r2
 80057ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80057ec:	68bb      	ldr	r3, [r7, #8]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b087      	sub	sp, #28
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
 8005802:	460b      	mov	r3, r1
 8005804:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800581a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800581c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800581e:	78fb      	ldrb	r3, [r7, #3]
 8005820:	f003 030f 	and.w	r3, r3, #15
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	fa22 f303 	lsr.w	r3, r2, r3
 800582a:	01db      	lsls	r3, r3, #7
 800582c:	b2db      	uxtb	r3, r3
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	4313      	orrs	r3, r2
 8005832:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005834:	78fb      	ldrb	r3, [r7, #3]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	4013      	ands	r3, r2
 8005846:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005848:	68bb      	ldr	r3, [r7, #8]
}
 800584a:	4618      	mov	r0, r3
 800584c:	371c      	adds	r7, #28
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005856:	b480      	push	{r7}
 8005858:	b083      	sub	sp, #12
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	f003 0301 	and.w	r3, r3, #1
}
 8005866:	4618      	mov	r0, r3
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005872:	b480      	push	{r7}
 8005874:	b085      	sub	sp, #20
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800588c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005890:	f023 0307 	bic.w	r3, r3, #7
 8005894:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b087      	sub	sp, #28
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	460b      	mov	r3, r1
 80058c2:	607a      	str	r2, [r7, #4]
 80058c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	333c      	adds	r3, #60	@ 0x3c
 80058ce:	3304      	adds	r3, #4
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	4a26      	ldr	r2, [pc, #152]	@ (8005970 <USB_EP0_OutStart+0xb8>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d90a      	bls.n	80058f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058ec:	d101      	bne.n	80058f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80058ee:	2300      	movs	r3, #0
 80058f0:	e037      	b.n	8005962 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058f8:	461a      	mov	r2, r3
 80058fa:	2300      	movs	r3, #0
 80058fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800590c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005910:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005920:	f043 0318 	orr.w	r3, r3, #24
 8005924:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005934:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005938:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800593a:	7afb      	ldrb	r3, [r7, #11]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d10f      	bne.n	8005960 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005946:	461a      	mov	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800595a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800595e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	371c      	adds	r7, #28
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	4f54300a 	.word	0x4f54300a

08005974 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	3301      	adds	r3, #1
 8005984:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800598c:	d901      	bls.n	8005992 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e01b      	b.n	80059ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	2b00      	cmp	r3, #0
 8005998:	daf2      	bge.n	8005980 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	f043 0201 	orr.w	r2, r3, #1
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	3301      	adds	r3, #1
 80059ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059b6:	d901      	bls.n	80059bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e006      	b.n	80059ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d0f0      	beq.n	80059aa <USB_CoreReset+0x36>

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
	...

080059d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	460b      	mov	r3, r1
 80059e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80059e4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80059e8:	f002 fc38 	bl	800825c <USBD_static_malloc>
 80059ec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d109      	bne.n	8005a08 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	32b0      	adds	r2, #176	@ 0xb0
 80059fe:	2100      	movs	r1, #0
 8005a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005a04:	2302      	movs	r3, #2
 8005a06:	e0d4      	b.n	8005bb2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005a08:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f002 fc68 	bl	80082e4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	32b0      	adds	r2, #176	@ 0xb0
 8005a1e:	68f9      	ldr	r1, [r7, #12]
 8005a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	32b0      	adds	r2, #176	@ 0xb0
 8005a2e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	7c1b      	ldrb	r3, [r3, #16]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d138      	bne.n	8005ab2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005a40:	4b5e      	ldr	r3, [pc, #376]	@ (8005bbc <USBD_CDC_Init+0x1e4>)
 8005a42:	7819      	ldrb	r1, [r3, #0]
 8005a44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a48:	2202      	movs	r2, #2
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f002 fae3 	bl	8008016 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005a50:	4b5a      	ldr	r3, [pc, #360]	@ (8005bbc <USBD_CDC_Init+0x1e4>)
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	f003 020f 	and.w	r2, r3, #15
 8005a58:	6879      	ldr	r1, [r7, #4]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	440b      	add	r3, r1
 8005a64:	3324      	adds	r3, #36	@ 0x24
 8005a66:	2201      	movs	r2, #1
 8005a68:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005a6a:	4b55      	ldr	r3, [pc, #340]	@ (8005bc0 <USBD_CDC_Init+0x1e8>)
 8005a6c:	7819      	ldrb	r1, [r3, #0]
 8005a6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a72:	2202      	movs	r2, #2
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f002 face 	bl	8008016 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005a7a:	4b51      	ldr	r3, [pc, #324]	@ (8005bc0 <USBD_CDC_Init+0x1e8>)
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	f003 020f 	and.w	r2, r3, #15
 8005a82:	6879      	ldr	r1, [r7, #4]
 8005a84:	4613      	mov	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	440b      	add	r3, r1
 8005a8e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005a92:	2201      	movs	r2, #1
 8005a94:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005a96:	4b4b      	ldr	r3, [pc, #300]	@ (8005bc4 <USBD_CDC_Init+0x1ec>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	f003 020f 	and.w	r2, r3, #15
 8005a9e:	6879      	ldr	r1, [r7, #4]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	440b      	add	r3, r1
 8005aaa:	3326      	adds	r3, #38	@ 0x26
 8005aac:	2210      	movs	r2, #16
 8005aae:	801a      	strh	r2, [r3, #0]
 8005ab0:	e035      	b.n	8005b1e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005ab2:	4b42      	ldr	r3, [pc, #264]	@ (8005bbc <USBD_CDC_Init+0x1e4>)
 8005ab4:	7819      	ldrb	r1, [r3, #0]
 8005ab6:	2340      	movs	r3, #64	@ 0x40
 8005ab8:	2202      	movs	r2, #2
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f002 faab 	bl	8008016 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005ac0:	4b3e      	ldr	r3, [pc, #248]	@ (8005bbc <USBD_CDC_Init+0x1e4>)
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	f003 020f 	and.w	r2, r3, #15
 8005ac8:	6879      	ldr	r1, [r7, #4]
 8005aca:	4613      	mov	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	440b      	add	r3, r1
 8005ad4:	3324      	adds	r3, #36	@ 0x24
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005ada:	4b39      	ldr	r3, [pc, #228]	@ (8005bc0 <USBD_CDC_Init+0x1e8>)
 8005adc:	7819      	ldrb	r1, [r3, #0]
 8005ade:	2340      	movs	r3, #64	@ 0x40
 8005ae0:	2202      	movs	r2, #2
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f002 fa97 	bl	8008016 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005ae8:	4b35      	ldr	r3, [pc, #212]	@ (8005bc0 <USBD_CDC_Init+0x1e8>)
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	f003 020f 	and.w	r2, r3, #15
 8005af0:	6879      	ldr	r1, [r7, #4]
 8005af2:	4613      	mov	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	440b      	add	r3, r1
 8005afc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005b00:	2201      	movs	r2, #1
 8005b02:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005b04:	4b2f      	ldr	r3, [pc, #188]	@ (8005bc4 <USBD_CDC_Init+0x1ec>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	f003 020f 	and.w	r2, r3, #15
 8005b0c:	6879      	ldr	r1, [r7, #4]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4413      	add	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	440b      	add	r3, r1
 8005b18:	3326      	adds	r3, #38	@ 0x26
 8005b1a:	2210      	movs	r2, #16
 8005b1c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005b1e:	4b29      	ldr	r3, [pc, #164]	@ (8005bc4 <USBD_CDC_Init+0x1ec>)
 8005b20:	7819      	ldrb	r1, [r3, #0]
 8005b22:	2308      	movs	r3, #8
 8005b24:	2203      	movs	r2, #3
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f002 fa75 	bl	8008016 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005b2c:	4b25      	ldr	r3, [pc, #148]	@ (8005bc4 <USBD_CDC_Init+0x1ec>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	f003 020f 	and.w	r2, r3, #15
 8005b34:	6879      	ldr	r1, [r7, #4]
 8005b36:	4613      	mov	r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4413      	add	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	440b      	add	r3, r1
 8005b40:	3324      	adds	r3, #36	@ 0x24
 8005b42:	2201      	movs	r2, #1
 8005b44:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	33b0      	adds	r3, #176	@ 0xb0
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	e018      	b.n	8005bb2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	7c1b      	ldrb	r3, [r3, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10a      	bne.n	8005b9e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b88:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc0 <USBD_CDC_Init+0x1e8>)
 8005b8a:	7819      	ldrb	r1, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005b92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f002 fb2c 	bl	80081f4 <USBD_LL_PrepareReceive>
 8005b9c:	e008      	b.n	8005bb0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b9e:	4b08      	ldr	r3, [pc, #32]	@ (8005bc0 <USBD_CDC_Init+0x1e8>)
 8005ba0:	7819      	ldrb	r1, [r3, #0]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005ba8:	2340      	movs	r3, #64	@ 0x40
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f002 fb22 	bl	80081f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	20000093 	.word	0x20000093
 8005bc0:	20000094 	.word	0x20000094
 8005bc4:	20000095 	.word	0x20000095

08005bc8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005bd4:	4b3a      	ldr	r3, [pc, #232]	@ (8005cc0 <USBD_CDC_DeInit+0xf8>)
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	4619      	mov	r1, r3
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f002 fa41 	bl	8008062 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005be0:	4b37      	ldr	r3, [pc, #220]	@ (8005cc0 <USBD_CDC_DeInit+0xf8>)
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	f003 020f 	and.w	r2, r3, #15
 8005be8:	6879      	ldr	r1, [r7, #4]
 8005bea:	4613      	mov	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	440b      	add	r3, r1
 8005bf4:	3324      	adds	r3, #36	@ 0x24
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005bfa:	4b32      	ldr	r3, [pc, #200]	@ (8005cc4 <USBD_CDC_DeInit+0xfc>)
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	4619      	mov	r1, r3
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f002 fa2e 	bl	8008062 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005c06:	4b2f      	ldr	r3, [pc, #188]	@ (8005cc4 <USBD_CDC_DeInit+0xfc>)
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	f003 020f 	and.w	r2, r3, #15
 8005c0e:	6879      	ldr	r1, [r7, #4]
 8005c10:	4613      	mov	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	440b      	add	r3, r1
 8005c1a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005c1e:	2200      	movs	r2, #0
 8005c20:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005c22:	4b29      	ldr	r3, [pc, #164]	@ (8005cc8 <USBD_CDC_DeInit+0x100>)
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	4619      	mov	r1, r3
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f002 fa1a 	bl	8008062 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005c2e:	4b26      	ldr	r3, [pc, #152]	@ (8005cc8 <USBD_CDC_DeInit+0x100>)
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	f003 020f 	and.w	r2, r3, #15
 8005c36:	6879      	ldr	r1, [r7, #4]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4413      	add	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	440b      	add	r3, r1
 8005c42:	3324      	adds	r3, #36	@ 0x24
 8005c44:	2200      	movs	r2, #0
 8005c46:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005c48:	4b1f      	ldr	r3, [pc, #124]	@ (8005cc8 <USBD_CDC_DeInit+0x100>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	f003 020f 	and.w	r2, r3, #15
 8005c50:	6879      	ldr	r1, [r7, #4]
 8005c52:	4613      	mov	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	440b      	add	r3, r1
 8005c5c:	3326      	adds	r3, #38	@ 0x26
 8005c5e:	2200      	movs	r2, #0
 8005c60:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	32b0      	adds	r2, #176	@ 0xb0
 8005c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d01f      	beq.n	8005cb4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	33b0      	adds	r3, #176	@ 0xb0
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4413      	add	r3, r2
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	32b0      	adds	r2, #176	@ 0xb0
 8005c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f002 faee 	bl	8008278 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	32b0      	adds	r2, #176	@ 0xb0
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	20000093 	.word	0x20000093
 8005cc4:	20000094 	.word	0x20000094
 8005cc8:	20000095 	.word	0x20000095

08005ccc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	32b0      	adds	r2, #176	@ 0xb0
 8005ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e0bf      	b.n	8005e7c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d050      	beq.n	8005daa <USBD_CDC_Setup+0xde>
 8005d08:	2b20      	cmp	r3, #32
 8005d0a:	f040 80af 	bne.w	8005e6c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	88db      	ldrh	r3, [r3, #6]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d03a      	beq.n	8005d8c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	b25b      	sxtb	r3, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	da1b      	bge.n	8005d58 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	33b0      	adds	r3, #176	@ 0xb0
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005d36:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	88d2      	ldrh	r2, [r2, #6]
 8005d3c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	88db      	ldrh	r3, [r3, #6]
 8005d42:	2b07      	cmp	r3, #7
 8005d44:	bf28      	it	cs
 8005d46:	2307      	movcs	r3, #7
 8005d48:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	89fa      	ldrh	r2, [r7, #14]
 8005d4e:	4619      	mov	r1, r3
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f001 fd53 	bl	80077fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005d56:	e090      	b.n	8005e7a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	785a      	ldrb	r2, [r3, #1]
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	88db      	ldrh	r3, [r3, #6]
 8005d66:	2b3f      	cmp	r3, #63	@ 0x3f
 8005d68:	d803      	bhi.n	8005d72 <USBD_CDC_Setup+0xa6>
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	88db      	ldrh	r3, [r3, #6]
 8005d6e:	b2da      	uxtb	r2, r3
 8005d70:	e000      	b.n	8005d74 <USBD_CDC_Setup+0xa8>
 8005d72:	2240      	movs	r2, #64	@ 0x40
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005d7a:	6939      	ldr	r1, [r7, #16]
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005d82:	461a      	mov	r2, r3
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f001 fd65 	bl	8007854 <USBD_CtlPrepareRx>
      break;
 8005d8a:	e076      	b.n	8005e7a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	33b0      	adds	r3, #176	@ 0xb0
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	7850      	ldrb	r0, [r2, #1]
 8005da2:	2200      	movs	r2, #0
 8005da4:	6839      	ldr	r1, [r7, #0]
 8005da6:	4798      	blx	r3
      break;
 8005da8:	e067      	b.n	8005e7a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	785b      	ldrb	r3, [r3, #1]
 8005dae:	2b0b      	cmp	r3, #11
 8005db0:	d851      	bhi.n	8005e56 <USBD_CDC_Setup+0x18a>
 8005db2:	a201      	add	r2, pc, #4	@ (adr r2, 8005db8 <USBD_CDC_Setup+0xec>)
 8005db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db8:	08005de9 	.word	0x08005de9
 8005dbc:	08005e65 	.word	0x08005e65
 8005dc0:	08005e57 	.word	0x08005e57
 8005dc4:	08005e57 	.word	0x08005e57
 8005dc8:	08005e57 	.word	0x08005e57
 8005dcc:	08005e57 	.word	0x08005e57
 8005dd0:	08005e57 	.word	0x08005e57
 8005dd4:	08005e57 	.word	0x08005e57
 8005dd8:	08005e57 	.word	0x08005e57
 8005ddc:	08005e57 	.word	0x08005e57
 8005de0:	08005e13 	.word	0x08005e13
 8005de4:	08005e3d 	.word	0x08005e3d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	2b03      	cmp	r3, #3
 8005df2:	d107      	bne.n	8005e04 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005df4:	f107 030a 	add.w	r3, r7, #10
 8005df8:	2202      	movs	r2, #2
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f001 fcfd 	bl	80077fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e02:	e032      	b.n	8005e6a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005e04:	6839      	ldr	r1, [r7, #0]
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f001 fc7b 	bl	8007702 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	75fb      	strb	r3, [r7, #23]
          break;
 8005e10:	e02b      	b.n	8005e6a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b03      	cmp	r3, #3
 8005e1c:	d107      	bne.n	8005e2e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005e1e:	f107 030d 	add.w	r3, r7, #13
 8005e22:	2201      	movs	r2, #1
 8005e24:	4619      	mov	r1, r3
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f001 fce8 	bl	80077fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e2c:	e01d      	b.n	8005e6a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005e2e:	6839      	ldr	r1, [r7, #0]
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f001 fc66 	bl	8007702 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e36:	2303      	movs	r3, #3
 8005e38:	75fb      	strb	r3, [r7, #23]
          break;
 8005e3a:	e016      	b.n	8005e6a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b03      	cmp	r3, #3
 8005e46:	d00f      	beq.n	8005e68 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005e48:	6839      	ldr	r1, [r7, #0]
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f001 fc59 	bl	8007702 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e50:	2303      	movs	r3, #3
 8005e52:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005e54:	e008      	b.n	8005e68 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005e56:	6839      	ldr	r1, [r7, #0]
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f001 fc52 	bl	8007702 <USBD_CtlError>
          ret = USBD_FAIL;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	75fb      	strb	r3, [r7, #23]
          break;
 8005e62:	e002      	b.n	8005e6a <USBD_CDC_Setup+0x19e>
          break;
 8005e64:	bf00      	nop
 8005e66:	e008      	b.n	8005e7a <USBD_CDC_Setup+0x1ae>
          break;
 8005e68:	bf00      	nop
      }
      break;
 8005e6a:	e006      	b.n	8005e7a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005e6c:	6839      	ldr	r1, [r7, #0]
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f001 fc47 	bl	8007702 <USBD_CtlError>
      ret = USBD_FAIL;
 8005e74:	2303      	movs	r3, #3
 8005e76:	75fb      	strb	r3, [r7, #23]
      break;
 8005e78:	bf00      	nop
  }

  return (uint8_t)ret;
 8005e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3718      	adds	r7, #24
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005e96:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	32b0      	adds	r2, #176	@ 0xb0
 8005ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e065      	b.n	8005f7a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	32b0      	adds	r2, #176	@ 0xb0
 8005eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ebc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005ebe:	78fb      	ldrb	r3, [r7, #3]
 8005ec0:	f003 020f 	and.w	r2, r3, #15
 8005ec4:	6879      	ldr	r1, [r7, #4]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	440b      	add	r3, r1
 8005ed0:	3318      	adds	r3, #24
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d02f      	beq.n	8005f38 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005ed8:	78fb      	ldrb	r3, [r7, #3]
 8005eda:	f003 020f 	and.w	r2, r3, #15
 8005ede:	6879      	ldr	r1, [r7, #4]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	440b      	add	r3, r1
 8005eea:	3318      	adds	r3, #24
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	78fb      	ldrb	r3, [r7, #3]
 8005ef0:	f003 010f 	and.w	r1, r3, #15
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	00db      	lsls	r3, r3, #3
 8005efa:	440b      	add	r3, r1
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4403      	add	r3, r0
 8005f00:	331c      	adds	r3, #28
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	fbb2 f1f3 	udiv	r1, r2, r3
 8005f08:	fb01 f303 	mul.w	r3, r1, r3
 8005f0c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d112      	bne.n	8005f38 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005f12:	78fb      	ldrb	r3, [r7, #3]
 8005f14:	f003 020f 	and.w	r2, r3, #15
 8005f18:	6879      	ldr	r1, [r7, #4]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	440b      	add	r3, r1
 8005f24:	3318      	adds	r3, #24
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005f2a:	78f9      	ldrb	r1, [r7, #3]
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	2200      	movs	r2, #0
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f002 f93e 	bl	80081b2 <USBD_LL_Transmit>
 8005f36:	e01f      	b.n	8005f78 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	33b0      	adds	r3, #176	@ 0xb0
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d010      	beq.n	8005f78 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	33b0      	adds	r3, #176	@ 0xb0
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4413      	add	r3, r2
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005f74:	78fa      	ldrb	r2, [r7, #3]
 8005f76:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b084      	sub	sp, #16
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	32b0      	adds	r2, #176	@ 0xb0
 8005f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f9c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	32b0      	adds	r2, #176	@ 0xb0
 8005fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d101      	bne.n	8005fb4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e01a      	b.n	8005fea <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005fb4:	78fb      	ldrb	r3, [r7, #3]
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f002 f93c 	bl	8008236 <USBD_LL_GetRxDataSize>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	33b0      	adds	r3, #176	@ 0xb0
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	4413      	add	r3, r2
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005fe4:	4611      	mov	r1, r2
 8005fe6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b084      	sub	sp, #16
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	32b0      	adds	r2, #176	@ 0xb0
 8006004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006008:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d101      	bne.n	8006014 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006010:	2303      	movs	r3, #3
 8006012:	e024      	b.n	800605e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	33b0      	adds	r3, #176	@ 0xb0
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d019      	beq.n	800605c <USBD_CDC_EP0_RxReady+0x6a>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800602e:	2bff      	cmp	r3, #255	@ 0xff
 8006030:	d014      	beq.n	800605c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	33b0      	adds	r3, #176	@ 0xb0
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800604a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006052:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	22ff      	movs	r2, #255	@ 0xff
 8006058:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
	...

08006068 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006070:	2182      	movs	r1, #130	@ 0x82
 8006072:	4818      	ldr	r0, [pc, #96]	@ (80060d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006074:	f000 fd0f 	bl	8006a96 <USBD_GetEpDesc>
 8006078:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800607a:	2101      	movs	r1, #1
 800607c:	4815      	ldr	r0, [pc, #84]	@ (80060d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800607e:	f000 fd0a 	bl	8006a96 <USBD_GetEpDesc>
 8006082:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006084:	2181      	movs	r1, #129	@ 0x81
 8006086:	4813      	ldr	r0, [pc, #76]	@ (80060d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006088:	f000 fd05 	bl	8006a96 <USBD_GetEpDesc>
 800608c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	2210      	movs	r2, #16
 8006098:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d006      	beq.n	80060ae <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060a8:	711a      	strb	r2, [r3, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d006      	beq.n	80060c2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060bc:	711a      	strb	r2, [r3, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2243      	movs	r2, #67	@ 0x43
 80060c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80060c8:	4b02      	ldr	r3, [pc, #8]	@ (80060d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3718      	adds	r7, #24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	20000050 	.word	0x20000050

080060d8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80060e0:	2182      	movs	r1, #130	@ 0x82
 80060e2:	4818      	ldr	r0, [pc, #96]	@ (8006144 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80060e4:	f000 fcd7 	bl	8006a96 <USBD_GetEpDesc>
 80060e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80060ea:	2101      	movs	r1, #1
 80060ec:	4815      	ldr	r0, [pc, #84]	@ (8006144 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80060ee:	f000 fcd2 	bl	8006a96 <USBD_GetEpDesc>
 80060f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80060f4:	2181      	movs	r1, #129	@ 0x81
 80060f6:	4813      	ldr	r0, [pc, #76]	@ (8006144 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80060f8:	f000 fccd 	bl	8006a96 <USBD_GetEpDesc>
 80060fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d002      	beq.n	800610a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	2210      	movs	r2, #16
 8006108:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d006      	beq.n	800611e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	2200      	movs	r2, #0
 8006114:	711a      	strb	r2, [r3, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f042 0202 	orr.w	r2, r2, #2
 800611c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d006      	beq.n	8006132 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	711a      	strb	r2, [r3, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f042 0202 	orr.w	r2, r2, #2
 8006130:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2243      	movs	r2, #67	@ 0x43
 8006136:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006138:	4b02      	ldr	r3, [pc, #8]	@ (8006144 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800613a:	4618      	mov	r0, r3
 800613c:	3718      	adds	r7, #24
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	20000050 	.word	0x20000050

08006148 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006150:	2182      	movs	r1, #130	@ 0x82
 8006152:	4818      	ldr	r0, [pc, #96]	@ (80061b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006154:	f000 fc9f 	bl	8006a96 <USBD_GetEpDesc>
 8006158:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800615a:	2101      	movs	r1, #1
 800615c:	4815      	ldr	r0, [pc, #84]	@ (80061b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800615e:	f000 fc9a 	bl	8006a96 <USBD_GetEpDesc>
 8006162:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006164:	2181      	movs	r1, #129	@ 0x81
 8006166:	4813      	ldr	r0, [pc, #76]	@ (80061b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006168:	f000 fc95 	bl	8006a96 <USBD_GetEpDesc>
 800616c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d002      	beq.n	800617a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	2210      	movs	r2, #16
 8006178:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d006      	beq.n	800618e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	2200      	movs	r2, #0
 8006184:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006188:	711a      	strb	r2, [r3, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d006      	beq.n	80061a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800619c:	711a      	strb	r2, [r3, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2243      	movs	r2, #67	@ 0x43
 80061a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80061a8:	4b02      	ldr	r3, [pc, #8]	@ (80061b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3718      	adds	r7, #24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	20000050 	.word	0x20000050

080061b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	220a      	movs	r2, #10
 80061c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80061c6:	4b03      	ldr	r3, [pc, #12]	@ (80061d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	2000000c 	.word	0x2000000c

080061d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d101      	bne.n	80061ec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e009      	b.n	8006200 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	33b0      	adds	r3, #176	@ 0xb0
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800620c:	b480      	push	{r7}
 800620e:	b087      	sub	sp, #28
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	32b0      	adds	r2, #176	@ 0xb0
 8006222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006226:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800622e:	2303      	movs	r3, #3
 8006230:	e008      	b.n	8006244 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	371c      	adds	r7, #28
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	32b0      	adds	r2, #176	@ 0xb0
 8006264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006268:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006270:	2303      	movs	r3, #3
 8006272:	e004      	b.n	800627e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
	...

0800628c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	32b0      	adds	r2, #176	@ 0xb0
 800629e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062a2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	32b0      	adds	r2, #176	@ 0xb0
 80062ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e018      	b.n	80062ec <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	7c1b      	ldrb	r3, [r3, #16]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10a      	bne.n	80062d8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80062c2:	4b0c      	ldr	r3, [pc, #48]	@ (80062f4 <USBD_CDC_ReceivePacket+0x68>)
 80062c4:	7819      	ldrb	r1, [r3, #0]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80062cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f001 ff8f 	bl	80081f4 <USBD_LL_PrepareReceive>
 80062d6:	e008      	b.n	80062ea <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80062d8:	4b06      	ldr	r3, [pc, #24]	@ (80062f4 <USBD_CDC_ReceivePacket+0x68>)
 80062da:	7819      	ldrb	r1, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80062e2:	2340      	movs	r3, #64	@ 0x40
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f001 ff85 	bl	80081f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	20000094 	.word	0x20000094

080062f8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	4613      	mov	r3, r2
 8006304:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d101      	bne.n	8006310 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800630c:	2303      	movs	r3, #3
 800630e:	e01f      	b.n	8006350 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d003      	beq.n	8006336 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	79fa      	ldrb	r2, [r7, #7]
 8006342:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f001 fdff 	bl	8007f48 <USBD_LL_Init>
 800634a:	4603      	mov	r3, r0
 800634c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800634e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006350:	4618      	mov	r0, r3
 8006352:	3718      	adds	r7, #24
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006362:	2300      	movs	r3, #0
 8006364:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d101      	bne.n	8006370 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800636c:	2303      	movs	r3, #3
 800636e:	e025      	b.n	80063bc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	32ae      	adds	r2, #174	@ 0xae
 8006382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00f      	beq.n	80063ac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	32ae      	adds	r2, #174	@ 0xae
 8006396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800639a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800639c:	f107 020e 	add.w	r2, r7, #14
 80063a0:	4610      	mov	r0, r2
 80063a2:	4798      	blx	r3
 80063a4:	4602      	mov	r2, r0
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80063b2:	1c5a      	adds	r2, r3, #1
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f001 fe07 	bl	8007fe0 <USBD_LL_Start>
 80063d2:	4603      	mov	r3, r0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3708      	adds	r7, #8
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80063e4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b084      	sub	sp, #16
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
 80063fa:	460b      	mov	r3, r1
 80063fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80063fe:	2300      	movs	r3, #0
 8006400:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006408:	2b00      	cmp	r3, #0
 800640a:	d009      	beq.n	8006420 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	78fa      	ldrb	r2, [r7, #3]
 8006416:	4611      	mov	r1, r2
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	4798      	blx	r3
 800641c:	4603      	mov	r3, r0
 800641e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006420:	7bfb      	ldrb	r3, [r7, #15]
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b084      	sub	sp, #16
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
 8006432:	460b      	mov	r3, r1
 8006434:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006436:	2300      	movs	r3, #0
 8006438:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	78fa      	ldrb	r2, [r7, #3]
 8006444:	4611      	mov	r1, r2
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	4798      	blx	r3
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006450:	2303      	movs	r3, #3
 8006452:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006454:	7bfb      	ldrb	r3, [r7, #15]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b084      	sub	sp, #16
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800646e:	6839      	ldr	r1, [r7, #0]
 8006470:	4618      	mov	r0, r3
 8006472:	f001 f90c 	bl	800768e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006484:	461a      	mov	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006492:	f003 031f 	and.w	r3, r3, #31
 8006496:	2b02      	cmp	r3, #2
 8006498:	d01a      	beq.n	80064d0 <USBD_LL_SetupStage+0x72>
 800649a:	2b02      	cmp	r3, #2
 800649c:	d822      	bhi.n	80064e4 <USBD_LL_SetupStage+0x86>
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <USBD_LL_SetupStage+0x4a>
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d00a      	beq.n	80064bc <USBD_LL_SetupStage+0x5e>
 80064a6:	e01d      	b.n	80064e4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80064ae:	4619      	mov	r1, r3
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 fb63 	bl	8006b7c <USBD_StdDevReq>
 80064b6:	4603      	mov	r3, r0
 80064b8:	73fb      	strb	r3, [r7, #15]
      break;
 80064ba:	e020      	b.n	80064fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80064c2:	4619      	mov	r1, r3
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fbcb 	bl	8006c60 <USBD_StdItfReq>
 80064ca:	4603      	mov	r3, r0
 80064cc:	73fb      	strb	r3, [r7, #15]
      break;
 80064ce:	e016      	b.n	80064fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80064d6:	4619      	mov	r1, r3
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fc2d 	bl	8006d38 <USBD_StdEPReq>
 80064de:	4603      	mov	r3, r0
 80064e0:	73fb      	strb	r3, [r7, #15]
      break;
 80064e2:	e00c      	b.n	80064fe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80064ea:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	4619      	mov	r1, r3
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f001 fdd4 	bl	80080a0 <USBD_LL_StallEP>
 80064f8:	4603      	mov	r3, r0
 80064fa:	73fb      	strb	r3, [r7, #15]
      break;
 80064fc:	bf00      	nop
  }

  return ret;
 80064fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	460b      	mov	r3, r1
 8006512:	607a      	str	r2, [r7, #4]
 8006514:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006516:	2300      	movs	r3, #0
 8006518:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800651a:	7afb      	ldrb	r3, [r7, #11]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d16e      	bne.n	80065fe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006526:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800652e:	2b03      	cmp	r3, #3
 8006530:	f040 8098 	bne.w	8006664 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	689a      	ldr	r2, [r3, #8]
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	429a      	cmp	r2, r3
 800653e:	d913      	bls.n	8006568 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	689a      	ldr	r2, [r3, #8]
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	1ad2      	subs	r2, r2, r3
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	68da      	ldr	r2, [r3, #12]
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	4293      	cmp	r3, r2
 8006558:	bf28      	it	cs
 800655a:	4613      	movcs	r3, r2
 800655c:	461a      	mov	r2, r3
 800655e:	6879      	ldr	r1, [r7, #4]
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f001 f994 	bl	800788e <USBD_CtlContinueRx>
 8006566:	e07d      	b.n	8006664 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800656e:	f003 031f 	and.w	r3, r3, #31
 8006572:	2b02      	cmp	r3, #2
 8006574:	d014      	beq.n	80065a0 <USBD_LL_DataOutStage+0x98>
 8006576:	2b02      	cmp	r3, #2
 8006578:	d81d      	bhi.n	80065b6 <USBD_LL_DataOutStage+0xae>
 800657a:	2b00      	cmp	r3, #0
 800657c:	d002      	beq.n	8006584 <USBD_LL_DataOutStage+0x7c>
 800657e:	2b01      	cmp	r3, #1
 8006580:	d003      	beq.n	800658a <USBD_LL_DataOutStage+0x82>
 8006582:	e018      	b.n	80065b6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006584:	2300      	movs	r3, #0
 8006586:	75bb      	strb	r3, [r7, #22]
            break;
 8006588:	e018      	b.n	80065bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006590:	b2db      	uxtb	r3, r3
 8006592:	4619      	mov	r1, r3
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f000 fa64 	bl	8006a62 <USBD_CoreFindIF>
 800659a:	4603      	mov	r3, r0
 800659c:	75bb      	strb	r3, [r7, #22]
            break;
 800659e:	e00d      	b.n	80065bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	4619      	mov	r1, r3
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 fa66 	bl	8006a7c <USBD_CoreFindEP>
 80065b0:	4603      	mov	r3, r0
 80065b2:	75bb      	strb	r3, [r7, #22]
            break;
 80065b4:	e002      	b.n	80065bc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80065b6:	2300      	movs	r3, #0
 80065b8:	75bb      	strb	r3, [r7, #22]
            break;
 80065ba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80065bc:	7dbb      	ldrb	r3, [r7, #22]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d119      	bne.n	80065f6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b03      	cmp	r3, #3
 80065cc:	d113      	bne.n	80065f6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80065ce:	7dba      	ldrb	r2, [r7, #22]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	32ae      	adds	r2, #174	@ 0xae
 80065d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00b      	beq.n	80065f6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80065de:	7dba      	ldrb	r2, [r7, #22]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80065e6:	7dba      	ldrb	r2, [r7, #22]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	32ae      	adds	r2, #174	@ 0xae
 80065ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f001 f95a 	bl	80078b0 <USBD_CtlSendStatus>
 80065fc:	e032      	b.n	8006664 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80065fe:	7afb      	ldrb	r3, [r7, #11]
 8006600:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006604:	b2db      	uxtb	r3, r3
 8006606:	4619      	mov	r1, r3
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f000 fa37 	bl	8006a7c <USBD_CoreFindEP>
 800660e:	4603      	mov	r3, r0
 8006610:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006612:	7dbb      	ldrb	r3, [r7, #22]
 8006614:	2bff      	cmp	r3, #255	@ 0xff
 8006616:	d025      	beq.n	8006664 <USBD_LL_DataOutStage+0x15c>
 8006618:	7dbb      	ldrb	r3, [r7, #22]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d122      	bne.n	8006664 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b03      	cmp	r3, #3
 8006628:	d117      	bne.n	800665a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800662a:	7dba      	ldrb	r2, [r7, #22]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	32ae      	adds	r2, #174	@ 0xae
 8006630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00f      	beq.n	800665a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800663a:	7dba      	ldrb	r2, [r7, #22]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006642:	7dba      	ldrb	r2, [r7, #22]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	32ae      	adds	r2, #174	@ 0xae
 8006648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	7afa      	ldrb	r2, [r7, #11]
 8006650:	4611      	mov	r1, r2
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	4798      	blx	r3
 8006656:	4603      	mov	r3, r0
 8006658:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800665a:	7dfb      	ldrb	r3, [r7, #23]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d001      	beq.n	8006664 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006660:	7dfb      	ldrb	r3, [r7, #23]
 8006662:	e000      	b.n	8006666 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3718      	adds	r7, #24
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b086      	sub	sp, #24
 8006672:	af00      	add	r7, sp, #0
 8006674:	60f8      	str	r0, [r7, #12]
 8006676:	460b      	mov	r3, r1
 8006678:	607a      	str	r2, [r7, #4]
 800667a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800667c:	7afb      	ldrb	r3, [r7, #11]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d16f      	bne.n	8006762 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	3314      	adds	r3, #20
 8006686:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800668e:	2b02      	cmp	r3, #2
 8006690:	d15a      	bne.n	8006748 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	689a      	ldr	r2, [r3, #8]
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	429a      	cmp	r2, r3
 800669c:	d914      	bls.n	80066c8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	689a      	ldr	r2, [r3, #8]
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	1ad2      	subs	r2, r2, r3
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	461a      	mov	r2, r3
 80066b2:	6879      	ldr	r1, [r7, #4]
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f001 f8bc 	bl	8007832 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066ba:	2300      	movs	r3, #0
 80066bc:	2200      	movs	r2, #0
 80066be:	2100      	movs	r1, #0
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f001 fd97 	bl	80081f4 <USBD_LL_PrepareReceive>
 80066c6:	e03f      	b.n	8006748 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	68da      	ldr	r2, [r3, #12]
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d11c      	bne.n	800670e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80066dc:	429a      	cmp	r2, r3
 80066de:	d316      	bcc.n	800670e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d20f      	bcs.n	800670e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80066ee:	2200      	movs	r2, #0
 80066f0:	2100      	movs	r1, #0
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f001 f89d 	bl	8007832 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006700:	2300      	movs	r3, #0
 8006702:	2200      	movs	r2, #0
 8006704:	2100      	movs	r1, #0
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f001 fd74 	bl	80081f4 <USBD_LL_PrepareReceive>
 800670c:	e01c      	b.n	8006748 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b03      	cmp	r3, #3
 8006718:	d10f      	bne.n	800673a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d009      	beq.n	800673a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800673a:	2180      	movs	r1, #128	@ 0x80
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f001 fcaf 	bl	80080a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f001 f8c7 	bl	80078d6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d03a      	beq.n	80067c8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f7ff fe42 	bl	80063dc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006760:	e032      	b.n	80067c8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006762:	7afb      	ldrb	r3, [r7, #11]
 8006764:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006768:	b2db      	uxtb	r3, r3
 800676a:	4619      	mov	r1, r3
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f000 f985 	bl	8006a7c <USBD_CoreFindEP>
 8006772:	4603      	mov	r3, r0
 8006774:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006776:	7dfb      	ldrb	r3, [r7, #23]
 8006778:	2bff      	cmp	r3, #255	@ 0xff
 800677a:	d025      	beq.n	80067c8 <USBD_LL_DataInStage+0x15a>
 800677c:	7dfb      	ldrb	r3, [r7, #23]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d122      	bne.n	80067c8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b03      	cmp	r3, #3
 800678c:	d11c      	bne.n	80067c8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800678e:	7dfa      	ldrb	r2, [r7, #23]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	32ae      	adds	r2, #174	@ 0xae
 8006794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d014      	beq.n	80067c8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800679e:	7dfa      	ldrb	r2, [r7, #23]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80067a6:	7dfa      	ldrb	r2, [r7, #23]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	32ae      	adds	r2, #174	@ 0xae
 80067ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	7afa      	ldrb	r2, [r7, #11]
 80067b4:	4611      	mov	r1, r2
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	4798      	blx	r3
 80067ba:	4603      	mov	r3, r0
 80067bc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80067be:	7dbb      	ldrb	r3, [r7, #22]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d001      	beq.n	80067c8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80067c4:	7dbb      	ldrb	r3, [r7, #22]
 80067c6:	e000      	b.n	80067ca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3718      	adds	r7, #24
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b084      	sub	sp, #16
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80067da:	2300      	movs	r3, #0
 80067dc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800680a:	2b00      	cmp	r3, #0
 800680c:	d014      	beq.n	8006838 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00e      	beq.n	8006838 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	6852      	ldr	r2, [r2, #4]
 8006826:	b2d2      	uxtb	r2, r2
 8006828:	4611      	mov	r1, r2
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	4798      	blx	r3
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006834:	2303      	movs	r3, #3
 8006836:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006838:	2340      	movs	r3, #64	@ 0x40
 800683a:	2200      	movs	r2, #0
 800683c:	2100      	movs	r1, #0
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f001 fbe9 	bl	8008016 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2240      	movs	r2, #64	@ 0x40
 8006850:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006854:	2340      	movs	r3, #64	@ 0x40
 8006856:	2200      	movs	r2, #0
 8006858:	2180      	movs	r1, #128	@ 0x80
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f001 fbdb 	bl	8008016 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2240      	movs	r2, #64	@ 0x40
 800686a:	621a      	str	r2, [r3, #32]

  return ret;
 800686c:	7bfb      	ldrb	r3, [r7, #15]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006876:	b480      	push	{r7}
 8006878:	b083      	sub	sp, #12
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
 800687e:	460b      	mov	r3, r1
 8006880:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	78fa      	ldrb	r2, [r7, #3]
 8006886:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	370c      	adds	r7, #12
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006896:	b480      	push	{r7}
 8006898:	b083      	sub	sp, #12
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b04      	cmp	r3, #4
 80068a8:	d006      	beq.n	80068b8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068b0:	b2da      	uxtb	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2204      	movs	r2, #4
 80068bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b04      	cmp	r3, #4
 80068e0:	d106      	bne.n	80068f0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80068e8:	b2da      	uxtb	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b082      	sub	sp, #8
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b03      	cmp	r3, #3
 8006910:	d110      	bne.n	8006934 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00b      	beq.n	8006934 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006922:	69db      	ldr	r3, [r3, #28]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d005      	beq.n	8006934 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800692e:	69db      	ldr	r3, [r3, #28]
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3708      	adds	r7, #8
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b082      	sub	sp, #8
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
 8006946:	460b      	mov	r3, r1
 8006948:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	32ae      	adds	r2, #174	@ 0xae
 8006954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d101      	bne.n	8006960 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800695c:	2303      	movs	r3, #3
 800695e:	e01c      	b.n	800699a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b03      	cmp	r3, #3
 800696a:	d115      	bne.n	8006998 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	32ae      	adds	r2, #174	@ 0xae
 8006976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800697a:	6a1b      	ldr	r3, [r3, #32]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00b      	beq.n	8006998 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	32ae      	adds	r2, #174	@ 0xae
 800698a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800698e:	6a1b      	ldr	r3, [r3, #32]
 8006990:	78fa      	ldrb	r2, [r7, #3]
 8006992:	4611      	mov	r1, r2
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b082      	sub	sp, #8
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
 80069aa:	460b      	mov	r3, r1
 80069ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	32ae      	adds	r2, #174	@ 0xae
 80069b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d101      	bne.n	80069c4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e01c      	b.n	80069fe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	2b03      	cmp	r3, #3
 80069ce:	d115      	bne.n	80069fc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	32ae      	adds	r2, #174	@ 0xae
 80069da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00b      	beq.n	80069fc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	32ae      	adds	r2, #174	@ 0xae
 80069ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f4:	78fa      	ldrb	r2, [r7, #3]
 80069f6:	4611      	mov	r1, r2
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3708      	adds	r7, #8
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b083      	sub	sp, #12
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006a24:	2300      	movs	r3, #0
 8006a26:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00e      	beq.n	8006a58 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	6852      	ldr	r2, [r2, #4]
 8006a46:	b2d2      	uxtb	r2, r2
 8006a48:	4611      	mov	r1, r2
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	4798      	blx	r3
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d001      	beq.n	8006a58 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006a54:	2303      	movs	r3, #3
 8006a56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b083      	sub	sp, #12
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006a6e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	460b      	mov	r3, r1
 8006a86:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006a88:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	370c      	adds	r7, #12
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr

08006a96 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b086      	sub	sp, #24
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	885b      	ldrh	r3, [r3, #2]
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	7812      	ldrb	r2, [r2, #0]
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d91f      	bls.n	8006afc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006ac2:	e013      	b.n	8006aec <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006ac4:	f107 030a 	add.w	r3, r7, #10
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6978      	ldr	r0, [r7, #20]
 8006acc:	f000 f81b 	bl	8006b06 <USBD_GetNextDesc>
 8006ad0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	785b      	ldrb	r3, [r3, #1]
 8006ad6:	2b05      	cmp	r3, #5
 8006ad8:	d108      	bne.n	8006aec <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	789b      	ldrb	r3, [r3, #2]
 8006ae2:	78fa      	ldrb	r2, [r7, #3]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d008      	beq.n	8006afa <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	885b      	ldrh	r3, [r3, #2]
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	897b      	ldrh	r3, [r7, #10]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d8e5      	bhi.n	8006ac4 <USBD_GetEpDesc+0x2e>
 8006af8:	e000      	b.n	8006afc <USBD_GetEpDesc+0x66>
          break;
 8006afa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006afc:	693b      	ldr	r3, [r7, #16]
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3718      	adds	r7, #24
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006b06:	b480      	push	{r7}
 8006b08:	b085      	sub	sp, #20
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	881b      	ldrh	r3, [r3, #0]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	7812      	ldrb	r2, [r2, #0]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	461a      	mov	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006b30:	68fb      	ldr	r3, [r7, #12]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3714      	adds	r7, #20
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b087      	sub	sp, #28
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	3301      	adds	r3, #1
 8006b54:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006b5c:	8a3b      	ldrh	r3, [r7, #16]
 8006b5e:	021b      	lsls	r3, r3, #8
 8006b60:	b21a      	sxth	r2, r3
 8006b62:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	b21b      	sxth	r3, r3
 8006b6a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006b6c:	89fb      	ldrh	r3, [r7, #14]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	371c      	adds	r7, #28
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
	...

08006b7c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006b92:	2b40      	cmp	r3, #64	@ 0x40
 8006b94:	d005      	beq.n	8006ba2 <USBD_StdDevReq+0x26>
 8006b96:	2b40      	cmp	r3, #64	@ 0x40
 8006b98:	d857      	bhi.n	8006c4a <USBD_StdDevReq+0xce>
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00f      	beq.n	8006bbe <USBD_StdDevReq+0x42>
 8006b9e:	2b20      	cmp	r3, #32
 8006ba0:	d153      	bne.n	8006c4a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	32ae      	adds	r2, #174	@ 0xae
 8006bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	6839      	ldr	r1, [r7, #0]
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	4798      	blx	r3
 8006bb8:	4603      	mov	r3, r0
 8006bba:	73fb      	strb	r3, [r7, #15]
      break;
 8006bbc:	e04a      	b.n	8006c54 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	785b      	ldrb	r3, [r3, #1]
 8006bc2:	2b09      	cmp	r3, #9
 8006bc4:	d83b      	bhi.n	8006c3e <USBD_StdDevReq+0xc2>
 8006bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bcc <USBD_StdDevReq+0x50>)
 8006bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bcc:	08006c21 	.word	0x08006c21
 8006bd0:	08006c35 	.word	0x08006c35
 8006bd4:	08006c3f 	.word	0x08006c3f
 8006bd8:	08006c2b 	.word	0x08006c2b
 8006bdc:	08006c3f 	.word	0x08006c3f
 8006be0:	08006bff 	.word	0x08006bff
 8006be4:	08006bf5 	.word	0x08006bf5
 8006be8:	08006c3f 	.word	0x08006c3f
 8006bec:	08006c17 	.word	0x08006c17
 8006bf0:	08006c09 	.word	0x08006c09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006bf4:	6839      	ldr	r1, [r7, #0]
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fa3c 	bl	8007074 <USBD_GetDescriptor>
          break;
 8006bfc:	e024      	b.n	8006c48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006bfe:	6839      	ldr	r1, [r7, #0]
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 fba1 	bl	8007348 <USBD_SetAddress>
          break;
 8006c06:	e01f      	b.n	8006c48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006c08:	6839      	ldr	r1, [r7, #0]
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fbe0 	bl	80073d0 <USBD_SetConfig>
 8006c10:	4603      	mov	r3, r0
 8006c12:	73fb      	strb	r3, [r7, #15]
          break;
 8006c14:	e018      	b.n	8006c48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006c16:	6839      	ldr	r1, [r7, #0]
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fc83 	bl	8007524 <USBD_GetConfig>
          break;
 8006c1e:	e013      	b.n	8006c48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006c20:	6839      	ldr	r1, [r7, #0]
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 fcb4 	bl	8007590 <USBD_GetStatus>
          break;
 8006c28:	e00e      	b.n	8006c48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006c2a:	6839      	ldr	r1, [r7, #0]
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 fce3 	bl	80075f8 <USBD_SetFeature>
          break;
 8006c32:	e009      	b.n	8006c48 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006c34:	6839      	ldr	r1, [r7, #0]
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fd07 	bl	800764a <USBD_ClrFeature>
          break;
 8006c3c:	e004      	b.n	8006c48 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006c3e:	6839      	ldr	r1, [r7, #0]
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fd5e 	bl	8007702 <USBD_CtlError>
          break;
 8006c46:	bf00      	nop
      }
      break;
 8006c48:	e004      	b.n	8006c54 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006c4a:	6839      	ldr	r1, [r7, #0]
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 fd58 	bl	8007702 <USBD_CtlError>
      break;
 8006c52:	bf00      	nop
  }

  return ret;
 8006c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop

08006c60 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006c76:	2b40      	cmp	r3, #64	@ 0x40
 8006c78:	d005      	beq.n	8006c86 <USBD_StdItfReq+0x26>
 8006c7a:	2b40      	cmp	r3, #64	@ 0x40
 8006c7c:	d852      	bhi.n	8006d24 <USBD_StdItfReq+0xc4>
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d001      	beq.n	8006c86 <USBD_StdItfReq+0x26>
 8006c82:	2b20      	cmp	r3, #32
 8006c84:	d14e      	bne.n	8006d24 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d840      	bhi.n	8006d16 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	889b      	ldrh	r3, [r3, #4]
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d836      	bhi.n	8006d0c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	889b      	ldrh	r3, [r3, #4]
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7ff fedb 	bl	8006a62 <USBD_CoreFindIF>
 8006cac:	4603      	mov	r3, r0
 8006cae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cb0:	7bbb      	ldrb	r3, [r7, #14]
 8006cb2:	2bff      	cmp	r3, #255	@ 0xff
 8006cb4:	d01d      	beq.n	8006cf2 <USBD_StdItfReq+0x92>
 8006cb6:	7bbb      	ldrb	r3, [r7, #14]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d11a      	bne.n	8006cf2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006cbc:	7bba      	ldrb	r2, [r7, #14]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	32ae      	adds	r2, #174	@ 0xae
 8006cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00f      	beq.n	8006cec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006ccc:	7bba      	ldrb	r2, [r7, #14]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006cd4:	7bba      	ldrb	r2, [r7, #14]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	32ae      	adds	r2, #174	@ 0xae
 8006cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	6839      	ldr	r1, [r7, #0]
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	4798      	blx	r3
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006cea:	e004      	b.n	8006cf6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006cec:	2303      	movs	r3, #3
 8006cee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006cf0:	e001      	b.n	8006cf6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	88db      	ldrh	r3, [r3, #6]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d110      	bne.n	8006d20 <USBD_StdItfReq+0xc0>
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10d      	bne.n	8006d20 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fdd3 	bl	80078b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006d0a:	e009      	b.n	8006d20 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006d0c:	6839      	ldr	r1, [r7, #0]
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fcf7 	bl	8007702 <USBD_CtlError>
          break;
 8006d14:	e004      	b.n	8006d20 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006d16:	6839      	ldr	r1, [r7, #0]
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fcf2 	bl	8007702 <USBD_CtlError>
          break;
 8006d1e:	e000      	b.n	8006d22 <USBD_StdItfReq+0xc2>
          break;
 8006d20:	bf00      	nop
      }
      break;
 8006d22:	e004      	b.n	8006d2e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006d24:	6839      	ldr	r1, [r7, #0]
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fceb 	bl	8007702 <USBD_CtlError>
      break;
 8006d2c:	bf00      	nop
  }

  return ret;
 8006d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d42:	2300      	movs	r3, #0
 8006d44:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	889b      	ldrh	r3, [r3, #4]
 8006d4a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006d54:	2b40      	cmp	r3, #64	@ 0x40
 8006d56:	d007      	beq.n	8006d68 <USBD_StdEPReq+0x30>
 8006d58:	2b40      	cmp	r3, #64	@ 0x40
 8006d5a:	f200 817f 	bhi.w	800705c <USBD_StdEPReq+0x324>
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d02a      	beq.n	8006db8 <USBD_StdEPReq+0x80>
 8006d62:	2b20      	cmp	r3, #32
 8006d64:	f040 817a 	bne.w	800705c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006d68:	7bbb      	ldrb	r3, [r7, #14]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7ff fe85 	bl	8006a7c <USBD_CoreFindEP>
 8006d72:	4603      	mov	r3, r0
 8006d74:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d76:	7b7b      	ldrb	r3, [r7, #13]
 8006d78:	2bff      	cmp	r3, #255	@ 0xff
 8006d7a:	f000 8174 	beq.w	8007066 <USBD_StdEPReq+0x32e>
 8006d7e:	7b7b      	ldrb	r3, [r7, #13]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f040 8170 	bne.w	8007066 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006d86:	7b7a      	ldrb	r2, [r7, #13]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006d8e:	7b7a      	ldrb	r2, [r7, #13]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	32ae      	adds	r2, #174	@ 0xae
 8006d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 8163 	beq.w	8007066 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006da0:	7b7a      	ldrb	r2, [r7, #13]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	32ae      	adds	r2, #174	@ 0xae
 8006da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	6839      	ldr	r1, [r7, #0]
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	4798      	blx	r3
 8006db2:	4603      	mov	r3, r0
 8006db4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006db6:	e156      	b.n	8007066 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	785b      	ldrb	r3, [r3, #1]
 8006dbc:	2b03      	cmp	r3, #3
 8006dbe:	d008      	beq.n	8006dd2 <USBD_StdEPReq+0x9a>
 8006dc0:	2b03      	cmp	r3, #3
 8006dc2:	f300 8145 	bgt.w	8007050 <USBD_StdEPReq+0x318>
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f000 809b 	beq.w	8006f02 <USBD_StdEPReq+0x1ca>
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d03c      	beq.n	8006e4a <USBD_StdEPReq+0x112>
 8006dd0:	e13e      	b.n	8007050 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d002      	beq.n	8006de4 <USBD_StdEPReq+0xac>
 8006dde:	2b03      	cmp	r3, #3
 8006de0:	d016      	beq.n	8006e10 <USBD_StdEPReq+0xd8>
 8006de2:	e02c      	b.n	8006e3e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006de4:	7bbb      	ldrb	r3, [r7, #14]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00d      	beq.n	8006e06 <USBD_StdEPReq+0xce>
 8006dea:	7bbb      	ldrb	r3, [r7, #14]
 8006dec:	2b80      	cmp	r3, #128	@ 0x80
 8006dee:	d00a      	beq.n	8006e06 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006df0:	7bbb      	ldrb	r3, [r7, #14]
 8006df2:	4619      	mov	r1, r3
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f001 f953 	bl	80080a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dfa:	2180      	movs	r1, #128	@ 0x80
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 f94f 	bl	80080a0 <USBD_LL_StallEP>
 8006e02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e04:	e020      	b.n	8006e48 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006e06:	6839      	ldr	r1, [r7, #0]
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fc7a 	bl	8007702 <USBD_CtlError>
              break;
 8006e0e:	e01b      	b.n	8006e48 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	885b      	ldrh	r3, [r3, #2]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10e      	bne.n	8006e36 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006e18:	7bbb      	ldrb	r3, [r7, #14]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00b      	beq.n	8006e36 <USBD_StdEPReq+0xfe>
 8006e1e:	7bbb      	ldrb	r3, [r7, #14]
 8006e20:	2b80      	cmp	r3, #128	@ 0x80
 8006e22:	d008      	beq.n	8006e36 <USBD_StdEPReq+0xfe>
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	88db      	ldrh	r3, [r3, #6]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d104      	bne.n	8006e36 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e2c:	7bbb      	ldrb	r3, [r7, #14]
 8006e2e:	4619      	mov	r1, r3
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f001 f935 	bl	80080a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fd3a 	bl	80078b0 <USBD_CtlSendStatus>

              break;
 8006e3c:	e004      	b.n	8006e48 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006e3e:	6839      	ldr	r1, [r7, #0]
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fc5e 	bl	8007702 <USBD_CtlError>
              break;
 8006e46:	bf00      	nop
          }
          break;
 8006e48:	e107      	b.n	800705a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d002      	beq.n	8006e5c <USBD_StdEPReq+0x124>
 8006e56:	2b03      	cmp	r3, #3
 8006e58:	d016      	beq.n	8006e88 <USBD_StdEPReq+0x150>
 8006e5a:	e04b      	b.n	8006ef4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e5c:	7bbb      	ldrb	r3, [r7, #14]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00d      	beq.n	8006e7e <USBD_StdEPReq+0x146>
 8006e62:	7bbb      	ldrb	r3, [r7, #14]
 8006e64:	2b80      	cmp	r3, #128	@ 0x80
 8006e66:	d00a      	beq.n	8006e7e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e68:	7bbb      	ldrb	r3, [r7, #14]
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f001 f917 	bl	80080a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e72:	2180      	movs	r1, #128	@ 0x80
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f001 f913 	bl	80080a0 <USBD_LL_StallEP>
 8006e7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e7c:	e040      	b.n	8006f00 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006e7e:	6839      	ldr	r1, [r7, #0]
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 fc3e 	bl	8007702 <USBD_CtlError>
              break;
 8006e86:	e03b      	b.n	8006f00 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	885b      	ldrh	r3, [r3, #2]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d136      	bne.n	8006efe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006e90:	7bbb      	ldrb	r3, [r7, #14]
 8006e92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d004      	beq.n	8006ea4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e9a:	7bbb      	ldrb	r3, [r7, #14]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f001 f91d 	bl	80080de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 fd03 	bl	80078b0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006eaa:	7bbb      	ldrb	r3, [r7, #14]
 8006eac:	4619      	mov	r1, r3
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7ff fde4 	bl	8006a7c <USBD_CoreFindEP>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006eb8:	7b7b      	ldrb	r3, [r7, #13]
 8006eba:	2bff      	cmp	r3, #255	@ 0xff
 8006ebc:	d01f      	beq.n	8006efe <USBD_StdEPReq+0x1c6>
 8006ebe:	7b7b      	ldrb	r3, [r7, #13]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d11c      	bne.n	8006efe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006ec4:	7b7a      	ldrb	r2, [r7, #13]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006ecc:	7b7a      	ldrb	r2, [r7, #13]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	32ae      	adds	r2, #174	@ 0xae
 8006ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d010      	beq.n	8006efe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006edc:	7b7a      	ldrb	r2, [r7, #13]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	32ae      	adds	r2, #174	@ 0xae
 8006ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	6839      	ldr	r1, [r7, #0]
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	4798      	blx	r3
 8006eee:	4603      	mov	r3, r0
 8006ef0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006ef2:	e004      	b.n	8006efe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006ef4:	6839      	ldr	r1, [r7, #0]
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fc03 	bl	8007702 <USBD_CtlError>
              break;
 8006efc:	e000      	b.n	8006f00 <USBD_StdEPReq+0x1c8>
              break;
 8006efe:	bf00      	nop
          }
          break;
 8006f00:	e0ab      	b.n	800705a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d002      	beq.n	8006f14 <USBD_StdEPReq+0x1dc>
 8006f0e:	2b03      	cmp	r3, #3
 8006f10:	d032      	beq.n	8006f78 <USBD_StdEPReq+0x240>
 8006f12:	e097      	b.n	8007044 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f14:	7bbb      	ldrb	r3, [r7, #14]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d007      	beq.n	8006f2a <USBD_StdEPReq+0x1f2>
 8006f1a:	7bbb      	ldrb	r3, [r7, #14]
 8006f1c:	2b80      	cmp	r3, #128	@ 0x80
 8006f1e:	d004      	beq.n	8006f2a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006f20:	6839      	ldr	r1, [r7, #0]
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fbed 	bl	8007702 <USBD_CtlError>
                break;
 8006f28:	e091      	b.n	800704e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	da0b      	bge.n	8006f4a <USBD_StdEPReq+0x212>
 8006f32:	7bbb      	ldrb	r3, [r7, #14]
 8006f34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f38:	4613      	mov	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4413      	add	r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	3310      	adds	r3, #16
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	4413      	add	r3, r2
 8006f46:	3304      	adds	r3, #4
 8006f48:	e00b      	b.n	8006f62 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f4a:	7bbb      	ldrb	r3, [r7, #14]
 8006f4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f50:	4613      	mov	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	4413      	add	r3, r2
 8006f60:	3304      	adds	r3, #4
 8006f62:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	2200      	movs	r2, #0
 8006f68:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	4619      	mov	r1, r3
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 fc43 	bl	80077fc <USBD_CtlSendData>
              break;
 8006f76:	e06a      	b.n	800704e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006f78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	da11      	bge.n	8006fa4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f80:	7bbb      	ldrb	r3, [r7, #14]
 8006f82:	f003 020f 	and.w	r2, r3, #15
 8006f86:	6879      	ldr	r1, [r7, #4]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	440b      	add	r3, r1
 8006f92:	3324      	adds	r3, #36	@ 0x24
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d117      	bne.n	8006fca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006f9a:	6839      	ldr	r1, [r7, #0]
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fbb0 	bl	8007702 <USBD_CtlError>
                  break;
 8006fa2:	e054      	b.n	800704e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006fa4:	7bbb      	ldrb	r3, [r7, #14]
 8006fa6:	f003 020f 	and.w	r2, r3, #15
 8006faa:	6879      	ldr	r1, [r7, #4]
 8006fac:	4613      	mov	r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	440b      	add	r3, r1
 8006fb6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006fba:	881b      	ldrh	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d104      	bne.n	8006fca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006fc0:	6839      	ldr	r1, [r7, #0]
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fb9d 	bl	8007702 <USBD_CtlError>
                  break;
 8006fc8:	e041      	b.n	800704e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	da0b      	bge.n	8006fea <USBD_StdEPReq+0x2b2>
 8006fd2:	7bbb      	ldrb	r3, [r7, #14]
 8006fd4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006fd8:	4613      	mov	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4413      	add	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	3310      	adds	r3, #16
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	3304      	adds	r3, #4
 8006fe8:	e00b      	b.n	8007002 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006fea:	7bbb      	ldrb	r3, [r7, #14]
 8006fec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4413      	add	r3, r2
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	4413      	add	r3, r2
 8007000:	3304      	adds	r3, #4
 8007002:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007004:	7bbb      	ldrb	r3, [r7, #14]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d002      	beq.n	8007010 <USBD_StdEPReq+0x2d8>
 800700a:	7bbb      	ldrb	r3, [r7, #14]
 800700c:	2b80      	cmp	r3, #128	@ 0x80
 800700e:	d103      	bne.n	8007018 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	2200      	movs	r2, #0
 8007014:	601a      	str	r2, [r3, #0]
 8007016:	e00e      	b.n	8007036 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007018:	7bbb      	ldrb	r3, [r7, #14]
 800701a:	4619      	mov	r1, r3
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f001 f87d 	bl	800811c <USBD_LL_IsStallEP>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d003      	beq.n	8007030 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	2201      	movs	r2, #1
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	e002      	b.n	8007036 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	2200      	movs	r2, #0
 8007034:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	2202      	movs	r2, #2
 800703a:	4619      	mov	r1, r3
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 fbdd 	bl	80077fc <USBD_CtlSendData>
              break;
 8007042:	e004      	b.n	800704e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fb5b 	bl	8007702 <USBD_CtlError>
              break;
 800704c:	bf00      	nop
          }
          break;
 800704e:	e004      	b.n	800705a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007050:	6839      	ldr	r1, [r7, #0]
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 fb55 	bl	8007702 <USBD_CtlError>
          break;
 8007058:	bf00      	nop
      }
      break;
 800705a:	e005      	b.n	8007068 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800705c:	6839      	ldr	r1, [r7, #0]
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fb4f 	bl	8007702 <USBD_CtlError>
      break;
 8007064:	e000      	b.n	8007068 <USBD_StdEPReq+0x330>
      break;
 8007066:	bf00      	nop
  }

  return ret;
 8007068:	7bfb      	ldrb	r3, [r7, #15]
}
 800706a:	4618      	mov	r0, r3
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
	...

08007074 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800707e:	2300      	movs	r3, #0
 8007080:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007082:	2300      	movs	r3, #0
 8007084:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007086:	2300      	movs	r3, #0
 8007088:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	885b      	ldrh	r3, [r3, #2]
 800708e:	0a1b      	lsrs	r3, r3, #8
 8007090:	b29b      	uxth	r3, r3
 8007092:	3b01      	subs	r3, #1
 8007094:	2b06      	cmp	r3, #6
 8007096:	f200 8128 	bhi.w	80072ea <USBD_GetDescriptor+0x276>
 800709a:	a201      	add	r2, pc, #4	@ (adr r2, 80070a0 <USBD_GetDescriptor+0x2c>)
 800709c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a0:	080070bd 	.word	0x080070bd
 80070a4:	080070d5 	.word	0x080070d5
 80070a8:	08007115 	.word	0x08007115
 80070ac:	080072eb 	.word	0x080072eb
 80070b0:	080072eb 	.word	0x080072eb
 80070b4:	0800728b 	.word	0x0800728b
 80070b8:	080072b7 	.word	0x080072b7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	7c12      	ldrb	r2, [r2, #16]
 80070c8:	f107 0108 	add.w	r1, r7, #8
 80070cc:	4610      	mov	r0, r2
 80070ce:	4798      	blx	r3
 80070d0:	60f8      	str	r0, [r7, #12]
      break;
 80070d2:	e112      	b.n	80072fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	7c1b      	ldrb	r3, [r3, #16]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10d      	bne.n	80070f8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e4:	f107 0208 	add.w	r2, r7, #8
 80070e8:	4610      	mov	r0, r2
 80070ea:	4798      	blx	r3
 80070ec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	3301      	adds	r3, #1
 80070f2:	2202      	movs	r2, #2
 80070f4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80070f6:	e100      	b.n	80072fa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007100:	f107 0208 	add.w	r2, r7, #8
 8007104:	4610      	mov	r0, r2
 8007106:	4798      	blx	r3
 8007108:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3301      	adds	r3, #1
 800710e:	2202      	movs	r2, #2
 8007110:	701a      	strb	r2, [r3, #0]
      break;
 8007112:	e0f2      	b.n	80072fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	885b      	ldrh	r3, [r3, #2]
 8007118:	b2db      	uxtb	r3, r3
 800711a:	2b05      	cmp	r3, #5
 800711c:	f200 80ac 	bhi.w	8007278 <USBD_GetDescriptor+0x204>
 8007120:	a201      	add	r2, pc, #4	@ (adr r2, 8007128 <USBD_GetDescriptor+0xb4>)
 8007122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007126:	bf00      	nop
 8007128:	08007141 	.word	0x08007141
 800712c:	08007175 	.word	0x08007175
 8007130:	080071a9 	.word	0x080071a9
 8007134:	080071dd 	.word	0x080071dd
 8007138:	08007211 	.word	0x08007211
 800713c:	08007245 	.word	0x08007245
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00b      	beq.n	8007164 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	7c12      	ldrb	r2, [r2, #16]
 8007158:	f107 0108 	add.w	r1, r7, #8
 800715c:	4610      	mov	r0, r2
 800715e:	4798      	blx	r3
 8007160:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007162:	e091      	b.n	8007288 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007164:	6839      	ldr	r1, [r7, #0]
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 facb 	bl	8007702 <USBD_CtlError>
            err++;
 800716c:	7afb      	ldrb	r3, [r7, #11]
 800716e:	3301      	adds	r3, #1
 8007170:	72fb      	strb	r3, [r7, #11]
          break;
 8007172:	e089      	b.n	8007288 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00b      	beq.n	8007198 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	7c12      	ldrb	r2, [r2, #16]
 800718c:	f107 0108 	add.w	r1, r7, #8
 8007190:	4610      	mov	r0, r2
 8007192:	4798      	blx	r3
 8007194:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007196:	e077      	b.n	8007288 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007198:	6839      	ldr	r1, [r7, #0]
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 fab1 	bl	8007702 <USBD_CtlError>
            err++;
 80071a0:	7afb      	ldrb	r3, [r7, #11]
 80071a2:	3301      	adds	r3, #1
 80071a4:	72fb      	strb	r3, [r7, #11]
          break;
 80071a6:	e06f      	b.n	8007288 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00b      	beq.n	80071cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	7c12      	ldrb	r2, [r2, #16]
 80071c0:	f107 0108 	add.w	r1, r7, #8
 80071c4:	4610      	mov	r0, r2
 80071c6:	4798      	blx	r3
 80071c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071ca:	e05d      	b.n	8007288 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071cc:	6839      	ldr	r1, [r7, #0]
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fa97 	bl	8007702 <USBD_CtlError>
            err++;
 80071d4:	7afb      	ldrb	r3, [r7, #11]
 80071d6:	3301      	adds	r3, #1
 80071d8:	72fb      	strb	r3, [r7, #11]
          break;
 80071da:	e055      	b.n	8007288 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00b      	beq.n	8007200 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	7c12      	ldrb	r2, [r2, #16]
 80071f4:	f107 0108 	add.w	r1, r7, #8
 80071f8:	4610      	mov	r0, r2
 80071fa:	4798      	blx	r3
 80071fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071fe:	e043      	b.n	8007288 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007200:	6839      	ldr	r1, [r7, #0]
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fa7d 	bl	8007702 <USBD_CtlError>
            err++;
 8007208:	7afb      	ldrb	r3, [r7, #11]
 800720a:	3301      	adds	r3, #1
 800720c:	72fb      	strb	r3, [r7, #11]
          break;
 800720e:	e03b      	b.n	8007288 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00b      	beq.n	8007234 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007222:	695b      	ldr	r3, [r3, #20]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	7c12      	ldrb	r2, [r2, #16]
 8007228:	f107 0108 	add.w	r1, r7, #8
 800722c:	4610      	mov	r0, r2
 800722e:	4798      	blx	r3
 8007230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007232:	e029      	b.n	8007288 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007234:	6839      	ldr	r1, [r7, #0]
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 fa63 	bl	8007702 <USBD_CtlError>
            err++;
 800723c:	7afb      	ldrb	r3, [r7, #11]
 800723e:	3301      	adds	r3, #1
 8007240:	72fb      	strb	r3, [r7, #11]
          break;
 8007242:	e021      	b.n	8007288 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00b      	beq.n	8007268 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007256:	699b      	ldr	r3, [r3, #24]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	7c12      	ldrb	r2, [r2, #16]
 800725c:	f107 0108 	add.w	r1, r7, #8
 8007260:	4610      	mov	r0, r2
 8007262:	4798      	blx	r3
 8007264:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007266:	e00f      	b.n	8007288 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007268:	6839      	ldr	r1, [r7, #0]
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fa49 	bl	8007702 <USBD_CtlError>
            err++;
 8007270:	7afb      	ldrb	r3, [r7, #11]
 8007272:	3301      	adds	r3, #1
 8007274:	72fb      	strb	r3, [r7, #11]
          break;
 8007276:	e007      	b.n	8007288 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007278:	6839      	ldr	r1, [r7, #0]
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 fa41 	bl	8007702 <USBD_CtlError>
          err++;
 8007280:	7afb      	ldrb	r3, [r7, #11]
 8007282:	3301      	adds	r3, #1
 8007284:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007286:	bf00      	nop
      }
      break;
 8007288:	e037      	b.n	80072fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	7c1b      	ldrb	r3, [r3, #16]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d109      	bne.n	80072a6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800729a:	f107 0208 	add.w	r2, r7, #8
 800729e:	4610      	mov	r0, r2
 80072a0:	4798      	blx	r3
 80072a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072a4:	e029      	b.n	80072fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80072a6:	6839      	ldr	r1, [r7, #0]
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fa2a 	bl	8007702 <USBD_CtlError>
        err++;
 80072ae:	7afb      	ldrb	r3, [r7, #11]
 80072b0:	3301      	adds	r3, #1
 80072b2:	72fb      	strb	r3, [r7, #11]
      break;
 80072b4:	e021      	b.n	80072fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	7c1b      	ldrb	r3, [r3, #16]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10d      	bne.n	80072da <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c6:	f107 0208 	add.w	r2, r7, #8
 80072ca:	4610      	mov	r0, r2
 80072cc:	4798      	blx	r3
 80072ce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	3301      	adds	r3, #1
 80072d4:	2207      	movs	r2, #7
 80072d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072d8:	e00f      	b.n	80072fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80072da:	6839      	ldr	r1, [r7, #0]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fa10 	bl	8007702 <USBD_CtlError>
        err++;
 80072e2:	7afb      	ldrb	r3, [r7, #11]
 80072e4:	3301      	adds	r3, #1
 80072e6:	72fb      	strb	r3, [r7, #11]
      break;
 80072e8:	e007      	b.n	80072fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80072ea:	6839      	ldr	r1, [r7, #0]
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fa08 	bl	8007702 <USBD_CtlError>
      err++;
 80072f2:	7afb      	ldrb	r3, [r7, #11]
 80072f4:	3301      	adds	r3, #1
 80072f6:	72fb      	strb	r3, [r7, #11]
      break;
 80072f8:	bf00      	nop
  }

  if (err != 0U)
 80072fa:	7afb      	ldrb	r3, [r7, #11]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d11e      	bne.n	800733e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	88db      	ldrh	r3, [r3, #6]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d016      	beq.n	8007336 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007308:	893b      	ldrh	r3, [r7, #8]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00e      	beq.n	800732c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	88da      	ldrh	r2, [r3, #6]
 8007312:	893b      	ldrh	r3, [r7, #8]
 8007314:	4293      	cmp	r3, r2
 8007316:	bf28      	it	cs
 8007318:	4613      	movcs	r3, r2
 800731a:	b29b      	uxth	r3, r3
 800731c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800731e:	893b      	ldrh	r3, [r7, #8]
 8007320:	461a      	mov	r2, r3
 8007322:	68f9      	ldr	r1, [r7, #12]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fa69 	bl	80077fc <USBD_CtlSendData>
 800732a:	e009      	b.n	8007340 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800732c:	6839      	ldr	r1, [r7, #0]
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f9e7 	bl	8007702 <USBD_CtlError>
 8007334:	e004      	b.n	8007340 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 faba 	bl	80078b0 <USBD_CtlSendStatus>
 800733c:	e000      	b.n	8007340 <USBD_GetDescriptor+0x2cc>
    return;
 800733e:	bf00      	nop
  }
}
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop

08007348 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	889b      	ldrh	r3, [r3, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d131      	bne.n	80073be <USBD_SetAddress+0x76>
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	88db      	ldrh	r3, [r3, #6]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d12d      	bne.n	80073be <USBD_SetAddress+0x76>
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	885b      	ldrh	r3, [r3, #2]
 8007366:	2b7f      	cmp	r3, #127	@ 0x7f
 8007368:	d829      	bhi.n	80073be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	885b      	ldrh	r3, [r3, #2]
 800736e:	b2db      	uxtb	r3, r3
 8007370:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007374:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b03      	cmp	r3, #3
 8007380:	d104      	bne.n	800738c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f9bc 	bl	8007702 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800738a:	e01d      	b.n	80073c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	7bfa      	ldrb	r2, [r7, #15]
 8007390:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007394:	7bfb      	ldrb	r3, [r7, #15]
 8007396:	4619      	mov	r1, r3
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 feeb 	bl	8008174 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fa86 	bl	80078b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d004      	beq.n	80073b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2202      	movs	r2, #2
 80073ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073b2:	e009      	b.n	80073c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073bc:	e004      	b.n	80073c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80073be:	6839      	ldr	r1, [r7, #0]
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f99e 	bl	8007702 <USBD_CtlError>
  }
}
 80073c6:	bf00      	nop
 80073c8:	bf00      	nop
 80073ca:	3710      	adds	r7, #16
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	885b      	ldrh	r3, [r3, #2]
 80073e2:	b2da      	uxtb	r2, r3
 80073e4:	4b4e      	ldr	r3, [pc, #312]	@ (8007520 <USBD_SetConfig+0x150>)
 80073e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80073e8:	4b4d      	ldr	r3, [pc, #308]	@ (8007520 <USBD_SetConfig+0x150>)
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d905      	bls.n	80073fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80073f0:	6839      	ldr	r1, [r7, #0]
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f985 	bl	8007702 <USBD_CtlError>
    return USBD_FAIL;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e08c      	b.n	8007516 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b02      	cmp	r3, #2
 8007406:	d002      	beq.n	800740e <USBD_SetConfig+0x3e>
 8007408:	2b03      	cmp	r3, #3
 800740a:	d029      	beq.n	8007460 <USBD_SetConfig+0x90>
 800740c:	e075      	b.n	80074fa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800740e:	4b44      	ldr	r3, [pc, #272]	@ (8007520 <USBD_SetConfig+0x150>)
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d020      	beq.n	8007458 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007416:	4b42      	ldr	r3, [pc, #264]	@ (8007520 <USBD_SetConfig+0x150>)
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	461a      	mov	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007420:	4b3f      	ldr	r3, [pc, #252]	@ (8007520 <USBD_SetConfig+0x150>)
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	4619      	mov	r1, r3
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7fe ffe3 	bl	80063f2 <USBD_SetClassConfig>
 800742c:	4603      	mov	r3, r0
 800742e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007430:	7bfb      	ldrb	r3, [r7, #15]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d008      	beq.n	8007448 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007436:	6839      	ldr	r1, [r7, #0]
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f962 	bl	8007702 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2202      	movs	r2, #2
 8007442:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007446:	e065      	b.n	8007514 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 fa31 	bl	80078b0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2203      	movs	r2, #3
 8007452:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007456:	e05d      	b.n	8007514 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fa29 	bl	80078b0 <USBD_CtlSendStatus>
      break;
 800745e:	e059      	b.n	8007514 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007460:	4b2f      	ldr	r3, [pc, #188]	@ (8007520 <USBD_SetConfig+0x150>)
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d112      	bne.n	800748e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2202      	movs	r2, #2
 800746c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007470:	4b2b      	ldr	r3, [pc, #172]	@ (8007520 <USBD_SetConfig+0x150>)
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	461a      	mov	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800747a:	4b29      	ldr	r3, [pc, #164]	@ (8007520 <USBD_SetConfig+0x150>)
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	4619      	mov	r1, r3
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f7fe ffd2 	bl	800642a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fa12 	bl	80078b0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800748c:	e042      	b.n	8007514 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800748e:	4b24      	ldr	r3, [pc, #144]	@ (8007520 <USBD_SetConfig+0x150>)
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	461a      	mov	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	429a      	cmp	r2, r3
 800749a:	d02a      	beq.n	80074f2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	4619      	mov	r1, r3
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f7fe ffc0 	bl	800642a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80074aa:	4b1d      	ldr	r3, [pc, #116]	@ (8007520 <USBD_SetConfig+0x150>)
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	461a      	mov	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80074b4:	4b1a      	ldr	r3, [pc, #104]	@ (8007520 <USBD_SetConfig+0x150>)
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	4619      	mov	r1, r3
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f7fe ff99 	bl	80063f2 <USBD_SetClassConfig>
 80074c0:	4603      	mov	r3, r0
 80074c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00f      	beq.n	80074ea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80074ca:	6839      	ldr	r1, [r7, #0]
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 f918 	bl	8007702 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	4619      	mov	r1, r3
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7fe ffa5 	bl	800642a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2202      	movs	r2, #2
 80074e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80074e8:	e014      	b.n	8007514 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f9e0 	bl	80078b0 <USBD_CtlSendStatus>
      break;
 80074f0:	e010      	b.n	8007514 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f9dc 	bl	80078b0 <USBD_CtlSendStatus>
      break;
 80074f8:	e00c      	b.n	8007514 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80074fa:	6839      	ldr	r1, [r7, #0]
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f900 	bl	8007702 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007502:	4b07      	ldr	r3, [pc, #28]	@ (8007520 <USBD_SetConfig+0x150>)
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	4619      	mov	r1, r3
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f7fe ff8e 	bl	800642a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800750e:	2303      	movs	r3, #3
 8007510:	73fb      	strb	r3, [r7, #15]
      break;
 8007512:	bf00      	nop
  }

  return ret;
 8007514:	7bfb      	ldrb	r3, [r7, #15]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	200001cc 	.word	0x200001cc

08007524 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	88db      	ldrh	r3, [r3, #6]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d004      	beq.n	8007540 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f8e2 	bl	8007702 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800753e:	e023      	b.n	8007588 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007546:	b2db      	uxtb	r3, r3
 8007548:	2b02      	cmp	r3, #2
 800754a:	dc02      	bgt.n	8007552 <USBD_GetConfig+0x2e>
 800754c:	2b00      	cmp	r3, #0
 800754e:	dc03      	bgt.n	8007558 <USBD_GetConfig+0x34>
 8007550:	e015      	b.n	800757e <USBD_GetConfig+0x5a>
 8007552:	2b03      	cmp	r3, #3
 8007554:	d00b      	beq.n	800756e <USBD_GetConfig+0x4a>
 8007556:	e012      	b.n	800757e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	3308      	adds	r3, #8
 8007562:	2201      	movs	r2, #1
 8007564:	4619      	mov	r1, r3
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f948 	bl	80077fc <USBD_CtlSendData>
        break;
 800756c:	e00c      	b.n	8007588 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	3304      	adds	r3, #4
 8007572:	2201      	movs	r2, #1
 8007574:	4619      	mov	r1, r3
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f940 	bl	80077fc <USBD_CtlSendData>
        break;
 800757c:	e004      	b.n	8007588 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f8be 	bl	8007702 <USBD_CtlError>
        break;
 8007586:	bf00      	nop
}
 8007588:	bf00      	nop
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	3b01      	subs	r3, #1
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d81e      	bhi.n	80075e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	88db      	ldrh	r3, [r3, #6]
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d004      	beq.n	80075ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f8a5 	bl	8007702 <USBD_CtlError>
        break;
 80075b8:	e01a      	b.n	80075f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d005      	beq.n	80075d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	f043 0202 	orr.w	r2, r3, #2
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	330c      	adds	r3, #12
 80075da:	2202      	movs	r2, #2
 80075dc:	4619      	mov	r1, r3
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 f90c 	bl	80077fc <USBD_CtlSendData>
      break;
 80075e4:	e004      	b.n	80075f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80075e6:	6839      	ldr	r1, [r7, #0]
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f88a 	bl	8007702 <USBD_CtlError>
      break;
 80075ee:	bf00      	nop
  }
}
 80075f0:	bf00      	nop
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	885b      	ldrh	r3, [r3, #2]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d107      	bne.n	800761a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2201      	movs	r2, #1
 800760e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f94c 	bl	80078b0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007618:	e013      	b.n	8007642 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	885b      	ldrh	r3, [r3, #2]
 800761e:	2b02      	cmp	r3, #2
 8007620:	d10b      	bne.n	800763a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	889b      	ldrh	r3, [r3, #4]
 8007626:	0a1b      	lsrs	r3, r3, #8
 8007628:	b29b      	uxth	r3, r3
 800762a:	b2da      	uxtb	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 f93c 	bl	80078b0 <USBD_CtlSendStatus>
}
 8007638:	e003      	b.n	8007642 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800763a:	6839      	ldr	r1, [r7, #0]
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f860 	bl	8007702 <USBD_CtlError>
}
 8007642:	bf00      	nop
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b082      	sub	sp, #8
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800765a:	b2db      	uxtb	r3, r3
 800765c:	3b01      	subs	r3, #1
 800765e:	2b02      	cmp	r3, #2
 8007660:	d80b      	bhi.n	800767a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	885b      	ldrh	r3, [r3, #2]
 8007666:	2b01      	cmp	r3, #1
 8007668:	d10c      	bne.n	8007684 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f91c 	bl	80078b0 <USBD_CtlSendStatus>
      }
      break;
 8007678:	e004      	b.n	8007684 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800767a:	6839      	ldr	r1, [r7, #0]
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 f840 	bl	8007702 <USBD_CtlError>
      break;
 8007682:	e000      	b.n	8007686 <USBD_ClrFeature+0x3c>
      break;
 8007684:	bf00      	nop
  }
}
 8007686:	bf00      	nop
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b084      	sub	sp, #16
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
 8007696:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	781a      	ldrb	r2, [r3, #0]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	3301      	adds	r3, #1
 80076a8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	781a      	ldrb	r2, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	3301      	adds	r3, #1
 80076b6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f7ff fa40 	bl	8006b3e <SWAPBYTE>
 80076be:	4603      	mov	r3, r0
 80076c0:	461a      	mov	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	3301      	adds	r3, #1
 80076ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	3301      	adds	r3, #1
 80076d0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f7ff fa33 	bl	8006b3e <SWAPBYTE>
 80076d8:	4603      	mov	r3, r0
 80076da:	461a      	mov	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	3301      	adds	r3, #1
 80076e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	3301      	adds	r3, #1
 80076ea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f7ff fa26 	bl	8006b3e <SWAPBYTE>
 80076f2:	4603      	mov	r3, r0
 80076f4:	461a      	mov	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	80da      	strh	r2, [r3, #6]
}
 80076fa:	bf00      	nop
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b082      	sub	sp, #8
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800770c:	2180      	movs	r1, #128	@ 0x80
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fcc6 	bl	80080a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007714:	2100      	movs	r1, #0
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fcc2 	bl	80080a0 <USBD_LL_StallEP>
}
 800771c:	bf00      	nop
 800771e:	3708      	adds	r7, #8
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b086      	sub	sp, #24
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007730:	2300      	movs	r3, #0
 8007732:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d042      	beq.n	80077c0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800773e:	6938      	ldr	r0, [r7, #16]
 8007740:	f000 f842 	bl	80077c8 <USBD_GetLen>
 8007744:	4603      	mov	r3, r0
 8007746:	3301      	adds	r3, #1
 8007748:	005b      	lsls	r3, r3, #1
 800774a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800774e:	d808      	bhi.n	8007762 <USBD_GetString+0x3e>
 8007750:	6938      	ldr	r0, [r7, #16]
 8007752:	f000 f839 	bl	80077c8 <USBD_GetLen>
 8007756:	4603      	mov	r3, r0
 8007758:	3301      	adds	r3, #1
 800775a:	b29b      	uxth	r3, r3
 800775c:	005b      	lsls	r3, r3, #1
 800775e:	b29a      	uxth	r2, r3
 8007760:	e001      	b.n	8007766 <USBD_GetString+0x42>
 8007762:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800776a:	7dfb      	ldrb	r3, [r7, #23]
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	4413      	add	r3, r2
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	7812      	ldrb	r2, [r2, #0]
 8007774:	701a      	strb	r2, [r3, #0]
  idx++;
 8007776:	7dfb      	ldrb	r3, [r7, #23]
 8007778:	3301      	adds	r3, #1
 800777a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800777c:	7dfb      	ldrb	r3, [r7, #23]
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	4413      	add	r3, r2
 8007782:	2203      	movs	r2, #3
 8007784:	701a      	strb	r2, [r3, #0]
  idx++;
 8007786:	7dfb      	ldrb	r3, [r7, #23]
 8007788:	3301      	adds	r3, #1
 800778a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800778c:	e013      	b.n	80077b6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800778e:	7dfb      	ldrb	r3, [r7, #23]
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	4413      	add	r3, r2
 8007794:	693a      	ldr	r2, [r7, #16]
 8007796:	7812      	ldrb	r2, [r2, #0]
 8007798:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	3301      	adds	r3, #1
 800779e:	613b      	str	r3, [r7, #16]
    idx++;
 80077a0:	7dfb      	ldrb	r3, [r7, #23]
 80077a2:	3301      	adds	r3, #1
 80077a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80077a6:	7dfb      	ldrb	r3, [r7, #23]
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	4413      	add	r3, r2
 80077ac:	2200      	movs	r2, #0
 80077ae:	701a      	strb	r2, [r3, #0]
    idx++;
 80077b0:	7dfb      	ldrb	r3, [r7, #23]
 80077b2:	3301      	adds	r3, #1
 80077b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1e7      	bne.n	800778e <USBD_GetString+0x6a>
 80077be:	e000      	b.n	80077c2 <USBD_GetString+0x9e>
    return;
 80077c0:	bf00      	nop
  }
}
 80077c2:	3718      	adds	r7, #24
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80077d0:	2300      	movs	r3, #0
 80077d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80077d8:	e005      	b.n	80077e6 <USBD_GetLen+0x1e>
  {
    len++;
 80077da:	7bfb      	ldrb	r3, [r7, #15]
 80077dc:	3301      	adds	r3, #1
 80077de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	3301      	adds	r3, #1
 80077e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1f5      	bne.n	80077da <USBD_GetLen+0x12>
  }

  return len;
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3714      	adds	r7, #20
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2202      	movs	r2, #2
 800780c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	2100      	movs	r1, #0
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f000 fcc5 	bl	80081b2 <USBD_LL_Transmit>

  return USBD_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b084      	sub	sp, #16
 8007836:	af00      	add	r7, sp, #0
 8007838:	60f8      	str	r0, [r7, #12]
 800783a:	60b9      	str	r1, [r7, #8]
 800783c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68ba      	ldr	r2, [r7, #8]
 8007842:	2100      	movs	r1, #0
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f000 fcb4 	bl	80081b2 <USBD_LL_Transmit>

  return USBD_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2203      	movs	r2, #3
 8007864:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	2100      	movs	r1, #0
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f000 fcb8 	bl	80081f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b084      	sub	sp, #16
 8007892:	af00      	add	r7, sp, #0
 8007894:	60f8      	str	r0, [r7, #12]
 8007896:	60b9      	str	r1, [r7, #8]
 8007898:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	2100      	movs	r1, #0
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f000 fca7 	bl	80081f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2204      	movs	r2, #4
 80078bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80078c0:	2300      	movs	r3, #0
 80078c2:	2200      	movs	r2, #0
 80078c4:	2100      	movs	r1, #0
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fc73 	bl	80081b2 <USBD_LL_Transmit>

  return USBD_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3708      	adds	r7, #8
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b082      	sub	sp, #8
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2205      	movs	r2, #5
 80078e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078e6:	2300      	movs	r3, #0
 80078e8:	2200      	movs	r2, #0
 80078ea:	2100      	movs	r1, #0
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fc81 	bl	80081f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3708      	adds	r7, #8
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007900:	2200      	movs	r2, #0
 8007902:	4912      	ldr	r1, [pc, #72]	@ (800794c <MX_USB_DEVICE_Init+0x50>)
 8007904:	4812      	ldr	r0, [pc, #72]	@ (8007950 <MX_USB_DEVICE_Init+0x54>)
 8007906:	f7fe fcf7 	bl	80062f8 <USBD_Init>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007910:	f7f9 f9be 	bl	8000c90 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007914:	490f      	ldr	r1, [pc, #60]	@ (8007954 <MX_USB_DEVICE_Init+0x58>)
 8007916:	480e      	ldr	r0, [pc, #56]	@ (8007950 <MX_USB_DEVICE_Init+0x54>)
 8007918:	f7fe fd1e 	bl	8006358 <USBD_RegisterClass>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007922:	f7f9 f9b5 	bl	8000c90 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007926:	490c      	ldr	r1, [pc, #48]	@ (8007958 <MX_USB_DEVICE_Init+0x5c>)
 8007928:	4809      	ldr	r0, [pc, #36]	@ (8007950 <MX_USB_DEVICE_Init+0x54>)
 800792a:	f7fe fc55 	bl	80061d8 <USBD_CDC_RegisterInterface>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d001      	beq.n	8007938 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007934:	f7f9 f9ac 	bl	8000c90 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007938:	4805      	ldr	r0, [pc, #20]	@ (8007950 <MX_USB_DEVICE_Init+0x54>)
 800793a:	f7fe fd43 	bl	80063c4 <USBD_Start>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d001      	beq.n	8007948 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007944:	f7f9 f9a4 	bl	8000c90 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007948:	bf00      	nop
 800794a:	bd80      	pop	{r7, pc}
 800794c:	200000ac 	.word	0x200000ac
 8007950:	200001d0 	.word	0x200001d0
 8007954:	20000018 	.word	0x20000018
 8007958:	20000098 	.word	0x20000098

0800795c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007960:	2200      	movs	r2, #0
 8007962:	4905      	ldr	r1, [pc, #20]	@ (8007978 <CDC_Init_FS+0x1c>)
 8007964:	4805      	ldr	r0, [pc, #20]	@ (800797c <CDC_Init_FS+0x20>)
 8007966:	f7fe fc51 	bl	800620c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800796a:	4905      	ldr	r1, [pc, #20]	@ (8007980 <CDC_Init_FS+0x24>)
 800796c:	4803      	ldr	r0, [pc, #12]	@ (800797c <CDC_Init_FS+0x20>)
 800796e:	f7fe fc6f 	bl	8006250 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007972:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007974:	4618      	mov	r0, r3
 8007976:	bd80      	pop	{r7, pc}
 8007978:	20000cac 	.word	0x20000cac
 800797c:	200001d0 	.word	0x200001d0
 8007980:	200004ac 	.word	0x200004ac

08007984 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007984:	b480      	push	{r7}
 8007986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007988:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800798a:	4618      	mov	r0, r3
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	4603      	mov	r3, r0
 800799c:	6039      	str	r1, [r7, #0]
 800799e:	71fb      	strb	r3, [r7, #7]
 80079a0:	4613      	mov	r3, r2
 80079a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80079a4:	79fb      	ldrb	r3, [r7, #7]
 80079a6:	2b23      	cmp	r3, #35	@ 0x23
 80079a8:	d84a      	bhi.n	8007a40 <CDC_Control_FS+0xac>
 80079aa:	a201      	add	r2, pc, #4	@ (adr r2, 80079b0 <CDC_Control_FS+0x1c>)
 80079ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b0:	08007a41 	.word	0x08007a41
 80079b4:	08007a41 	.word	0x08007a41
 80079b8:	08007a41 	.word	0x08007a41
 80079bc:	08007a41 	.word	0x08007a41
 80079c0:	08007a41 	.word	0x08007a41
 80079c4:	08007a41 	.word	0x08007a41
 80079c8:	08007a41 	.word	0x08007a41
 80079cc:	08007a41 	.word	0x08007a41
 80079d0:	08007a41 	.word	0x08007a41
 80079d4:	08007a41 	.word	0x08007a41
 80079d8:	08007a41 	.word	0x08007a41
 80079dc:	08007a41 	.word	0x08007a41
 80079e0:	08007a41 	.word	0x08007a41
 80079e4:	08007a41 	.word	0x08007a41
 80079e8:	08007a41 	.word	0x08007a41
 80079ec:	08007a41 	.word	0x08007a41
 80079f0:	08007a41 	.word	0x08007a41
 80079f4:	08007a41 	.word	0x08007a41
 80079f8:	08007a41 	.word	0x08007a41
 80079fc:	08007a41 	.word	0x08007a41
 8007a00:	08007a41 	.word	0x08007a41
 8007a04:	08007a41 	.word	0x08007a41
 8007a08:	08007a41 	.word	0x08007a41
 8007a0c:	08007a41 	.word	0x08007a41
 8007a10:	08007a41 	.word	0x08007a41
 8007a14:	08007a41 	.word	0x08007a41
 8007a18:	08007a41 	.word	0x08007a41
 8007a1c:	08007a41 	.word	0x08007a41
 8007a20:	08007a41 	.word	0x08007a41
 8007a24:	08007a41 	.word	0x08007a41
 8007a28:	08007a41 	.word	0x08007a41
 8007a2c:	08007a41 	.word	0x08007a41
 8007a30:	08007a41 	.word	0x08007a41
 8007a34:	08007a41 	.word	0x08007a41
 8007a38:	08007a41 	.word	0x08007a41
 8007a3c:	08007a41 	.word	0x08007a41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007a40:	bf00      	nop
  }

  return (USBD_OK);
 8007a42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007a5a:	6879      	ldr	r1, [r7, #4]
 8007a5c:	4805      	ldr	r0, [pc, #20]	@ (8007a74 <CDC_Receive_FS+0x24>)
 8007a5e:	f7fe fbf7 	bl	8006250 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007a62:	4804      	ldr	r0, [pc, #16]	@ (8007a74 <CDC_Receive_FS+0x24>)
 8007a64:	f7fe fc12 	bl	800628c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007a68:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3708      	adds	r7, #8
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	200001d0 	.word	0x200001d0

08007a78 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b087      	sub	sp, #28
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	4613      	mov	r3, r2
 8007a84:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007a86:	2300      	movs	r3, #0
 8007a88:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007a8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	371c      	adds	r7, #28
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
	...

08007a9c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	6039      	str	r1, [r7, #0]
 8007aa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	2212      	movs	r2, #18
 8007aac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007aae:	4b03      	ldr	r3, [pc, #12]	@ (8007abc <USBD_FS_DeviceDescriptor+0x20>)
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr
 8007abc:	200000c8 	.word	0x200000c8

08007ac0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	6039      	str	r1, [r7, #0]
 8007aca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	2204      	movs	r2, #4
 8007ad0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007ad2:	4b03      	ldr	r3, [pc, #12]	@ (8007ae0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr
 8007ae0:	200000dc 	.word	0x200000dc

08007ae4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	4603      	mov	r3, r0
 8007aec:	6039      	str	r1, [r7, #0]
 8007aee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007af0:	79fb      	ldrb	r3, [r7, #7]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d105      	bne.n	8007b02 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	4907      	ldr	r1, [pc, #28]	@ (8007b18 <USBD_FS_ProductStrDescriptor+0x34>)
 8007afa:	4808      	ldr	r0, [pc, #32]	@ (8007b1c <USBD_FS_ProductStrDescriptor+0x38>)
 8007afc:	f7ff fe12 	bl	8007724 <USBD_GetString>
 8007b00:	e004      	b.n	8007b0c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b02:	683a      	ldr	r2, [r7, #0]
 8007b04:	4904      	ldr	r1, [pc, #16]	@ (8007b18 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b06:	4805      	ldr	r0, [pc, #20]	@ (8007b1c <USBD_FS_ProductStrDescriptor+0x38>)
 8007b08:	f7ff fe0c 	bl	8007724 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b0c:	4b02      	ldr	r3, [pc, #8]	@ (8007b18 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3708      	adds	r7, #8
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	200014ac 	.word	0x200014ac
 8007b1c:	08008354 	.word	0x08008354

08007b20 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	4603      	mov	r3, r0
 8007b28:	6039      	str	r1, [r7, #0]
 8007b2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b2c:	683a      	ldr	r2, [r7, #0]
 8007b2e:	4904      	ldr	r1, [pc, #16]	@ (8007b40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b30:	4804      	ldr	r0, [pc, #16]	@ (8007b44 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b32:	f7ff fdf7 	bl	8007724 <USBD_GetString>
  return USBD_StrDesc;
 8007b36:	4b02      	ldr	r3, [pc, #8]	@ (8007b40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3708      	adds	r7, #8
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	200014ac 	.word	0x200014ac
 8007b44:	0800836c 	.word	0x0800836c

08007b48 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	4603      	mov	r3, r0
 8007b50:	6039      	str	r1, [r7, #0]
 8007b52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	221a      	movs	r2, #26
 8007b58:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b5a:	f000 f843 	bl	8007be4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b5e:	4b02      	ldr	r3, [pc, #8]	@ (8007b68 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3708      	adds	r7, #8
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	200000e0 	.word	0x200000e0

08007b6c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	4603      	mov	r3, r0
 8007b74:	6039      	str	r1, [r7, #0]
 8007b76:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b78:	79fb      	ldrb	r3, [r7, #7]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d105      	bne.n	8007b8a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b7e:	683a      	ldr	r2, [r7, #0]
 8007b80:	4907      	ldr	r1, [pc, #28]	@ (8007ba0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b82:	4808      	ldr	r0, [pc, #32]	@ (8007ba4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b84:	f7ff fdce 	bl	8007724 <USBD_GetString>
 8007b88:	e004      	b.n	8007b94 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b8a:	683a      	ldr	r2, [r7, #0]
 8007b8c:	4904      	ldr	r1, [pc, #16]	@ (8007ba0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b8e:	4805      	ldr	r0, [pc, #20]	@ (8007ba4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b90:	f7ff fdc8 	bl	8007724 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b94:	4b02      	ldr	r3, [pc, #8]	@ (8007ba0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	200014ac 	.word	0x200014ac
 8007ba4:	08008380 	.word	0x08008380

08007ba8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	4603      	mov	r3, r0
 8007bb0:	6039      	str	r1, [r7, #0]
 8007bb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bb4:	79fb      	ldrb	r3, [r7, #7]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d105      	bne.n	8007bc6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bba:	683a      	ldr	r2, [r7, #0]
 8007bbc:	4907      	ldr	r1, [pc, #28]	@ (8007bdc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bbe:	4808      	ldr	r0, [pc, #32]	@ (8007be0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bc0:	f7ff fdb0 	bl	8007724 <USBD_GetString>
 8007bc4:	e004      	b.n	8007bd0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bc6:	683a      	ldr	r2, [r7, #0]
 8007bc8:	4904      	ldr	r1, [pc, #16]	@ (8007bdc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bca:	4805      	ldr	r0, [pc, #20]	@ (8007be0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bcc:	f7ff fdaa 	bl	8007724 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bd0:	4b02      	ldr	r3, [pc, #8]	@ (8007bdc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	200014ac 	.word	0x200014ac
 8007be0:	0800838c 	.word	0x0800838c

08007be4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007bea:	4b0f      	ldr	r3, [pc, #60]	@ (8007c28 <Get_SerialNum+0x44>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8007c2c <Get_SerialNum+0x48>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8007c30 <Get_SerialNum+0x4c>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4413      	add	r3, r2
 8007c02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d009      	beq.n	8007c1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007c0a:	2208      	movs	r2, #8
 8007c0c:	4909      	ldr	r1, [pc, #36]	@ (8007c34 <Get_SerialNum+0x50>)
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f000 f814 	bl	8007c3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c14:	2204      	movs	r2, #4
 8007c16:	4908      	ldr	r1, [pc, #32]	@ (8007c38 <Get_SerialNum+0x54>)
 8007c18:	68b8      	ldr	r0, [r7, #8]
 8007c1a:	f000 f80f 	bl	8007c3c <IntToUnicode>
  }
}
 8007c1e:	bf00      	nop
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	1fff7a10 	.word	0x1fff7a10
 8007c2c:	1fff7a14 	.word	0x1fff7a14
 8007c30:	1fff7a18 	.word	0x1fff7a18
 8007c34:	200000e2 	.word	0x200000e2
 8007c38:	200000f2 	.word	0x200000f2

08007c3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b087      	sub	sp, #28
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	4613      	mov	r3, r2
 8007c48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c4e:	2300      	movs	r3, #0
 8007c50:	75fb      	strb	r3, [r7, #23]
 8007c52:	e027      	b.n	8007ca4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	0f1b      	lsrs	r3, r3, #28
 8007c58:	2b09      	cmp	r3, #9
 8007c5a:	d80b      	bhi.n	8007c74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	0f1b      	lsrs	r3, r3, #28
 8007c60:	b2da      	uxtb	r2, r3
 8007c62:	7dfb      	ldrb	r3, [r7, #23]
 8007c64:	005b      	lsls	r3, r3, #1
 8007c66:	4619      	mov	r1, r3
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	440b      	add	r3, r1
 8007c6c:	3230      	adds	r2, #48	@ 0x30
 8007c6e:	b2d2      	uxtb	r2, r2
 8007c70:	701a      	strb	r2, [r3, #0]
 8007c72:	e00a      	b.n	8007c8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	0f1b      	lsrs	r3, r3, #28
 8007c78:	b2da      	uxtb	r2, r3
 8007c7a:	7dfb      	ldrb	r3, [r7, #23]
 8007c7c:	005b      	lsls	r3, r3, #1
 8007c7e:	4619      	mov	r1, r3
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	440b      	add	r3, r1
 8007c84:	3237      	adds	r2, #55	@ 0x37
 8007c86:	b2d2      	uxtb	r2, r2
 8007c88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	011b      	lsls	r3, r3, #4
 8007c8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c90:	7dfb      	ldrb	r3, [r7, #23]
 8007c92:	005b      	lsls	r3, r3, #1
 8007c94:	3301      	adds	r3, #1
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	4413      	add	r3, r2
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	75fb      	strb	r3, [r7, #23]
 8007ca4:	7dfa      	ldrb	r2, [r7, #23]
 8007ca6:	79fb      	ldrb	r3, [r7, #7]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d3d3      	bcc.n	8007c54 <IntToUnicode+0x18>
  }
}
 8007cac:	bf00      	nop
 8007cae:	bf00      	nop
 8007cb0:	371c      	adds	r7, #28
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
	...

08007cbc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b08a      	sub	sp, #40	@ 0x28
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cc4:	f107 0314 	add.w	r3, r7, #20
 8007cc8:	2200      	movs	r2, #0
 8007cca:	601a      	str	r2, [r3, #0]
 8007ccc:	605a      	str	r2, [r3, #4]
 8007cce:	609a      	str	r2, [r3, #8]
 8007cd0:	60da      	str	r2, [r3, #12]
 8007cd2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007cdc:	d13a      	bne.n	8007d54 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cde:	2300      	movs	r3, #0
 8007ce0:	613b      	str	r3, [r7, #16]
 8007ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8007d5c <HAL_PCD_MspInit+0xa0>)
 8007ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ce6:	4a1d      	ldr	r2, [pc, #116]	@ (8007d5c <HAL_PCD_MspInit+0xa0>)
 8007ce8:	f043 0301 	orr.w	r3, r3, #1
 8007cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8007cee:	4b1b      	ldr	r3, [pc, #108]	@ (8007d5c <HAL_PCD_MspInit+0xa0>)
 8007cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cf2:	f003 0301 	and.w	r3, r3, #1
 8007cf6:	613b      	str	r3, [r7, #16]
 8007cf8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007cfa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d00:	2302      	movs	r3, #2
 8007d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d04:	2300      	movs	r3, #0
 8007d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007d0c:	230a      	movs	r3, #10
 8007d0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d10:	f107 0314 	add.w	r3, r7, #20
 8007d14:	4619      	mov	r1, r3
 8007d16:	4812      	ldr	r0, [pc, #72]	@ (8007d60 <HAL_PCD_MspInit+0xa4>)
 8007d18:	f7f9 fa78 	bl	800120c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8007d5c <HAL_PCD_MspInit+0xa0>)
 8007d1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d20:	4a0e      	ldr	r2, [pc, #56]	@ (8007d5c <HAL_PCD_MspInit+0xa0>)
 8007d22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d26:	6353      	str	r3, [r2, #52]	@ 0x34
 8007d28:	2300      	movs	r3, #0
 8007d2a:	60fb      	str	r3, [r7, #12]
 8007d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8007d5c <HAL_PCD_MspInit+0xa0>)
 8007d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d30:	4a0a      	ldr	r2, [pc, #40]	@ (8007d5c <HAL_PCD_MspInit+0xa0>)
 8007d32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007d36:	6453      	str	r3, [r2, #68]	@ 0x44
 8007d38:	4b08      	ldr	r3, [pc, #32]	@ (8007d5c <HAL_PCD_MspInit+0xa0>)
 8007d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d40:	60fb      	str	r3, [r7, #12]
 8007d42:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007d44:	2200      	movs	r2, #0
 8007d46:	2100      	movs	r1, #0
 8007d48:	2043      	movs	r0, #67	@ 0x43
 8007d4a:	f7f9 fa28 	bl	800119e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007d4e:	2043      	movs	r0, #67	@ 0x43
 8007d50:	f7f9 fa41 	bl	80011d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007d54:	bf00      	nop
 8007d56:	3728      	adds	r7, #40	@ 0x28
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	40023800 	.word	0x40023800
 8007d60:	40020000 	.word	0x40020000

08007d64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007d78:	4619      	mov	r1, r3
 8007d7a:	4610      	mov	r0, r2
 8007d7c:	f7fe fb6f 	bl	800645e <USBD_LL_SetupStage>
}
 8007d80:	bf00      	nop
 8007d82:	3708      	adds	r7, #8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	460b      	mov	r3, r1
 8007d92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007d9a:	78fa      	ldrb	r2, [r7, #3]
 8007d9c:	6879      	ldr	r1, [r7, #4]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	00db      	lsls	r3, r3, #3
 8007da2:	4413      	add	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	440b      	add	r3, r1
 8007da8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	78fb      	ldrb	r3, [r7, #3]
 8007db0:	4619      	mov	r1, r3
 8007db2:	f7fe fba9 	bl	8006508 <USBD_LL_DataOutStage>
}
 8007db6:	bf00      	nop
 8007db8:	3708      	adds	r7, #8
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b082      	sub	sp, #8
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007dd0:	78fa      	ldrb	r2, [r7, #3]
 8007dd2:	6879      	ldr	r1, [r7, #4]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	00db      	lsls	r3, r3, #3
 8007dd8:	4413      	add	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	440b      	add	r3, r1
 8007dde:	3320      	adds	r3, #32
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	78fb      	ldrb	r3, [r7, #3]
 8007de4:	4619      	mov	r1, r3
 8007de6:	f7fe fc42 	bl	800666e <USBD_LL_DataInStage>
}
 8007dea:	bf00      	nop
 8007dec:	3708      	adds	r7, #8
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b082      	sub	sp, #8
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7fe fd7c 	bl	80068fe <USBD_LL_SOF>
}
 8007e06:	bf00      	nop
 8007e08:	3708      	adds	r7, #8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b084      	sub	sp, #16
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007e16:	2301      	movs	r3, #1
 8007e18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	79db      	ldrb	r3, [r3, #7]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d102      	bne.n	8007e28 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007e22:	2300      	movs	r3, #0
 8007e24:	73fb      	strb	r3, [r7, #15]
 8007e26:	e008      	b.n	8007e3a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	79db      	ldrb	r3, [r3, #7]
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d102      	bne.n	8007e36 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007e30:	2301      	movs	r3, #1
 8007e32:	73fb      	strb	r3, [r7, #15]
 8007e34:	e001      	b.n	8007e3a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007e36:	f7f8 ff2b 	bl	8000c90 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e40:	7bfa      	ldrb	r2, [r7, #15]
 8007e42:	4611      	mov	r1, r2
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7fe fd16 	bl	8006876 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7fe fcbe 	bl	80067d2 <USBD_LL_Reset>
}
 8007e56:	bf00      	nop
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
	...

08007e60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7fe fd11 	bl	8006896 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	6812      	ldr	r2, [r2, #0]
 8007e82:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007e86:	f043 0301 	orr.w	r3, r3, #1
 8007e8a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	7adb      	ldrb	r3, [r3, #11]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d005      	beq.n	8007ea0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e94:	4b04      	ldr	r3, [pc, #16]	@ (8007ea8 <HAL_PCD_SuspendCallback+0x48>)
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	4a03      	ldr	r2, [pc, #12]	@ (8007ea8 <HAL_PCD_SuspendCallback+0x48>)
 8007e9a:	f043 0306 	orr.w	r3, r3, #6
 8007e9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ea0:	bf00      	nop
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	e000ed00 	.word	0xe000ed00

08007eac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7fe fd07 	bl	80068ce <USBD_LL_Resume>
}
 8007ec0:	bf00      	nop
 8007ec2:	3708      	adds	r7, #8
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007eda:	78fa      	ldrb	r2, [r7, #3]
 8007edc:	4611      	mov	r1, r2
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fe fd5f 	bl	80069a2 <USBD_LL_IsoOUTIncomplete>
}
 8007ee4:	bf00      	nop
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007efe:	78fa      	ldrb	r2, [r7, #3]
 8007f00:	4611      	mov	r1, r2
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7fe fd1b 	bl	800693e <USBD_LL_IsoINIncomplete>
}
 8007f08:	bf00      	nop
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7fe fd71 	bl	8006a06 <USBD_LL_DevConnected>
}
 8007f24:	bf00      	nop
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7fe fd6e 	bl	8006a1c <USBD_LL_DevDisconnected>
}
 8007f40:	bf00      	nop
 8007f42:	3708      	adds	r7, #8
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d13c      	bne.n	8007fd2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007f58:	4a20      	ldr	r2, [pc, #128]	@ (8007fdc <USBD_LL_Init+0x94>)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a1e      	ldr	r2, [pc, #120]	@ (8007fdc <USBD_LL_Init+0x94>)
 8007f64:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007f68:	4b1c      	ldr	r3, [pc, #112]	@ (8007fdc <USBD_LL_Init+0x94>)
 8007f6a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007f6e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007f70:	4b1a      	ldr	r3, [pc, #104]	@ (8007fdc <USBD_LL_Init+0x94>)
 8007f72:	2204      	movs	r2, #4
 8007f74:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007f76:	4b19      	ldr	r3, [pc, #100]	@ (8007fdc <USBD_LL_Init+0x94>)
 8007f78:	2202      	movs	r2, #2
 8007f7a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007f7c:	4b17      	ldr	r3, [pc, #92]	@ (8007fdc <USBD_LL_Init+0x94>)
 8007f7e:	2200      	movs	r2, #0
 8007f80:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007f82:	4b16      	ldr	r3, [pc, #88]	@ (8007fdc <USBD_LL_Init+0x94>)
 8007f84:	2202      	movs	r2, #2
 8007f86:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007f88:	4b14      	ldr	r3, [pc, #80]	@ (8007fdc <USBD_LL_Init+0x94>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007f8e:	4b13      	ldr	r3, [pc, #76]	@ (8007fdc <USBD_LL_Init+0x94>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007f94:	4b11      	ldr	r3, [pc, #68]	@ (8007fdc <USBD_LL_Init+0x94>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007f9a:	4b10      	ldr	r3, [pc, #64]	@ (8007fdc <USBD_LL_Init+0x94>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8007fdc <USBD_LL_Init+0x94>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007fa6:	480d      	ldr	r0, [pc, #52]	@ (8007fdc <USBD_LL_Init+0x94>)
 8007fa8:	f7fa faf8 	bl	800259c <HAL_PCD_Init>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007fb2:	f7f8 fe6d 	bl	8000c90 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007fb6:	2180      	movs	r1, #128	@ 0x80
 8007fb8:	4808      	ldr	r0, [pc, #32]	@ (8007fdc <USBD_LL_Init+0x94>)
 8007fba:	f7fb fd24 	bl	8003a06 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007fbe:	2240      	movs	r2, #64	@ 0x40
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	4806      	ldr	r0, [pc, #24]	@ (8007fdc <USBD_LL_Init+0x94>)
 8007fc4:	f7fb fcd8 	bl	8003978 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007fc8:	2280      	movs	r2, #128	@ 0x80
 8007fca:	2101      	movs	r1, #1
 8007fcc:	4803      	ldr	r0, [pc, #12]	@ (8007fdc <USBD_LL_Init+0x94>)
 8007fce:	f7fb fcd3 	bl	8003978 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	200016ac 	.word	0x200016ac

08007fe0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fec:	2300      	movs	r3, #0
 8007fee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7fa fbdf 	bl	80027ba <HAL_PCD_Start>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008000:	7bfb      	ldrb	r3, [r7, #15]
 8008002:	4618      	mov	r0, r3
 8008004:	f000 f942 	bl	800828c <USBD_Get_USB_Status>
 8008008:	4603      	mov	r3, r0
 800800a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800800c:	7bbb      	ldrb	r3, [r7, #14]
}
 800800e:	4618      	mov	r0, r3
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b084      	sub	sp, #16
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
 800801e:	4608      	mov	r0, r1
 8008020:	4611      	mov	r1, r2
 8008022:	461a      	mov	r2, r3
 8008024:	4603      	mov	r3, r0
 8008026:	70fb      	strb	r3, [r7, #3]
 8008028:	460b      	mov	r3, r1
 800802a:	70bb      	strb	r3, [r7, #2]
 800802c:	4613      	mov	r3, r2
 800802e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008030:	2300      	movs	r3, #0
 8008032:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800803e:	78bb      	ldrb	r3, [r7, #2]
 8008040:	883a      	ldrh	r2, [r7, #0]
 8008042:	78f9      	ldrb	r1, [r7, #3]
 8008044:	f7fb f8b3 	bl	80031ae <HAL_PCD_EP_Open>
 8008048:	4603      	mov	r3, r0
 800804a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800804c:	7bfb      	ldrb	r3, [r7, #15]
 800804e:	4618      	mov	r0, r3
 8008050:	f000 f91c 	bl	800828c <USBD_Get_USB_Status>
 8008054:	4603      	mov	r3, r0
 8008056:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008058:	7bbb      	ldrb	r3, [r7, #14]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	460b      	mov	r3, r1
 800806c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008072:	2300      	movs	r3, #0
 8008074:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800807c:	78fa      	ldrb	r2, [r7, #3]
 800807e:	4611      	mov	r1, r2
 8008080:	4618      	mov	r0, r3
 8008082:	f7fb f8fe 	bl	8003282 <HAL_PCD_EP_Close>
 8008086:	4603      	mov	r3, r0
 8008088:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800808a:	7bfb      	ldrb	r3, [r7, #15]
 800808c:	4618      	mov	r0, r3
 800808e:	f000 f8fd 	bl	800828c <USBD_Get_USB_Status>
 8008092:	4603      	mov	r3, r0
 8008094:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008096:	7bbb      	ldrb	r3, [r7, #14]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	460b      	mov	r3, r1
 80080aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080b0:	2300      	movs	r3, #0
 80080b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80080ba:	78fa      	ldrb	r2, [r7, #3]
 80080bc:	4611      	mov	r1, r2
 80080be:	4618      	mov	r0, r3
 80080c0:	f7fb f9b6 	bl	8003430 <HAL_PCD_EP_SetStall>
 80080c4:	4603      	mov	r3, r0
 80080c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 f8de 	bl	800828c <USBD_Get_USB_Status>
 80080d0:	4603      	mov	r3, r0
 80080d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b084      	sub	sp, #16
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	460b      	mov	r3, r1
 80080e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ea:	2300      	movs	r3, #0
 80080ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080ee:	2300      	movs	r3, #0
 80080f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80080f8:	78fa      	ldrb	r2, [r7, #3]
 80080fa:	4611      	mov	r1, r2
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7fb f9fa 	bl	80034f6 <HAL_PCD_EP_ClrStall>
 8008102:	4603      	mov	r3, r0
 8008104:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008106:	7bfb      	ldrb	r3, [r7, #15]
 8008108:	4618      	mov	r0, r3
 800810a:	f000 f8bf 	bl	800828c <USBD_Get_USB_Status>
 800810e:	4603      	mov	r3, r0
 8008110:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008112:	7bbb      	ldrb	r3, [r7, #14]
}
 8008114:	4618      	mov	r0, r3
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	460b      	mov	r3, r1
 8008126:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800812e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008130:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008134:	2b00      	cmp	r3, #0
 8008136:	da0b      	bge.n	8008150 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008138:	78fb      	ldrb	r3, [r7, #3]
 800813a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800813e:	68f9      	ldr	r1, [r7, #12]
 8008140:	4613      	mov	r3, r2
 8008142:	00db      	lsls	r3, r3, #3
 8008144:	4413      	add	r3, r2
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	440b      	add	r3, r1
 800814a:	3316      	adds	r3, #22
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	e00b      	b.n	8008168 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008150:	78fb      	ldrb	r3, [r7, #3]
 8008152:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008156:	68f9      	ldr	r1, [r7, #12]
 8008158:	4613      	mov	r3, r2
 800815a:	00db      	lsls	r3, r3, #3
 800815c:	4413      	add	r3, r2
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	440b      	add	r3, r1
 8008162:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008166:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008168:	4618      	mov	r0, r3
 800816a:	3714      	adds	r7, #20
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	460b      	mov	r3, r1
 800817e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008184:	2300      	movs	r3, #0
 8008186:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800818e:	78fa      	ldrb	r2, [r7, #3]
 8008190:	4611      	mov	r1, r2
 8008192:	4618      	mov	r0, r3
 8008194:	f7fa ffe7 	bl	8003166 <HAL_PCD_SetAddress>
 8008198:	4603      	mov	r3, r0
 800819a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800819c:	7bfb      	ldrb	r3, [r7, #15]
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 f874 	bl	800828c <USBD_Get_USB_Status>
 80081a4:	4603      	mov	r3, r0
 80081a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b086      	sub	sp, #24
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	60f8      	str	r0, [r7, #12]
 80081ba:	607a      	str	r2, [r7, #4]
 80081bc:	603b      	str	r3, [r7, #0]
 80081be:	460b      	mov	r3, r1
 80081c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081c6:	2300      	movs	r3, #0
 80081c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80081d0:	7af9      	ldrb	r1, [r7, #11]
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	f7fb f8f1 	bl	80033bc <HAL_PCD_EP_Transmit>
 80081da:	4603      	mov	r3, r0
 80081dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081de:	7dfb      	ldrb	r3, [r7, #23]
 80081e0:	4618      	mov	r0, r3
 80081e2:	f000 f853 	bl	800828c <USBD_Get_USB_Status>
 80081e6:	4603      	mov	r3, r0
 80081e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80081ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3718      	adds	r7, #24
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b086      	sub	sp, #24
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	607a      	str	r2, [r7, #4]
 80081fe:	603b      	str	r3, [r7, #0]
 8008200:	460b      	mov	r3, r1
 8008202:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008204:	2300      	movs	r3, #0
 8008206:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008208:	2300      	movs	r3, #0
 800820a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008212:	7af9      	ldrb	r1, [r7, #11]
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	f7fb f87d 	bl	8003316 <HAL_PCD_EP_Receive>
 800821c:	4603      	mov	r3, r0
 800821e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008220:	7dfb      	ldrb	r3, [r7, #23]
 8008222:	4618      	mov	r0, r3
 8008224:	f000 f832 	bl	800828c <USBD_Get_USB_Status>
 8008228:	4603      	mov	r3, r0
 800822a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800822c:	7dbb      	ldrb	r3, [r7, #22]
}
 800822e:	4618      	mov	r0, r3
 8008230:	3718      	adds	r7, #24
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b082      	sub	sp, #8
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
 800823e:	460b      	mov	r3, r1
 8008240:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008248:	78fa      	ldrb	r2, [r7, #3]
 800824a:	4611      	mov	r1, r2
 800824c:	4618      	mov	r0, r3
 800824e:	f7fb f89d 	bl	800338c <HAL_PCD_EP_GetRxCount>
 8008252:	4603      	mov	r3, r0
}
 8008254:	4618      	mov	r0, r3
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008264:	4b03      	ldr	r3, [pc, #12]	@ (8008274 <USBD_static_malloc+0x18>)
}
 8008266:	4618      	mov	r0, r3
 8008268:	370c      	adds	r7, #12
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	20001b90 	.word	0x20001b90

08008278 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]

}
 8008280:	bf00      	nop
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	4603      	mov	r3, r0
 8008294:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008296:	2300      	movs	r3, #0
 8008298:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800829a:	79fb      	ldrb	r3, [r7, #7]
 800829c:	2b03      	cmp	r3, #3
 800829e:	d817      	bhi.n	80082d0 <USBD_Get_USB_Status+0x44>
 80082a0:	a201      	add	r2, pc, #4	@ (adr r2, 80082a8 <USBD_Get_USB_Status+0x1c>)
 80082a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a6:	bf00      	nop
 80082a8:	080082b9 	.word	0x080082b9
 80082ac:	080082bf 	.word	0x080082bf
 80082b0:	080082c5 	.word	0x080082c5
 80082b4:	080082cb 	.word	0x080082cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80082b8:	2300      	movs	r3, #0
 80082ba:	73fb      	strb	r3, [r7, #15]
    break;
 80082bc:	e00b      	b.n	80082d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80082be:	2303      	movs	r3, #3
 80082c0:	73fb      	strb	r3, [r7, #15]
    break;
 80082c2:	e008      	b.n	80082d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80082c4:	2301      	movs	r3, #1
 80082c6:	73fb      	strb	r3, [r7, #15]
    break;
 80082c8:	e005      	b.n	80082d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80082ca:	2303      	movs	r3, #3
 80082cc:	73fb      	strb	r3, [r7, #15]
    break;
 80082ce:	e002      	b.n	80082d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80082d0:	2303      	movs	r3, #3
 80082d2:	73fb      	strb	r3, [r7, #15]
    break;
 80082d4:	bf00      	nop
  }
  return usb_status;
 80082d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3714      	adds	r7, #20
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <memset>:
 80082e4:	4402      	add	r2, r0
 80082e6:	4603      	mov	r3, r0
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d100      	bne.n	80082ee <memset+0xa>
 80082ec:	4770      	bx	lr
 80082ee:	f803 1b01 	strb.w	r1, [r3], #1
 80082f2:	e7f9      	b.n	80082e8 <memset+0x4>

080082f4 <__libc_init_array>:
 80082f4:	b570      	push	{r4, r5, r6, lr}
 80082f6:	4d0d      	ldr	r5, [pc, #52]	@ (800832c <__libc_init_array+0x38>)
 80082f8:	4c0d      	ldr	r4, [pc, #52]	@ (8008330 <__libc_init_array+0x3c>)
 80082fa:	1b64      	subs	r4, r4, r5
 80082fc:	10a4      	asrs	r4, r4, #2
 80082fe:	2600      	movs	r6, #0
 8008300:	42a6      	cmp	r6, r4
 8008302:	d109      	bne.n	8008318 <__libc_init_array+0x24>
 8008304:	4d0b      	ldr	r5, [pc, #44]	@ (8008334 <__libc_init_array+0x40>)
 8008306:	4c0c      	ldr	r4, [pc, #48]	@ (8008338 <__libc_init_array+0x44>)
 8008308:	f000 f818 	bl	800833c <_init>
 800830c:	1b64      	subs	r4, r4, r5
 800830e:	10a4      	asrs	r4, r4, #2
 8008310:	2600      	movs	r6, #0
 8008312:	42a6      	cmp	r6, r4
 8008314:	d105      	bne.n	8008322 <__libc_init_array+0x2e>
 8008316:	bd70      	pop	{r4, r5, r6, pc}
 8008318:	f855 3b04 	ldr.w	r3, [r5], #4
 800831c:	4798      	blx	r3
 800831e:	3601      	adds	r6, #1
 8008320:	e7ee      	b.n	8008300 <__libc_init_array+0xc>
 8008322:	f855 3b04 	ldr.w	r3, [r5], #4
 8008326:	4798      	blx	r3
 8008328:	3601      	adds	r6, #1
 800832a:	e7f2      	b.n	8008312 <__libc_init_array+0x1e>
 800832c:	080083cc 	.word	0x080083cc
 8008330:	080083cc 	.word	0x080083cc
 8008334:	080083cc 	.word	0x080083cc
 8008338:	080083d0 	.word	0x080083d0

0800833c <_init>:
 800833c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833e:	bf00      	nop
 8008340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008342:	bc08      	pop	{r3}
 8008344:	469e      	mov	lr, r3
 8008346:	4770      	bx	lr

08008348 <_fini>:
 8008348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800834a:	bf00      	nop
 800834c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800834e:	bc08      	pop	{r3}
 8008350:	469e      	mov	lr, r3
 8008352:	4770      	bx	lr
