
BAR30-F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000812c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080082b4  080082b4  000092b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008314  08008314  0000a0fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008314  08008314  00009314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800831c  0800831c  0000a0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800831c  0800831c  0000931c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008320  08008320  00009320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08008324  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a0fc  2**0
                  CONTENTS
 10 .bss          00001cd0  200000fc  200000fc  0000a0fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001dcc  20001dcc  0000a0fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a0fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012501  00000000  00000000  0000a12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000336f  00000000  00000000  0001c62d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb0  00000000  00000000  0001f9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bcf  00000000  00000000  00020950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022834  00000000  00000000  0002151f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000156cf  00000000  00000000  00043d53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8134  00000000  00000000  00059422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00121556  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003fa8  00000000  00000000  0012159c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00125544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800829c 	.word	0x0800829c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	0800829c 	.word	0x0800829c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <I2C_Init>:
 * GLOBAL FUNCTIONS
 ********************************************************/
/** Brief description which ends at this dot. Details follow
 *  here.
 */
void I2C_Init(void *handle, uint8_t I2CNo){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	460b      	mov	r3, r1
 80004c2:	70fb      	strb	r3, [r7, #3]
	I2C_HandleTypeDef_T *i2c;
	i2c = I2C_GetModule(I2CNo);
 80004c4:	78fb      	ldrb	r3, [r7, #3]
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 f864 	bl	8000594 <I2C_GetModule>
 80004cc:	60f8      	str	r0, [r7, #12]
    i2c->handle = handle;
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	687a      	ldr	r2, [r7, #4]
 80004d2:	601a      	str	r2, [r3, #0]
}
 80004d4:	bf00      	nop
 80004d6:	3710      	adds	r7, #16
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}

080004dc <I2C_ReadWrite_Poll>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
I2C_ReturnTypeDef_T I2C_ReadWrite_Poll(uint8_t I2CNo, uint8_t DevAddress, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af02      	add	r7, sp, #8
 80004e2:	603a      	str	r2, [r7, #0]
 80004e4:	461a      	mov	r2, r3
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]
 80004ea:	460b      	mov	r3, r1
 80004ec:	71bb      	strb	r3, [r7, #6]
 80004ee:	4613      	mov	r3, r2
 80004f0:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef_T *i2c;
	HAL_StatusTypeDef res;
	uint8_t txAddr, rxAddr;
	txAddr = DevAddress<<1;
 80004f2:	79bb      	ldrb	r3, [r7, #6]
 80004f4:	005b      	lsls	r3, r3, #1
 80004f6:	75fb      	strb	r3, [r7, #23]
	rxAddr = ((DevAddress<<1) | 0x01);
 80004f8:	79bb      	ldrb	r3, [r7, #6]
 80004fa:	005b      	lsls	r3, r3, #1
 80004fc:	b25b      	sxtb	r3, r3
 80004fe:	f043 0301 	orr.w	r3, r3, #1
 8000502:	b25b      	sxtb	r3, r3
 8000504:	75bb      	strb	r3, [r7, #22]
	i2c = I2C_GetModule(I2CNo);
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	4618      	mov	r0, r3
 800050a:	f000 f843 	bl	8000594 <I2C_GetModule>
 800050e:	6138      	str	r0, [r7, #16]
	if(rxLenght == 0){
 8000510:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000514:	2b00      	cmp	r3, #0
 8000516:	d114      	bne.n	8000542 <I2C_ReadWrite_Poll+0x66>
		res = HAL_I2C_Master_Transmit(i2c->handle , txAddr, txBuff, txLenght,300);
 8000518:	693b      	ldr	r3, [r7, #16]
 800051a:	6818      	ldr	r0, [r3, #0]
 800051c:	7dfb      	ldrb	r3, [r7, #23]
 800051e:	b299      	uxth	r1, r3
 8000520:	797b      	ldrb	r3, [r7, #5]
 8000522:	b29b      	uxth	r3, r3
 8000524:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000528:	9200      	str	r2, [sp, #0]
 800052a:	683a      	ldr	r2, [r7, #0]
 800052c:	f001 f930 	bl	8001790 <HAL_I2C_Master_Transmit>
 8000530:	4603      	mov	r3, r0
 8000532:	73fb      	strb	r3, [r7, #15]
		return res == I2C_ERROR;
 8000534:	7bfb      	ldrb	r3, [r7, #15]
 8000536:	2b01      	cmp	r3, #1
 8000538:	bf0c      	ite	eq
 800053a:	2301      	moveq	r3, #1
 800053c:	2300      	movne	r3, #0
 800053e:	b2db      	uxtb	r3, r3
 8000540:	e023      	b.n	800058a <I2C_ReadWrite_Poll+0xae>
	}else{
		HAL_I2C_Master_Transmit(i2c->handle , txAddr, txBuff, txLenght,300);
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	6818      	ldr	r0, [r3, #0]
 8000546:	7dfb      	ldrb	r3, [r7, #23]
 8000548:	b299      	uxth	r1, r3
 800054a:	797b      	ldrb	r3, [r7, #5]
 800054c:	b29b      	uxth	r3, r3
 800054e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000552:	9200      	str	r2, [sp, #0]
 8000554:	683a      	ldr	r2, [r7, #0]
 8000556:	f001 f91b 	bl	8001790 <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 800055a:	200a      	movs	r0, #10
 800055c:	f000 fcd0 	bl	8000f00 <HAL_Delay>
		res = HAL_I2C_Master_Receive(i2c->handle, rxAddr, rxBuff, rxLenght,300);
 8000560:	693b      	ldr	r3, [r7, #16]
 8000562:	6818      	ldr	r0, [r3, #0]
 8000564:	7dbb      	ldrb	r3, [r7, #22]
 8000566:	b299      	uxth	r1, r3
 8000568:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800056c:	b29b      	uxth	r3, r3
 800056e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000572:	9200      	str	r2, [sp, #0]
 8000574:	6a3a      	ldr	r2, [r7, #32]
 8000576:	f001 fa09 	bl	800198c <HAL_I2C_Master_Receive>
 800057a:	4603      	mov	r3, r0
 800057c:	73fb      	strb	r3, [r7, #15]
		return res == I2C_ERROR;
 800057e:	7bfb      	ldrb	r3, [r7, #15]
 8000580:	2b01      	cmp	r3, #1
 8000582:	bf0c      	ite	eq
 8000584:	2301      	moveq	r3, #1
 8000586:	2300      	movne	r3, #0
 8000588:	b2db      	uxtb	r3, r3
	}
}
 800058a:	4618      	mov	r0, r3
 800058c:	3718      	adds	r7, #24
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <I2C_GetModule>:
 * PRIVATE FUNCTIONS
 *********************************************************/
/** Brief description which ends at this dot. Details follow
 *  here.
 */
I2C_HandleTypeDef_T* I2C_GetModule(uint8_t I2CNo){
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	switch(I2CNo){
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	2b03      	cmp	r3, #3
 80005a2:	d00a      	beq.n	80005ba <I2C_GetModule+0x26>
 80005a4:	2b03      	cmp	r3, #3
 80005a6:	dc0a      	bgt.n	80005be <I2C_GetModule+0x2a>
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d002      	beq.n	80005b2 <I2C_GetModule+0x1e>
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	d002      	beq.n	80005b6 <I2C_GetModule+0x22>
 80005b0:	e005      	b.n	80005be <I2C_GetModule+0x2a>
		case I2CNO_1 : return &I2C_1; break;
 80005b2:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <I2C_GetModule+0x38>)
 80005b4:	e004      	b.n	80005c0 <I2C_GetModule+0x2c>
		case I2CNO_2 : return &I2C_2; break;
 80005b6:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <I2C_GetModule+0x3c>)
 80005b8:	e002      	b.n	80005c0 <I2C_GetModule+0x2c>
		case I2CNO_3 : return &I2C_3; break;
 80005ba:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <I2C_GetModule+0x40>)
 80005bc:	e000      	b.n	80005c0 <I2C_GetModule+0x2c>
		default : return NULL; break;
 80005be:	2300      	movs	r3, #0
	}
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	20000118 	.word	0x20000118
 80005d0:	20000120 	.word	0x20000120
 80005d4:	20000128 	.word	0x20000128

080005d8 <Convert_IEE754_To_FloatValue>:
#include "main.h"


BAR30_Sensor_T BAR30_1, BAR30_2, BAR30_3;

float Convert_IEE754_To_FloatValue(const uint32_t value){
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	float f;
	memcpy(&f, &value, sizeof(float));
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	60fb      	str	r3, [r7, #12]
	return f;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	ee07 3a90 	vmov	s15, r3
}
 80005ea:	eeb0 0a67 	vmov.f32	s0, s15
 80005ee:	3714      	adds	r7, #20
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <BAR30_Calc_Pressure>:

BAR30_ReturnTypeDef_T BAR30_Calc_Pressure(BAR30_Sensor_T *handle){
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	switch(handle->mode){
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000606:	2b02      	cmp	r3, #2
 8000608:	d03c      	beq.n	8000684 <BAR30_Calc_Pressure+0x8c>
 800060a:	2b02      	cmp	r3, #2
 800060c:	dc57      	bgt.n	80006be <BAR30_Calc_Pressure+0xc6>
 800060e:	2b00      	cmp	r3, #0
 8000610:	d002      	beq.n	8000618 <BAR30_Calc_Pressure+0x20>
 8000612:	2b01      	cmp	r3, #1
 8000614:	d01d      	beq.n	8000652 <BAR30_Calc_Pressure+0x5a>
 8000616:	e052      	b.n	80006be <BAR30_Calc_Pressure+0xc6>
		case Zero_At_Atm    : handle->miliPressure = (((handle->Pressure_RawData - handle->PMin)*((handle->PMax-handle->PMin)*1000))/handle->PMax)-handle->PMin; break;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	69d1      	ldr	r1, [r2, #28]
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800062a:	1a8a      	subs	r2, r1, r2
 800062c:	fb02 f303 	mul.w	r3, r2, r3
 8000630:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000634:	fb03 f202 	mul.w	r2, r3, r2
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800063c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000640:	b29a      	uxth	r2, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000646:	b29b      	uxth	r3, r3
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	b29a      	uxth	r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	845a      	strh	r2, [r3, #34]	@ 0x22
 8000650:	e035      	b.n	80006be <BAR30_Calc_Pressure+0xc6>
		case Zero_At_1Bar   : handle->miliPressure = (((handle->Pressure_RawData-16384)*((handle->PMax-handle->PMin)*1000))/32768)+handle->PMin;break;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800065a:	1ad3      	subs	r3, r2, r3
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	69d2      	ldr	r2, [r2, #28]
 8000660:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000664:	fb01 f202 	mul.w	r2, r1, r2
 8000668:	f5a2 027a 	sub.w	r2, r2, #16384000	@ 0xfa0000
 800066c:	fb02 f303 	mul.w	r3, r2, r3
 8000670:	0bdb      	lsrs	r3, r3, #15
 8000672:	b29a      	uxth	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000678:	b29b      	uxth	r3, r3
 800067a:	4413      	add	r3, r2
 800067c:	b29a      	uxth	r2, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	845a      	strh	r2, [r3, #34]	@ 0x22
 8000682:	e01c      	b.n	80006be <BAR30_Calc_Pressure+0xc6>
		case Zero_At_Vacuum : handle->miliPressure = ((handle->Pressure_RawData-handle->PMin)*((handle->PMax-handle->PMin)*1000))/handle->PMax+handle->PMin;     break;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	69d1      	ldr	r1, [r2, #28]
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000696:	1a8a      	subs	r2, r1, r2
 8000698:	fb02 f303 	mul.w	r3, r2, r3
 800069c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006a0:	fb03 f202 	mul.w	r2, r3, r2
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	4413      	add	r3, r2
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	845a      	strh	r2, [r3, #34]	@ 0x22
 80006bc:	bf00      	nop
	}
}
 80006be:	bf00      	nop
 80006c0:	4618      	mov	r0, r3
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <BAR30_Init>:
/** Brief description which ends at this dot. Details follow
 *  here.
 */
BAR30_ReturnTypeDef_T BAR30_Init(BAR30_Sensor_T *handle, uint8_t i2cNo, uint8_t devI2CAddress){
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	460b      	mov	r3, r1
 80006d6:	70fb      	strb	r3, [r7, #3]
 80006d8:	4613      	mov	r3, r2
 80006da:	70bb      	strb	r3, [r7, #2]
	handle->devParam.I2C_No = i2cNo;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	78fa      	ldrb	r2, [r7, #3]
 80006e0:	701a      	strb	r2, [r3, #0]
	handle->devParam.DevAdress = devI2CAddress;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	78ba      	ldrb	r2, [r7, #2]
 80006e6:	705a      	strb	r2, [r3, #1]
	return BAR30_OK;
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <BAR30_StartPressureConversion>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BAR30_ReturnTypeDef_T BAR30_StartPressureConversion(BAR30_Sensor_T *handle){
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b084      	sub	sp, #16
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
	BAR30_ReturnTypeDef_T res;
	res =  BAR30_Write(handle, 0xA0);
 80006fe:	21a0      	movs	r1, #160	@ 0xa0
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f000 f888 	bl	8000816 <BAR30_Write>
 8000706:	4603      	mov	r3, r0
 8000708:	73fb      	strb	r3, [r7, #15]
	return res;
 800070a:	7bfb      	ldrb	r3, [r7, #15]
}
 800070c:	4618      	mov	r0, r3
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <BAR30_ReadPressure>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BAR30_ReturnTypeDef_T BAR30_ReadPressure(BAR30_Sensor_T *handle){
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	uint8_t RxBuff[5], state;
	if(!BAR30_Read(handle, 0xAC, RxBuff)){
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	461a      	mov	r2, r3
 8000722:	21ac      	movs	r1, #172	@ 0xac
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f000 f88c 	bl	8000842 <BAR30_Read>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d115      	bne.n	800075c <BAR30_ReadPressure+0x48>
		handle->Pressure_RawData = RxBuff[2] | (RxBuff[1]<<8);
 8000730:	7abb      	ldrb	r3, [r7, #10]
 8000732:	461a      	mov	r2, r3
 8000734:	7a7b      	ldrb	r3, [r7, #9]
 8000736:	021b      	lsls	r3, r3, #8
 8000738:	4313      	orrs	r3, r2
 800073a:	461a      	mov	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	61da      	str	r2, [r3, #28]
	    handle->Temperature_RawData = RxBuff[4] | (RxBuff[3]<<8);
 8000740:	7b3b      	ldrb	r3, [r7, #12]
 8000742:	461a      	mov	r2, r3
 8000744:	7afb      	ldrb	r3, [r7, #11]
 8000746:	021b      	lsls	r3, r3, #8
 8000748:	4313      	orrs	r3, r2
 800074a:	461a      	mov	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	619a      	str	r2, [r3, #24]
	    state = RxBuff[0];
 8000750:	7a3b      	ldrb	r3, [r7, #8]
 8000752:	73fb      	strb	r3, [r7, #15]
	    BAR30_Calc_Pressure(handle);
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f7ff ff4f 	bl	80005f8 <BAR30_Calc_Pressure>
	}
	else
		return BAR30_ERROR;
}
 800075a:	e000      	b.n	800075e <BAR30_ReadPressure+0x4a>
		return BAR30_ERROR;
 800075c:	2301      	movs	r3, #1
}
 800075e:	4618      	mov	r0, r3
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <BAR30_Get_ScalingValues>:
//			return BAR30_OK;
//	}
//	return BAR30_ERROR;
//}

BAR30_ReturnTypeDef_T BAR30_Get_ScalingValues(BAR30_Sensor_T *handle){
 8000766:	b580      	push	{r7, lr}
 8000768:	b088      	sub	sp, #32
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
	uint8_t RxBuff[3];
	uint16_t ScaleData[5];
    uint32_t iee754;
	for(int i=0; i<5;i++){
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
 8000772:	e020      	b.n	80007b6 <BAR30_Get_ScalingValues+0x50>
		if(!BAR30_Read(handle, BAR30_MTP_ADDRESS_SCALING_BASE + i, RxBuff)){
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	b2db      	uxtb	r3, r3
 8000778:	3312      	adds	r3, #18
 800077a:	b2db      	uxtb	r3, r3
 800077c:	f107 0214 	add.w	r2, r7, #20
 8000780:	4619      	mov	r1, r3
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f000 f85d 	bl	8000842 <BAR30_Read>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d10e      	bne.n	80007ac <BAR30_Get_ScalingValues+0x46>
			ScaleData[i]= RxBuff[2]<<0 | RxBuff[1]<<8;
 800078e:	7dbb      	ldrb	r3, [r7, #22]
 8000790:	b21a      	sxth	r2, r3
 8000792:	7d7b      	ldrb	r3, [r7, #21]
 8000794:	021b      	lsls	r3, r3, #8
 8000796:	b21b      	sxth	r3, r3
 8000798:	4313      	orrs	r3, r2
 800079a:	b21b      	sxth	r3, r3
 800079c:	b29a      	uxth	r2, r3
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	005b      	lsls	r3, r3, #1
 80007a2:	3320      	adds	r3, #32
 80007a4:	443b      	add	r3, r7
 80007a6:	f823 2c18 	strh.w	r2, [r3, #-24]
 80007aa:	e001      	b.n	80007b0 <BAR30_Get_ScalingValues+0x4a>
		}else{
			return BAR30_ERROR;
 80007ac:	2301      	movs	r3, #1
 80007ae:	e02e      	b.n	800080e <BAR30_Get_ScalingValues+0xa8>
	for(int i=0; i<5;i++){
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	3301      	adds	r3, #1
 80007b4:	61fb      	str	r3, [r7, #28]
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	2b04      	cmp	r3, #4
 80007ba:	dddb      	ble.n	8000774 <BAR30_Get_ScalingValues+0xe>
		}
	}

    handle->mode = ScaleData[0]&(0x0003);
 80007bc:	893b      	ldrh	r3, [r7, #8]
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	f003 0303 	and.w	r3, r3, #3
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    iee754 = ScaleData[1]<<16 | ScaleData[2];
 80007cc:	897b      	ldrh	r3, [r7, #10]
 80007ce:	041b      	lsls	r3, r3, #16
 80007d0:	89ba      	ldrh	r2, [r7, #12]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	61bb      	str	r3, [r7, #24]
    handle->PMin = Convert_IEE754_To_FloatValue(iee754);
 80007d6:	69b8      	ldr	r0, [r7, #24]
 80007d8:	f7ff fefe 	bl	80005d8 <Convert_IEE754_To_FloatValue>
 80007dc:	eef0 7a40 	vmov.f32	s15, s0
 80007e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007e4:	ee17 2a90 	vmov	r2, s15
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    iee754 = ScaleData[3]<<16 | ScaleData[4];
 80007ec:	89fb      	ldrh	r3, [r7, #14]
 80007ee:	041b      	lsls	r3, r3, #16
 80007f0:	8a3a      	ldrh	r2, [r7, #16]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	61bb      	str	r3, [r7, #24]
    handle->PMax = Convert_IEE754_To_FloatValue(iee754);
 80007f6:	69b8      	ldr	r0, [r7, #24]
 80007f8:	f7ff feee 	bl	80005d8 <Convert_IEE754_To_FloatValue>
 80007fc:	eef0 7a40 	vmov.f32	s15, s0
 8000800:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000804:	ee17 2a90 	vmov	r2, s15
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	629a      	str	r2, [r3, #40]	@ 0x28
	return BAR30_OK;
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3720      	adds	r7, #32
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <BAR30_Write>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BAR30_ReturnTypeDef_T BAR30_Write(BAR30_Sensor_T *handle, uint8_t command){
 8000816:	b580      	push	{r7, lr}
 8000818:	b086      	sub	sp, #24
 800081a:	af02      	add	r7, sp, #8
 800081c:	6078      	str	r0, [r7, #4]
 800081e:	460b      	mov	r3, r1
 8000820:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[1];
	TxBuff[0] = command;
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	733b      	strb	r3, [r7, #12]
	return BAR30_SendReceive(handle, TxBuff, 1, NULL, 0);
 8000826:	f107 010c 	add.w	r1, r7, #12
 800082a:	2300      	movs	r3, #0
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	2300      	movs	r3, #0
 8000830:	2201      	movs	r2, #1
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f000 f822 	bl	800087c <BAR30_SendReceive>
 8000838:	4603      	mov	r3, r0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <BAR30_Read>:

BAR30_ReturnTypeDef_T BAR30_Read(BAR30_Sensor_T *handle, uint8_t command, uint8_t *buffer){
 8000842:	b580      	push	{r7, lr}
 8000844:	b088      	sub	sp, #32
 8000846:	af02      	add	r7, sp, #8
 8000848:	60f8      	str	r0, [r7, #12]
 800084a:	460b      	mov	r3, r1
 800084c:	607a      	str	r2, [r7, #4]
 800084e:	72fb      	strb	r3, [r7, #11]
	uint8_t lenght;

	if(command == 0xAC)
 8000850:	7afb      	ldrb	r3, [r7, #11]
 8000852:	2bac      	cmp	r3, #172	@ 0xac
 8000854:	d102      	bne.n	800085c <BAR30_Read+0x1a>
		lenght = 5;
 8000856:	2305      	movs	r3, #5
 8000858:	75fb      	strb	r3, [r7, #23]
 800085a:	e001      	b.n	8000860 <BAR30_Read+0x1e>
	else
		lenght = 3;
 800085c:	2303      	movs	r3, #3
 800085e:	75fb      	strb	r3, [r7, #23]

	return BAR30_SendReceive(handle, &command, 1, buffer, lenght);
 8000860:	f107 010b 	add.w	r1, r7, #11
 8000864:	7dfb      	ldrb	r3, [r7, #23]
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2201      	movs	r2, #1
 800086c:	68f8      	ldr	r0, [r7, #12]
 800086e:	f000 f805 	bl	800087c <BAR30_SendReceive>
 8000872:	4603      	mov	r3, r0
}
 8000874:	4618      	mov	r0, r3
 8000876:	3718      	adds	r7, #24
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <BAR30_SendReceive>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BAR30_ReturnTypeDef_T BAR30_SendReceive(BAR30_Sensor_T *handle, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af02      	add	r7, sp, #8
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	4613      	mov	r3, r2
 800088a:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(10);
 800088c:	200a      	movs	r0, #10
 800088e:	f000 fb37 	bl	8000f00 <HAL_Delay>
	return BAR30_CommPorter_SendReceive(handle->devParam.I2C_No, handle->devParam.DevAdress, txBuff, txLenght, rxBuff, rxLenght);
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	7818      	ldrb	r0, [r3, #0]
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	7859      	ldrb	r1, [r3, #1]
 800089a:	79fa      	ldrb	r2, [r7, #7]
 800089c:	7e3b      	ldrb	r3, [r7, #24]
 800089e:	9301      	str	r3, [sp, #4]
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	4613      	mov	r3, r2
 80008a6:	68ba      	ldr	r2, [r7, #8]
 80008a8:	f000 f805 	bl	80008b6 <BAR30_CommPorter_SendReceive>
 80008ac:	4603      	mov	r3, r0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <BAR30_CommPorter_SendReceive>:
#include <stdint.h>
#include "BAR30_CommPorter.h"
#include "I2C.h"

uint8_t BAR30_CommPorter_SendReceive(uint8_t I2CNo, uint8_t DevAddress, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b084      	sub	sp, #16
 80008ba:	af02      	add	r7, sp, #8
 80008bc:	603a      	str	r2, [r7, #0]
 80008be:	461a      	mov	r2, r3
 80008c0:	4603      	mov	r3, r0
 80008c2:	71fb      	strb	r3, [r7, #7]
 80008c4:	460b      	mov	r3, r1
 80008c6:	71bb      	strb	r3, [r7, #6]
 80008c8:	4613      	mov	r3, r2
 80008ca:	717b      	strb	r3, [r7, #5]
	return I2C_ReadWrite_Poll(I2CNo, DevAddress, txBuff, txLenght, rxBuff, rxLenght);
 80008cc:	797a      	ldrb	r2, [r7, #5]
 80008ce:	79b9      	ldrb	r1, [r7, #6]
 80008d0:	79f8      	ldrb	r0, [r7, #7]
 80008d2:	7d3b      	ldrb	r3, [r7, #20]
 80008d4:	9301      	str	r3, [sp, #4]
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	4613      	mov	r3, r2
 80008dc:	683a      	ldr	r2, [r7, #0]
 80008de:	f7ff fdfd 	bl	80004dc <I2C_ReadWrite_Poll>
 80008e2:	4603      	mov	r3, r0
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f0:	f000 fa94 	bl	8000e1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f4:	f000 f81e 	bl	8000934 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f8:	f000 f8b8 	bl	8000a6c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80008fc:	f006 ffae 	bl	800785c <MX_USB_DEVICE_Init>
  MX_I2C3_Init();
 8000900:	f000 f882 	bl	8000a08 <MX_I2C3_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  BAR30_Init(&BAR30_1, I2CNO_3, (0x40));
 8000904:	2240      	movs	r2, #64	@ 0x40
 8000906:	2103      	movs	r1, #3
 8000908:	4809      	ldr	r0, [pc, #36]	@ (8000930 <main+0x44>)
 800090a:	f7ff fedf 	bl	80006cc <BAR30_Init>

  BAR30_Get_ScalingValues(&BAR30_1);
 800090e:	4808      	ldr	r0, [pc, #32]	@ (8000930 <main+0x44>)
 8000910:	f7ff ff29 	bl	8000766 <BAR30_Get_ScalingValues>
{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	BAR30_StartPressureConversion(&BAR30_1);
 8000914:	4806      	ldr	r0, [pc, #24]	@ (8000930 <main+0x44>)
 8000916:	f7ff feee 	bl	80006f6 <BAR30_StartPressureConversion>
	HAL_Delay(25);
 800091a:	2019      	movs	r0, #25
 800091c:	f000 faf0 	bl	8000f00 <HAL_Delay>
	BAR30_ReadPressure(&BAR30_1);
 8000920:	4803      	ldr	r0, [pc, #12]	@ (8000930 <main+0x44>)
 8000922:	f7ff fef7 	bl	8000714 <BAR30_ReadPressure>
	HAL_Delay(25);
 8000926:	2019      	movs	r0, #25
 8000928:	f000 faea 	bl	8000f00 <HAL_Delay>
	BAR30_StartPressureConversion(&BAR30_1);
 800092c:	bf00      	nop
 800092e:	e7f1      	b.n	8000914 <main+0x28>
 8000930:	20000130 	.word	0x20000130

08000934 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b094      	sub	sp, #80	@ 0x50
 8000938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093a:	f107 0320 	add.w	r3, r7, #32
 800093e:	2230      	movs	r2, #48	@ 0x30
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f007 fc7e 	bl	8008244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000958:	2300      	movs	r3, #0
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	4b28      	ldr	r3, [pc, #160]	@ (8000a00 <SystemClock_Config+0xcc>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000960:	4a27      	ldr	r2, [pc, #156]	@ (8000a00 <SystemClock_Config+0xcc>)
 8000962:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000966:	6413      	str	r3, [r2, #64]	@ 0x40
 8000968:	4b25      	ldr	r3, [pc, #148]	@ (8000a00 <SystemClock_Config+0xcc>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000974:	2300      	movs	r3, #0
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	4b22      	ldr	r3, [pc, #136]	@ (8000a04 <SystemClock_Config+0xd0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a21      	ldr	r2, [pc, #132]	@ (8000a04 <SystemClock_Config+0xd0>)
 800097e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000982:	6013      	str	r3, [r2, #0]
 8000984:	4b1f      	ldr	r3, [pc, #124]	@ (8000a04 <SystemClock_Config+0xd0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000990:	2301      	movs	r3, #1
 8000992:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000994:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000998:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099a:	2302      	movs	r3, #2
 800099c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009a4:	2308      	movs	r3, #8
 80009a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009a8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80009ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ae:	2302      	movs	r3, #2
 80009b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009b2:	2307      	movs	r3, #7
 80009b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b6:	f107 0320 	add.w	r3, r7, #32
 80009ba:	4618      	mov	r0, r3
 80009bc:	f002 fff0 	bl	80039a0 <HAL_RCC_OscConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009c6:	f000 f913 	bl	8000bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ca:	230f      	movs	r3, #15
 80009cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ce:	2302      	movs	r3, #2
 80009d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009d6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009e2:	f107 030c 	add.w	r3, r7, #12
 80009e6:	2105      	movs	r1, #5
 80009e8:	4618      	mov	r0, r3
 80009ea:	f003 fa51 	bl	8003e90 <HAL_RCC_ClockConfig>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009f4:	f000 f8fc 	bl	8000bf0 <Error_Handler>
  }
}
 80009f8:	bf00      	nop
 80009fa:	3750      	adds	r7, #80	@ 0x50
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40007000 	.word	0x40007000

08000a08 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a0c:	4b14      	ldr	r3, [pc, #80]	@ (8000a60 <MX_I2C3_Init+0x58>)
 8000a0e:	4a15      	ldr	r2, [pc, #84]	@ (8000a64 <MX_I2C3_Init+0x5c>)
 8000a10:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000a12:	4b13      	ldr	r3, [pc, #76]	@ (8000a60 <MX_I2C3_Init+0x58>)
 8000a14:	4a14      	ldr	r2, [pc, #80]	@ (8000a68 <MX_I2C3_Init+0x60>)
 8000a16:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a18:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <MX_I2C3_Init+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a1e:	4b10      	ldr	r3, [pc, #64]	@ (8000a60 <MX_I2C3_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a24:	4b0e      	ldr	r3, [pc, #56]	@ (8000a60 <MX_I2C3_Init+0x58>)
 8000a26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a2a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <MX_I2C3_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	@ (8000a60 <MX_I2C3_Init+0x58>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a38:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <MX_I2C3_Init+0x58>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a3e:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <MX_I2C3_Init+0x58>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a44:	4806      	ldr	r0, [pc, #24]	@ (8000a60 <MX_I2C3_Init+0x58>)
 8000a46:	f000 fd5f 	bl	8001508 <HAL_I2C_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000a50:	f000 f8ce 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */
  I2C_Init(&hi2c3, I2CNO_3);
 8000a54:	2103      	movs	r1, #3
 8000a56:	4802      	ldr	r0, [pc, #8]	@ (8000a60 <MX_I2C3_Init+0x58>)
 8000a58:	f7ff fd2e 	bl	80004b8 <I2C_Init>
  /* USER CODE END I2C3_Init 2 */

}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000190 	.word	0x20000190
 8000a64:	40005c00 	.word	0x40005c00
 8000a68:	000186a0 	.word	0x000186a0

08000a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08c      	sub	sp, #48	@ 0x30
 8000a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
 8000a86:	4b4d      	ldr	r3, [pc, #308]	@ (8000bbc <MX_GPIO_Init+0x150>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a4c      	ldr	r2, [pc, #304]	@ (8000bbc <MX_GPIO_Init+0x150>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a92:	4b4a      	ldr	r3, [pc, #296]	@ (8000bbc <MX_GPIO_Init+0x150>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	61bb      	str	r3, [r7, #24]
 8000a9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
 8000aa2:	4b46      	ldr	r3, [pc, #280]	@ (8000bbc <MX_GPIO_Init+0x150>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	4a45      	ldr	r2, [pc, #276]	@ (8000bbc <MX_GPIO_Init+0x150>)
 8000aa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aae:	4b43      	ldr	r3, [pc, #268]	@ (8000bbc <MX_GPIO_Init+0x150>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	4b3f      	ldr	r3, [pc, #252]	@ (8000bbc <MX_GPIO_Init+0x150>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a3e      	ldr	r2, [pc, #248]	@ (8000bbc <MX_GPIO_Init+0x150>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b3c      	ldr	r3, [pc, #240]	@ (8000bbc <MX_GPIO_Init+0x150>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	4b38      	ldr	r3, [pc, #224]	@ (8000bbc <MX_GPIO_Init+0x150>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	4a37      	ldr	r2, [pc, #220]	@ (8000bbc <MX_GPIO_Init+0x150>)
 8000ae0:	f043 0310 	orr.w	r3, r3, #16
 8000ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae6:	4b35      	ldr	r3, [pc, #212]	@ (8000bbc <MX_GPIO_Init+0x150>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	f003 0310 	and.w	r3, r3, #16
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	4b31      	ldr	r3, [pc, #196]	@ (8000bbc <MX_GPIO_Init+0x150>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	4a30      	ldr	r2, [pc, #192]	@ (8000bbc <MX_GPIO_Init+0x150>)
 8000afc:	f043 0308 	orr.w	r3, r3, #8
 8000b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b02:	4b2e      	ldr	r3, [pc, #184]	@ (8000bbc <MX_GPIO_Init+0x150>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	f003 0308 	and.w	r3, r3, #8
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b2a      	ldr	r3, [pc, #168]	@ (8000bbc <MX_GPIO_Init+0x150>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a29      	ldr	r2, [pc, #164]	@ (8000bbc <MX_GPIO_Init+0x150>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b27      	ldr	r3, [pc, #156]	@ (8000bbc <MX_GPIO_Init+0x150>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000b30:	4823      	ldr	r0, [pc, #140]	@ (8000bc0 <MX_GPIO_Init+0x154>)
 8000b32:	f000 fcb7 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b36:	2301      	movs	r3, #1
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b3a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	481e      	ldr	r0, [pc, #120]	@ (8000bc4 <MX_GPIO_Init+0x158>)
 8000b4c:	f000 fb0e 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b50:	2304      	movs	r3, #4
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	4619      	mov	r1, r3
 8000b62:	4819      	ldr	r0, [pc, #100]	@ (8000bc8 <MX_GPIO_Init+0x15c>)
 8000b64:	f000 fb02 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b6e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b74:	2302      	movs	r3, #2
 8000b76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4813      	ldr	r0, [pc, #76]	@ (8000bcc <MX_GPIO_Init+0x160>)
 8000b80:	f000 faf4 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8000b84:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4808      	ldr	r0, [pc, #32]	@ (8000bc0 <MX_GPIO_Init+0x154>)
 8000b9e:	f000 fae5 	bl	800116c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2017      	movs	r0, #23
 8000ba8:	f000 faa9 	bl	80010fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bac:	2017      	movs	r0, #23
 8000bae:	f000 fac2 	bl	8001136 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bb2:	bf00      	nop
 8000bb4:	3730      	adds	r7, #48	@ 0x30
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020c00 	.word	0x40020c00
 8000bc4:	40020800 	.word	0x40020800
 8000bc8:	40020400 	.word	0x40020400
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  if(GPIO_PIN_9)
	  MPU6050_1.dataReadyFlag = 1;
 8000bda:	4b04      	ldr	r3, [pc, #16]	@ (8000bec <HAL_GPIO_EXTI_Callback+0x1c>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	701a      	strb	r2, [r3, #0]
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	20000164 	.word	0x20000164

08000bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
}
 8000bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <Error_Handler+0x8>

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <HAL_MspInit+0x4c>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c48 <HAL_MspInit+0x4c>)
 8000c0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c12:	4b0d      	ldr	r3, [pc, #52]	@ (8000c48 <HAL_MspInit+0x4c>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <HAL_MspInit+0x4c>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c26:	4a08      	ldr	r2, [pc, #32]	@ (8000c48 <HAL_MspInit+0x4c>)
 8000c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c2e:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <HAL_MspInit+0x4c>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c3a:	2007      	movs	r0, #7
 8000c3c:	f000 fa54 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40023800 	.word	0x40023800

08000c4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	@ 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a29      	ldr	r2, [pc, #164]	@ (8000d10 <HAL_I2C_MspInit+0xc4>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d14b      	bne.n	8000d06 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	4b28      	ldr	r3, [pc, #160]	@ (8000d14 <HAL_I2C_MspInit+0xc8>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	4a27      	ldr	r2, [pc, #156]	@ (8000d14 <HAL_I2C_MspInit+0xc8>)
 8000c78:	f043 0304 	orr.w	r3, r3, #4
 8000c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7e:	4b25      	ldr	r3, [pc, #148]	@ (8000d14 <HAL_I2C_MspInit+0xc8>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	f003 0304 	and.w	r3, r3, #4
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	4b21      	ldr	r3, [pc, #132]	@ (8000d14 <HAL_I2C_MspInit+0xc8>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	4a20      	ldr	r2, [pc, #128]	@ (8000d14 <HAL_I2C_MspInit+0xc8>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d14 <HAL_I2C_MspInit+0xc8>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ca6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cac:	2312      	movs	r3, #18
 8000cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cb8:	2304      	movs	r3, #4
 8000cba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4815      	ldr	r0, [pc, #84]	@ (8000d18 <HAL_I2C_MspInit+0xcc>)
 8000cc4:	f000 fa52 	bl	800116c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cce:	2312      	movs	r3, #18
 8000cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cda:	2304      	movs	r3, #4
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	480d      	ldr	r0, [pc, #52]	@ (8000d1c <HAL_I2C_MspInit+0xd0>)
 8000ce6:	f000 fa41 	bl	800116c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	4b09      	ldr	r3, [pc, #36]	@ (8000d14 <HAL_I2C_MspInit+0xc8>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf2:	4a08      	ldr	r2, [pc, #32]	@ (8000d14 <HAL_I2C_MspInit+0xc8>)
 8000cf4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cfa:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <HAL_I2C_MspInit+0xc8>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8000d06:	bf00      	nop
 8000d08:	3728      	adds	r7, #40	@ 0x28
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40005c00 	.word	0x40005c00
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40020800 	.word	0x40020800
 8000d1c:	40020000 	.word	0x40020000

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <NMI_Handler+0x4>

08000d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <HardFault_Handler+0x4>

08000d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <MemManage_Handler+0x4>

08000d38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d76:	f000 f8a3 	bl	8000ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000d82:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d86:	f000 fba7 	bl	80014d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d94:	4802      	ldr	r0, [pc, #8]	@ (8000da0 <OTG_FS_IRQHandler+0x10>)
 8000d96:	f001 fcf5 	bl	8002784 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200016c8 	.word	0x200016c8

08000da4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da8:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <SystemInit+0x20>)
 8000daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dae:	4a05      	ldr	r2, [pc, #20]	@ (8000dc4 <SystemInit+0x20>)
 8000db0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000db4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dcc:	f7ff ffea 	bl	8000da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd0:	480c      	ldr	r0, [pc, #48]	@ (8000e04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dd2:	490d      	ldr	r1, [pc, #52]	@ (8000e08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd8:	e002      	b.n	8000de0 <LoopCopyDataInit>

08000dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dde:	3304      	adds	r3, #4

08000de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de4:	d3f9      	bcc.n	8000dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000de8:	4c0a      	ldr	r4, [pc, #40]	@ (8000e14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dec:	e001      	b.n	8000df2 <LoopFillZerobss>

08000dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df0:	3204      	adds	r2, #4

08000df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df4:	d3fb      	bcc.n	8000dee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000df6:	f007 fa2d 	bl	8008254 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfa:	f7ff fd77 	bl	80008ec <main>
  bx  lr    
 8000dfe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e08:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000e0c:	08008324 	.word	0x08008324
  ldr r2, =_sbss
 8000e10:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000e14:	20001dcc 	.word	0x20001dcc

08000e18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e18:	e7fe      	b.n	8000e18 <ADC_IRQHandler>
	...

08000e1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e20:	4b0e      	ldr	r3, [pc, #56]	@ (8000e5c <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0d      	ldr	r2, [pc, #52]	@ (8000e5c <HAL_Init+0x40>)
 8000e26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e5c <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0a      	ldr	r2, [pc, #40]	@ (8000e5c <HAL_Init+0x40>)
 8000e32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e38:	4b08      	ldr	r3, [pc, #32]	@ (8000e5c <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a07      	ldr	r2, [pc, #28]	@ (8000e5c <HAL_Init+0x40>)
 8000e3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e44:	2003      	movs	r0, #3
 8000e46:	f000 f94f 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f000 f808 	bl	8000e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e50:	f7ff fed4 	bl	8000bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023c00 	.word	0x40023c00

08000e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e68:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <HAL_InitTick+0x54>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <HAL_InitTick+0x58>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f967 	bl	8001152 <HAL_SYSTICK_Config>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00e      	b.n	8000eac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b0f      	cmp	r3, #15
 8000e92:	d80a      	bhi.n	8000eaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e94:	2200      	movs	r2, #0
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	f000 f92f 	bl	80010fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea0:	4a06      	ldr	r2, [pc, #24]	@ (8000ebc <HAL_InitTick+0x5c>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e000      	b.n	8000eac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	20000004 	.word	0x20000004

08000ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <HAL_IncTick+0x20>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <HAL_IncTick+0x24>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	4a04      	ldr	r2, [pc, #16]	@ (8000ee4 <HAL_IncTick+0x24>)
 8000ed2:	6013      	str	r3, [r2, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	200001e4 	.word	0x200001e4

08000ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return uwTick;
 8000eec:	4b03      	ldr	r3, [pc, #12]	@ (8000efc <HAL_GetTick+0x14>)
 8000eee:	681b      	ldr	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	200001e4 	.word	0x200001e4

08000f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f08:	f7ff ffee 	bl	8000ee8 <HAL_GetTick>
 8000f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f18:	d005      	beq.n	8000f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <HAL_Delay+0x44>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4413      	add	r3, r2
 8000f24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f26:	bf00      	nop
 8000f28:	f7ff ffde 	bl	8000ee8 <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d8f7      	bhi.n	8000f28 <HAL_Delay+0x28>
  {
  }
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000008 	.word	0x20000008

08000f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f58:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f64:	4013      	ands	r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7a:	4a04      	ldr	r2, [pc, #16]	@ (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	60d3      	str	r3, [r2, #12]
}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f94:	4b04      	ldr	r3, [pc, #16]	@ (8000fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	0a1b      	lsrs	r3, r3, #8
 8000f9a:	f003 0307 	and.w	r3, r3, #7
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	db0b      	blt.n	8000fd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	f003 021f 	and.w	r2, r3, #31
 8000fc4:	4907      	ldr	r1, [pc, #28]	@ (8000fe4 <__NVIC_EnableIRQ+0x38>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	095b      	lsrs	r3, r3, #5
 8000fcc:	2001      	movs	r0, #1
 8000fce:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000e100 	.word	0xe000e100

08000fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	db0a      	blt.n	8001012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	490c      	ldr	r1, [pc, #48]	@ (8001034 <__NVIC_SetPriority+0x4c>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	0112      	lsls	r2, r2, #4
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	440b      	add	r3, r1
 800100c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001010:	e00a      	b.n	8001028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4908      	ldr	r1, [pc, #32]	@ (8001038 <__NVIC_SetPriority+0x50>)
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	f003 030f 	and.w	r3, r3, #15
 800101e:	3b04      	subs	r3, #4
 8001020:	0112      	lsls	r2, r2, #4
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	440b      	add	r3, r1
 8001026:	761a      	strb	r2, [r3, #24]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000e100 	.word	0xe000e100
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	@ 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f1c3 0307 	rsb	r3, r3, #7
 8001056:	2b04      	cmp	r3, #4
 8001058:	bf28      	it	cs
 800105a:	2304      	movcs	r3, #4
 800105c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3304      	adds	r3, #4
 8001062:	2b06      	cmp	r3, #6
 8001064:	d902      	bls.n	800106c <NVIC_EncodePriority+0x30>
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3b03      	subs	r3, #3
 800106a:	e000      	b.n	800106e <NVIC_EncodePriority+0x32>
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	f04f 32ff 	mov.w	r2, #4294967295
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43da      	mvns	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	401a      	ands	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001084:	f04f 31ff 	mov.w	r1, #4294967295
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa01 f303 	lsl.w	r3, r1, r3
 800108e:	43d9      	mvns	r1, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	4313      	orrs	r3, r2
         );
}
 8001096:	4618      	mov	r0, r3
 8001098:	3724      	adds	r7, #36	@ 0x24
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010b4:	d301      	bcc.n	80010ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00f      	b.n	80010da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ba:	4a0a      	ldr	r2, [pc, #40]	@ (80010e4 <SysTick_Config+0x40>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c2:	210f      	movs	r1, #15
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f7ff ff8e 	bl	8000fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010cc:	4b05      	ldr	r3, [pc, #20]	@ (80010e4 <SysTick_Config+0x40>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d2:	4b04      	ldr	r3, [pc, #16]	@ (80010e4 <SysTick_Config+0x40>)
 80010d4:	2207      	movs	r2, #7
 80010d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	e000e010 	.word	0xe000e010

080010e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff29 	bl	8000f48 <__NVIC_SetPriorityGrouping>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001110:	f7ff ff3e 	bl	8000f90 <__NVIC_GetPriorityGrouping>
 8001114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	6978      	ldr	r0, [r7, #20]
 800111c:	f7ff ff8e 	bl	800103c <NVIC_EncodePriority>
 8001120:	4602      	mov	r2, r0
 8001122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff5d 	bl	8000fe8 <__NVIC_SetPriority>
}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff31 	bl	8000fac <__NVIC_EnableIRQ>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ffa2 	bl	80010a4 <SysTick_Config>
 8001160:	4603      	mov	r3, r0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	@ 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
 8001186:	e16b      	b.n	8001460 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001188:	2201      	movs	r2, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	f040 815a 	bne.w	800145a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d005      	beq.n	80011be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d130      	bne.n	8001220 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	2203      	movs	r2, #3
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	68da      	ldr	r2, [r3, #12]
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f4:	2201      	movs	r2, #1
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	091b      	lsrs	r3, r3, #4
 800120a:	f003 0201 	and.w	r2, r3, #1
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	2b03      	cmp	r3, #3
 800122a:	d017      	beq.n	800125c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d123      	bne.n	80012b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	08da      	lsrs	r2, r3, #3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3208      	adds	r2, #8
 8001270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001274:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	220f      	movs	r2, #15
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	691a      	ldr	r2, [r3, #16]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	08da      	lsrs	r2, r3, #3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3208      	adds	r2, #8
 80012aa:	69b9      	ldr	r1, [r7, #24]
 80012ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	2203      	movs	r2, #3
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0203 	and.w	r2, r3, #3
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 80b4 	beq.w	800145a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b60      	ldr	r3, [pc, #384]	@ (8001478 <HAL_GPIO_Init+0x30c>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fa:	4a5f      	ldr	r2, [pc, #380]	@ (8001478 <HAL_GPIO_Init+0x30c>)
 80012fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001300:	6453      	str	r3, [r2, #68]	@ 0x44
 8001302:	4b5d      	ldr	r3, [pc, #372]	@ (8001478 <HAL_GPIO_Init+0x30c>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001306:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800130e:	4a5b      	ldr	r2, [pc, #364]	@ (800147c <HAL_GPIO_Init+0x310>)
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	3302      	adds	r3, #2
 8001316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	220f      	movs	r2, #15
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a52      	ldr	r2, [pc, #328]	@ (8001480 <HAL_GPIO_Init+0x314>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d02b      	beq.n	8001392 <HAL_GPIO_Init+0x226>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a51      	ldr	r2, [pc, #324]	@ (8001484 <HAL_GPIO_Init+0x318>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d025      	beq.n	800138e <HAL_GPIO_Init+0x222>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a50      	ldr	r2, [pc, #320]	@ (8001488 <HAL_GPIO_Init+0x31c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d01f      	beq.n	800138a <HAL_GPIO_Init+0x21e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4f      	ldr	r2, [pc, #316]	@ (800148c <HAL_GPIO_Init+0x320>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d019      	beq.n	8001386 <HAL_GPIO_Init+0x21a>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4e      	ldr	r2, [pc, #312]	@ (8001490 <HAL_GPIO_Init+0x324>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d013      	beq.n	8001382 <HAL_GPIO_Init+0x216>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4d      	ldr	r2, [pc, #308]	@ (8001494 <HAL_GPIO_Init+0x328>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d00d      	beq.n	800137e <HAL_GPIO_Init+0x212>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4c      	ldr	r2, [pc, #304]	@ (8001498 <HAL_GPIO_Init+0x32c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d007      	beq.n	800137a <HAL_GPIO_Init+0x20e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4b      	ldr	r2, [pc, #300]	@ (800149c <HAL_GPIO_Init+0x330>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d101      	bne.n	8001376 <HAL_GPIO_Init+0x20a>
 8001372:	2307      	movs	r3, #7
 8001374:	e00e      	b.n	8001394 <HAL_GPIO_Init+0x228>
 8001376:	2308      	movs	r3, #8
 8001378:	e00c      	b.n	8001394 <HAL_GPIO_Init+0x228>
 800137a:	2306      	movs	r3, #6
 800137c:	e00a      	b.n	8001394 <HAL_GPIO_Init+0x228>
 800137e:	2305      	movs	r3, #5
 8001380:	e008      	b.n	8001394 <HAL_GPIO_Init+0x228>
 8001382:	2304      	movs	r3, #4
 8001384:	e006      	b.n	8001394 <HAL_GPIO_Init+0x228>
 8001386:	2303      	movs	r3, #3
 8001388:	e004      	b.n	8001394 <HAL_GPIO_Init+0x228>
 800138a:	2302      	movs	r3, #2
 800138c:	e002      	b.n	8001394 <HAL_GPIO_Init+0x228>
 800138e:	2301      	movs	r3, #1
 8001390:	e000      	b.n	8001394 <HAL_GPIO_Init+0x228>
 8001392:	2300      	movs	r3, #0
 8001394:	69fa      	ldr	r2, [r7, #28]
 8001396:	f002 0203 	and.w	r2, r2, #3
 800139a:	0092      	lsls	r2, r2, #2
 800139c:	4093      	lsls	r3, r2
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a4:	4935      	ldr	r1, [pc, #212]	@ (800147c <HAL_GPIO_Init+0x310>)
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	3302      	adds	r3, #2
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013b2:	4b3b      	ldr	r3, [pc, #236]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013d6:	4a32      	ldr	r2, [pc, #200]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013dc:	4b30      	ldr	r3, [pc, #192]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001400:	4a27      	ldr	r2, [pc, #156]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001406:	4b26      	ldr	r3, [pc, #152]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800142a:	4a1d      	ldr	r2, [pc, #116]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001430:	4b1b      	ldr	r3, [pc, #108]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001454:	4a12      	ldr	r2, [pc, #72]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3301      	adds	r3, #1
 800145e:	61fb      	str	r3, [r7, #28]
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	2b0f      	cmp	r3, #15
 8001464:	f67f ae90 	bls.w	8001188 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	3724      	adds	r7, #36	@ 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800
 800147c:	40013800 	.word	0x40013800
 8001480:	40020000 	.word	0x40020000
 8001484:	40020400 	.word	0x40020400
 8001488:	40020800 	.word	0x40020800
 800148c:	40020c00 	.word	0x40020c00
 8001490:	40021000 	.word	0x40021000
 8001494:	40021400 	.word	0x40021400
 8001498:	40021800 	.word	0x40021800
 800149c:	40021c00 	.word	0x40021c00
 80014a0:	40013c00 	.word	0x40013c00

080014a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
 80014b0:	4613      	mov	r3, r2
 80014b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014b4:	787b      	ldrb	r3, [r7, #1]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014c0:	e003      	b.n	80014ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014c2:	887b      	ldrh	r3, [r7, #2]
 80014c4:	041a      	lsls	r2, r3, #16
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	619a      	str	r2, [r3, #24]
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014e2:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014e4:	695a      	ldr	r2, [r3, #20]
 80014e6:	88fb      	ldrh	r3, [r7, #6]
 80014e8:	4013      	ands	r3, r2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d006      	beq.n	80014fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014ee:	4a05      	ldr	r2, [pc, #20]	@ (8001504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014f0:	88fb      	ldrh	r3, [r7, #6]
 80014f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fb6a 	bl	8000bd0 <HAL_GPIO_EXTI_Callback>
  }
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40013c00 	.word	0x40013c00

08001508 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e12b      	b.n	8001772 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d106      	bne.n	8001534 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff fb8c 	bl	8000c4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2224      	movs	r2, #36	@ 0x24
 8001538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0201 	bic.w	r2, r2, #1
 800154a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800155a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800156a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800156c:	f002 fe88 	bl	8004280 <HAL_RCC_GetPCLK1Freq>
 8001570:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	4a81      	ldr	r2, [pc, #516]	@ (800177c <HAL_I2C_Init+0x274>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d807      	bhi.n	800158c <HAL_I2C_Init+0x84>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4a80      	ldr	r2, [pc, #512]	@ (8001780 <HAL_I2C_Init+0x278>)
 8001580:	4293      	cmp	r3, r2
 8001582:	bf94      	ite	ls
 8001584:	2301      	movls	r3, #1
 8001586:	2300      	movhi	r3, #0
 8001588:	b2db      	uxtb	r3, r3
 800158a:	e006      	b.n	800159a <HAL_I2C_Init+0x92>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4a7d      	ldr	r2, [pc, #500]	@ (8001784 <HAL_I2C_Init+0x27c>)
 8001590:	4293      	cmp	r3, r2
 8001592:	bf94      	ite	ls
 8001594:	2301      	movls	r3, #1
 8001596:	2300      	movhi	r3, #0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e0e7      	b.n	8001772 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4a78      	ldr	r2, [pc, #480]	@ (8001788 <HAL_I2C_Init+0x280>)
 80015a6:	fba2 2303 	umull	r2, r3, r2, r3
 80015aa:	0c9b      	lsrs	r3, r3, #18
 80015ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	68ba      	ldr	r2, [r7, #8]
 80015be:	430a      	orrs	r2, r1
 80015c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	4a6a      	ldr	r2, [pc, #424]	@ (800177c <HAL_I2C_Init+0x274>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d802      	bhi.n	80015dc <HAL_I2C_Init+0xd4>
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	3301      	adds	r3, #1
 80015da:	e009      	b.n	80015f0 <HAL_I2C_Init+0xe8>
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80015e2:	fb02 f303 	mul.w	r3, r2, r3
 80015e6:	4a69      	ldr	r2, [pc, #420]	@ (800178c <HAL_I2C_Init+0x284>)
 80015e8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ec:	099b      	lsrs	r3, r3, #6
 80015ee:	3301      	adds	r3, #1
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6812      	ldr	r2, [r2, #0]
 80015f4:	430b      	orrs	r3, r1
 80015f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001602:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	495c      	ldr	r1, [pc, #368]	@ (800177c <HAL_I2C_Init+0x274>)
 800160c:	428b      	cmp	r3, r1
 800160e:	d819      	bhi.n	8001644 <HAL_I2C_Init+0x13c>
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	1e59      	subs	r1, r3, #1
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	fbb1 f3f3 	udiv	r3, r1, r3
 800161e:	1c59      	adds	r1, r3, #1
 8001620:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001624:	400b      	ands	r3, r1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00a      	beq.n	8001640 <HAL_I2C_Init+0x138>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	1e59      	subs	r1, r3, #1
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	fbb1 f3f3 	udiv	r3, r1, r3
 8001638:	3301      	adds	r3, #1
 800163a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800163e:	e051      	b.n	80016e4 <HAL_I2C_Init+0x1dc>
 8001640:	2304      	movs	r3, #4
 8001642:	e04f      	b.n	80016e4 <HAL_I2C_Init+0x1dc>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d111      	bne.n	8001670 <HAL_I2C_Init+0x168>
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	1e58      	subs	r0, r3, #1
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6859      	ldr	r1, [r3, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	440b      	add	r3, r1
 800165a:	fbb0 f3f3 	udiv	r3, r0, r3
 800165e:	3301      	adds	r3, #1
 8001660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001664:	2b00      	cmp	r3, #0
 8001666:	bf0c      	ite	eq
 8001668:	2301      	moveq	r3, #1
 800166a:	2300      	movne	r3, #0
 800166c:	b2db      	uxtb	r3, r3
 800166e:	e012      	b.n	8001696 <HAL_I2C_Init+0x18e>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	1e58      	subs	r0, r3, #1
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6859      	ldr	r1, [r3, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	0099      	lsls	r1, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	fbb0 f3f3 	udiv	r3, r0, r3
 8001686:	3301      	adds	r3, #1
 8001688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800168c:	2b00      	cmp	r3, #0
 800168e:	bf0c      	ite	eq
 8001690:	2301      	moveq	r3, #1
 8001692:	2300      	movne	r3, #0
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_I2C_Init+0x196>
 800169a:	2301      	movs	r3, #1
 800169c:	e022      	b.n	80016e4 <HAL_I2C_Init+0x1dc>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10e      	bne.n	80016c4 <HAL_I2C_Init+0x1bc>
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	1e58      	subs	r0, r3, #1
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6859      	ldr	r1, [r3, #4]
 80016ae:	460b      	mov	r3, r1
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	440b      	add	r3, r1
 80016b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80016b8:	3301      	adds	r3, #1
 80016ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016c2:	e00f      	b.n	80016e4 <HAL_I2C_Init+0x1dc>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	1e58      	subs	r0, r3, #1
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6859      	ldr	r1, [r3, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	0099      	lsls	r1, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016da:	3301      	adds	r3, #1
 80016dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	6809      	ldr	r1, [r1, #0]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69da      	ldr	r2, [r3, #28]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	430a      	orrs	r2, r1
 8001706:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001712:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6911      	ldr	r1, [r2, #16]
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	68d2      	ldr	r2, [r2, #12]
 800171e:	4311      	orrs	r1, r2
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	430b      	orrs	r3, r1
 8001726:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	695a      	ldr	r2, [r3, #20]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f042 0201 	orr.w	r2, r2, #1
 8001752:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2220      	movs	r2, #32
 800175e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	000186a0 	.word	0x000186a0
 8001780:	001e847f 	.word	0x001e847f
 8001784:	003d08ff 	.word	0x003d08ff
 8001788:	431bde83 	.word	0x431bde83
 800178c:	10624dd3 	.word	0x10624dd3

08001790 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af02      	add	r7, sp, #8
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	607a      	str	r2, [r7, #4]
 800179a:	461a      	mov	r2, r3
 800179c:	460b      	mov	r3, r1
 800179e:	817b      	strh	r3, [r7, #10]
 80017a0:	4613      	mov	r3, r2
 80017a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017a4:	f7ff fba0 	bl	8000ee8 <HAL_GetTick>
 80017a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b20      	cmp	r3, #32
 80017b4:	f040 80e0 	bne.w	8001978 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	2319      	movs	r3, #25
 80017be:	2201      	movs	r2, #1
 80017c0:	4970      	ldr	r1, [pc, #448]	@ (8001984 <HAL_I2C_Master_Transmit+0x1f4>)
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f000 fc64 	bl	8002090 <I2C_WaitOnFlagUntilTimeout>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80017ce:	2302      	movs	r3, #2
 80017d0:	e0d3      	b.n	800197a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d101      	bne.n	80017e0 <HAL_I2C_Master_Transmit+0x50>
 80017dc:	2302      	movs	r3, #2
 80017de:	e0cc      	b.n	800197a <HAL_I2C_Master_Transmit+0x1ea>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d007      	beq.n	8001806 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f042 0201 	orr.w	r2, r2, #1
 8001804:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001814:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2221      	movs	r2, #33	@ 0x21
 800181a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2210      	movs	r2, #16
 8001822:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2200      	movs	r2, #0
 800182a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	893a      	ldrh	r2, [r7, #8]
 8001836:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800183c:	b29a      	uxth	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4a50      	ldr	r2, [pc, #320]	@ (8001988 <HAL_I2C_Master_Transmit+0x1f8>)
 8001846:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001848:	8979      	ldrh	r1, [r7, #10]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	6a3a      	ldr	r2, [r7, #32]
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 face 	bl	8001df0 <I2C_MasterRequestWrite>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e08d      	b.n	800197a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001874:	e066      	b.n	8001944 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	6a39      	ldr	r1, [r7, #32]
 800187a:	68f8      	ldr	r0, [r7, #12]
 800187c:	f000 fd22 	bl	80022c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00d      	beq.n	80018a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	2b04      	cmp	r3, #4
 800188c:	d107      	bne.n	800189e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800189c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e06b      	b.n	800197a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a6:	781a      	ldrb	r2, [r3, #0]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b2:	1c5a      	adds	r2, r3, #1
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018bc:	b29b      	uxth	r3, r3
 80018be:	3b01      	subs	r3, #1
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ca:	3b01      	subs	r3, #1
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d11b      	bne.n	8001918 <HAL_I2C_Master_Transmit+0x188>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d017      	beq.n	8001918 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ec:	781a      	ldrb	r2, [r3, #0]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001902:	b29b      	uxth	r3, r3
 8001904:	3b01      	subs	r3, #1
 8001906:	b29a      	uxth	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001910:	3b01      	subs	r3, #1
 8001912:	b29a      	uxth	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	6a39      	ldr	r1, [r7, #32]
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f000 fd19 	bl	8002354 <I2C_WaitOnBTFFlagUntilTimeout>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00d      	beq.n	8001944 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192c:	2b04      	cmp	r3, #4
 800192e:	d107      	bne.n	8001940 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800193e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e01a      	b.n	800197a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001948:	2b00      	cmp	r3, #0
 800194a:	d194      	bne.n	8001876 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800195a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2220      	movs	r2, #32
 8001960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001974:	2300      	movs	r3, #0
 8001976:	e000      	b.n	800197a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001978:	2302      	movs	r3, #2
  }
}
 800197a:	4618      	mov	r0, r3
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	00100002 	.word	0x00100002
 8001988:	ffff0000 	.word	0xffff0000

0800198c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08c      	sub	sp, #48	@ 0x30
 8001990:	af02      	add	r7, sp, #8
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	461a      	mov	r2, r3
 8001998:	460b      	mov	r3, r1
 800199a:	817b      	strh	r3, [r7, #10]
 800199c:	4613      	mov	r3, r2
 800199e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019a0:	f7ff faa2 	bl	8000ee8 <HAL_GetTick>
 80019a4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b20      	cmp	r3, #32
 80019b0:	f040 8217 	bne.w	8001de2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	2319      	movs	r3, #25
 80019ba:	2201      	movs	r2, #1
 80019bc:	497c      	ldr	r1, [pc, #496]	@ (8001bb0 <HAL_I2C_Master_Receive+0x224>)
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f000 fb66 	bl	8002090 <I2C_WaitOnFlagUntilTimeout>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80019ca:	2302      	movs	r3, #2
 80019cc:	e20a      	b.n	8001de4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <HAL_I2C_Master_Receive+0x50>
 80019d8:	2302      	movs	r3, #2
 80019da:	e203      	b.n	8001de4 <HAL_I2C_Master_Receive+0x458>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d007      	beq.n	8001a02 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f042 0201 	orr.w	r2, r2, #1
 8001a00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a10:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2222      	movs	r2, #34	@ 0x22
 8001a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2210      	movs	r2, #16
 8001a1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	893a      	ldrh	r2, [r7, #8]
 8001a32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	4a5c      	ldr	r2, [pc, #368]	@ (8001bb4 <HAL_I2C_Master_Receive+0x228>)
 8001a42:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a44:	8979      	ldrh	r1, [r7, #10]
 8001a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f000 fa52 	bl	8001ef4 <I2C_MasterRequestRead>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e1c4      	b.n	8001de4 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d113      	bne.n	8001a8a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a62:	2300      	movs	r3, #0
 8001a64:	623b      	str	r3, [r7, #32]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	623b      	str	r3, [r7, #32]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	623b      	str	r3, [r7, #32]
 8001a76:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	e198      	b.n	8001dbc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d11b      	bne.n	8001aca <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001aa0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	61fb      	str	r3, [r7, #28]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	61fb      	str	r3, [r7, #28]
 8001ab6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	e178      	b.n	8001dbc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d11b      	bne.n	8001b0a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ae0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001af0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	61bb      	str	r3, [r7, #24]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	61bb      	str	r3, [r7, #24]
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	e158      	b.n	8001dbc <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001b18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001b30:	e144      	b.n	8001dbc <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	f200 80f1 	bhi.w	8001d1e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d123      	bne.n	8001b8c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b46:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f000 fc4b 	bl	80023e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e145      	b.n	8001de4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	691a      	ldr	r2, [r3, #16]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6a:	1c5a      	adds	r2, r3, #1
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b74:	3b01      	subs	r3, #1
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	3b01      	subs	r3, #1
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b8a:	e117      	b.n	8001dbc <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d14e      	bne.n	8001c32 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	4906      	ldr	r1, [pc, #24]	@ (8001bb8 <HAL_I2C_Master_Receive+0x22c>)
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 fa76 	bl	8002090 <I2C_WaitOnFlagUntilTimeout>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d008      	beq.n	8001bbc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e11a      	b.n	8001de4 <HAL_I2C_Master_Receive+0x458>
 8001bae:	bf00      	nop
 8001bb0:	00100002 	.word	0x00100002
 8001bb4:	ffff0000 	.word	0xffff0000
 8001bb8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691a      	ldr	r2, [r3, #16]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bde:	1c5a      	adds	r2, r3, #1
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001be8:	3b01      	subs	r3, #1
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	691a      	ldr	r2, [r3, #16]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c10:	1c5a      	adds	r2, r3, #1
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001c30:	e0c4      	b.n	8001dbc <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c38:	2200      	movs	r2, #0
 8001c3a:	496c      	ldr	r1, [pc, #432]	@ (8001dec <HAL_I2C_Master_Receive+0x460>)
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f000 fa27 	bl	8002090 <I2C_WaitOnFlagUntilTimeout>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0cb      	b.n	8001de4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691a      	ldr	r2, [r3, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6e:	1c5a      	adds	r2, r3, #1
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	3b01      	subs	r3, #1
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c94:	2200      	movs	r2, #0
 8001c96:	4955      	ldr	r1, [pc, #340]	@ (8001dec <HAL_I2C_Master_Receive+0x460>)
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f000 f9f9 	bl	8002090 <I2C_WaitOnFlagUntilTimeout>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e09d      	b.n	8001de4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	691a      	ldr	r2, [r3, #16]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	691a      	ldr	r2, [r3, #16]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfc:	1c5a      	adds	r2, r3, #1
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	3b01      	subs	r3, #1
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d1c:	e04e      	b.n	8001dbc <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d20:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 fb5e 	bl	80023e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e058      	b.n	8001de4 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d124      	bne.n	8001dbc <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d76:	2b03      	cmp	r3, #3
 8001d78:	d107      	bne.n	8001d8a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d88:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001da6:	3b01      	subs	r3, #1
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	3b01      	subs	r3, #1
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f47f aeb6 	bne.w	8001b32 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2220      	movs	r2, #32
 8001dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	e000      	b.n	8001de4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001de2:	2302      	movs	r3, #2
  }
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3728      	adds	r7, #40	@ 0x28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	00010004 	.word	0x00010004

08001df0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af02      	add	r7, sp, #8
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	607a      	str	r2, [r7, #4]
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e04:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d006      	beq.n	8001e1a <I2C_MasterRequestWrite+0x2a>
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d003      	beq.n	8001e1a <I2C_MasterRequestWrite+0x2a>
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001e18:	d108      	bne.n	8001e2c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	e00b      	b.n	8001e44 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e30:	2b12      	cmp	r3, #18
 8001e32:	d107      	bne.n	8001e44 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f000 f91d 	bl	8002090 <I2C_WaitOnFlagUntilTimeout>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00d      	beq.n	8001e78 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e6a:	d103      	bne.n	8001e74 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e72:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e035      	b.n	8001ee4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001e80:	d108      	bne.n	8001e94 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e82:	897b      	ldrh	r3, [r7, #10]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	461a      	mov	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001e90:	611a      	str	r2, [r3, #16]
 8001e92:	e01b      	b.n	8001ecc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e94:	897b      	ldrh	r3, [r7, #10]
 8001e96:	11db      	asrs	r3, r3, #7
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	f003 0306 	and.w	r3, r3, #6
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	f063 030f 	orn	r3, r3, #15
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	490e      	ldr	r1, [pc, #56]	@ (8001eec <I2C_MasterRequestWrite+0xfc>)
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f000 f966 	bl	8002184 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e010      	b.n	8001ee4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ec2:	897b      	ldrh	r3, [r7, #10]
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	4907      	ldr	r1, [pc, #28]	@ (8001ef0 <I2C_MasterRequestWrite+0x100>)
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 f956 	bl	8002184 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	00010008 	.word	0x00010008
 8001ef0:	00010002 	.word	0x00010002

08001ef4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af02      	add	r7, sp, #8
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	607a      	str	r2, [r7, #4]
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	460b      	mov	r3, r1
 8001f02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f08:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001f18:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d006      	beq.n	8001f2e <I2C_MasterRequestRead+0x3a>
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d003      	beq.n	8001f2e <I2C_MasterRequestRead+0x3a>
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001f2c:	d108      	bne.n	8001f40 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	e00b      	b.n	8001f58 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f44:	2b11      	cmp	r3, #17
 8001f46:	d107      	bne.n	8001f58 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f000 f893 	bl	8002090 <I2C_WaitOnFlagUntilTimeout>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00d      	beq.n	8001f8c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f7e:	d103      	bne.n	8001f88 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f86:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e079      	b.n	8002080 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f94:	d108      	bne.n	8001fa8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001f96:	897b      	ldrh	r3, [r7, #10]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	611a      	str	r2, [r3, #16]
 8001fa6:	e05f      	b.n	8002068 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001fa8:	897b      	ldrh	r3, [r7, #10]
 8001faa:	11db      	asrs	r3, r3, #7
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	f003 0306 	and.w	r3, r3, #6
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	f063 030f 	orn	r3, r3, #15
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	4930      	ldr	r1, [pc, #192]	@ (8002088 <I2C_MasterRequestRead+0x194>)
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f8dc 	bl	8002184 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e054      	b.n	8002080 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001fd6:	897b      	ldrh	r3, [r7, #10]
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	4929      	ldr	r1, [pc, #164]	@ (800208c <I2C_MasterRequestRead+0x198>)
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 f8cc 	bl	8002184 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e044      	b.n	8002080 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800201a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 f831 	bl	8002090 <I2C_WaitOnFlagUntilTimeout>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00d      	beq.n	8002050 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800203e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002042:	d103      	bne.n	800204c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800204a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e017      	b.n	8002080 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002050:	897b      	ldrh	r3, [r7, #10]
 8002052:	11db      	asrs	r3, r3, #7
 8002054:	b2db      	uxtb	r3, r3
 8002056:	f003 0306 	and.w	r3, r3, #6
 800205a:	b2db      	uxtb	r3, r3
 800205c:	f063 030e 	orn	r3, r3, #14
 8002060:	b2da      	uxtb	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	4907      	ldr	r1, [pc, #28]	@ (800208c <I2C_MasterRequestRead+0x198>)
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 f888 	bl	8002184 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	00010008 	.word	0x00010008
 800208c:	00010002 	.word	0x00010002

08002090 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	603b      	str	r3, [r7, #0]
 800209c:	4613      	mov	r3, r2
 800209e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020a0:	e048      	b.n	8002134 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a8:	d044      	beq.n	8002134 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020aa:	f7fe ff1d 	bl	8000ee8 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d302      	bcc.n	80020c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d139      	bne.n	8002134 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	0c1b      	lsrs	r3, r3, #16
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d10d      	bne.n	80020e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	43da      	mvns	r2, r3
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	4013      	ands	r3, r2
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	bf0c      	ite	eq
 80020dc:	2301      	moveq	r3, #1
 80020de:	2300      	movne	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	461a      	mov	r2, r3
 80020e4:	e00c      	b.n	8002100 <I2C_WaitOnFlagUntilTimeout+0x70>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	43da      	mvns	r2, r3
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	4013      	ands	r3, r2
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	bf0c      	ite	eq
 80020f8:	2301      	moveq	r3, #1
 80020fa:	2300      	movne	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	461a      	mov	r2, r3
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	429a      	cmp	r2, r3
 8002104:	d116      	bne.n	8002134 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2220      	movs	r2, #32
 8002110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002120:	f043 0220 	orr.w	r2, r3, #32
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e023      	b.n	800217c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	0c1b      	lsrs	r3, r3, #16
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b01      	cmp	r3, #1
 800213c:	d10d      	bne.n	800215a <I2C_WaitOnFlagUntilTimeout+0xca>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	43da      	mvns	r2, r3
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	4013      	ands	r3, r2
 800214a:	b29b      	uxth	r3, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	bf0c      	ite	eq
 8002150:	2301      	moveq	r3, #1
 8002152:	2300      	movne	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	461a      	mov	r2, r3
 8002158:	e00c      	b.n	8002174 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	43da      	mvns	r2, r3
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	4013      	ands	r3, r2
 8002166:	b29b      	uxth	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	bf0c      	ite	eq
 800216c:	2301      	moveq	r3, #1
 800216e:	2300      	movne	r3, #0
 8002170:	b2db      	uxtb	r3, r3
 8002172:	461a      	mov	r2, r3
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	429a      	cmp	r2, r3
 8002178:	d093      	beq.n	80020a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
 8002190:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002192:	e071      	b.n	8002278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800219e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021a2:	d123      	bne.n	80021ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80021bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2220      	movs	r2, #32
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d8:	f043 0204 	orr.w	r2, r3, #4
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e067      	b.n	80022bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f2:	d041      	beq.n	8002278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021f4:	f7fe fe78 	bl	8000ee8 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	429a      	cmp	r2, r3
 8002202:	d302      	bcc.n	800220a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d136      	bne.n	8002278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	0c1b      	lsrs	r3, r3, #16
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b01      	cmp	r3, #1
 8002212:	d10c      	bne.n	800222e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	43da      	mvns	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	4013      	ands	r3, r2
 8002220:	b29b      	uxth	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	bf14      	ite	ne
 8002226:	2301      	movne	r3, #1
 8002228:	2300      	moveq	r3, #0
 800222a:	b2db      	uxtb	r3, r3
 800222c:	e00b      	b.n	8002246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	43da      	mvns	r2, r3
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	4013      	ands	r3, r2
 800223a:	b29b      	uxth	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	bf14      	ite	ne
 8002240:	2301      	movne	r3, #1
 8002242:	2300      	moveq	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d016      	beq.n	8002278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2220      	movs	r2, #32
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002264:	f043 0220 	orr.w	r2, r3, #32
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e021      	b.n	80022bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	0c1b      	lsrs	r3, r3, #16
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b01      	cmp	r3, #1
 8002280:	d10c      	bne.n	800229c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	43da      	mvns	r2, r3
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	4013      	ands	r3, r2
 800228e:	b29b      	uxth	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf14      	ite	ne
 8002294:	2301      	movne	r3, #1
 8002296:	2300      	moveq	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	e00b      	b.n	80022b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	43da      	mvns	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	4013      	ands	r3, r2
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	bf14      	ite	ne
 80022ae:	2301      	movne	r3, #1
 80022b0:	2300      	moveq	r3, #0
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f47f af6d 	bne.w	8002194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022d0:	e034      	b.n	800233c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 f8e3 	bl	800249e <I2C_IsAcknowledgeFailed>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e034      	b.n	800234c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e8:	d028      	beq.n	800233c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ea:	f7fe fdfd 	bl	8000ee8 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d302      	bcc.n	8002300 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d11d      	bne.n	800233c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800230a:	2b80      	cmp	r3, #128	@ 0x80
 800230c:	d016      	beq.n	800233c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2220      	movs	r2, #32
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002328:	f043 0220 	orr.w	r2, r3, #32
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e007      	b.n	800234c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002346:	2b80      	cmp	r3, #128	@ 0x80
 8002348:	d1c3      	bne.n	80022d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002360:	e034      	b.n	80023cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 f89b 	bl	800249e <I2C_IsAcknowledgeFailed>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e034      	b.n	80023dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002378:	d028      	beq.n	80023cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800237a:	f7fe fdb5 	bl	8000ee8 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	429a      	cmp	r2, r3
 8002388:	d302      	bcc.n	8002390 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d11d      	bne.n	80023cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	2b04      	cmp	r3, #4
 800239c:	d016      	beq.n	80023cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b8:	f043 0220 	orr.w	r2, r3, #32
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e007      	b.n	80023dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d1c3      	bne.n	8002362 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023f0:	e049      	b.n	8002486 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	f003 0310 	and.w	r3, r3, #16
 80023fc:	2b10      	cmp	r3, #16
 80023fe:	d119      	bne.n	8002434 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f06f 0210 	mvn.w	r2, #16
 8002408:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2220      	movs	r2, #32
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e030      	b.n	8002496 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002434:	f7fe fd58 	bl	8000ee8 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	429a      	cmp	r2, r3
 8002442:	d302      	bcc.n	800244a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d11d      	bne.n	8002486 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002454:	2b40      	cmp	r3, #64	@ 0x40
 8002456:	d016      	beq.n	8002486 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2220      	movs	r2, #32
 8002462:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002472:	f043 0220 	orr.w	r2, r3, #32
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e007      	b.n	8002496 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002490:	2b40      	cmp	r3, #64	@ 0x40
 8002492:	d1ae      	bne.n	80023f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024b4:	d11b      	bne.n	80024ee <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80024be:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2220      	movs	r2, #32
 80024ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024da:	f043 0204 	orr.w	r2, r3, #4
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af02      	add	r7, sp, #8
 8002502:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e101      	b.n	8002712 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	d106      	bne.n	800252e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f005 fb77 	bl	8007c1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2203      	movs	r2, #3
 8002532:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800253c:	d102      	bne.n	8002544 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f001 ffc4 	bl	80044d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6818      	ldr	r0, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	7c1a      	ldrb	r2, [r3, #16]
 8002556:	f88d 2000 	strb.w	r2, [sp]
 800255a:	3304      	adds	r3, #4
 800255c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800255e:	f001 fea3 	bl	80042a8 <USB_CoreInit>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2202      	movs	r2, #2
 800256c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0ce      	b.n	8002712 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2100      	movs	r1, #0
 800257a:	4618      	mov	r0, r3
 800257c:	f001 ffbc 	bl	80044f8 <USB_SetCurrentMode>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d005      	beq.n	8002592 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2202      	movs	r2, #2
 800258a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e0bf      	b.n	8002712 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002592:	2300      	movs	r3, #0
 8002594:	73fb      	strb	r3, [r7, #15]
 8002596:	e04a      	b.n	800262e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002598:	7bfa      	ldrb	r2, [r7, #15]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4413      	add	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	3315      	adds	r3, #21
 80025a8:	2201      	movs	r2, #1
 80025aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025ac:	7bfa      	ldrb	r2, [r7, #15]
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	4413      	add	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	3314      	adds	r3, #20
 80025bc:	7bfa      	ldrb	r2, [r7, #15]
 80025be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025c0:	7bfa      	ldrb	r2, [r7, #15]
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	b298      	uxth	r0, r3
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4413      	add	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	332e      	adds	r3, #46	@ 0x2e
 80025d4:	4602      	mov	r2, r0
 80025d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025d8:	7bfa      	ldrb	r2, [r7, #15]
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4413      	add	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	3318      	adds	r3, #24
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025ec:	7bfa      	ldrb	r2, [r7, #15]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4413      	add	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	331c      	adds	r3, #28
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002600:	7bfa      	ldrb	r2, [r7, #15]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	3320      	adds	r3, #32
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002614:	7bfa      	ldrb	r2, [r7, #15]
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4413      	add	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	3324      	adds	r3, #36	@ 0x24
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002628:	7bfb      	ldrb	r3, [r7, #15]
 800262a:	3301      	adds	r3, #1
 800262c:	73fb      	strb	r3, [r7, #15]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	791b      	ldrb	r3, [r3, #4]
 8002632:	7bfa      	ldrb	r2, [r7, #15]
 8002634:	429a      	cmp	r2, r3
 8002636:	d3af      	bcc.n	8002598 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002638:	2300      	movs	r3, #0
 800263a:	73fb      	strb	r3, [r7, #15]
 800263c:	e044      	b.n	80026c8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800263e:	7bfa      	ldrb	r2, [r7, #15]
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4413      	add	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002650:	2200      	movs	r2, #0
 8002652:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002654:	7bfa      	ldrb	r2, [r7, #15]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002666:	7bfa      	ldrb	r2, [r7, #15]
 8002668:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800266a:	7bfa      	ldrb	r2, [r7, #15]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4413      	add	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002680:	7bfa      	ldrb	r2, [r7, #15]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002696:	7bfa      	ldrb	r2, [r7, #15]
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	4413      	add	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	440b      	add	r3, r1
 80026a4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026ac:	7bfa      	ldrb	r2, [r7, #15]
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	4413      	add	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	3301      	adds	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	791b      	ldrb	r3, [r3, #4]
 80026cc:	7bfa      	ldrb	r2, [r7, #15]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d3b5      	bcc.n	800263e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6818      	ldr	r0, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	7c1a      	ldrb	r2, [r3, #16]
 80026da:	f88d 2000 	strb.w	r2, [sp]
 80026de:	3304      	adds	r3, #4
 80026e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026e2:	f001 ff55 	bl	8004590 <USB_DevInit>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d005      	beq.n	80026f8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e00c      	b.n	8002712 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f002 ff9f 	bl	800564e <USB_DevDisconnect>

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b084      	sub	sp, #16
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800272e:	2b01      	cmp	r3, #1
 8002730:	d101      	bne.n	8002736 <HAL_PCD_Start+0x1c>
 8002732:	2302      	movs	r3, #2
 8002734:	e022      	b.n	800277c <HAL_PCD_Start+0x62>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d009      	beq.n	800275e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800274e:	2b01      	cmp	r3, #1
 8002750:	d105      	bne.n	800275e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002756:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f001 fea6 	bl	80044b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f002 ff4d 	bl	800560c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002784:	b590      	push	{r4, r7, lr}
 8002786:	b08d      	sub	sp, #52	@ 0x34
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f003 f80b 	bl	80057b6 <USB_GetMode>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f040 848c 	bne.w	80030c0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f002 ff6f 	bl	8005690 <USB_ReadInterrupts>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 8482 	beq.w	80030be <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	0a1b      	lsrs	r3, r3, #8
 80027c4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f002 ff5c 	bl	8005690 <USB_ReadInterrupts>
 80027d8:	4603      	mov	r3, r0
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d107      	bne.n	80027f2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	695a      	ldr	r2, [r3, #20]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f002 0202 	and.w	r2, r2, #2
 80027f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f002 ff4a 	bl	8005690 <USB_ReadInterrupts>
 80027fc:	4603      	mov	r3, r0
 80027fe:	f003 0310 	and.w	r3, r3, #16
 8002802:	2b10      	cmp	r3, #16
 8002804:	d161      	bne.n	80028ca <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	699a      	ldr	r2, [r3, #24]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0210 	bic.w	r2, r2, #16
 8002814:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	f003 020f 	and.w	r2, r3, #15
 8002822:	4613      	mov	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4413      	add	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	4413      	add	r3, r2
 8002832:	3304      	adds	r3, #4
 8002834:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	0c5b      	lsrs	r3, r3, #17
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	2b02      	cmp	r3, #2
 8002840:	d124      	bne.n	800288c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002848:	4013      	ands	r3, r2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d035      	beq.n	80028ba <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002858:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800285c:	b29b      	uxth	r3, r3
 800285e:	461a      	mov	r2, r3
 8002860:	6a38      	ldr	r0, [r7, #32]
 8002862:	f002 fd81 	bl	8005368 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	091b      	lsrs	r3, r3, #4
 800286e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002872:	441a      	add	r2, r3
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	695a      	ldr	r2, [r3, #20]
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	091b      	lsrs	r3, r3, #4
 8002880:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002884:	441a      	add	r2, r3
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	615a      	str	r2, [r3, #20]
 800288a:	e016      	b.n	80028ba <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	0c5b      	lsrs	r3, r3, #17
 8002890:	f003 030f 	and.w	r3, r3, #15
 8002894:	2b06      	cmp	r3, #6
 8002896:	d110      	bne.n	80028ba <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800289e:	2208      	movs	r2, #8
 80028a0:	4619      	mov	r1, r3
 80028a2:	6a38      	ldr	r0, [r7, #32]
 80028a4:	f002 fd60 	bl	8005368 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	695a      	ldr	r2, [r3, #20]
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	091b      	lsrs	r3, r3, #4
 80028b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028b4:	441a      	add	r2, r3
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	699a      	ldr	r2, [r3, #24]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 0210 	orr.w	r2, r2, #16
 80028c8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f002 fede 	bl	8005690 <USB_ReadInterrupts>
 80028d4:	4603      	mov	r3, r0
 80028d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028da:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80028de:	f040 80a7 	bne.w	8002a30 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f002 fee3 	bl	80056b6 <USB_ReadDevAllOutEpInterrupt>
 80028f0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80028f2:	e099      	b.n	8002a28 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80028f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 808e 	beq.w	8002a1c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	4611      	mov	r1, r2
 800290a:	4618      	mov	r0, r3
 800290c:	f002 ff07 	bl	800571e <USB_ReadDevOutEPInterrupt>
 8002910:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00c      	beq.n	8002936 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800291c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	4413      	add	r3, r2
 8002924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002928:	461a      	mov	r2, r3
 800292a:	2301      	movs	r3, #1
 800292c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800292e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 fea3 	bl	800367c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00c      	beq.n	800295a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002942:	015a      	lsls	r2, r3, #5
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	4413      	add	r3, r2
 8002948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800294c:	461a      	mov	r2, r3
 800294e:	2308      	movs	r3, #8
 8002950:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002952:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 ff79 	bl	800384c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	f003 0310 	and.w	r3, r3, #16
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	4413      	add	r3, r2
 800296c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002970:	461a      	mov	r2, r3
 8002972:	2310      	movs	r3, #16
 8002974:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d030      	beq.n	80029e2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002988:	2b80      	cmp	r3, #128	@ 0x80
 800298a:	d109      	bne.n	80029a0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	69fa      	ldr	r2, [r7, #28]
 8002996:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800299a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800299e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80029a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029a2:	4613      	mov	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	4413      	add	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	4413      	add	r3, r2
 80029b2:	3304      	adds	r3, #4
 80029b4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	78db      	ldrb	r3, [r3, #3]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d108      	bne.n	80029d0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	2200      	movs	r2, #0
 80029c2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80029c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	4619      	mov	r1, r3
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f005 fa2c 	bl	8007e28 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80029d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029dc:	461a      	mov	r2, r3
 80029de:	2302      	movs	r3, #2
 80029e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	f003 0320 	and.w	r3, r3, #32
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ee:	015a      	lsls	r2, r3, #5
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029f8:	461a      	mov	r2, r3
 80029fa:	2320      	movs	r3, #32
 80029fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d009      	beq.n	8002a1c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a14:	461a      	mov	r2, r3
 8002a16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a1a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1e:	3301      	adds	r3, #1
 8002a20:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a24:	085b      	lsrs	r3, r3, #1
 8002a26:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f47f af62 	bne.w	80028f4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f002 fe2b 	bl	8005690 <USB_ReadInterrupts>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a44:	f040 80db 	bne.w	8002bfe <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f002 fe4c 	bl	80056ea <USB_ReadDevAllInEpInterrupt>
 8002a52:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002a58:	e0cd      	b.n	8002bf6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 80c2 	beq.w	8002bea <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f002 fe72 	bl	800575a <USB_ReadDevInEPInterrupt>
 8002a76:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d057      	beq.n	8002b32 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a84:	f003 030f 	and.w	r3, r3, #15
 8002a88:	2201      	movs	r2, #1
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69f9      	ldr	r1, [r7, #28]
 8002a9e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa8:	015a      	lsls	r2, r3, #5
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	4413      	add	r3, r2
 8002aae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	799b      	ldrb	r3, [r3, #6]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d132      	bne.n	8002b26 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	4413      	add	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	3320      	adds	r3, #32
 8002ad0:	6819      	ldr	r1, [r3, #0]
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	4413      	add	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4403      	add	r3, r0
 8002ae0:	331c      	adds	r3, #28
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4419      	add	r1, r3
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aea:	4613      	mov	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4413      	add	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4403      	add	r3, r0
 8002af4:	3320      	adds	r3, #32
 8002af6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d113      	bne.n	8002b26 <HAL_PCD_IRQHandler+0x3a2>
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b02:	4613      	mov	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	4413      	add	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	3324      	adds	r3, #36	@ 0x24
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d108      	bne.n	8002b26 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6818      	ldr	r0, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b1e:	461a      	mov	r2, r3
 8002b20:	2101      	movs	r1, #1
 8002b22:	f002 fe79 	bl	8005818 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f005 f8f6 	bl	8007d1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b48:	461a      	mov	r2, r3
 8002b4a:	2308      	movs	r3, #8
 8002b4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	f003 0310 	and.w	r3, r3, #16
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d008      	beq.n	8002b6a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5a:	015a      	lsls	r2, r3, #5
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b64:	461a      	mov	r2, r3
 8002b66:	2310      	movs	r3, #16
 8002b68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b80:	461a      	mov	r2, r3
 8002b82:	2340      	movs	r3, #64	@ 0x40
 8002b84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d023      	beq.n	8002bd8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002b90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b92:	6a38      	ldr	r0, [r7, #32]
 8002b94:	f001 fe60 	bl	8004858 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002b98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	3310      	adds	r3, #16
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3304      	adds	r3, #4
 8002baa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	78db      	ldrb	r3, [r3, #3]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d108      	bne.n	8002bc6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f005 f943 	bl	8007e4c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002be2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 fcbd 	bl	8003564 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bec:	3301      	adds	r3, #1
 8002bee:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf2:	085b      	lsrs	r3, r3, #1
 8002bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f47f af2e 	bne.w	8002a5a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f002 fd44 	bl	8005690 <USB_ReadInterrupts>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c12:	d122      	bne.n	8002c5a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	69fa      	ldr	r2, [r7, #28]
 8002c1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c22:	f023 0301 	bic.w	r3, r3, #1
 8002c26:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d108      	bne.n	8002c44 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 fea3 	bl	8003988 <HAL_PCDEx_LPM_Callback>
 8002c42:	e002      	b.n	8002c4a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f005 f8e1 	bl	8007e0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	695a      	ldr	r2, [r3, #20]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002c58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f002 fd16 	bl	8005690 <USB_ReadInterrupts>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c6e:	d112      	bne.n	8002c96 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d102      	bne.n	8002c86 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f005 f89d 	bl	8007dc0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695a      	ldr	r2, [r3, #20]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002c94:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f002 fcf8 	bl	8005690 <USB_ReadInterrupts>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ca6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002caa:	f040 80b7 	bne.w	8002e1c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	69fa      	ldr	r2, [r7, #28]
 8002cb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cbc:	f023 0301 	bic.w	r3, r3, #1
 8002cc0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2110      	movs	r1, #16
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f001 fdc5 	bl	8004858 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cce:	2300      	movs	r3, #0
 8002cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cd2:	e046      	b.n	8002d62 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cd6:	015a      	lsls	r2, r3, #5
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002ce6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cea:	015a      	lsls	r2, r3, #5
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	4413      	add	r3, r2
 8002cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cf8:	0151      	lsls	r1, r2, #5
 8002cfa:	69fa      	ldr	r2, [r7, #28]
 8002cfc:	440a      	add	r2, r1
 8002cfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002d02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d06:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d14:	461a      	mov	r2, r3
 8002d16:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d1a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d1e:	015a      	lsls	r2, r3, #5
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	4413      	add	r3, r2
 8002d24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d2c:	0151      	lsls	r1, r2, #5
 8002d2e:	69fa      	ldr	r2, [r7, #28]
 8002d30:	440a      	add	r2, r1
 8002d32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002d36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d3a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d4c:	0151      	lsls	r1, r2, #5
 8002d4e:	69fa      	ldr	r2, [r7, #28]
 8002d50:	440a      	add	r2, r1
 8002d52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002d56:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002d5a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d5e:	3301      	adds	r3, #1
 8002d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	791b      	ldrb	r3, [r3, #4]
 8002d66:	461a      	mov	r2, r3
 8002d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d3b2      	bcc.n	8002cd4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	69fa      	ldr	r2, [r7, #28]
 8002d78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d7c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002d80:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	7bdb      	ldrb	r3, [r3, #15]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d016      	beq.n	8002db8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d94:	69fa      	ldr	r2, [r7, #28]
 8002d96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d9a:	f043 030b 	orr.w	r3, r3, #11
 8002d9e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002daa:	69fa      	ldr	r2, [r7, #28]
 8002dac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002db0:	f043 030b 	orr.w	r3, r3, #11
 8002db4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002db6:	e015      	b.n	8002de4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	69fa      	ldr	r2, [r7, #28]
 8002dc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dc6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002dca:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002dce:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	69fa      	ldr	r2, [r7, #28]
 8002dda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dde:	f043 030b 	orr.w	r3, r3, #11
 8002de2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	69fa      	ldr	r2, [r7, #28]
 8002dee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002df2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002df6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6818      	ldr	r0, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e06:	461a      	mov	r2, r3
 8002e08:	f002 fd06 	bl	8005818 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695a      	ldr	r2, [r3, #20]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002e1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f002 fc35 	bl	8005690 <USB_ReadInterrupts>
 8002e26:	4603      	mov	r3, r0
 8002e28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e30:	d123      	bne.n	8002e7a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f002 fccb 	bl	80057d2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f001 fd82 	bl	800494a <USB_GetDevSpeed>
 8002e46:	4603      	mov	r3, r0
 8002e48:	461a      	mov	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681c      	ldr	r4, [r3, #0]
 8002e52:	f001 fa09 	bl	8004268 <HAL_RCC_GetHCLKFreq>
 8002e56:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4620      	mov	r0, r4
 8002e60:	f001 fa86 	bl	8004370 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f004 ff82 	bl	8007d6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	695a      	ldr	r2, [r3, #20]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002e78:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f002 fc06 	bl	8005690 <USB_ReadInterrupts>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d10a      	bne.n	8002ea4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f004 ff5f 	bl	8007d52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695a      	ldr	r2, [r3, #20]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f002 0208 	and.w	r2, r2, #8
 8002ea2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f002 fbf1 	bl	8005690 <USB_ReadInterrupts>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eb4:	2b80      	cmp	r3, #128	@ 0x80
 8002eb6:	d123      	bne.n	8002f00 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ec8:	e014      	b.n	8002ef4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ece:	4613      	mov	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d105      	bne.n	8002eee <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 fb0a 	bl	8003502 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	791b      	ldrb	r3, [r3, #4]
 8002ef8:	461a      	mov	r2, r3
 8002efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d3e4      	bcc.n	8002eca <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f002 fbc3 	bl	8005690 <USB_ReadInterrupts>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f14:	d13c      	bne.n	8002f90 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f16:	2301      	movs	r3, #1
 8002f18:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f1a:	e02b      	b.n	8002f74 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f30:	4613      	mov	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	3318      	adds	r3, #24
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d115      	bne.n	8002f6e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002f42:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	da12      	bge.n	8002f6e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	3317      	adds	r3, #23
 8002f58:	2201      	movs	r2, #1
 8002f5a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	4619      	mov	r1, r3
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 faca 	bl	8003502 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f70:	3301      	adds	r3, #1
 8002f72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	791b      	ldrb	r3, [r3, #4]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d3cd      	bcc.n	8002f1c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695a      	ldr	r2, [r3, #20]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002f8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f002 fb7b 	bl	8005690 <USB_ReadInterrupts>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fa0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fa4:	d156      	bne.n	8003054 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002faa:	e045      	b.n	8003038 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d12e      	bne.n	8003032 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002fd4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	da2b      	bge.n	8003032 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002fe6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d121      	bne.n	8003032 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003000:	2201      	movs	r2, #1
 8003002:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10a      	bne.n	8003032 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	69fa      	ldr	r2, [r7, #28]
 8003026:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800302a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800302e:	6053      	str	r3, [r2, #4]
            break;
 8003030:	e008      	b.n	8003044 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003034:	3301      	adds	r3, #1
 8003036:	627b      	str	r3, [r7, #36]	@ 0x24
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	791b      	ldrb	r3, [r3, #4]
 800303c:	461a      	mov	r2, r3
 800303e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003040:	4293      	cmp	r3, r2
 8003042:	d3b3      	bcc.n	8002fac <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003052:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f002 fb19 	bl	8005690 <USB_ReadInterrupts>
 800305e:	4603      	mov	r3, r0
 8003060:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003064:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003068:	d10a      	bne.n	8003080 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f004 ff00 	bl	8007e70 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695a      	ldr	r2, [r3, #20]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800307e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f002 fb03 	bl	8005690 <USB_ReadInterrupts>
 800308a:	4603      	mov	r3, r0
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b04      	cmp	r3, #4
 8003092:	d115      	bne.n	80030c0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f004 fef0 	bl	8007e8c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6859      	ldr	r1, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	605a      	str	r2, [r3, #4]
 80030bc:	e000      	b.n	80030c0 <HAL_PCD_IRQHandler+0x93c>
      return;
 80030be:	bf00      	nop
    }
  }
}
 80030c0:	3734      	adds	r7, #52	@ 0x34
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd90      	pop	{r4, r7, pc}

080030c6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	460b      	mov	r3, r1
 80030d0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_PCD_SetAddress+0x1a>
 80030dc:	2302      	movs	r3, #2
 80030de:	e012      	b.n	8003106 <HAL_PCD_SetAddress+0x40>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	78fa      	ldrb	r2, [r7, #3]
 80030ec:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	78fa      	ldrb	r2, [r7, #3]
 80030f4:	4611      	mov	r1, r2
 80030f6:	4618      	mov	r0, r3
 80030f8:	f002 fa62 	bl	80055c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b084      	sub	sp, #16
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
 8003116:	4608      	mov	r0, r1
 8003118:	4611      	mov	r1, r2
 800311a:	461a      	mov	r2, r3
 800311c:	4603      	mov	r3, r0
 800311e:	70fb      	strb	r3, [r7, #3]
 8003120:	460b      	mov	r3, r1
 8003122:	803b      	strh	r3, [r7, #0]
 8003124:	4613      	mov	r3, r2
 8003126:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800312c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003130:	2b00      	cmp	r3, #0
 8003132:	da0f      	bge.n	8003154 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	f003 020f 	and.w	r2, r3, #15
 800313a:	4613      	mov	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4413      	add	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	3310      	adds	r3, #16
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	4413      	add	r3, r2
 8003148:	3304      	adds	r3, #4
 800314a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2201      	movs	r2, #1
 8003150:	705a      	strb	r2, [r3, #1]
 8003152:	e00f      	b.n	8003174 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003154:	78fb      	ldrb	r3, [r7, #3]
 8003156:	f003 020f 	and.w	r2, r3, #15
 800315a:	4613      	mov	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	4413      	add	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	4413      	add	r3, r2
 800316a:	3304      	adds	r3, #4
 800316c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003174:	78fb      	ldrb	r3, [r7, #3]
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	b2da      	uxtb	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003180:	883b      	ldrh	r3, [r7, #0]
 8003182:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	78ba      	ldrb	r2, [r7, #2]
 800318e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	785b      	ldrb	r3, [r3, #1]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d004      	beq.n	80031a2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	461a      	mov	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80031a2:	78bb      	ldrb	r3, [r7, #2]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d102      	bne.n	80031ae <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_PCD_EP_Open+0xae>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e00e      	b.n	80031da <HAL_PCD_EP_Open+0xcc>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68f9      	ldr	r1, [r7, #12]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f001 fbe2 	bl	8004994 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80031d8:	7afb      	ldrb	r3, [r7, #11]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b084      	sub	sp, #16
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
 80031ea:	460b      	mov	r3, r1
 80031ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	da0f      	bge.n	8003216 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031f6:	78fb      	ldrb	r3, [r7, #3]
 80031f8:	f003 020f 	and.w	r2, r3, #15
 80031fc:	4613      	mov	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	3310      	adds	r3, #16
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	4413      	add	r3, r2
 800320a:	3304      	adds	r3, #4
 800320c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	705a      	strb	r2, [r3, #1]
 8003214:	e00f      	b.n	8003236 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003216:	78fb      	ldrb	r3, [r7, #3]
 8003218:	f003 020f 	and.w	r2, r3, #15
 800321c:	4613      	mov	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	4413      	add	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	4413      	add	r3, r2
 800322c:	3304      	adds	r3, #4
 800322e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003236:	78fb      	ldrb	r3, [r7, #3]
 8003238:	f003 030f 	and.w	r3, r3, #15
 800323c:	b2da      	uxtb	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_PCD_EP_Close+0x6e>
 800324c:	2302      	movs	r3, #2
 800324e:	e00e      	b.n	800326e <HAL_PCD_EP_Close+0x8c>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68f9      	ldr	r1, [r7, #12]
 800325e:	4618      	mov	r0, r3
 8003260:	f001 fc20 	bl	8004aa4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b086      	sub	sp, #24
 800327a:	af00      	add	r7, sp, #0
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	603b      	str	r3, [r7, #0]
 8003282:	460b      	mov	r3, r1
 8003284:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003286:	7afb      	ldrb	r3, [r7, #11]
 8003288:	f003 020f 	and.w	r2, r3, #15
 800328c:	4613      	mov	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4413      	add	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4413      	add	r3, r2
 800329c:	3304      	adds	r3, #4
 800329e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	2200      	movs	r2, #0
 80032b0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2200      	movs	r2, #0
 80032b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032b8:	7afb      	ldrb	r3, [r7, #11]
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	799b      	ldrb	r3, [r3, #6]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d102      	bne.n	80032d2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6818      	ldr	r0, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	799b      	ldrb	r3, [r3, #6]
 80032da:	461a      	mov	r2, r3
 80032dc:	6979      	ldr	r1, [r7, #20]
 80032de:	f001 fcbd 	bl	8004c5c <USB_EPStartXfer>

  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	f003 020f 	and.w	r2, r3, #15
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	4413      	add	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800330e:	681b      	ldr	r3, [r3, #0]
}
 8003310:	4618      	mov	r0, r3
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	607a      	str	r2, [r7, #4]
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	460b      	mov	r3, r1
 800332a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800332c:	7afb      	ldrb	r3, [r7, #11]
 800332e:	f003 020f 	and.w	r2, r3, #15
 8003332:	4613      	mov	r3, r2
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	4413      	add	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	3310      	adds	r3, #16
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	4413      	add	r3, r2
 8003340:	3304      	adds	r3, #4
 8003342:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	2200      	movs	r2, #0
 8003354:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2201      	movs	r2, #1
 800335a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800335c:	7afb      	ldrb	r3, [r7, #11]
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	b2da      	uxtb	r2, r3
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	799b      	ldrb	r3, [r3, #6]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d102      	bne.n	8003376 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	799b      	ldrb	r3, [r3, #6]
 800337e:	461a      	mov	r2, r3
 8003380:	6979      	ldr	r1, [r7, #20]
 8003382:	f001 fc6b 	bl	8004c5c <USB_EPStartXfer>

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800339c:	78fb      	ldrb	r3, [r7, #3]
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	7912      	ldrb	r2, [r2, #4]
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d901      	bls.n	80033ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e04f      	b.n	800344e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	da0f      	bge.n	80033d6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033b6:	78fb      	ldrb	r3, [r7, #3]
 80033b8:	f003 020f 	and.w	r2, r3, #15
 80033bc:	4613      	mov	r3, r2
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	4413      	add	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	3310      	adds	r3, #16
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	4413      	add	r3, r2
 80033ca:	3304      	adds	r3, #4
 80033cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2201      	movs	r2, #1
 80033d2:	705a      	strb	r2, [r3, #1]
 80033d4:	e00d      	b.n	80033f2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033d6:	78fa      	ldrb	r2, [r7, #3]
 80033d8:	4613      	mov	r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	4413      	add	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	4413      	add	r3, r2
 80033e8:	3304      	adds	r3, #4
 80033ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033f8:	78fb      	ldrb	r3, [r7, #3]
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800340a:	2b01      	cmp	r3, #1
 800340c:	d101      	bne.n	8003412 <HAL_PCD_EP_SetStall+0x82>
 800340e:	2302      	movs	r3, #2
 8003410:	e01d      	b.n	800344e <HAL_PCD_EP_SetStall+0xbe>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68f9      	ldr	r1, [r7, #12]
 8003420:	4618      	mov	r0, r3
 8003422:	f001 fff9 	bl	8005418 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003426:	78fb      	ldrb	r3, [r7, #3]
 8003428:	f003 030f 	and.w	r3, r3, #15
 800342c:	2b00      	cmp	r3, #0
 800342e:	d109      	bne.n	8003444 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6818      	ldr	r0, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	7999      	ldrb	r1, [r3, #6]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800343e:	461a      	mov	r2, r3
 8003440:	f002 f9ea 	bl	8005818 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b084      	sub	sp, #16
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	460b      	mov	r3, r1
 8003460:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003462:	78fb      	ldrb	r3, [r7, #3]
 8003464:	f003 030f 	and.w	r3, r3, #15
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	7912      	ldrb	r2, [r2, #4]
 800346c:	4293      	cmp	r3, r2
 800346e:	d901      	bls.n	8003474 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e042      	b.n	80034fa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003474:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003478:	2b00      	cmp	r3, #0
 800347a:	da0f      	bge.n	800349c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800347c:	78fb      	ldrb	r3, [r7, #3]
 800347e:	f003 020f 	and.w	r2, r3, #15
 8003482:	4613      	mov	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	4413      	add	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	3310      	adds	r3, #16
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	4413      	add	r3, r2
 8003490:	3304      	adds	r3, #4
 8003492:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2201      	movs	r2, #1
 8003498:	705a      	strb	r2, [r3, #1]
 800349a:	e00f      	b.n	80034bc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800349c:	78fb      	ldrb	r3, [r7, #3]
 800349e:	f003 020f 	and.w	r2, r3, #15
 80034a2:	4613      	mov	r3, r2
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4413      	add	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	4413      	add	r3, r2
 80034b2:	3304      	adds	r3, #4
 80034b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034c2:	78fb      	ldrb	r3, [r7, #3]
 80034c4:	f003 030f 	and.w	r3, r3, #15
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_PCD_EP_ClrStall+0x86>
 80034d8:	2302      	movs	r3, #2
 80034da:	e00e      	b.n	80034fa <HAL_PCD_EP_ClrStall+0xa4>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68f9      	ldr	r1, [r7, #12]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f002 f802 	bl	80054f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	460b      	mov	r3, r1
 800350c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800350e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003512:	2b00      	cmp	r3, #0
 8003514:	da0c      	bge.n	8003530 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003516:	78fb      	ldrb	r3, [r7, #3]
 8003518:	f003 020f 	and.w	r2, r3, #15
 800351c:	4613      	mov	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	4413      	add	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	3310      	adds	r3, #16
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	4413      	add	r3, r2
 800352a:	3304      	adds	r3, #4
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	e00c      	b.n	800354a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003530:	78fb      	ldrb	r3, [r7, #3]
 8003532:	f003 020f 	and.w	r2, r3, #15
 8003536:	4613      	mov	r3, r2
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	4413      	add	r3, r2
 8003546:	3304      	adds	r3, #4
 8003548:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68f9      	ldr	r1, [r7, #12]
 8003550:	4618      	mov	r0, r3
 8003552:	f001 fe21 	bl	8005198 <USB_EPStopXfer>
 8003556:	4603      	mov	r3, r0
 8003558:	72fb      	strb	r3, [r7, #11]

  return ret;
 800355a:	7afb      	ldrb	r3, [r7, #11]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08a      	sub	sp, #40	@ 0x28
 8003568:	af02      	add	r7, sp, #8
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	4613      	mov	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	4413      	add	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	3310      	adds	r3, #16
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	4413      	add	r3, r2
 8003588:	3304      	adds	r3, #4
 800358a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	695a      	ldr	r2, [r3, #20]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	429a      	cmp	r2, r3
 8003596:	d901      	bls.n	800359c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e06b      	b.n	8003674 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	691a      	ldr	r2, [r3, #16]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	69fa      	ldr	r2, [r7, #28]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d902      	bls.n	80035b8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	3303      	adds	r3, #3
 80035bc:	089b      	lsrs	r3, r3, #2
 80035be:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035c0:	e02a      	b.n	8003618 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	691a      	ldr	r2, [r3, #16]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d902      	bls.n	80035de <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	3303      	adds	r3, #3
 80035e2:	089b      	lsrs	r3, r3, #2
 80035e4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	68d9      	ldr	r1, [r3, #12]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	4603      	mov	r3, r0
 80035fa:	6978      	ldr	r0, [r7, #20]
 80035fc:	f001 fe76 	bl	80052ec <USB_WritePacket>

    ep->xfer_buff  += len;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	68da      	ldr	r2, [r3, #12]
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	441a      	add	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	695a      	ldr	r2, [r3, #20]
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	441a      	add	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	015a      	lsls	r2, r3, #5
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	4413      	add	r3, r2
 8003620:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	429a      	cmp	r2, r3
 800362c:	d809      	bhi.n	8003642 <PCD_WriteEmptyTxFifo+0xde>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	695a      	ldr	r2, [r3, #20]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003636:	429a      	cmp	r2, r3
 8003638:	d203      	bcs.n	8003642 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1bf      	bne.n	80035c2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	691a      	ldr	r2, [r3, #16]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	429a      	cmp	r2, r3
 800364c:	d811      	bhi.n	8003672 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	f003 030f 	and.w	r3, r3, #15
 8003654:	2201      	movs	r2, #1
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003662:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	43db      	mvns	r3, r3
 8003668:	6939      	ldr	r1, [r7, #16]
 800366a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800366e:	4013      	ands	r3, r2
 8003670:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3720      	adds	r7, #32
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	333c      	adds	r3, #60	@ 0x3c
 8003694:	3304      	adds	r3, #4
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	799b      	ldrb	r3, [r3, #6]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d17b      	bne.n	80037aa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d015      	beq.n	80036e8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	4a61      	ldr	r2, [pc, #388]	@ (8003844 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	f240 80b9 	bls.w	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 80b3 	beq.w	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036de:	461a      	mov	r2, r3
 80036e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036e4:	6093      	str	r3, [r2, #8]
 80036e6:	e0a7      	b.n	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f003 0320 	and.w	r3, r3, #32
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d009      	beq.n	8003706 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036fe:	461a      	mov	r2, r3
 8003700:	2320      	movs	r3, #32
 8003702:	6093      	str	r3, [r2, #8]
 8003704:	e098      	b.n	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800370c:	2b00      	cmp	r3, #0
 800370e:	f040 8093 	bne.w	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	4a4b      	ldr	r2, [pc, #300]	@ (8003844 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d90f      	bls.n	800373a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00a      	beq.n	800373a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	4413      	add	r3, r2
 800372c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003730:	461a      	mov	r2, r3
 8003732:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003736:	6093      	str	r3, [r2, #8]
 8003738:	e07e      	b.n	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	4613      	mov	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	4413      	add	r3, r2
 800374c:	3304      	adds	r3, #4
 800374e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a1a      	ldr	r2, [r3, #32]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	0159      	lsls	r1, r3, #5
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	440b      	add	r3, r1
 800375c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003766:	1ad2      	subs	r2, r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d114      	bne.n	800379c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d109      	bne.n	800378e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003784:	461a      	mov	r2, r3
 8003786:	2101      	movs	r1, #1
 8003788:	f002 f846 	bl	8005818 <USB_EP0_OutStart>
 800378c:	e006      	b.n	800379c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	441a      	add	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	4619      	mov	r1, r3
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f004 faa0 	bl	8007ce8 <HAL_PCD_DataOutStageCallback>
 80037a8:	e046      	b.n	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	4a26      	ldr	r2, [pc, #152]	@ (8003848 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d124      	bne.n	80037fc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00a      	beq.n	80037d2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037c8:	461a      	mov	r2, r3
 80037ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037ce:	6093      	str	r3, [r2, #8]
 80037d0:	e032      	b.n	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d008      	beq.n	80037ee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037e8:	461a      	mov	r2, r3
 80037ea:	2320      	movs	r3, #32
 80037ec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	4619      	mov	r1, r3
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f004 fa77 	bl	8007ce8 <HAL_PCD_DataOutStageCallback>
 80037fa:	e01d      	b.n	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d114      	bne.n	800382c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	4613      	mov	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	4413      	add	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d108      	bne.n	800382c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003824:	461a      	mov	r2, r3
 8003826:	2100      	movs	r1, #0
 8003828:	f001 fff6 	bl	8005818 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	b2db      	uxtb	r3, r3
 8003830:	4619      	mov	r1, r3
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f004 fa58 	bl	8007ce8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3720      	adds	r7, #32
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	4f54300a 	.word	0x4f54300a
 8003848:	4f54310a 	.word	0x4f54310a

0800384c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	333c      	adds	r3, #60	@ 0x3c
 8003864:	3304      	adds	r3, #4
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4413      	add	r3, r2
 8003872:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4a15      	ldr	r2, [pc, #84]	@ (80038d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d90e      	bls.n	80038a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003888:	2b00      	cmp	r3, #0
 800388a:	d009      	beq.n	80038a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4413      	add	r3, r2
 8003894:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003898:	461a      	mov	r2, r3
 800389a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800389e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f004 fa0f 	bl	8007cc4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4a0a      	ldr	r2, [pc, #40]	@ (80038d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d90c      	bls.n	80038c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	799b      	ldrb	r3, [r3, #6]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d108      	bne.n	80038c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80038c0:	461a      	mov	r2, r3
 80038c2:	2101      	movs	r1, #1
 80038c4:	f001 ffa8 	bl	8005818 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	4f54300a 	.word	0x4f54300a

080038d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	70fb      	strb	r3, [r7, #3]
 80038e4:	4613      	mov	r3, r2
 80038e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80038f0:	78fb      	ldrb	r3, [r7, #3]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d107      	bne.n	8003906 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80038f6:	883b      	ldrh	r3, [r7, #0]
 80038f8:	0419      	lsls	r1, r3, #16
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	430a      	orrs	r2, r1
 8003902:	629a      	str	r2, [r3, #40]	@ 0x28
 8003904:	e028      	b.n	8003958 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800390c:	0c1b      	lsrs	r3, r3, #16
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	4413      	add	r3, r2
 8003912:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003914:	2300      	movs	r3, #0
 8003916:	73fb      	strb	r3, [r7, #15]
 8003918:	e00d      	b.n	8003936 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	3340      	adds	r3, #64	@ 0x40
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	0c1b      	lsrs	r3, r3, #16
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	4413      	add	r3, r2
 800392e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003930:	7bfb      	ldrb	r3, [r7, #15]
 8003932:	3301      	adds	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
 8003936:	7bfa      	ldrb	r2, [r7, #15]
 8003938:	78fb      	ldrb	r3, [r7, #3]
 800393a:	3b01      	subs	r3, #1
 800393c:	429a      	cmp	r2, r3
 800393e:	d3ec      	bcc.n	800391a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003940:	883b      	ldrh	r3, [r7, #0]
 8003942:	0418      	lsls	r0, r3, #16
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6819      	ldr	r1, [r3, #0]
 8003948:	78fb      	ldrb	r3, [r7, #3]
 800394a:	3b01      	subs	r3, #1
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	4302      	orrs	r2, r0
 8003950:	3340      	adds	r3, #64	@ 0x40
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	460b      	mov	r3, r1
 8003970:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	887a      	ldrh	r2, [r7, #2]
 8003978:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e267      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d075      	beq.n	8003aaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80039be:	4b88      	ldr	r3, [pc, #544]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 030c 	and.w	r3, r3, #12
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d00c      	beq.n	80039e4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ca:	4b85      	ldr	r3, [pc, #532]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d112      	bne.n	80039fc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039d6:	4b82      	ldr	r3, [pc, #520]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039e2:	d10b      	bne.n	80039fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e4:	4b7e      	ldr	r3, [pc, #504]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d05b      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x108>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d157      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e242      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a04:	d106      	bne.n	8003a14 <HAL_RCC_OscConfig+0x74>
 8003a06:	4b76      	ldr	r3, [pc, #472]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a75      	ldr	r2, [pc, #468]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	e01d      	b.n	8003a50 <HAL_RCC_OscConfig+0xb0>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a1c:	d10c      	bne.n	8003a38 <HAL_RCC_OscConfig+0x98>
 8003a1e:	4b70      	ldr	r3, [pc, #448]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a6f      	ldr	r2, [pc, #444]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	4b6d      	ldr	r3, [pc, #436]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a6c      	ldr	r2, [pc, #432]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	e00b      	b.n	8003a50 <HAL_RCC_OscConfig+0xb0>
 8003a38:	4b69      	ldr	r3, [pc, #420]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a68      	ldr	r2, [pc, #416]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	4b66      	ldr	r3, [pc, #408]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a65      	ldr	r2, [pc, #404]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d013      	beq.n	8003a80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a58:	f7fd fa46 	bl	8000ee8 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a60:	f7fd fa42 	bl	8000ee8 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b64      	cmp	r3, #100	@ 0x64
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e207      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a72:	4b5b      	ldr	r3, [pc, #364]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0f0      	beq.n	8003a60 <HAL_RCC_OscConfig+0xc0>
 8003a7e:	e014      	b.n	8003aaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a80:	f7fd fa32 	bl	8000ee8 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a88:	f7fd fa2e 	bl	8000ee8 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b64      	cmp	r3, #100	@ 0x64
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e1f3      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a9a:	4b51      	ldr	r3, [pc, #324]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_OscConfig+0xe8>
 8003aa6:	e000      	b.n	8003aaa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d063      	beq.n	8003b7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ab6:	4b4a      	ldr	r3, [pc, #296]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00b      	beq.n	8003ada <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ac2:	4b47      	ldr	r3, [pc, #284]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d11c      	bne.n	8003b08 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ace:	4b44      	ldr	r3, [pc, #272]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d116      	bne.n	8003b08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ada:	4b41      	ldr	r3, [pc, #260]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <HAL_RCC_OscConfig+0x152>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d001      	beq.n	8003af2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e1c7      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af2:	4b3b      	ldr	r3, [pc, #236]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4937      	ldr	r1, [pc, #220]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b06:	e03a      	b.n	8003b7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d020      	beq.n	8003b52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b10:	4b34      	ldr	r3, [pc, #208]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003b12:	2201      	movs	r2, #1
 8003b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b16:	f7fd f9e7 	bl	8000ee8 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b1e:	f7fd f9e3 	bl	8000ee8 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e1a8      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b30:	4b2b      	ldr	r3, [pc, #172]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b3c:	4b28      	ldr	r3, [pc, #160]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	4925      	ldr	r1, [pc, #148]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	600b      	str	r3, [r1, #0]
 8003b50:	e015      	b.n	8003b7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b52:	4b24      	ldr	r3, [pc, #144]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fd f9c6 	bl	8000ee8 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b60:	f7fd f9c2 	bl	8000ee8 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e187      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b72:	4b1b      	ldr	r3, [pc, #108]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d036      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d016      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b92:	4b15      	ldr	r3, [pc, #84]	@ (8003be8 <HAL_RCC_OscConfig+0x248>)
 8003b94:	2201      	movs	r2, #1
 8003b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b98:	f7fd f9a6 	bl	8000ee8 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba0:	f7fd f9a2 	bl	8000ee8 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e167      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003bb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x200>
 8003bbe:	e01b      	b.n	8003bf8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc0:	4b09      	ldr	r3, [pc, #36]	@ (8003be8 <HAL_RCC_OscConfig+0x248>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc6:	f7fd f98f 	bl	8000ee8 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bcc:	e00e      	b.n	8003bec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bce:	f7fd f98b 	bl	8000ee8 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d907      	bls.n	8003bec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e150      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
 8003be0:	40023800 	.word	0x40023800
 8003be4:	42470000 	.word	0x42470000
 8003be8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bec:	4b88      	ldr	r3, [pc, #544]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003bee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1ea      	bne.n	8003bce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 8097 	beq.w	8003d34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c06:	2300      	movs	r3, #0
 8003c08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c0a:	4b81      	ldr	r3, [pc, #516]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10f      	bne.n	8003c36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c16:	2300      	movs	r3, #0
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	4b7d      	ldr	r3, [pc, #500]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1e:	4a7c      	ldr	r2, [pc, #496]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c26:	4b7a      	ldr	r3, [pc, #488]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c2e:	60bb      	str	r3, [r7, #8]
 8003c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c32:	2301      	movs	r3, #1
 8003c34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c36:	4b77      	ldr	r3, [pc, #476]	@ (8003e14 <HAL_RCC_OscConfig+0x474>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d118      	bne.n	8003c74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c42:	4b74      	ldr	r3, [pc, #464]	@ (8003e14 <HAL_RCC_OscConfig+0x474>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a73      	ldr	r2, [pc, #460]	@ (8003e14 <HAL_RCC_OscConfig+0x474>)
 8003c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c4e:	f7fd f94b 	bl	8000ee8 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c56:	f7fd f947 	bl	8000ee8 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e10c      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c68:	4b6a      	ldr	r3, [pc, #424]	@ (8003e14 <HAL_RCC_OscConfig+0x474>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0f0      	beq.n	8003c56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d106      	bne.n	8003c8a <HAL_RCC_OscConfig+0x2ea>
 8003c7c:	4b64      	ldr	r3, [pc, #400]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c80:	4a63      	ldr	r2, [pc, #396]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c82:	f043 0301 	orr.w	r3, r3, #1
 8003c86:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c88:	e01c      	b.n	8003cc4 <HAL_RCC_OscConfig+0x324>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	2b05      	cmp	r3, #5
 8003c90:	d10c      	bne.n	8003cac <HAL_RCC_OscConfig+0x30c>
 8003c92:	4b5f      	ldr	r3, [pc, #380]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c96:	4a5e      	ldr	r2, [pc, #376]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c98:	f043 0304 	orr.w	r3, r3, #4
 8003c9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c9e:	4b5c      	ldr	r3, [pc, #368]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca2:	4a5b      	ldr	r2, [pc, #364]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
 8003ca8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003caa:	e00b      	b.n	8003cc4 <HAL_RCC_OscConfig+0x324>
 8003cac:	4b58      	ldr	r3, [pc, #352]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb0:	4a57      	ldr	r2, [pc, #348]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cb2:	f023 0301 	bic.w	r3, r3, #1
 8003cb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cb8:	4b55      	ldr	r3, [pc, #340]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cbc:	4a54      	ldr	r2, [pc, #336]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cbe:	f023 0304 	bic.w	r3, r3, #4
 8003cc2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d015      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ccc:	f7fd f90c 	bl	8000ee8 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd2:	e00a      	b.n	8003cea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd4:	f7fd f908 	bl	8000ee8 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e0cb      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cea:	4b49      	ldr	r3, [pc, #292]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0ee      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x334>
 8003cf6:	e014      	b.n	8003d22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf8:	f7fd f8f6 	bl	8000ee8 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d00:	f7fd f8f2 	bl	8000ee8 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e0b5      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d16:	4b3e      	ldr	r3, [pc, #248]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1ee      	bne.n	8003d00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d22:	7dfb      	ldrb	r3, [r7, #23]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d105      	bne.n	8003d34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d28:	4b39      	ldr	r3, [pc, #228]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2c:	4a38      	ldr	r2, [pc, #224]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 80a1 	beq.w	8003e80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d3e:	4b34      	ldr	r3, [pc, #208]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 030c 	and.w	r3, r3, #12
 8003d46:	2b08      	cmp	r3, #8
 8003d48:	d05c      	beq.n	8003e04 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d141      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d52:	4b31      	ldr	r3, [pc, #196]	@ (8003e18 <HAL_RCC_OscConfig+0x478>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d58:	f7fd f8c6 	bl	8000ee8 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d60:	f7fd f8c2 	bl	8000ee8 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e087      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d72:	4b27      	ldr	r3, [pc, #156]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f0      	bne.n	8003d60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69da      	ldr	r2, [r3, #28]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8c:	019b      	lsls	r3, r3, #6
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d94:	085b      	lsrs	r3, r3, #1
 8003d96:	3b01      	subs	r3, #1
 8003d98:	041b      	lsls	r3, r3, #16
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da0:	061b      	lsls	r3, r3, #24
 8003da2:	491b      	ldr	r1, [pc, #108]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003da8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e18 <HAL_RCC_OscConfig+0x478>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dae:	f7fd f89b 	bl	8000ee8 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db6:	f7fd f897 	bl	8000ee8 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e05c      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc8:	4b11      	ldr	r3, [pc, #68]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0x416>
 8003dd4:	e054      	b.n	8003e80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd6:	4b10      	ldr	r3, [pc, #64]	@ (8003e18 <HAL_RCC_OscConfig+0x478>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ddc:	f7fd f884 	bl	8000ee8 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de4:	f7fd f880 	bl	8000ee8 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e045      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df6:	4b06      	ldr	r3, [pc, #24]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f0      	bne.n	8003de4 <HAL_RCC_OscConfig+0x444>
 8003e02:	e03d      	b.n	8003e80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d107      	bne.n	8003e1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e038      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
 8003e10:	40023800 	.word	0x40023800
 8003e14:	40007000 	.word	0x40007000
 8003e18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8003e8c <HAL_RCC_OscConfig+0x4ec>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d028      	beq.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d121      	bne.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d11a      	bne.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d111      	bne.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e62:	085b      	lsrs	r3, r3, #1
 8003e64:	3b01      	subs	r3, #1
 8003e66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d107      	bne.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e000      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40023800 	.word	0x40023800

08003e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e0cc      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea4:	4b68      	ldr	r3, [pc, #416]	@ (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d90c      	bls.n	8003ecc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb2:	4b65      	ldr	r3, [pc, #404]	@ (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eba:	4b63      	ldr	r3, [pc, #396]	@ (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e0b8      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d020      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d005      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ee4:	4b59      	ldr	r3, [pc, #356]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	4a58      	ldr	r2, [pc, #352]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003eee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003efc:	4b53      	ldr	r3, [pc, #332]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	4a52      	ldr	r2, [pc, #328]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f08:	4b50      	ldr	r3, [pc, #320]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	494d      	ldr	r1, [pc, #308]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d044      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d107      	bne.n	8003f3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2e:	4b47      	ldr	r3, [pc, #284]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d119      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e07f      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d003      	beq.n	8003f4e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f4a:	2b03      	cmp	r3, #3
 8003f4c:	d107      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4e:	4b3f      	ldr	r3, [pc, #252]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d109      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e06f      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e067      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f6e:	4b37      	ldr	r3, [pc, #220]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f023 0203 	bic.w	r2, r3, #3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	4934      	ldr	r1, [pc, #208]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f80:	f7fc ffb2 	bl	8000ee8 <HAL_GetTick>
 8003f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f86:	e00a      	b.n	8003f9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f88:	f7fc ffae 	bl	8000ee8 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e04f      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9e:	4b2b      	ldr	r3, [pc, #172]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 020c 	and.w	r2, r3, #12
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d1eb      	bne.n	8003f88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fb0:	4b25      	ldr	r3, [pc, #148]	@ (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d20c      	bcs.n	8003fd8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fbe:	4b22      	ldr	r3, [pc, #136]	@ (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc6:	4b20      	ldr	r3, [pc, #128]	@ (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d001      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e032      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d008      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fe4:	4b19      	ldr	r3, [pc, #100]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	4916      	ldr	r1, [pc, #88]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d009      	beq.n	8004016 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004002:	4b12      	ldr	r3, [pc, #72]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	490e      	ldr	r1, [pc, #56]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	4313      	orrs	r3, r2
 8004014:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004016:	f000 f821 	bl	800405c <HAL_RCC_GetSysClockFreq>
 800401a:	4602      	mov	r2, r0
 800401c:	4b0b      	ldr	r3, [pc, #44]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	091b      	lsrs	r3, r3, #4
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	490a      	ldr	r1, [pc, #40]	@ (8004050 <HAL_RCC_ClockConfig+0x1c0>)
 8004028:	5ccb      	ldrb	r3, [r1, r3]
 800402a:	fa22 f303 	lsr.w	r3, r2, r3
 800402e:	4a09      	ldr	r2, [pc, #36]	@ (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8004030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004032:	4b09      	ldr	r3, [pc, #36]	@ (8004058 <HAL_RCC_ClockConfig+0x1c8>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f7fc ff12 	bl	8000e60 <HAL_InitTick>

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40023c00 	.word	0x40023c00
 800404c:	40023800 	.word	0x40023800
 8004050:	080082fc 	.word	0x080082fc
 8004054:	20000000 	.word	0x20000000
 8004058:	20000004 	.word	0x20000004

0800405c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800405c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004060:	b094      	sub	sp, #80	@ 0x50
 8004062:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004074:	4b79      	ldr	r3, [pc, #484]	@ (800425c <HAL_RCC_GetSysClockFreq+0x200>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 030c 	and.w	r3, r3, #12
 800407c:	2b08      	cmp	r3, #8
 800407e:	d00d      	beq.n	800409c <HAL_RCC_GetSysClockFreq+0x40>
 8004080:	2b08      	cmp	r3, #8
 8004082:	f200 80e1 	bhi.w	8004248 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_RCC_GetSysClockFreq+0x34>
 800408a:	2b04      	cmp	r3, #4
 800408c:	d003      	beq.n	8004096 <HAL_RCC_GetSysClockFreq+0x3a>
 800408e:	e0db      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004090:	4b73      	ldr	r3, [pc, #460]	@ (8004260 <HAL_RCC_GetSysClockFreq+0x204>)
 8004092:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004094:	e0db      	b.n	800424e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004096:	4b73      	ldr	r3, [pc, #460]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x208>)
 8004098:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800409a:	e0d8      	b.n	800424e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800409c:	4b6f      	ldr	r3, [pc, #444]	@ (800425c <HAL_RCC_GetSysClockFreq+0x200>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040a4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040a6:	4b6d      	ldr	r3, [pc, #436]	@ (800425c <HAL_RCC_GetSysClockFreq+0x200>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d063      	beq.n	800417a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040b2:	4b6a      	ldr	r3, [pc, #424]	@ (800425c <HAL_RCC_GetSysClockFreq+0x200>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	099b      	lsrs	r3, r3, #6
 80040b8:	2200      	movs	r2, #0
 80040ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80040be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80040c6:	2300      	movs	r3, #0
 80040c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80040ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80040ce:	4622      	mov	r2, r4
 80040d0:	462b      	mov	r3, r5
 80040d2:	f04f 0000 	mov.w	r0, #0
 80040d6:	f04f 0100 	mov.w	r1, #0
 80040da:	0159      	lsls	r1, r3, #5
 80040dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040e0:	0150      	lsls	r0, r2, #5
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	4621      	mov	r1, r4
 80040e8:	1a51      	subs	r1, r2, r1
 80040ea:	6139      	str	r1, [r7, #16]
 80040ec:	4629      	mov	r1, r5
 80040ee:	eb63 0301 	sbc.w	r3, r3, r1
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004100:	4659      	mov	r1, fp
 8004102:	018b      	lsls	r3, r1, #6
 8004104:	4651      	mov	r1, sl
 8004106:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800410a:	4651      	mov	r1, sl
 800410c:	018a      	lsls	r2, r1, #6
 800410e:	4651      	mov	r1, sl
 8004110:	ebb2 0801 	subs.w	r8, r2, r1
 8004114:	4659      	mov	r1, fp
 8004116:	eb63 0901 	sbc.w	r9, r3, r1
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	f04f 0300 	mov.w	r3, #0
 8004122:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004126:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800412a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800412e:	4690      	mov	r8, r2
 8004130:	4699      	mov	r9, r3
 8004132:	4623      	mov	r3, r4
 8004134:	eb18 0303 	adds.w	r3, r8, r3
 8004138:	60bb      	str	r3, [r7, #8]
 800413a:	462b      	mov	r3, r5
 800413c:	eb49 0303 	adc.w	r3, r9, r3
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	f04f 0300 	mov.w	r3, #0
 800414a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800414e:	4629      	mov	r1, r5
 8004150:	024b      	lsls	r3, r1, #9
 8004152:	4621      	mov	r1, r4
 8004154:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004158:	4621      	mov	r1, r4
 800415a:	024a      	lsls	r2, r1, #9
 800415c:	4610      	mov	r0, r2
 800415e:	4619      	mov	r1, r3
 8004160:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004162:	2200      	movs	r2, #0
 8004164:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004166:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004168:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800416c:	f7fc f82c 	bl	80001c8 <__aeabi_uldivmod>
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	4613      	mov	r3, r2
 8004176:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004178:	e058      	b.n	800422c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800417a:	4b38      	ldr	r3, [pc, #224]	@ (800425c <HAL_RCC_GetSysClockFreq+0x200>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	099b      	lsrs	r3, r3, #6
 8004180:	2200      	movs	r2, #0
 8004182:	4618      	mov	r0, r3
 8004184:	4611      	mov	r1, r2
 8004186:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800418a:	623b      	str	r3, [r7, #32]
 800418c:	2300      	movs	r3, #0
 800418e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004190:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004194:	4642      	mov	r2, r8
 8004196:	464b      	mov	r3, r9
 8004198:	f04f 0000 	mov.w	r0, #0
 800419c:	f04f 0100 	mov.w	r1, #0
 80041a0:	0159      	lsls	r1, r3, #5
 80041a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041a6:	0150      	lsls	r0, r2, #5
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4641      	mov	r1, r8
 80041ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80041b2:	4649      	mov	r1, r9
 80041b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	f04f 0300 	mov.w	r3, #0
 80041c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041cc:	ebb2 040a 	subs.w	r4, r2, sl
 80041d0:	eb63 050b 	sbc.w	r5, r3, fp
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	f04f 0300 	mov.w	r3, #0
 80041dc:	00eb      	lsls	r3, r5, #3
 80041de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041e2:	00e2      	lsls	r2, r4, #3
 80041e4:	4614      	mov	r4, r2
 80041e6:	461d      	mov	r5, r3
 80041e8:	4643      	mov	r3, r8
 80041ea:	18e3      	adds	r3, r4, r3
 80041ec:	603b      	str	r3, [r7, #0]
 80041ee:	464b      	mov	r3, r9
 80041f0:	eb45 0303 	adc.w	r3, r5, r3
 80041f4:	607b      	str	r3, [r7, #4]
 80041f6:	f04f 0200 	mov.w	r2, #0
 80041fa:	f04f 0300 	mov.w	r3, #0
 80041fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004202:	4629      	mov	r1, r5
 8004204:	028b      	lsls	r3, r1, #10
 8004206:	4621      	mov	r1, r4
 8004208:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800420c:	4621      	mov	r1, r4
 800420e:	028a      	lsls	r2, r1, #10
 8004210:	4610      	mov	r0, r2
 8004212:	4619      	mov	r1, r3
 8004214:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004216:	2200      	movs	r2, #0
 8004218:	61bb      	str	r3, [r7, #24]
 800421a:	61fa      	str	r2, [r7, #28]
 800421c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004220:	f7fb ffd2 	bl	80001c8 <__aeabi_uldivmod>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4613      	mov	r3, r2
 800422a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800422c:	4b0b      	ldr	r3, [pc, #44]	@ (800425c <HAL_RCC_GetSysClockFreq+0x200>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	0c1b      	lsrs	r3, r3, #16
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	3301      	adds	r3, #1
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800423c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800423e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004240:	fbb2 f3f3 	udiv	r3, r2, r3
 8004244:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004246:	e002      	b.n	800424e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004248:	4b05      	ldr	r3, [pc, #20]	@ (8004260 <HAL_RCC_GetSysClockFreq+0x204>)
 800424a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800424c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800424e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004250:	4618      	mov	r0, r3
 8004252:	3750      	adds	r7, #80	@ 0x50
 8004254:	46bd      	mov	sp, r7
 8004256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800425a:	bf00      	nop
 800425c:	40023800 	.word	0x40023800
 8004260:	00f42400 	.word	0x00f42400
 8004264:	007a1200 	.word	0x007a1200

08004268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800426c:	4b03      	ldr	r3, [pc, #12]	@ (800427c <HAL_RCC_GetHCLKFreq+0x14>)
 800426e:	681b      	ldr	r3, [r3, #0]
}
 8004270:	4618      	mov	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	20000000 	.word	0x20000000

08004280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004284:	f7ff fff0 	bl	8004268 <HAL_RCC_GetHCLKFreq>
 8004288:	4602      	mov	r2, r0
 800428a:	4b05      	ldr	r3, [pc, #20]	@ (80042a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	0a9b      	lsrs	r3, r3, #10
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	4903      	ldr	r1, [pc, #12]	@ (80042a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004296:	5ccb      	ldrb	r3, [r1, r3]
 8004298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800429c:	4618      	mov	r0, r3
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40023800 	.word	0x40023800
 80042a4:	0800830c 	.word	0x0800830c

080042a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042a8:	b084      	sub	sp, #16
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b084      	sub	sp, #16
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
 80042b2:	f107 001c 	add.w	r0, r7, #28
 80042b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042ba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d123      	bne.n	800430a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80042d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80042ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d105      	bne.n	80042fe <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f001 fae8 	bl	80058d4 <USB_CoreReset>
 8004304:	4603      	mov	r3, r0
 8004306:	73fb      	strb	r3, [r7, #15]
 8004308:	e01b      	b.n	8004342 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f001 fadc 	bl	80058d4 <USB_CoreReset>
 800431c:	4603      	mov	r3, r0
 800431e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004320:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004324:	2b00      	cmp	r3, #0
 8004326:	d106      	bne.n	8004336 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800432c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	639a      	str	r2, [r3, #56]	@ 0x38
 8004334:	e005      	b.n	8004342 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800433a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004342:	7fbb      	ldrb	r3, [r7, #30]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d10b      	bne.n	8004360 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f043 0206 	orr.w	r2, r3, #6
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f043 0220 	orr.w	r2, r3, #32
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004360:	7bfb      	ldrb	r3, [r7, #15]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800436c:	b004      	add	sp, #16
 800436e:	4770      	bx	lr

08004370 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004370:	b480      	push	{r7}
 8004372:	b087      	sub	sp, #28
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	4613      	mov	r3, r2
 800437c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800437e:	79fb      	ldrb	r3, [r7, #7]
 8004380:	2b02      	cmp	r3, #2
 8004382:	d165      	bne.n	8004450 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	4a41      	ldr	r2, [pc, #260]	@ (800448c <USB_SetTurnaroundTime+0x11c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d906      	bls.n	800439a <USB_SetTurnaroundTime+0x2a>
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4a40      	ldr	r2, [pc, #256]	@ (8004490 <USB_SetTurnaroundTime+0x120>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d202      	bcs.n	800439a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004394:	230f      	movs	r3, #15
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	e062      	b.n	8004460 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	4a3c      	ldr	r2, [pc, #240]	@ (8004490 <USB_SetTurnaroundTime+0x120>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d306      	bcc.n	80043b0 <USB_SetTurnaroundTime+0x40>
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	4a3b      	ldr	r2, [pc, #236]	@ (8004494 <USB_SetTurnaroundTime+0x124>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d202      	bcs.n	80043b0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80043aa:	230e      	movs	r3, #14
 80043ac:	617b      	str	r3, [r7, #20]
 80043ae:	e057      	b.n	8004460 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	4a38      	ldr	r2, [pc, #224]	@ (8004494 <USB_SetTurnaroundTime+0x124>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d306      	bcc.n	80043c6 <USB_SetTurnaroundTime+0x56>
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	4a37      	ldr	r2, [pc, #220]	@ (8004498 <USB_SetTurnaroundTime+0x128>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d202      	bcs.n	80043c6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80043c0:	230d      	movs	r3, #13
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	e04c      	b.n	8004460 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	4a33      	ldr	r2, [pc, #204]	@ (8004498 <USB_SetTurnaroundTime+0x128>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d306      	bcc.n	80043dc <USB_SetTurnaroundTime+0x6c>
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	4a32      	ldr	r2, [pc, #200]	@ (800449c <USB_SetTurnaroundTime+0x12c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d802      	bhi.n	80043dc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80043d6:	230c      	movs	r3, #12
 80043d8:	617b      	str	r3, [r7, #20]
 80043da:	e041      	b.n	8004460 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	4a2f      	ldr	r2, [pc, #188]	@ (800449c <USB_SetTurnaroundTime+0x12c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d906      	bls.n	80043f2 <USB_SetTurnaroundTime+0x82>
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4a2e      	ldr	r2, [pc, #184]	@ (80044a0 <USB_SetTurnaroundTime+0x130>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d802      	bhi.n	80043f2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80043ec:	230b      	movs	r3, #11
 80043ee:	617b      	str	r3, [r7, #20]
 80043f0:	e036      	b.n	8004460 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	4a2a      	ldr	r2, [pc, #168]	@ (80044a0 <USB_SetTurnaroundTime+0x130>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d906      	bls.n	8004408 <USB_SetTurnaroundTime+0x98>
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	4a29      	ldr	r2, [pc, #164]	@ (80044a4 <USB_SetTurnaroundTime+0x134>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d802      	bhi.n	8004408 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004402:	230a      	movs	r3, #10
 8004404:	617b      	str	r3, [r7, #20]
 8004406:	e02b      	b.n	8004460 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	4a26      	ldr	r2, [pc, #152]	@ (80044a4 <USB_SetTurnaroundTime+0x134>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d906      	bls.n	800441e <USB_SetTurnaroundTime+0xae>
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	4a25      	ldr	r2, [pc, #148]	@ (80044a8 <USB_SetTurnaroundTime+0x138>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d202      	bcs.n	800441e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004418:	2309      	movs	r3, #9
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	e020      	b.n	8004460 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	4a21      	ldr	r2, [pc, #132]	@ (80044a8 <USB_SetTurnaroundTime+0x138>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d306      	bcc.n	8004434 <USB_SetTurnaroundTime+0xc4>
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	4a20      	ldr	r2, [pc, #128]	@ (80044ac <USB_SetTurnaroundTime+0x13c>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d802      	bhi.n	8004434 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800442e:	2308      	movs	r3, #8
 8004430:	617b      	str	r3, [r7, #20]
 8004432:	e015      	b.n	8004460 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	4a1d      	ldr	r2, [pc, #116]	@ (80044ac <USB_SetTurnaroundTime+0x13c>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d906      	bls.n	800444a <USB_SetTurnaroundTime+0xda>
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	4a1c      	ldr	r2, [pc, #112]	@ (80044b0 <USB_SetTurnaroundTime+0x140>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d202      	bcs.n	800444a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004444:	2307      	movs	r3, #7
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	e00a      	b.n	8004460 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800444a:	2306      	movs	r3, #6
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	e007      	b.n	8004460 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004450:	79fb      	ldrb	r3, [r7, #7]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d102      	bne.n	800445c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004456:	2309      	movs	r3, #9
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	e001      	b.n	8004460 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800445c:	2309      	movs	r3, #9
 800445e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	029b      	lsls	r3, r3, #10
 8004474:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004478:	431a      	orrs	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	371c      	adds	r7, #28
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	00d8acbf 	.word	0x00d8acbf
 8004490:	00e4e1c0 	.word	0x00e4e1c0
 8004494:	00f42400 	.word	0x00f42400
 8004498:	01067380 	.word	0x01067380
 800449c:	011a499f 	.word	0x011a499f
 80044a0:	01312cff 	.word	0x01312cff
 80044a4:	014ca43f 	.word	0x014ca43f
 80044a8:	016e3600 	.word	0x016e3600
 80044ac:	01a6ab1f 	.word	0x01a6ab1f
 80044b0:	01e84800 	.word	0x01e84800

080044b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f043 0201 	orr.w	r2, r3, #1
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f023 0201 	bic.w	r2, r3, #1
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	460b      	mov	r3, r1
 8004502:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004514:	78fb      	ldrb	r3, [r7, #3]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d115      	bne.n	8004546 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004526:	200a      	movs	r0, #10
 8004528:	f7fc fcea 	bl	8000f00 <HAL_Delay>
      ms += 10U;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	330a      	adds	r3, #10
 8004530:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f001 f93f 	bl	80057b6 <USB_GetMode>
 8004538:	4603      	mov	r3, r0
 800453a:	2b01      	cmp	r3, #1
 800453c:	d01e      	beq.n	800457c <USB_SetCurrentMode+0x84>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2bc7      	cmp	r3, #199	@ 0xc7
 8004542:	d9f0      	bls.n	8004526 <USB_SetCurrentMode+0x2e>
 8004544:	e01a      	b.n	800457c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004546:	78fb      	ldrb	r3, [r7, #3]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d115      	bne.n	8004578 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004558:	200a      	movs	r0, #10
 800455a:	f7fc fcd1 	bl	8000f00 <HAL_Delay>
      ms += 10U;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	330a      	adds	r3, #10
 8004562:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f001 f926 	bl	80057b6 <USB_GetMode>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <USB_SetCurrentMode+0x84>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2bc7      	cmp	r3, #199	@ 0xc7
 8004574:	d9f0      	bls.n	8004558 <USB_SetCurrentMode+0x60>
 8004576:	e001      	b.n	800457c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e005      	b.n	8004588 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2bc8      	cmp	r3, #200	@ 0xc8
 8004580:	d101      	bne.n	8004586 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004590:	b084      	sub	sp, #16
 8004592:	b580      	push	{r7, lr}
 8004594:	b086      	sub	sp, #24
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800459e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80045aa:	2300      	movs	r3, #0
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	e009      	b.n	80045c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	3340      	adds	r3, #64	@ 0x40
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	2200      	movs	r2, #0
 80045bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	3301      	adds	r3, #1
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	2b0e      	cmp	r3, #14
 80045c8:	d9f2      	bls.n	80045b0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80045ca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d11c      	bne.n	800460c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045e0:	f043 0302 	orr.w	r3, r3, #2
 80045e4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004602:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	639a      	str	r2, [r3, #56]	@ 0x38
 800460a:	e00b      	b.n	8004624 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004610:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800462a:	461a      	mov	r2, r3
 800462c:	2300      	movs	r3, #0
 800462e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004630:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004634:	2b01      	cmp	r3, #1
 8004636:	d10d      	bne.n	8004654 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004638:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800463c:	2b00      	cmp	r3, #0
 800463e:	d104      	bne.n	800464a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004640:	2100      	movs	r1, #0
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f968 	bl	8004918 <USB_SetDevSpeed>
 8004648:	e008      	b.n	800465c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800464a:	2101      	movs	r1, #1
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f963 	bl	8004918 <USB_SetDevSpeed>
 8004652:	e003      	b.n	800465c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004654:	2103      	movs	r1, #3
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f95e 	bl	8004918 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800465c:	2110      	movs	r1, #16
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f8fa 	bl	8004858 <USB_FlushTxFifo>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f924 	bl	80048bc <USB_FlushRxFifo>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004684:	461a      	mov	r2, r3
 8004686:	2300      	movs	r3, #0
 8004688:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004690:	461a      	mov	r2, r3
 8004692:	2300      	movs	r3, #0
 8004694:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800469c:	461a      	mov	r2, r3
 800469e:	2300      	movs	r3, #0
 80046a0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046a2:	2300      	movs	r3, #0
 80046a4:	613b      	str	r3, [r7, #16]
 80046a6:	e043      	b.n	8004730 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046be:	d118      	bne.n	80046f2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10a      	bne.n	80046dc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	015a      	lsls	r2, r3, #5
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4413      	add	r3, r2
 80046ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046d2:	461a      	mov	r2, r3
 80046d4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	e013      	b.n	8004704 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046e8:	461a      	mov	r2, r3
 80046ea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80046ee:	6013      	str	r3, [r2, #0]
 80046f0:	e008      	b.n	8004704 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046fe:	461a      	mov	r2, r3
 8004700:	2300      	movs	r3, #0
 8004702:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4413      	add	r3, r2
 800470c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004710:	461a      	mov	r2, r3
 8004712:	2300      	movs	r3, #0
 8004714:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	015a      	lsls	r2, r3, #5
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	4413      	add	r3, r2
 800471e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004722:	461a      	mov	r2, r3
 8004724:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004728:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	3301      	adds	r3, #1
 800472e:	613b      	str	r3, [r7, #16]
 8004730:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004734:	461a      	mov	r2, r3
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	4293      	cmp	r3, r2
 800473a:	d3b5      	bcc.n	80046a8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800473c:	2300      	movs	r3, #0
 800473e:	613b      	str	r3, [r7, #16]
 8004740:	e043      	b.n	80047ca <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4413      	add	r3, r2
 800474a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004754:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004758:	d118      	bne.n	800478c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10a      	bne.n	8004776 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800476c:	461a      	mov	r2, r3
 800476e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004772:	6013      	str	r3, [r2, #0]
 8004774:	e013      	b.n	800479e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	015a      	lsls	r2, r3, #5
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4413      	add	r3, r2
 800477e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004782:	461a      	mov	r2, r3
 8004784:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	e008      	b.n	800479e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4413      	add	r3, r2
 8004794:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004798:	461a      	mov	r2, r3
 800479a:	2300      	movs	r3, #0
 800479c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047aa:	461a      	mov	r2, r3
 80047ac:	2300      	movs	r3, #0
 80047ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047bc:	461a      	mov	r2, r3
 80047be:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80047c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	3301      	adds	r3, #1
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80047ce:	461a      	mov	r2, r3
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d3b5      	bcc.n	8004742 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047e8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80047f6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80047f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d105      	bne.n	800480c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	f043 0210 	orr.w	r2, r3, #16
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	699a      	ldr	r2, [r3, #24]
 8004810:	4b10      	ldr	r3, [pc, #64]	@ (8004854 <USB_DevInit+0x2c4>)
 8004812:	4313      	orrs	r3, r2
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004818:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800481c:	2b00      	cmp	r3, #0
 800481e:	d005      	beq.n	800482c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	f043 0208 	orr.w	r2, r3, #8
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800482c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004830:	2b01      	cmp	r3, #1
 8004832:	d107      	bne.n	8004844 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800483c:	f043 0304 	orr.w	r3, r3, #4
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004844:	7dfb      	ldrb	r3, [r7, #23]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004850:	b004      	add	sp, #16
 8004852:	4770      	bx	lr
 8004854:	803c3800 	.word	0x803c3800

08004858 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004862:	2300      	movs	r3, #0
 8004864:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	3301      	adds	r3, #1
 800486a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004872:	d901      	bls.n	8004878 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e01b      	b.n	80048b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	2b00      	cmp	r3, #0
 800487e:	daf2      	bge.n	8004866 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	019b      	lsls	r3, r3, #6
 8004888:	f043 0220 	orr.w	r2, r3, #32
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	3301      	adds	r3, #1
 8004894:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800489c:	d901      	bls.n	80048a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e006      	b.n	80048b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	f003 0320 	and.w	r3, r3, #32
 80048aa:	2b20      	cmp	r3, #32
 80048ac:	d0f0      	beq.n	8004890 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048c4:	2300      	movs	r3, #0
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	3301      	adds	r3, #1
 80048cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048d4:	d901      	bls.n	80048da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e018      	b.n	800490c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	daf2      	bge.n	80048c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2210      	movs	r2, #16
 80048ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	3301      	adds	r3, #1
 80048f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048f8:	d901      	bls.n	80048fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e006      	b.n	800490c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	f003 0310 	and.w	r3, r3, #16
 8004906:	2b10      	cmp	r3, #16
 8004908:	d0f0      	beq.n	80048ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	460b      	mov	r3, r1
 8004922:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	78fb      	ldrb	r3, [r7, #3]
 8004932:	68f9      	ldr	r1, [r7, #12]
 8004934:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004938:	4313      	orrs	r3, r2
 800493a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800494a:	b480      	push	{r7}
 800494c:	b087      	sub	sp, #28
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 0306 	and.w	r3, r3, #6
 8004962:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d102      	bne.n	8004970 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800496a:	2300      	movs	r3, #0
 800496c:	75fb      	strb	r3, [r7, #23]
 800496e:	e00a      	b.n	8004986 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b02      	cmp	r3, #2
 8004974:	d002      	beq.n	800497c <USB_GetDevSpeed+0x32>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2b06      	cmp	r3, #6
 800497a:	d102      	bne.n	8004982 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800497c:	2302      	movs	r3, #2
 800497e:	75fb      	strb	r3, [r7, #23]
 8004980:	e001      	b.n	8004986 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004982:	230f      	movs	r3, #15
 8004984:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004986:	7dfb      	ldrb	r3, [r7, #23]
}
 8004988:	4618      	mov	r0, r3
 800498a:	371c      	adds	r7, #28
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	785b      	ldrb	r3, [r3, #1]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d13a      	bne.n	8004a26 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049b6:	69da      	ldr	r2, [r3, #28]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	f003 030f 	and.w	r3, r3, #15
 80049c0:	2101      	movs	r1, #1
 80049c2:	fa01 f303 	lsl.w	r3, r1, r3
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	68f9      	ldr	r1, [r7, #12]
 80049ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049ce:	4313      	orrs	r3, r2
 80049d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d155      	bne.n	8004a94 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	015a      	lsls	r2, r3, #5
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4413      	add	r3, r2
 80049f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	791b      	ldrb	r3, [r3, #4]
 8004a02:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a04:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	059b      	lsls	r3, r3, #22
 8004a0a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	0151      	lsls	r1, r2, #5
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	440a      	add	r2, r1
 8004a16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a22:	6013      	str	r3, [r2, #0]
 8004a24:	e036      	b.n	8004a94 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a2c:	69da      	ldr	r2, [r3, #28]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	2101      	movs	r1, #1
 8004a38:	fa01 f303 	lsl.w	r3, r1, r3
 8004a3c:	041b      	lsls	r3, r3, #16
 8004a3e:	68f9      	ldr	r1, [r7, #12]
 8004a40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a44:	4313      	orrs	r3, r2
 8004a46:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d11a      	bne.n	8004a94 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	791b      	ldrb	r3, [r3, #4]
 8004a78:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a7a:	430b      	orrs	r3, r1
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	0151      	lsls	r1, r2, #5
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	440a      	add	r2, r1
 8004a86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a92:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
	...

08004aa4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	785b      	ldrb	r3, [r3, #1]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d161      	bne.n	8004b84 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ad2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ad6:	d11f      	bne.n	8004b18 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	0151      	lsls	r1, r2, #5
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	440a      	add	r2, r1
 8004aee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004af2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004af6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	0151      	lsls	r1, r2, #5
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	440a      	add	r2, r1
 8004b0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b12:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	f003 030f 	and.w	r3, r3, #15
 8004b28:	2101      	movs	r1, #1
 8004b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	43db      	mvns	r3, r3
 8004b32:	68f9      	ldr	r1, [r7, #12]
 8004b34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b38:	4013      	ands	r3, r2
 8004b3a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b42:	69da      	ldr	r2, [r3, #28]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	f003 030f 	and.w	r3, r3, #15
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	43db      	mvns	r3, r3
 8004b56:	68f9      	ldr	r1, [r7, #12]
 8004b58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	0159      	lsls	r1, r3, #5
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	440b      	add	r3, r1
 8004b76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4b35      	ldr	r3, [pc, #212]	@ (8004c54 <USB_DeactivateEndpoint+0x1b0>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	600b      	str	r3, [r1, #0]
 8004b82:	e060      	b.n	8004c46 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b9a:	d11f      	bne.n	8004bdc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	0151      	lsls	r1, r2, #5
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	440a      	add	r2, r1
 8004bb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bb6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004bba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	0151      	lsls	r1, r2, #5
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	440a      	add	r2, r1
 8004bd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bd6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004bda:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004be2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	f003 030f 	and.w	r3, r3, #15
 8004bec:	2101      	movs	r1, #1
 8004bee:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf2:	041b      	lsls	r3, r3, #16
 8004bf4:	43db      	mvns	r3, r3
 8004bf6:	68f9      	ldr	r1, [r7, #12]
 8004bf8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c06:	69da      	ldr	r2, [r3, #28]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	f003 030f 	and.w	r3, r3, #15
 8004c10:	2101      	movs	r1, #1
 8004c12:	fa01 f303 	lsl.w	r3, r1, r3
 8004c16:	041b      	lsls	r3, r3, #16
 8004c18:	43db      	mvns	r3, r3
 8004c1a:	68f9      	ldr	r1, [r7, #12]
 8004c1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c20:	4013      	ands	r3, r2
 8004c22:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	0159      	lsls	r1, r3, #5
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	440b      	add	r3, r1
 8004c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4b05      	ldr	r3, [pc, #20]	@ (8004c58 <USB_DeactivateEndpoint+0x1b4>)
 8004c42:	4013      	ands	r3, r2
 8004c44:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	ec337800 	.word	0xec337800
 8004c58:	eff37800 	.word	0xeff37800

08004c5c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08a      	sub	sp, #40	@ 0x28
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	4613      	mov	r3, r2
 8004c68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	785b      	ldrb	r3, [r3, #1]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	f040 817f 	bne.w	8004f7c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d132      	bne.n	8004cec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	015a      	lsls	r2, r3, #5
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	0151      	lsls	r1, r2, #5
 8004c98:	69fa      	ldr	r2, [r7, #28]
 8004c9a:	440a      	add	r2, r1
 8004c9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ca0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004ca4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004ca8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	015a      	lsls	r2, r3, #5
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	0151      	lsls	r1, r2, #5
 8004cbc:	69fa      	ldr	r2, [r7, #28]
 8004cbe:	440a      	add	r2, r1
 8004cc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cc4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004cc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	0151      	lsls	r1, r2, #5
 8004cdc:	69fa      	ldr	r2, [r7, #28]
 8004cde:	440a      	add	r2, r1
 8004ce0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ce4:	0cdb      	lsrs	r3, r3, #19
 8004ce6:	04db      	lsls	r3, r3, #19
 8004ce8:	6113      	str	r3, [r2, #16]
 8004cea:	e097      	b.n	8004e1c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	0151      	lsls	r1, r2, #5
 8004cfe:	69fa      	ldr	r2, [r7, #28]
 8004d00:	440a      	add	r2, r1
 8004d02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d06:	0cdb      	lsrs	r3, r3, #19
 8004d08:	04db      	lsls	r3, r3, #19
 8004d0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	0151      	lsls	r1, r2, #5
 8004d1e:	69fa      	ldr	r2, [r7, #28]
 8004d20:	440a      	add	r2, r1
 8004d22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d26:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004d2a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004d2e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d11a      	bne.n	8004d6c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	691a      	ldr	r2, [r3, #16]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d903      	bls.n	8004d4a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	689a      	ldr	r2, [r3, #8]
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	0151      	lsls	r1, r2, #5
 8004d5c:	69fa      	ldr	r2, [r7, #28]
 8004d5e:	440a      	add	r2, r1
 8004d60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d68:	6113      	str	r3, [r2, #16]
 8004d6a:	e044      	b.n	8004df6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	691a      	ldr	r2, [r3, #16]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	4413      	add	r3, r2
 8004d76:	1e5a      	subs	r2, r3, #1
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d80:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	8afb      	ldrh	r3, [r7, #22]
 8004d92:	04d9      	lsls	r1, r3, #19
 8004d94:	4ba4      	ldr	r3, [pc, #656]	@ (8005028 <USB_EPStartXfer+0x3cc>)
 8004d96:	400b      	ands	r3, r1
 8004d98:	69b9      	ldr	r1, [r7, #24]
 8004d9a:	0148      	lsls	r0, r1, #5
 8004d9c:	69f9      	ldr	r1, [r7, #28]
 8004d9e:	4401      	add	r1, r0
 8004da0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004da4:	4313      	orrs	r3, r2
 8004da6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	791b      	ldrb	r3, [r3, #4]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d122      	bne.n	8004df6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	0151      	lsls	r1, r2, #5
 8004dc2:	69fa      	ldr	r2, [r7, #28]
 8004dc4:	440a      	add	r2, r1
 8004dc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dca:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004dce:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ddc:	691a      	ldr	r2, [r3, #16]
 8004dde:	8afb      	ldrh	r3, [r7, #22]
 8004de0:	075b      	lsls	r3, r3, #29
 8004de2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004de6:	69b9      	ldr	r1, [r7, #24]
 8004de8:	0148      	lsls	r0, r1, #5
 8004dea:	69f9      	ldr	r1, [r7, #28]
 8004dec:	4401      	add	r1, r0
 8004dee:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004df2:	4313      	orrs	r3, r2
 8004df4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e0c:	69b9      	ldr	r1, [r7, #24]
 8004e0e:	0148      	lsls	r0, r1, #5
 8004e10:	69f9      	ldr	r1, [r7, #28]
 8004e12:	4401      	add	r1, r0
 8004e14:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004e1c:	79fb      	ldrb	r3, [r7, #7]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d14b      	bne.n	8004eba <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d009      	beq.n	8004e3e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e36:	461a      	mov	r2, r3
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	791b      	ldrb	r3, [r3, #4]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d128      	bne.n	8004e98 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d110      	bne.n	8004e78 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	0151      	lsls	r1, r2, #5
 8004e68:	69fa      	ldr	r2, [r7, #28]
 8004e6a:	440a      	add	r2, r1
 8004e6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e70:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	e00f      	b.n	8004e98 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	0151      	lsls	r1, r2, #5
 8004e8a:	69fa      	ldr	r2, [r7, #28]
 8004e8c:	440a      	add	r2, r1
 8004e8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e96:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	0151      	lsls	r1, r2, #5
 8004eaa:	69fa      	ldr	r2, [r7, #28]
 8004eac:	440a      	add	r2, r1
 8004eae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004eb2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004eb6:	6013      	str	r3, [r2, #0]
 8004eb8:	e166      	b.n	8005188 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	0151      	lsls	r1, r2, #5
 8004ecc:	69fa      	ldr	r2, [r7, #28]
 8004ece:	440a      	add	r2, r1
 8004ed0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ed4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004ed8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	791b      	ldrb	r3, [r3, #4]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d015      	beq.n	8004f0e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f000 814e 	beq.w	8005188 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ef2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	f003 030f 	and.w	r3, r3, #15
 8004efc:	2101      	movs	r1, #1
 8004efe:	fa01 f303 	lsl.w	r3, r1, r3
 8004f02:	69f9      	ldr	r1, [r7, #28]
 8004f04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	634b      	str	r3, [r1, #52]	@ 0x34
 8004f0c:	e13c      	b.n	8005188 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d110      	bne.n	8004f40 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	0151      	lsls	r1, r2, #5
 8004f30:	69fa      	ldr	r2, [r7, #28]
 8004f32:	440a      	add	r2, r1
 8004f34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f38:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	e00f      	b.n	8004f60 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	0151      	lsls	r1, r2, #5
 8004f52:	69fa      	ldr	r2, [r7, #28]
 8004f54:	440a      	add	r2, r1
 8004f56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f5e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	68d9      	ldr	r1, [r3, #12]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	781a      	ldrb	r2, [r3, #0]
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	b298      	uxth	r0, r3
 8004f6e:	79fb      	ldrb	r3, [r7, #7]
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	4603      	mov	r3, r0
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 f9b9 	bl	80052ec <USB_WritePacket>
 8004f7a:	e105      	b.n	8005188 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	0151      	lsls	r1, r2, #5
 8004f8e:	69fa      	ldr	r2, [r7, #28]
 8004f90:	440a      	add	r2, r1
 8004f92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f96:	0cdb      	lsrs	r3, r3, #19
 8004f98:	04db      	lsls	r3, r3, #19
 8004f9a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	0151      	lsls	r1, r2, #5
 8004fae:	69fa      	ldr	r2, [r7, #28]
 8004fb0:	440a      	add	r2, r1
 8004fb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fb6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004fba:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004fbe:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d132      	bne.n	800502c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	689a      	ldr	r2, [r3, #8]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	015a      	lsls	r2, r3, #5
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fea:	691a      	ldr	r2, [r3, #16]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ff4:	69b9      	ldr	r1, [r7, #24]
 8004ff6:	0148      	lsls	r0, r1, #5
 8004ff8:	69f9      	ldr	r1, [r7, #28]
 8004ffa:	4401      	add	r1, r0
 8004ffc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005000:	4313      	orrs	r3, r2
 8005002:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	4413      	add	r3, r2
 800500c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	0151      	lsls	r1, r2, #5
 8005016:	69fa      	ldr	r2, [r7, #28]
 8005018:	440a      	add	r2, r1
 800501a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800501e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005022:	6113      	str	r3, [r2, #16]
 8005024:	e062      	b.n	80050ec <USB_EPStartXfer+0x490>
 8005026:	bf00      	nop
 8005028:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d123      	bne.n	800507c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	4413      	add	r3, r2
 800503c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005040:	691a      	ldr	r2, [r3, #16]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800504a:	69b9      	ldr	r1, [r7, #24]
 800504c:	0148      	lsls	r0, r1, #5
 800504e:	69f9      	ldr	r1, [r7, #28]
 8005050:	4401      	add	r1, r0
 8005052:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005056:	4313      	orrs	r3, r2
 8005058:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	4413      	add	r3, r2
 8005062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	0151      	lsls	r1, r2, #5
 800506c:	69fa      	ldr	r2, [r7, #28]
 800506e:	440a      	add	r2, r1
 8005070:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005074:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005078:	6113      	str	r3, [r2, #16]
 800507a:	e037      	b.n	80050ec <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	691a      	ldr	r2, [r3, #16]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	4413      	add	r3, r2
 8005086:	1e5a      	subs	r2, r3, #1
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005090:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	8afa      	ldrh	r2, [r7, #22]
 8005098:	fb03 f202 	mul.w	r2, r3, r2
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ac:	691a      	ldr	r2, [r3, #16]
 80050ae:	8afb      	ldrh	r3, [r7, #22]
 80050b0:	04d9      	lsls	r1, r3, #19
 80050b2:	4b38      	ldr	r3, [pc, #224]	@ (8005194 <USB_EPStartXfer+0x538>)
 80050b4:	400b      	ands	r3, r1
 80050b6:	69b9      	ldr	r1, [r7, #24]
 80050b8:	0148      	lsls	r0, r1, #5
 80050ba:	69f9      	ldr	r1, [r7, #28]
 80050bc:	4401      	add	r1, r0
 80050be:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80050c2:	4313      	orrs	r3, r2
 80050c4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	015a      	lsls	r2, r3, #5
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	4413      	add	r3, r2
 80050ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050d2:	691a      	ldr	r2, [r3, #16]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050dc:	69b9      	ldr	r1, [r7, #24]
 80050de:	0148      	lsls	r0, r1, #5
 80050e0:	69f9      	ldr	r1, [r7, #28]
 80050e2:	4401      	add	r1, r0
 80050e4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80050e8:	4313      	orrs	r3, r2
 80050ea:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80050ec:	79fb      	ldrb	r3, [r7, #7]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d10d      	bne.n	800510e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d009      	beq.n	800510e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	68d9      	ldr	r1, [r3, #12]
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	4413      	add	r3, r2
 8005106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800510a:	460a      	mov	r2, r1
 800510c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	791b      	ldrb	r3, [r3, #4]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d128      	bne.n	8005168 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005122:	2b00      	cmp	r3, #0
 8005124:	d110      	bne.n	8005148 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	0151      	lsls	r1, r2, #5
 8005138:	69fa      	ldr	r2, [r7, #28]
 800513a:	440a      	add	r2, r1
 800513c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005140:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	e00f      	b.n	8005168 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	0151      	lsls	r1, r2, #5
 800515a:	69fa      	ldr	r2, [r7, #28]
 800515c:	440a      	add	r2, r1
 800515e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005162:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005166:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	0151      	lsls	r1, r2, #5
 800517a:	69fa      	ldr	r2, [r7, #28]
 800517c:	440a      	add	r2, r1
 800517e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005182:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005186:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3720      	adds	r7, #32
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	1ff80000 	.word	0x1ff80000

08005198 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	785b      	ldrb	r3, [r3, #1]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d14a      	bne.n	800524c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051ce:	f040 8086 	bne.w	80052de <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	7812      	ldrb	r2, [r2, #0]
 80051e6:	0151      	lsls	r1, r2, #5
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	440a      	add	r2, r1
 80051ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051f0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80051f4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	7812      	ldrb	r2, [r2, #0]
 800520a:	0151      	lsls	r1, r2, #5
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	440a      	add	r2, r1
 8005210:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005214:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005218:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	3301      	adds	r3, #1
 800521e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005226:	4293      	cmp	r3, r2
 8005228:	d902      	bls.n	8005230 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	75fb      	strb	r3, [r7, #23]
          break;
 800522e:	e056      	b.n	80052de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005244:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005248:	d0e7      	beq.n	800521a <USB_EPStopXfer+0x82>
 800524a:	e048      	b.n	80052de <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005260:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005264:	d13b      	bne.n	80052de <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	7812      	ldrb	r2, [r2, #0]
 800527a:	0151      	lsls	r1, r2, #5
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	440a      	add	r2, r1
 8005280:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005284:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005288:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	4413      	add	r3, r2
 8005294:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	7812      	ldrb	r2, [r2, #0]
 800529e:	0151      	lsls	r1, r2, #5
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	440a      	add	r2, r1
 80052a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	3301      	adds	r3, #1
 80052b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d902      	bls.n	80052c4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	75fb      	strb	r3, [r7, #23]
          break;
 80052c2:	e00c      	b.n	80052de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052dc:	d0e7      	beq.n	80052ae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80052de:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	371c      	adds	r7, #28
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b089      	sub	sp, #36	@ 0x24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	4611      	mov	r1, r2
 80052f8:	461a      	mov	r2, r3
 80052fa:	460b      	mov	r3, r1
 80052fc:	71fb      	strb	r3, [r7, #7]
 80052fe:	4613      	mov	r3, r2
 8005300:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800530a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800530e:	2b00      	cmp	r3, #0
 8005310:	d123      	bne.n	800535a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005312:	88bb      	ldrh	r3, [r7, #4]
 8005314:	3303      	adds	r3, #3
 8005316:	089b      	lsrs	r3, r3, #2
 8005318:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800531a:	2300      	movs	r3, #0
 800531c:	61bb      	str	r3, [r7, #24]
 800531e:	e018      	b.n	8005352 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005320:	79fb      	ldrb	r3, [r7, #7]
 8005322:	031a      	lsls	r2, r3, #12
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	4413      	add	r3, r2
 8005328:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800532c:	461a      	mov	r2, r3
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	3301      	adds	r3, #1
 8005338:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	3301      	adds	r3, #1
 800533e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	3301      	adds	r3, #1
 8005344:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	3301      	adds	r3, #1
 800534a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	3301      	adds	r3, #1
 8005350:	61bb      	str	r3, [r7, #24]
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	429a      	cmp	r2, r3
 8005358:	d3e2      	bcc.n	8005320 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3724      	adds	r7, #36	@ 0x24
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005368:	b480      	push	{r7}
 800536a:	b08b      	sub	sp, #44	@ 0x2c
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	4613      	mov	r3, r2
 8005374:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800537e:	88fb      	ldrh	r3, [r7, #6]
 8005380:	089b      	lsrs	r3, r3, #2
 8005382:	b29b      	uxth	r3, r3
 8005384:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005386:	88fb      	ldrh	r3, [r7, #6]
 8005388:	f003 0303 	and.w	r3, r3, #3
 800538c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800538e:	2300      	movs	r3, #0
 8005390:	623b      	str	r3, [r7, #32]
 8005392:	e014      	b.n	80053be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539e:	601a      	str	r2, [r3, #0]
    pDest++;
 80053a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a2:	3301      	adds	r3, #1
 80053a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80053a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a8:	3301      	adds	r3, #1
 80053aa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80053ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ae:	3301      	adds	r3, #1
 80053b0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80053b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b4:	3301      	adds	r3, #1
 80053b6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	3301      	adds	r3, #1
 80053bc:	623b      	str	r3, [r7, #32]
 80053be:	6a3a      	ldr	r2, [r7, #32]
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d3e6      	bcc.n	8005394 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80053c6:	8bfb      	ldrh	r3, [r7, #30]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d01e      	beq.n	800540a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053d6:	461a      	mov	r2, r3
 80053d8:	f107 0310 	add.w	r3, r7, #16
 80053dc:	6812      	ldr	r2, [r2, #0]
 80053de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	00db      	lsls	r3, r3, #3
 80053e8:	fa22 f303 	lsr.w	r3, r2, r3
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f0:	701a      	strb	r2, [r3, #0]
      i++;
 80053f2:	6a3b      	ldr	r3, [r7, #32]
 80053f4:	3301      	adds	r3, #1
 80053f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80053f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fa:	3301      	adds	r3, #1
 80053fc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80053fe:	8bfb      	ldrh	r3, [r7, #30]
 8005400:	3b01      	subs	r3, #1
 8005402:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005404:	8bfb      	ldrh	r3, [r7, #30]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1ea      	bne.n	80053e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800540a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800540c:	4618      	mov	r0, r3
 800540e:	372c      	adds	r7, #44	@ 0x2c
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	785b      	ldrb	r3, [r3, #1]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d12c      	bne.n	800548e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	db12      	blt.n	800546c <USB_EPSetStall+0x54>
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00f      	beq.n	800546c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4413      	add	r3, r2
 8005454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	0151      	lsls	r1, r2, #5
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	440a      	add	r2, r1
 8005462:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005466:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800546a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4413      	add	r3, r2
 8005474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	0151      	lsls	r1, r2, #5
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	440a      	add	r2, r1
 8005482:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005486:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800548a:	6013      	str	r3, [r2, #0]
 800548c:	e02b      	b.n	80054e6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	4413      	add	r3, r2
 8005496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	db12      	blt.n	80054c6 <USB_EPSetStall+0xae>
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00f      	beq.n	80054c6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	0151      	lsls	r1, r2, #5
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	440a      	add	r2, r1
 80054bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80054c4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	0151      	lsls	r1, r2, #5
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	440a      	add	r2, r1
 80054dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80054e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	785b      	ldrb	r3, [r3, #1]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d128      	bne.n	8005562 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	0151      	lsls	r1, r2, #5
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	440a      	add	r2, r1
 8005526:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800552a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800552e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	791b      	ldrb	r3, [r3, #4]
 8005534:	2b03      	cmp	r3, #3
 8005536:	d003      	beq.n	8005540 <USB_EPClearStall+0x4c>
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	791b      	ldrb	r3, [r3, #4]
 800553c:	2b02      	cmp	r3, #2
 800553e:	d138      	bne.n	80055b2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4413      	add	r3, r2
 8005548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	0151      	lsls	r1, r2, #5
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	440a      	add	r2, r1
 8005556:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800555a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800555e:	6013      	str	r3, [r2, #0]
 8005560:	e027      	b.n	80055b2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	4413      	add	r3, r2
 800556a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	0151      	lsls	r1, r2, #5
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	440a      	add	r2, r1
 8005578:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800557c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005580:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	791b      	ldrb	r3, [r3, #4]
 8005586:	2b03      	cmp	r3, #3
 8005588:	d003      	beq.n	8005592 <USB_EPClearStall+0x9e>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	791b      	ldrb	r3, [r3, #4]
 800558e:	2b02      	cmp	r3, #2
 8005590:	d10f      	bne.n	80055b2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4413      	add	r3, r2
 800559a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	0151      	lsls	r1, r2, #5
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	440a      	add	r2, r1
 80055a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055b0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	460b      	mov	r3, r1
 80055ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055de:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80055e2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	78fb      	ldrb	r3, [r7, #3]
 80055ee:	011b      	lsls	r3, r3, #4
 80055f0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80055f4:	68f9      	ldr	r1, [r7, #12]
 80055f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055fa:	4313      	orrs	r3, r2
 80055fc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005626:	f023 0303 	bic.w	r3, r3, #3
 800562a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800563a:	f023 0302 	bic.w	r3, r3, #2
 800563e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800564e:	b480      	push	{r7}
 8005650:	b085      	sub	sp, #20
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005668:	f023 0303 	bic.w	r3, r3, #3
 800566c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800567c:	f043 0302 	orr.w	r3, r3, #2
 8005680:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4013      	ands	r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80056a8:	68fb      	ldr	r3, [r7, #12]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b085      	sub	sp, #20
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	4013      	ands	r3, r2
 80056d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	0c1b      	lsrs	r3, r3, #16
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b085      	sub	sp, #20
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	4013      	ands	r3, r2
 800570c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	b29b      	uxth	r3, r3
}
 8005712:	4618      	mov	r0, r3
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800571e:	b480      	push	{r7}
 8005720:	b085      	sub	sp, #20
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
 8005726:	460b      	mov	r3, r1
 8005728:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800572e:	78fb      	ldrb	r3, [r7, #3]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	4413      	add	r3, r2
 8005736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	4013      	ands	r3, r2
 800574a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800574c:	68bb      	ldr	r3, [r7, #8]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800575a:	b480      	push	{r7}
 800575c:	b087      	sub	sp, #28
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
 8005762:	460b      	mov	r3, r1
 8005764:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800577a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800577c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800577e:	78fb      	ldrb	r3, [r7, #3]
 8005780:	f003 030f 	and.w	r3, r3, #15
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	fa22 f303 	lsr.w	r3, r2, r3
 800578a:	01db      	lsls	r3, r3, #7
 800578c:	b2db      	uxtb	r3, r3
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	4313      	orrs	r3, r2
 8005792:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005794:	78fb      	ldrb	r3, [r7, #3]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	4013      	ands	r3, r2
 80057a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80057a8:	68bb      	ldr	r3, [r7, #8]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	371c      	adds	r7, #28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	f003 0301 	and.w	r3, r3, #1
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b085      	sub	sp, #20
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057ec:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80057f0:	f023 0307 	bic.w	r3, r3, #7
 80057f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005808:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3714      	adds	r7, #20
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005818:	b480      	push	{r7}
 800581a:	b087      	sub	sp, #28
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	460b      	mov	r3, r1
 8005822:	607a      	str	r2, [r7, #4]
 8005824:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	333c      	adds	r3, #60	@ 0x3c
 800582e:	3304      	adds	r3, #4
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	4a26      	ldr	r2, [pc, #152]	@ (80058d0 <USB_EP0_OutStart+0xb8>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d90a      	bls.n	8005852 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005848:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800584c:	d101      	bne.n	8005852 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800584e:	2300      	movs	r3, #0
 8005850:	e037      	b.n	80058c2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005858:	461a      	mov	r2, r3
 800585a:	2300      	movs	r3, #0
 800585c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800586c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005870:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005880:	f043 0318 	orr.w	r3, r3, #24
 8005884:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005894:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005898:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800589a:	7afb      	ldrb	r3, [r7, #11]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d10f      	bne.n	80058c0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058a6:	461a      	mov	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058ba:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80058be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	371c      	adds	r7, #28
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	4f54300a 	.word	0x4f54300a

080058d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058dc:	2300      	movs	r3, #0
 80058de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	3301      	adds	r3, #1
 80058e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058ec:	d901      	bls.n	80058f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e01b      	b.n	800592a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	daf2      	bge.n	80058e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80058fa:	2300      	movs	r3, #0
 80058fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	f043 0201 	orr.w	r2, r3, #1
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	3301      	adds	r3, #1
 800590e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005916:	d901      	bls.n	800591c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e006      	b.n	800592a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	2b01      	cmp	r3, #1
 8005926:	d0f0      	beq.n	800590a <USB_CoreReset+0x36>

  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3714      	adds	r7, #20
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
	...

08005938 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	460b      	mov	r3, r1
 8005942:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005944:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005948:	f002 fc38 	bl	80081bc <USBD_static_malloc>
 800594c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d109      	bne.n	8005968 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	32b0      	adds	r2, #176	@ 0xb0
 800595e:	2100      	movs	r1, #0
 8005960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005964:	2302      	movs	r3, #2
 8005966:	e0d4      	b.n	8005b12 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005968:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800596c:	2100      	movs	r1, #0
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f002 fc68 	bl	8008244 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	32b0      	adds	r2, #176	@ 0xb0
 800597e:	68f9      	ldr	r1, [r7, #12]
 8005980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	32b0      	adds	r2, #176	@ 0xb0
 800598e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	7c1b      	ldrb	r3, [r3, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d138      	bne.n	8005a12 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80059a0:	4b5e      	ldr	r3, [pc, #376]	@ (8005b1c <USBD_CDC_Init+0x1e4>)
 80059a2:	7819      	ldrb	r1, [r3, #0]
 80059a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80059a8:	2202      	movs	r2, #2
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f002 fae3 	bl	8007f76 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80059b0:	4b5a      	ldr	r3, [pc, #360]	@ (8005b1c <USBD_CDC_Init+0x1e4>)
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	f003 020f 	and.w	r2, r3, #15
 80059b8:	6879      	ldr	r1, [r7, #4]
 80059ba:	4613      	mov	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	440b      	add	r3, r1
 80059c4:	3324      	adds	r3, #36	@ 0x24
 80059c6:	2201      	movs	r2, #1
 80059c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80059ca:	4b55      	ldr	r3, [pc, #340]	@ (8005b20 <USBD_CDC_Init+0x1e8>)
 80059cc:	7819      	ldrb	r1, [r3, #0]
 80059ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80059d2:	2202      	movs	r2, #2
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f002 face 	bl	8007f76 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80059da:	4b51      	ldr	r3, [pc, #324]	@ (8005b20 <USBD_CDC_Init+0x1e8>)
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	f003 020f 	and.w	r2, r3, #15
 80059e2:	6879      	ldr	r1, [r7, #4]
 80059e4:	4613      	mov	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	440b      	add	r3, r1
 80059ee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80059f2:	2201      	movs	r2, #1
 80059f4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80059f6:	4b4b      	ldr	r3, [pc, #300]	@ (8005b24 <USBD_CDC_Init+0x1ec>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	f003 020f 	and.w	r2, r3, #15
 80059fe:	6879      	ldr	r1, [r7, #4]
 8005a00:	4613      	mov	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	440b      	add	r3, r1
 8005a0a:	3326      	adds	r3, #38	@ 0x26
 8005a0c:	2210      	movs	r2, #16
 8005a0e:	801a      	strh	r2, [r3, #0]
 8005a10:	e035      	b.n	8005a7e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005a12:	4b42      	ldr	r3, [pc, #264]	@ (8005b1c <USBD_CDC_Init+0x1e4>)
 8005a14:	7819      	ldrb	r1, [r3, #0]
 8005a16:	2340      	movs	r3, #64	@ 0x40
 8005a18:	2202      	movs	r2, #2
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f002 faab 	bl	8007f76 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005a20:	4b3e      	ldr	r3, [pc, #248]	@ (8005b1c <USBD_CDC_Init+0x1e4>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	f003 020f 	and.w	r2, r3, #15
 8005a28:	6879      	ldr	r1, [r7, #4]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	440b      	add	r3, r1
 8005a34:	3324      	adds	r3, #36	@ 0x24
 8005a36:	2201      	movs	r2, #1
 8005a38:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005a3a:	4b39      	ldr	r3, [pc, #228]	@ (8005b20 <USBD_CDC_Init+0x1e8>)
 8005a3c:	7819      	ldrb	r1, [r3, #0]
 8005a3e:	2340      	movs	r3, #64	@ 0x40
 8005a40:	2202      	movs	r2, #2
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f002 fa97 	bl	8007f76 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005a48:	4b35      	ldr	r3, [pc, #212]	@ (8005b20 <USBD_CDC_Init+0x1e8>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	f003 020f 	and.w	r2, r3, #15
 8005a50:	6879      	ldr	r1, [r7, #4]
 8005a52:	4613      	mov	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4413      	add	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	440b      	add	r3, r1
 8005a5c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005a60:	2201      	movs	r2, #1
 8005a62:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005a64:	4b2f      	ldr	r3, [pc, #188]	@ (8005b24 <USBD_CDC_Init+0x1ec>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	f003 020f 	and.w	r2, r3, #15
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	440b      	add	r3, r1
 8005a78:	3326      	adds	r3, #38	@ 0x26
 8005a7a:	2210      	movs	r2, #16
 8005a7c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a7e:	4b29      	ldr	r3, [pc, #164]	@ (8005b24 <USBD_CDC_Init+0x1ec>)
 8005a80:	7819      	ldrb	r1, [r3, #0]
 8005a82:	2308      	movs	r3, #8
 8005a84:	2203      	movs	r2, #3
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f002 fa75 	bl	8007f76 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005a8c:	4b25      	ldr	r3, [pc, #148]	@ (8005b24 <USBD_CDC_Init+0x1ec>)
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	f003 020f 	and.w	r2, r3, #15
 8005a94:	6879      	ldr	r1, [r7, #4]
 8005a96:	4613      	mov	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	440b      	add	r3, r1
 8005aa0:	3324      	adds	r3, #36	@ 0x24
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	33b0      	adds	r3, #176	@ 0xb0
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4413      	add	r3, r2
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005adc:	2302      	movs	r3, #2
 8005ade:	e018      	b.n	8005b12 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	7c1b      	ldrb	r3, [r3, #16]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10a      	bne.n	8005afe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8005b20 <USBD_CDC_Init+0x1e8>)
 8005aea:	7819      	ldrb	r1, [r3, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005af2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f002 fb2c 	bl	8008154 <USBD_LL_PrepareReceive>
 8005afc:	e008      	b.n	8005b10 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005afe:	4b08      	ldr	r3, [pc, #32]	@ (8005b20 <USBD_CDC_Init+0x1e8>)
 8005b00:	7819      	ldrb	r1, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005b08:	2340      	movs	r3, #64	@ 0x40
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f002 fb22 	bl	8008154 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	20000093 	.word	0x20000093
 8005b20:	20000094 	.word	0x20000094
 8005b24:	20000095 	.word	0x20000095

08005b28 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	460b      	mov	r3, r1
 8005b32:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005b34:	4b3a      	ldr	r3, [pc, #232]	@ (8005c20 <USBD_CDC_DeInit+0xf8>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	4619      	mov	r1, r3
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f002 fa41 	bl	8007fc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005b40:	4b37      	ldr	r3, [pc, #220]	@ (8005c20 <USBD_CDC_DeInit+0xf8>)
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	f003 020f 	and.w	r2, r3, #15
 8005b48:	6879      	ldr	r1, [r7, #4]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	440b      	add	r3, r1
 8005b54:	3324      	adds	r3, #36	@ 0x24
 8005b56:	2200      	movs	r2, #0
 8005b58:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005b5a:	4b32      	ldr	r3, [pc, #200]	@ (8005c24 <USBD_CDC_DeInit+0xfc>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	4619      	mov	r1, r3
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f002 fa2e 	bl	8007fc2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005b66:	4b2f      	ldr	r3, [pc, #188]	@ (8005c24 <USBD_CDC_DeInit+0xfc>)
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	f003 020f 	and.w	r2, r3, #15
 8005b6e:	6879      	ldr	r1, [r7, #4]
 8005b70:	4613      	mov	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	440b      	add	r3, r1
 8005b7a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005b7e:	2200      	movs	r2, #0
 8005b80:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005b82:	4b29      	ldr	r3, [pc, #164]	@ (8005c28 <USBD_CDC_DeInit+0x100>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	4619      	mov	r1, r3
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f002 fa1a 	bl	8007fc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005b8e:	4b26      	ldr	r3, [pc, #152]	@ (8005c28 <USBD_CDC_DeInit+0x100>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	f003 020f 	and.w	r2, r3, #15
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	440b      	add	r3, r1
 8005ba2:	3324      	adds	r3, #36	@ 0x24
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8005c28 <USBD_CDC_DeInit+0x100>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	f003 020f 	and.w	r2, r3, #15
 8005bb0:	6879      	ldr	r1, [r7, #4]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	440b      	add	r3, r1
 8005bbc:	3326      	adds	r3, #38	@ 0x26
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	32b0      	adds	r2, #176	@ 0xb0
 8005bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d01f      	beq.n	8005c14 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	33b0      	adds	r3, #176	@ 0xb0
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	32b0      	adds	r2, #176	@ 0xb0
 8005bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f002 faee 	bl	80081d8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	32b0      	adds	r2, #176	@ 0xb0
 8005c06:	2100      	movs	r1, #0
 8005c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	20000093 	.word	0x20000093
 8005c24:	20000094 	.word	0x20000094
 8005c28:	20000095 	.word	0x20000095

08005c2c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	32b0      	adds	r2, #176	@ 0xb0
 8005c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c44:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e0bf      	b.n	8005ddc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d050      	beq.n	8005d0a <USBD_CDC_Setup+0xde>
 8005c68:	2b20      	cmp	r3, #32
 8005c6a:	f040 80af 	bne.w	8005dcc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	88db      	ldrh	r3, [r3, #6]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d03a      	beq.n	8005cec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	b25b      	sxtb	r3, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	da1b      	bge.n	8005cb8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	33b0      	adds	r3, #176	@ 0xb0
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4413      	add	r3, r2
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005c96:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c98:	683a      	ldr	r2, [r7, #0]
 8005c9a:	88d2      	ldrh	r2, [r2, #6]
 8005c9c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	88db      	ldrh	r3, [r3, #6]
 8005ca2:	2b07      	cmp	r3, #7
 8005ca4:	bf28      	it	cs
 8005ca6:	2307      	movcs	r3, #7
 8005ca8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	89fa      	ldrh	r2, [r7, #14]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f001 fd53 	bl	800775c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005cb6:	e090      	b.n	8005dda <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	785a      	ldrb	r2, [r3, #1]
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	88db      	ldrh	r3, [r3, #6]
 8005cc6:	2b3f      	cmp	r3, #63	@ 0x3f
 8005cc8:	d803      	bhi.n	8005cd2 <USBD_CDC_Setup+0xa6>
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	88db      	ldrh	r3, [r3, #6]
 8005cce:	b2da      	uxtb	r2, r3
 8005cd0:	e000      	b.n	8005cd4 <USBD_CDC_Setup+0xa8>
 8005cd2:	2240      	movs	r2, #64	@ 0x40
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005cda:	6939      	ldr	r1, [r7, #16]
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f001 fd65 	bl	80077b4 <USBD_CtlPrepareRx>
      break;
 8005cea:	e076      	b.n	8005dda <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	33b0      	adds	r3, #176	@ 0xb0
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	7850      	ldrb	r0, [r2, #1]
 8005d02:	2200      	movs	r2, #0
 8005d04:	6839      	ldr	r1, [r7, #0]
 8005d06:	4798      	blx	r3
      break;
 8005d08:	e067      	b.n	8005dda <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	785b      	ldrb	r3, [r3, #1]
 8005d0e:	2b0b      	cmp	r3, #11
 8005d10:	d851      	bhi.n	8005db6 <USBD_CDC_Setup+0x18a>
 8005d12:	a201      	add	r2, pc, #4	@ (adr r2, 8005d18 <USBD_CDC_Setup+0xec>)
 8005d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d18:	08005d49 	.word	0x08005d49
 8005d1c:	08005dc5 	.word	0x08005dc5
 8005d20:	08005db7 	.word	0x08005db7
 8005d24:	08005db7 	.word	0x08005db7
 8005d28:	08005db7 	.word	0x08005db7
 8005d2c:	08005db7 	.word	0x08005db7
 8005d30:	08005db7 	.word	0x08005db7
 8005d34:	08005db7 	.word	0x08005db7
 8005d38:	08005db7 	.word	0x08005db7
 8005d3c:	08005db7 	.word	0x08005db7
 8005d40:	08005d73 	.word	0x08005d73
 8005d44:	08005d9d 	.word	0x08005d9d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b03      	cmp	r3, #3
 8005d52:	d107      	bne.n	8005d64 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005d54:	f107 030a 	add.w	r3, r7, #10
 8005d58:	2202      	movs	r2, #2
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f001 fcfd 	bl	800775c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d62:	e032      	b.n	8005dca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005d64:	6839      	ldr	r1, [r7, #0]
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f001 fc7b 	bl	8007662 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	75fb      	strb	r3, [r7, #23]
          break;
 8005d70:	e02b      	b.n	8005dca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b03      	cmp	r3, #3
 8005d7c:	d107      	bne.n	8005d8e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005d7e:	f107 030d 	add.w	r3, r7, #13
 8005d82:	2201      	movs	r2, #1
 8005d84:	4619      	mov	r1, r3
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f001 fce8 	bl	800775c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d8c:	e01d      	b.n	8005dca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005d8e:	6839      	ldr	r1, [r7, #0]
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f001 fc66 	bl	8007662 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d96:	2303      	movs	r3, #3
 8005d98:	75fb      	strb	r3, [r7, #23]
          break;
 8005d9a:	e016      	b.n	8005dca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	2b03      	cmp	r3, #3
 8005da6:	d00f      	beq.n	8005dc8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005da8:	6839      	ldr	r1, [r7, #0]
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f001 fc59 	bl	8007662 <USBD_CtlError>
            ret = USBD_FAIL;
 8005db0:	2303      	movs	r3, #3
 8005db2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005db4:	e008      	b.n	8005dc8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005db6:	6839      	ldr	r1, [r7, #0]
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f001 fc52 	bl	8007662 <USBD_CtlError>
          ret = USBD_FAIL;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	75fb      	strb	r3, [r7, #23]
          break;
 8005dc2:	e002      	b.n	8005dca <USBD_CDC_Setup+0x19e>
          break;
 8005dc4:	bf00      	nop
 8005dc6:	e008      	b.n	8005dda <USBD_CDC_Setup+0x1ae>
          break;
 8005dc8:	bf00      	nop
      }
      break;
 8005dca:	e006      	b.n	8005dda <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005dcc:	6839      	ldr	r1, [r7, #0]
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f001 fc47 	bl	8007662 <USBD_CtlError>
      ret = USBD_FAIL;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8005dd8:	bf00      	nop
  }

  return (uint8_t)ret;
 8005dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	460b      	mov	r3, r1
 8005dee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005df6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	32b0      	adds	r2, #176	@ 0xb0
 8005e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e065      	b.n	8005eda <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	32b0      	adds	r2, #176	@ 0xb0
 8005e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e1c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005e1e:	78fb      	ldrb	r3, [r7, #3]
 8005e20:	f003 020f 	and.w	r2, r3, #15
 8005e24:	6879      	ldr	r1, [r7, #4]
 8005e26:	4613      	mov	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	440b      	add	r3, r1
 8005e30:	3318      	adds	r3, #24
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d02f      	beq.n	8005e98 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005e38:	78fb      	ldrb	r3, [r7, #3]
 8005e3a:	f003 020f 	and.w	r2, r3, #15
 8005e3e:	6879      	ldr	r1, [r7, #4]
 8005e40:	4613      	mov	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	440b      	add	r3, r1
 8005e4a:	3318      	adds	r3, #24
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	78fb      	ldrb	r3, [r7, #3]
 8005e50:	f003 010f 	and.w	r1, r3, #15
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	460b      	mov	r3, r1
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	440b      	add	r3, r1
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4403      	add	r3, r0
 8005e60:	331c      	adds	r3, #28
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	fbb2 f1f3 	udiv	r1, r2, r3
 8005e68:	fb01 f303 	mul.w	r3, r1, r3
 8005e6c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d112      	bne.n	8005e98 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005e72:	78fb      	ldrb	r3, [r7, #3]
 8005e74:	f003 020f 	and.w	r2, r3, #15
 8005e78:	6879      	ldr	r1, [r7, #4]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	440b      	add	r3, r1
 8005e84:	3318      	adds	r3, #24
 8005e86:	2200      	movs	r2, #0
 8005e88:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005e8a:	78f9      	ldrb	r1, [r7, #3]
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	2200      	movs	r2, #0
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f002 f93e 	bl	8008112 <USBD_LL_Transmit>
 8005e96:	e01f      	b.n	8005ed8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	33b0      	adds	r3, #176	@ 0xb0
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4413      	add	r3, r2
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d010      	beq.n	8005ed8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	33b0      	adds	r3, #176	@ 0xb0
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005ed4:	78fa      	ldrb	r2, [r7, #3]
 8005ed6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b084      	sub	sp, #16
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
 8005eea:	460b      	mov	r3, r1
 8005eec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	32b0      	adds	r2, #176	@ 0xb0
 8005ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005efc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	32b0      	adds	r2, #176	@ 0xb0
 8005f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d101      	bne.n	8005f14 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e01a      	b.n	8005f4a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005f14:	78fb      	ldrb	r3, [r7, #3]
 8005f16:	4619      	mov	r1, r3
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f002 f93c 	bl	8008196 <USBD_LL_GetRxDataSize>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	33b0      	adds	r3, #176	@ 0xb0
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4413      	add	r3, r2
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005f44:	4611      	mov	r1, r2
 8005f46:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b084      	sub	sp, #16
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	32b0      	adds	r2, #176	@ 0xb0
 8005f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f70:	2303      	movs	r3, #3
 8005f72:	e024      	b.n	8005fbe <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	33b0      	adds	r3, #176	@ 0xb0
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d019      	beq.n	8005fbc <USBD_CDC_EP0_RxReady+0x6a>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005f8e:	2bff      	cmp	r3, #255	@ 0xff
 8005f90:	d014      	beq.n	8005fbc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	33b0      	adds	r3, #176	@ 0xb0
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005faa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005fb2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	22ff      	movs	r2, #255	@ 0xff
 8005fb8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
	...

08005fc8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005fd0:	2182      	movs	r1, #130	@ 0x82
 8005fd2:	4818      	ldr	r0, [pc, #96]	@ (8006034 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005fd4:	f000 fd0f 	bl	80069f6 <USBD_GetEpDesc>
 8005fd8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005fda:	2101      	movs	r1, #1
 8005fdc:	4815      	ldr	r0, [pc, #84]	@ (8006034 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005fde:	f000 fd0a 	bl	80069f6 <USBD_GetEpDesc>
 8005fe2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005fe4:	2181      	movs	r1, #129	@ 0x81
 8005fe6:	4813      	ldr	r0, [pc, #76]	@ (8006034 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005fe8:	f000 fd05 	bl	80069f6 <USBD_GetEpDesc>
 8005fec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	2210      	movs	r2, #16
 8005ff8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d006      	beq.n	800600e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	2200      	movs	r2, #0
 8006004:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006008:	711a      	strb	r2, [r3, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d006      	beq.n	8006022 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800601c:	711a      	strb	r2, [r3, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2243      	movs	r2, #67	@ 0x43
 8006026:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006028:	4b02      	ldr	r3, [pc, #8]	@ (8006034 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800602a:	4618      	mov	r0, r3
 800602c:	3718      	adds	r7, #24
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	20000050 	.word	0x20000050

08006038 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006040:	2182      	movs	r1, #130	@ 0x82
 8006042:	4818      	ldr	r0, [pc, #96]	@ (80060a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006044:	f000 fcd7 	bl	80069f6 <USBD_GetEpDesc>
 8006048:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800604a:	2101      	movs	r1, #1
 800604c:	4815      	ldr	r0, [pc, #84]	@ (80060a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800604e:	f000 fcd2 	bl	80069f6 <USBD_GetEpDesc>
 8006052:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006054:	2181      	movs	r1, #129	@ 0x81
 8006056:	4813      	ldr	r0, [pc, #76]	@ (80060a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006058:	f000 fccd 	bl	80069f6 <USBD_GetEpDesc>
 800605c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d002      	beq.n	800606a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	2210      	movs	r2, #16
 8006068:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d006      	beq.n	800607e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	2200      	movs	r2, #0
 8006074:	711a      	strb	r2, [r3, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	f042 0202 	orr.w	r2, r2, #2
 800607c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d006      	beq.n	8006092 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	711a      	strb	r2, [r3, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f042 0202 	orr.w	r2, r2, #2
 8006090:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2243      	movs	r2, #67	@ 0x43
 8006096:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006098:	4b02      	ldr	r3, [pc, #8]	@ (80060a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800609a:	4618      	mov	r0, r3
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	20000050 	.word	0x20000050

080060a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b086      	sub	sp, #24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80060b0:	2182      	movs	r1, #130	@ 0x82
 80060b2:	4818      	ldr	r0, [pc, #96]	@ (8006114 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80060b4:	f000 fc9f 	bl	80069f6 <USBD_GetEpDesc>
 80060b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80060ba:	2101      	movs	r1, #1
 80060bc:	4815      	ldr	r0, [pc, #84]	@ (8006114 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80060be:	f000 fc9a 	bl	80069f6 <USBD_GetEpDesc>
 80060c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80060c4:	2181      	movs	r1, #129	@ 0x81
 80060c6:	4813      	ldr	r0, [pc, #76]	@ (8006114 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80060c8:	f000 fc95 	bl	80069f6 <USBD_GetEpDesc>
 80060cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d002      	beq.n	80060da <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	2210      	movs	r2, #16
 80060d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d006      	beq.n	80060ee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060e8:	711a      	strb	r2, [r3, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d006      	beq.n	8006102 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060fc:	711a      	strb	r2, [r3, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2243      	movs	r2, #67	@ 0x43
 8006106:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006108:	4b02      	ldr	r3, [pc, #8]	@ (8006114 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800610a:	4618      	mov	r0, r3
 800610c:	3718      	adds	r7, #24
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	20000050 	.word	0x20000050

08006118 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	220a      	movs	r2, #10
 8006124:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006126:	4b03      	ldr	r3, [pc, #12]	@ (8006134 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006128:	4618      	mov	r0, r3
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr
 8006134:	2000000c 	.word	0x2000000c

08006138 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d101      	bne.n	800614c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006148:	2303      	movs	r3, #3
 800614a:	e009      	b.n	8006160 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	33b0      	adds	r3, #176	@ 0xb0
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	32b0      	adds	r2, #176	@ 0xb0
 8006182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006186:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800618e:	2303      	movs	r3, #3
 8006190:	e008      	b.n	80061a4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	371c      	adds	r7, #28
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	32b0      	adds	r2, #176	@ 0xb0
 80061c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d101      	bne.n	80061d4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e004      	b.n	80061de <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	683a      	ldr	r2, [r7, #0]
 80061d8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
	...

080061ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	32b0      	adds	r2, #176	@ 0xb0
 80061fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006202:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	32b0      	adds	r2, #176	@ 0xb0
 800620e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006216:	2303      	movs	r3, #3
 8006218:	e018      	b.n	800624c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	7c1b      	ldrb	r3, [r3, #16]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10a      	bne.n	8006238 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006222:	4b0c      	ldr	r3, [pc, #48]	@ (8006254 <USBD_CDC_ReceivePacket+0x68>)
 8006224:	7819      	ldrb	r1, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800622c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f001 ff8f 	bl	8008154 <USBD_LL_PrepareReceive>
 8006236:	e008      	b.n	800624a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006238:	4b06      	ldr	r3, [pc, #24]	@ (8006254 <USBD_CDC_ReceivePacket+0x68>)
 800623a:	7819      	ldrb	r1, [r3, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006242:	2340      	movs	r3, #64	@ 0x40
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f001 ff85 	bl	8008154 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	20000094 	.word	0x20000094

08006258 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	4613      	mov	r3, r2
 8006264:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800626c:	2303      	movs	r3, #3
 800626e:	e01f      	b.n	80062b0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d003      	beq.n	8006296 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	79fa      	ldrb	r2, [r7, #7]
 80062a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f001 fdff 	bl	8007ea8 <USBD_LL_Init>
 80062aa:	4603      	mov	r3, r0
 80062ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80062ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3718      	adds	r7, #24
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80062c2:	2300      	movs	r3, #0
 80062c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d101      	bne.n	80062d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e025      	b.n	800631c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	32ae      	adds	r2, #174	@ 0xae
 80062e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00f      	beq.n	800630c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	32ae      	adds	r2, #174	@ 0xae
 80062f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fc:	f107 020e 	add.w	r2, r7, #14
 8006300:	4610      	mov	r0, r2
 8006302:	4798      	blx	r3
 8006304:	4602      	mov	r2, r0
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f001 fe07 	bl	8007f40 <USBD_LL_Start>
 8006332:	4603      	mov	r3, r0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3708      	adds	r7, #8
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006344:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006346:	4618      	mov	r0, r3
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b084      	sub	sp, #16
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	460b      	mov	r3, r1
 800635c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006368:	2b00      	cmp	r3, #0
 800636a:	d009      	beq.n	8006380 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	78fa      	ldrb	r2, [r7, #3]
 8006376:	4611      	mov	r1, r2
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	4798      	blx	r3
 800637c:	4603      	mov	r3, r0
 800637e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006380:	7bfb      	ldrb	r3, [r7, #15]
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b084      	sub	sp, #16
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	460b      	mov	r3, r1
 8006394:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006396:	2300      	movs	r3, #0
 8006398:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	78fa      	ldrb	r2, [r7, #3]
 80063a4:	4611      	mov	r1, r2
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	4798      	blx	r3
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d001      	beq.n	80063b4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80063b0:	2303      	movs	r3, #3
 80063b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b084      	sub	sp, #16
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
 80063c6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80063ce:	6839      	ldr	r1, [r7, #0]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f001 f90c 	bl	80075ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80063e4:	461a      	mov	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80063f2:	f003 031f 	and.w	r3, r3, #31
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d01a      	beq.n	8006430 <USBD_LL_SetupStage+0x72>
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d822      	bhi.n	8006444 <USBD_LL_SetupStage+0x86>
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d002      	beq.n	8006408 <USBD_LL_SetupStage+0x4a>
 8006402:	2b01      	cmp	r3, #1
 8006404:	d00a      	beq.n	800641c <USBD_LL_SetupStage+0x5e>
 8006406:	e01d      	b.n	8006444 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800640e:	4619      	mov	r1, r3
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fb63 	bl	8006adc <USBD_StdDevReq>
 8006416:	4603      	mov	r3, r0
 8006418:	73fb      	strb	r3, [r7, #15]
      break;
 800641a:	e020      	b.n	800645e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006422:	4619      	mov	r1, r3
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 fbcb 	bl	8006bc0 <USBD_StdItfReq>
 800642a:	4603      	mov	r3, r0
 800642c:	73fb      	strb	r3, [r7, #15]
      break;
 800642e:	e016      	b.n	800645e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006436:	4619      	mov	r1, r3
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 fc2d 	bl	8006c98 <USBD_StdEPReq>
 800643e:	4603      	mov	r3, r0
 8006440:	73fb      	strb	r3, [r7, #15]
      break;
 8006442:	e00c      	b.n	800645e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800644a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800644e:	b2db      	uxtb	r3, r3
 8006450:	4619      	mov	r1, r3
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f001 fdd4 	bl	8008000 <USBD_LL_StallEP>
 8006458:	4603      	mov	r3, r0
 800645a:	73fb      	strb	r3, [r7, #15]
      break;
 800645c:	bf00      	nop
  }

  return ret;
 800645e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006460:	4618      	mov	r0, r3
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	460b      	mov	r3, r1
 8006472:	607a      	str	r2, [r7, #4]
 8006474:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006476:	2300      	movs	r3, #0
 8006478:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800647a:	7afb      	ldrb	r3, [r7, #11]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d16e      	bne.n	800655e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006486:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800648e:	2b03      	cmp	r3, #3
 8006490:	f040 8098 	bne.w	80065c4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	689a      	ldr	r2, [r3, #8]
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	429a      	cmp	r2, r3
 800649e:	d913      	bls.n	80064c8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	689a      	ldr	r2, [r3, #8]
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	1ad2      	subs	r2, r2, r3
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	68da      	ldr	r2, [r3, #12]
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	4293      	cmp	r3, r2
 80064b8:	bf28      	it	cs
 80064ba:	4613      	movcs	r3, r2
 80064bc:	461a      	mov	r2, r3
 80064be:	6879      	ldr	r1, [r7, #4]
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f001 f994 	bl	80077ee <USBD_CtlContinueRx>
 80064c6:	e07d      	b.n	80065c4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80064ce:	f003 031f 	and.w	r3, r3, #31
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d014      	beq.n	8006500 <USBD_LL_DataOutStage+0x98>
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d81d      	bhi.n	8006516 <USBD_LL_DataOutStage+0xae>
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d002      	beq.n	80064e4 <USBD_LL_DataOutStage+0x7c>
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d003      	beq.n	80064ea <USBD_LL_DataOutStage+0x82>
 80064e2:	e018      	b.n	8006516 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80064e4:	2300      	movs	r3, #0
 80064e6:	75bb      	strb	r3, [r7, #22]
            break;
 80064e8:	e018      	b.n	800651c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	4619      	mov	r1, r3
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f000 fa64 	bl	80069c2 <USBD_CoreFindIF>
 80064fa:	4603      	mov	r3, r0
 80064fc:	75bb      	strb	r3, [r7, #22]
            break;
 80064fe:	e00d      	b.n	800651c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006506:	b2db      	uxtb	r3, r3
 8006508:	4619      	mov	r1, r3
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f000 fa66 	bl	80069dc <USBD_CoreFindEP>
 8006510:	4603      	mov	r3, r0
 8006512:	75bb      	strb	r3, [r7, #22]
            break;
 8006514:	e002      	b.n	800651c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006516:	2300      	movs	r3, #0
 8006518:	75bb      	strb	r3, [r7, #22]
            break;
 800651a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800651c:	7dbb      	ldrb	r3, [r7, #22]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d119      	bne.n	8006556 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b03      	cmp	r3, #3
 800652c:	d113      	bne.n	8006556 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800652e:	7dba      	ldrb	r2, [r7, #22]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	32ae      	adds	r2, #174	@ 0xae
 8006534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00b      	beq.n	8006556 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800653e:	7dba      	ldrb	r2, [r7, #22]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006546:	7dba      	ldrb	r2, [r7, #22]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	32ae      	adds	r2, #174	@ 0xae
 800654c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f001 f95a 	bl	8007810 <USBD_CtlSendStatus>
 800655c:	e032      	b.n	80065c4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800655e:	7afb      	ldrb	r3, [r7, #11]
 8006560:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006564:	b2db      	uxtb	r3, r3
 8006566:	4619      	mov	r1, r3
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 fa37 	bl	80069dc <USBD_CoreFindEP>
 800656e:	4603      	mov	r3, r0
 8006570:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006572:	7dbb      	ldrb	r3, [r7, #22]
 8006574:	2bff      	cmp	r3, #255	@ 0xff
 8006576:	d025      	beq.n	80065c4 <USBD_LL_DataOutStage+0x15c>
 8006578:	7dbb      	ldrb	r3, [r7, #22]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d122      	bne.n	80065c4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b03      	cmp	r3, #3
 8006588:	d117      	bne.n	80065ba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800658a:	7dba      	ldrb	r2, [r7, #22]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	32ae      	adds	r2, #174	@ 0xae
 8006590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00f      	beq.n	80065ba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800659a:	7dba      	ldrb	r2, [r7, #22]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80065a2:	7dba      	ldrb	r2, [r7, #22]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	32ae      	adds	r2, #174	@ 0xae
 80065a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	7afa      	ldrb	r2, [r7, #11]
 80065b0:	4611      	mov	r1, r2
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	4798      	blx	r3
 80065b6:	4603      	mov	r3, r0
 80065b8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80065ba:	7dfb      	ldrb	r3, [r7, #23]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80065c0:	7dfb      	ldrb	r3, [r7, #23]
 80065c2:	e000      	b.n	80065c6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3718      	adds	r7, #24
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b086      	sub	sp, #24
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	60f8      	str	r0, [r7, #12]
 80065d6:	460b      	mov	r3, r1
 80065d8:	607a      	str	r2, [r7, #4]
 80065da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80065dc:	7afb      	ldrb	r3, [r7, #11]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d16f      	bne.n	80066c2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	3314      	adds	r3, #20
 80065e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d15a      	bne.n	80066a8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	689a      	ldr	r2, [r3, #8]
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d914      	bls.n	8006628 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	689a      	ldr	r2, [r3, #8]
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	1ad2      	subs	r2, r2, r3
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	461a      	mov	r2, r3
 8006612:	6879      	ldr	r1, [r7, #4]
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f001 f8bc 	bl	8007792 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800661a:	2300      	movs	r3, #0
 800661c:	2200      	movs	r2, #0
 800661e:	2100      	movs	r1, #0
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f001 fd97 	bl	8008154 <USBD_LL_PrepareReceive>
 8006626:	e03f      	b.n	80066a8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	68da      	ldr	r2, [r3, #12]
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	429a      	cmp	r2, r3
 8006632:	d11c      	bne.n	800666e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	685a      	ldr	r2, [r3, #4]
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800663c:	429a      	cmp	r2, r3
 800663e:	d316      	bcc.n	800666e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	685a      	ldr	r2, [r3, #4]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800664a:	429a      	cmp	r2, r3
 800664c:	d20f      	bcs.n	800666e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800664e:	2200      	movs	r2, #0
 8006650:	2100      	movs	r1, #0
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f001 f89d 	bl	8007792 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006660:	2300      	movs	r3, #0
 8006662:	2200      	movs	r2, #0
 8006664:	2100      	movs	r1, #0
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f001 fd74 	bl	8008154 <USBD_LL_PrepareReceive>
 800666c:	e01c      	b.n	80066a8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b03      	cmp	r3, #3
 8006678:	d10f      	bne.n	800669a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d009      	beq.n	800669a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800669a:	2180      	movs	r1, #128	@ 0x80
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f001 fcaf 	bl	8008000 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f001 f8c7 	bl	8007836 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d03a      	beq.n	8006728 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f7ff fe42 	bl	800633c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80066c0:	e032      	b.n	8006728 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80066c2:	7afb      	ldrb	r3, [r7, #11]
 80066c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	4619      	mov	r1, r3
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f000 f985 	bl	80069dc <USBD_CoreFindEP>
 80066d2:	4603      	mov	r3, r0
 80066d4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066d6:	7dfb      	ldrb	r3, [r7, #23]
 80066d8:	2bff      	cmp	r3, #255	@ 0xff
 80066da:	d025      	beq.n	8006728 <USBD_LL_DataInStage+0x15a>
 80066dc:	7dfb      	ldrb	r3, [r7, #23]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d122      	bne.n	8006728 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b03      	cmp	r3, #3
 80066ec:	d11c      	bne.n	8006728 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80066ee:	7dfa      	ldrb	r2, [r7, #23]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	32ae      	adds	r2, #174	@ 0xae
 80066f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d014      	beq.n	8006728 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80066fe:	7dfa      	ldrb	r2, [r7, #23]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006706:	7dfa      	ldrb	r2, [r7, #23]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	32ae      	adds	r2, #174	@ 0xae
 800670c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	7afa      	ldrb	r2, [r7, #11]
 8006714:	4611      	mov	r1, r2
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	4798      	blx	r3
 800671a:	4603      	mov	r3, r0
 800671c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800671e:	7dbb      	ldrb	r3, [r7, #22]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006724:	7dbb      	ldrb	r3, [r7, #22]
 8006726:	e000      	b.n	800672a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3718      	adds	r7, #24
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b084      	sub	sp, #16
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800673a:	2300      	movs	r3, #0
 800673c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800676a:	2b00      	cmp	r3, #0
 800676c:	d014      	beq.n	8006798 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00e      	beq.n	8006798 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	6852      	ldr	r2, [r2, #4]
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	4611      	mov	r1, r2
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	4798      	blx	r3
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d001      	beq.n	8006798 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006794:	2303      	movs	r3, #3
 8006796:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006798:	2340      	movs	r3, #64	@ 0x40
 800679a:	2200      	movs	r2, #0
 800679c:	2100      	movs	r1, #0
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f001 fbe9 	bl	8007f76 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2240      	movs	r2, #64	@ 0x40
 80067b0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067b4:	2340      	movs	r3, #64	@ 0x40
 80067b6:	2200      	movs	r2, #0
 80067b8:	2180      	movs	r1, #128	@ 0x80
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f001 fbdb 	bl	8007f76 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2240      	movs	r2, #64	@ 0x40
 80067ca:	621a      	str	r2, [r3, #32]

  return ret;
 80067cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b083      	sub	sp, #12
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
 80067de:	460b      	mov	r3, r1
 80067e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	78fa      	ldrb	r2, [r7, #3]
 80067e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	370c      	adds	r7, #12
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b083      	sub	sp, #12
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b04      	cmp	r3, #4
 8006808:	d006      	beq.n	8006818 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006810:	b2da      	uxtb	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2204      	movs	r2, #4
 800681c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800682e:	b480      	push	{r7}
 8006830:	b083      	sub	sp, #12
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b04      	cmp	r3, #4
 8006840:	d106      	bne.n	8006850 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006848:	b2da      	uxtb	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	370c      	adds	r7, #12
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b082      	sub	sp, #8
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b03      	cmp	r3, #3
 8006870:	d110      	bne.n	8006894 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00b      	beq.n	8006894 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006882:	69db      	ldr	r3, [r3, #28]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d005      	beq.n	8006894 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b082      	sub	sp, #8
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	460b      	mov	r3, r1
 80068a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	32ae      	adds	r2, #174	@ 0xae
 80068b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80068bc:	2303      	movs	r3, #3
 80068be:	e01c      	b.n	80068fa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	2b03      	cmp	r3, #3
 80068ca:	d115      	bne.n	80068f8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	32ae      	adds	r2, #174	@ 0xae
 80068d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068da:	6a1b      	ldr	r3, [r3, #32]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00b      	beq.n	80068f8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	32ae      	adds	r2, #174	@ 0xae
 80068ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	78fa      	ldrb	r2, [r7, #3]
 80068f2:	4611      	mov	r1, r2
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b082      	sub	sp, #8
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
 800690a:	460b      	mov	r3, r1
 800690c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	32ae      	adds	r2, #174	@ 0xae
 8006918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006920:	2303      	movs	r3, #3
 8006922:	e01c      	b.n	800695e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b03      	cmp	r3, #3
 800692e:	d115      	bne.n	800695c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	32ae      	adds	r2, #174	@ 0xae
 800693a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800693e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00b      	beq.n	800695c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	32ae      	adds	r2, #174	@ 0xae
 800694e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006954:	78fa      	ldrb	r2, [r7, #3]
 8006956:	4611      	mov	r1, r2
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006966:	b480      	push	{r7}
 8006968:	b083      	sub	sp, #12
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006984:	2300      	movs	r3, #0
 8006986:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00e      	beq.n	80069b8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	6852      	ldr	r2, [r2, #4]
 80069a6:	b2d2      	uxtb	r2, r2
 80069a8:	4611      	mov	r1, r2
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	4798      	blx	r3
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d001      	beq.n	80069b8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80069b4:	2303      	movs	r3, #3
 80069b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b083      	sub	sp, #12
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	460b      	mov	r3, r1
 80069cc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80069ce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	460b      	mov	r3, r1
 80069e6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80069e8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	370c      	adds	r7, #12
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b086      	sub	sp, #24
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	460b      	mov	r3, r1
 8006a00:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	885b      	ldrh	r3, [r3, #2]
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	7812      	ldrb	r2, [r2, #0]
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d91f      	bls.n	8006a5c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006a22:	e013      	b.n	8006a4c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006a24:	f107 030a 	add.w	r3, r7, #10
 8006a28:	4619      	mov	r1, r3
 8006a2a:	6978      	ldr	r0, [r7, #20]
 8006a2c:	f000 f81b 	bl	8006a66 <USBD_GetNextDesc>
 8006a30:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	785b      	ldrb	r3, [r3, #1]
 8006a36:	2b05      	cmp	r3, #5
 8006a38:	d108      	bne.n	8006a4c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	789b      	ldrb	r3, [r3, #2]
 8006a42:	78fa      	ldrb	r2, [r7, #3]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d008      	beq.n	8006a5a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	885b      	ldrh	r3, [r3, #2]
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	897b      	ldrh	r3, [r7, #10]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d8e5      	bhi.n	8006a24 <USBD_GetEpDesc+0x2e>
 8006a58:	e000      	b.n	8006a5c <USBD_GetEpDesc+0x66>
          break;
 8006a5a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006a5c:	693b      	ldr	r3, [r7, #16]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3718      	adds	r7, #24
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006a66:	b480      	push	{r7}
 8006a68:	b085      	sub	sp, #20
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
 8006a6e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	7812      	ldrb	r2, [r2, #0]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006a90:	68fb      	ldr	r3, [r7, #12]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b087      	sub	sp, #28
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006abc:	8a3b      	ldrh	r3, [r7, #16]
 8006abe:	021b      	lsls	r3, r3, #8
 8006ac0:	b21a      	sxth	r2, r3
 8006ac2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	b21b      	sxth	r3, r3
 8006aca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006acc:	89fb      	ldrh	r3, [r7, #14]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	371c      	adds	r7, #28
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
	...

08006adc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006af2:	2b40      	cmp	r3, #64	@ 0x40
 8006af4:	d005      	beq.n	8006b02 <USBD_StdDevReq+0x26>
 8006af6:	2b40      	cmp	r3, #64	@ 0x40
 8006af8:	d857      	bhi.n	8006baa <USBD_StdDevReq+0xce>
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00f      	beq.n	8006b1e <USBD_StdDevReq+0x42>
 8006afe:	2b20      	cmp	r3, #32
 8006b00:	d153      	bne.n	8006baa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	32ae      	adds	r2, #174	@ 0xae
 8006b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	4798      	blx	r3
 8006b18:	4603      	mov	r3, r0
 8006b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b1c:	e04a      	b.n	8006bb4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	785b      	ldrb	r3, [r3, #1]
 8006b22:	2b09      	cmp	r3, #9
 8006b24:	d83b      	bhi.n	8006b9e <USBD_StdDevReq+0xc2>
 8006b26:	a201      	add	r2, pc, #4	@ (adr r2, 8006b2c <USBD_StdDevReq+0x50>)
 8006b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2c:	08006b81 	.word	0x08006b81
 8006b30:	08006b95 	.word	0x08006b95
 8006b34:	08006b9f 	.word	0x08006b9f
 8006b38:	08006b8b 	.word	0x08006b8b
 8006b3c:	08006b9f 	.word	0x08006b9f
 8006b40:	08006b5f 	.word	0x08006b5f
 8006b44:	08006b55 	.word	0x08006b55
 8006b48:	08006b9f 	.word	0x08006b9f
 8006b4c:	08006b77 	.word	0x08006b77
 8006b50:	08006b69 	.word	0x08006b69
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006b54:	6839      	ldr	r1, [r7, #0]
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 fa3c 	bl	8006fd4 <USBD_GetDescriptor>
          break;
 8006b5c:	e024      	b.n	8006ba8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006b5e:	6839      	ldr	r1, [r7, #0]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fba1 	bl	80072a8 <USBD_SetAddress>
          break;
 8006b66:	e01f      	b.n	8006ba8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006b68:	6839      	ldr	r1, [r7, #0]
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fbe0 	bl	8007330 <USBD_SetConfig>
 8006b70:	4603      	mov	r3, r0
 8006b72:	73fb      	strb	r3, [r7, #15]
          break;
 8006b74:	e018      	b.n	8006ba8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006b76:	6839      	ldr	r1, [r7, #0]
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fc83 	bl	8007484 <USBD_GetConfig>
          break;
 8006b7e:	e013      	b.n	8006ba8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fcb4 	bl	80074f0 <USBD_GetStatus>
          break;
 8006b88:	e00e      	b.n	8006ba8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fce3 	bl	8007558 <USBD_SetFeature>
          break;
 8006b92:	e009      	b.n	8006ba8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006b94:	6839      	ldr	r1, [r7, #0]
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 fd07 	bl	80075aa <USBD_ClrFeature>
          break;
 8006b9c:	e004      	b.n	8006ba8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fd5e 	bl	8007662 <USBD_CtlError>
          break;
 8006ba6:	bf00      	nop
      }
      break;
 8006ba8:	e004      	b.n	8006bb4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006baa:	6839      	ldr	r1, [r7, #0]
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 fd58 	bl	8007662 <USBD_CtlError>
      break;
 8006bb2:	bf00      	nop
  }

  return ret;
 8006bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop

08006bc0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006bd6:	2b40      	cmp	r3, #64	@ 0x40
 8006bd8:	d005      	beq.n	8006be6 <USBD_StdItfReq+0x26>
 8006bda:	2b40      	cmp	r3, #64	@ 0x40
 8006bdc:	d852      	bhi.n	8006c84 <USBD_StdItfReq+0xc4>
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <USBD_StdItfReq+0x26>
 8006be2:	2b20      	cmp	r3, #32
 8006be4:	d14e      	bne.n	8006c84 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d840      	bhi.n	8006c76 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	889b      	ldrh	r3, [r3, #4]
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d836      	bhi.n	8006c6c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	889b      	ldrh	r3, [r3, #4]
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	4619      	mov	r1, r3
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f7ff fedb 	bl	80069c2 <USBD_CoreFindIF>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c10:	7bbb      	ldrb	r3, [r7, #14]
 8006c12:	2bff      	cmp	r3, #255	@ 0xff
 8006c14:	d01d      	beq.n	8006c52 <USBD_StdItfReq+0x92>
 8006c16:	7bbb      	ldrb	r3, [r7, #14]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d11a      	bne.n	8006c52 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006c1c:	7bba      	ldrb	r2, [r7, #14]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	32ae      	adds	r2, #174	@ 0xae
 8006c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00f      	beq.n	8006c4c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006c2c:	7bba      	ldrb	r2, [r7, #14]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006c34:	7bba      	ldrb	r2, [r7, #14]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	32ae      	adds	r2, #174	@ 0xae
 8006c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	6839      	ldr	r1, [r7, #0]
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	4798      	blx	r3
 8006c46:	4603      	mov	r3, r0
 8006c48:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c4a:	e004      	b.n	8006c56 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c50:	e001      	b.n	8006c56 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006c52:	2303      	movs	r3, #3
 8006c54:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	88db      	ldrh	r3, [r3, #6]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d110      	bne.n	8006c80 <USBD_StdItfReq+0xc0>
 8006c5e:	7bfb      	ldrb	r3, [r7, #15]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10d      	bne.n	8006c80 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fdd3 	bl	8007810 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006c6a:	e009      	b.n	8006c80 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 fcf7 	bl	8007662 <USBD_CtlError>
          break;
 8006c74:	e004      	b.n	8006c80 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fcf2 	bl	8007662 <USBD_CtlError>
          break;
 8006c7e:	e000      	b.n	8006c82 <USBD_StdItfReq+0xc2>
          break;
 8006c80:	bf00      	nop
      }
      break;
 8006c82:	e004      	b.n	8006c8e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006c84:	6839      	ldr	r1, [r7, #0]
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fceb 	bl	8007662 <USBD_CtlError>
      break;
 8006c8c:	bf00      	nop
  }

  return ret;
 8006c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	889b      	ldrh	r3, [r3, #4]
 8006caa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006cb4:	2b40      	cmp	r3, #64	@ 0x40
 8006cb6:	d007      	beq.n	8006cc8 <USBD_StdEPReq+0x30>
 8006cb8:	2b40      	cmp	r3, #64	@ 0x40
 8006cba:	f200 817f 	bhi.w	8006fbc <USBD_StdEPReq+0x324>
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d02a      	beq.n	8006d18 <USBD_StdEPReq+0x80>
 8006cc2:	2b20      	cmp	r3, #32
 8006cc4:	f040 817a 	bne.w	8006fbc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006cc8:	7bbb      	ldrb	r3, [r7, #14]
 8006cca:	4619      	mov	r1, r3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f7ff fe85 	bl	80069dc <USBD_CoreFindEP>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cd6:	7b7b      	ldrb	r3, [r7, #13]
 8006cd8:	2bff      	cmp	r3, #255	@ 0xff
 8006cda:	f000 8174 	beq.w	8006fc6 <USBD_StdEPReq+0x32e>
 8006cde:	7b7b      	ldrb	r3, [r7, #13]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f040 8170 	bne.w	8006fc6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006ce6:	7b7a      	ldrb	r2, [r7, #13]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006cee:	7b7a      	ldrb	r2, [r7, #13]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	32ae      	adds	r2, #174	@ 0xae
 8006cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f000 8163 	beq.w	8006fc6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006d00:	7b7a      	ldrb	r2, [r7, #13]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	32ae      	adds	r2, #174	@ 0xae
 8006d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	6839      	ldr	r1, [r7, #0]
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	4798      	blx	r3
 8006d12:	4603      	mov	r3, r0
 8006d14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d16:	e156      	b.n	8006fc6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	785b      	ldrb	r3, [r3, #1]
 8006d1c:	2b03      	cmp	r3, #3
 8006d1e:	d008      	beq.n	8006d32 <USBD_StdEPReq+0x9a>
 8006d20:	2b03      	cmp	r3, #3
 8006d22:	f300 8145 	bgt.w	8006fb0 <USBD_StdEPReq+0x318>
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f000 809b 	beq.w	8006e62 <USBD_StdEPReq+0x1ca>
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d03c      	beq.n	8006daa <USBD_StdEPReq+0x112>
 8006d30:	e13e      	b.n	8006fb0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d002      	beq.n	8006d44 <USBD_StdEPReq+0xac>
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	d016      	beq.n	8006d70 <USBD_StdEPReq+0xd8>
 8006d42:	e02c      	b.n	8006d9e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d44:	7bbb      	ldrb	r3, [r7, #14]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00d      	beq.n	8006d66 <USBD_StdEPReq+0xce>
 8006d4a:	7bbb      	ldrb	r3, [r7, #14]
 8006d4c:	2b80      	cmp	r3, #128	@ 0x80
 8006d4e:	d00a      	beq.n	8006d66 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d50:	7bbb      	ldrb	r3, [r7, #14]
 8006d52:	4619      	mov	r1, r3
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f001 f953 	bl	8008000 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d5a:	2180      	movs	r1, #128	@ 0x80
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f001 f94f 	bl	8008000 <USBD_LL_StallEP>
 8006d62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d64:	e020      	b.n	8006da8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006d66:	6839      	ldr	r1, [r7, #0]
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 fc7a 	bl	8007662 <USBD_CtlError>
              break;
 8006d6e:	e01b      	b.n	8006da8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	885b      	ldrh	r3, [r3, #2]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10e      	bne.n	8006d96 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d78:	7bbb      	ldrb	r3, [r7, #14]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00b      	beq.n	8006d96 <USBD_StdEPReq+0xfe>
 8006d7e:	7bbb      	ldrb	r3, [r7, #14]
 8006d80:	2b80      	cmp	r3, #128	@ 0x80
 8006d82:	d008      	beq.n	8006d96 <USBD_StdEPReq+0xfe>
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	88db      	ldrh	r3, [r3, #6]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d104      	bne.n	8006d96 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d8c:	7bbb      	ldrb	r3, [r7, #14]
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f001 f935 	bl	8008000 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fd3a 	bl	8007810 <USBD_CtlSendStatus>

              break;
 8006d9c:	e004      	b.n	8006da8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006d9e:	6839      	ldr	r1, [r7, #0]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 fc5e 	bl	8007662 <USBD_CtlError>
              break;
 8006da6:	bf00      	nop
          }
          break;
 8006da8:	e107      	b.n	8006fba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d002      	beq.n	8006dbc <USBD_StdEPReq+0x124>
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	d016      	beq.n	8006de8 <USBD_StdEPReq+0x150>
 8006dba:	e04b      	b.n	8006e54 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006dbc:	7bbb      	ldrb	r3, [r7, #14]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00d      	beq.n	8006dde <USBD_StdEPReq+0x146>
 8006dc2:	7bbb      	ldrb	r3, [r7, #14]
 8006dc4:	2b80      	cmp	r3, #128	@ 0x80
 8006dc6:	d00a      	beq.n	8006dde <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006dc8:	7bbb      	ldrb	r3, [r7, #14]
 8006dca:	4619      	mov	r1, r3
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f001 f917 	bl	8008000 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dd2:	2180      	movs	r1, #128	@ 0x80
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f001 f913 	bl	8008000 <USBD_LL_StallEP>
 8006dda:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ddc:	e040      	b.n	8006e60 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006dde:	6839      	ldr	r1, [r7, #0]
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 fc3e 	bl	8007662 <USBD_CtlError>
              break;
 8006de6:	e03b      	b.n	8006e60 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	885b      	ldrh	r3, [r3, #2]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d136      	bne.n	8006e5e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006df0:	7bbb      	ldrb	r3, [r7, #14]
 8006df2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d004      	beq.n	8006e04 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006dfa:	7bbb      	ldrb	r3, [r7, #14]
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f001 f91d 	bl	800803e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 fd03 	bl	8007810 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006e0a:	7bbb      	ldrb	r3, [r7, #14]
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f7ff fde4 	bl	80069dc <USBD_CoreFindEP>
 8006e14:	4603      	mov	r3, r0
 8006e16:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e18:	7b7b      	ldrb	r3, [r7, #13]
 8006e1a:	2bff      	cmp	r3, #255	@ 0xff
 8006e1c:	d01f      	beq.n	8006e5e <USBD_StdEPReq+0x1c6>
 8006e1e:	7b7b      	ldrb	r3, [r7, #13]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d11c      	bne.n	8006e5e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006e24:	7b7a      	ldrb	r2, [r7, #13]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006e2c:	7b7a      	ldrb	r2, [r7, #13]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	32ae      	adds	r2, #174	@ 0xae
 8006e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d010      	beq.n	8006e5e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006e3c:	7b7a      	ldrb	r2, [r7, #13]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	32ae      	adds	r2, #174	@ 0xae
 8006e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	6839      	ldr	r1, [r7, #0]
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	4798      	blx	r3
 8006e4e:	4603      	mov	r3, r0
 8006e50:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006e52:	e004      	b.n	8006e5e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006e54:	6839      	ldr	r1, [r7, #0]
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 fc03 	bl	8007662 <USBD_CtlError>
              break;
 8006e5c:	e000      	b.n	8006e60 <USBD_StdEPReq+0x1c8>
              break;
 8006e5e:	bf00      	nop
          }
          break;
 8006e60:	e0ab      	b.n	8006fba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d002      	beq.n	8006e74 <USBD_StdEPReq+0x1dc>
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	d032      	beq.n	8006ed8 <USBD_StdEPReq+0x240>
 8006e72:	e097      	b.n	8006fa4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e74:	7bbb      	ldrb	r3, [r7, #14]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d007      	beq.n	8006e8a <USBD_StdEPReq+0x1f2>
 8006e7a:	7bbb      	ldrb	r3, [r7, #14]
 8006e7c:	2b80      	cmp	r3, #128	@ 0x80
 8006e7e:	d004      	beq.n	8006e8a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006e80:	6839      	ldr	r1, [r7, #0]
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fbed 	bl	8007662 <USBD_CtlError>
                break;
 8006e88:	e091      	b.n	8006fae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	da0b      	bge.n	8006eaa <USBD_StdEPReq+0x212>
 8006e92:	7bbb      	ldrb	r3, [r7, #14]
 8006e94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006e98:	4613      	mov	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	3310      	adds	r3, #16
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	3304      	adds	r3, #4
 8006ea8:	e00b      	b.n	8006ec2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006eaa:	7bbb      	ldrb	r3, [r7, #14]
 8006eac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4413      	add	r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2202      	movs	r2, #2
 8006ece:	4619      	mov	r1, r3
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fc43 	bl	800775c <USBD_CtlSendData>
              break;
 8006ed6:	e06a      	b.n	8006fae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006ed8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	da11      	bge.n	8006f04 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ee0:	7bbb      	ldrb	r3, [r7, #14]
 8006ee2:	f003 020f 	and.w	r2, r3, #15
 8006ee6:	6879      	ldr	r1, [r7, #4]
 8006ee8:	4613      	mov	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	440b      	add	r3, r1
 8006ef2:	3324      	adds	r3, #36	@ 0x24
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d117      	bne.n	8006f2a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006efa:	6839      	ldr	r1, [r7, #0]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fbb0 	bl	8007662 <USBD_CtlError>
                  break;
 8006f02:	e054      	b.n	8006fae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f04:	7bbb      	ldrb	r3, [r7, #14]
 8006f06:	f003 020f 	and.w	r2, r3, #15
 8006f0a:	6879      	ldr	r1, [r7, #4]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4413      	add	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	440b      	add	r3, r1
 8006f16:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006f1a:	881b      	ldrh	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d104      	bne.n	8006f2a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006f20:	6839      	ldr	r1, [r7, #0]
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fb9d 	bl	8007662 <USBD_CtlError>
                  break;
 8006f28:	e041      	b.n	8006fae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	da0b      	bge.n	8006f4a <USBD_StdEPReq+0x2b2>
 8006f32:	7bbb      	ldrb	r3, [r7, #14]
 8006f34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f38:	4613      	mov	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4413      	add	r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	3310      	adds	r3, #16
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	4413      	add	r3, r2
 8006f46:	3304      	adds	r3, #4
 8006f48:	e00b      	b.n	8006f62 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f4a:	7bbb      	ldrb	r3, [r7, #14]
 8006f4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f50:	4613      	mov	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	4413      	add	r3, r2
 8006f60:	3304      	adds	r3, #4
 8006f62:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f64:	7bbb      	ldrb	r3, [r7, #14]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d002      	beq.n	8006f70 <USBD_StdEPReq+0x2d8>
 8006f6a:	7bbb      	ldrb	r3, [r7, #14]
 8006f6c:	2b80      	cmp	r3, #128	@ 0x80
 8006f6e:	d103      	bne.n	8006f78 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	2200      	movs	r2, #0
 8006f74:	601a      	str	r2, [r3, #0]
 8006f76:	e00e      	b.n	8006f96 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006f78:	7bbb      	ldrb	r3, [r7, #14]
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f001 f87d 	bl	800807c <USBD_LL_IsStallEP>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d003      	beq.n	8006f90 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	601a      	str	r2, [r3, #0]
 8006f8e:	e002      	b.n	8006f96 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	2200      	movs	r2, #0
 8006f94:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	2202      	movs	r2, #2
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fbdd 	bl	800775c <USBD_CtlSendData>
              break;
 8006fa2:	e004      	b.n	8006fae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006fa4:	6839      	ldr	r1, [r7, #0]
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fb5b 	bl	8007662 <USBD_CtlError>
              break;
 8006fac:	bf00      	nop
          }
          break;
 8006fae:	e004      	b.n	8006fba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 fb55 	bl	8007662 <USBD_CtlError>
          break;
 8006fb8:	bf00      	nop
      }
      break;
 8006fba:	e005      	b.n	8006fc8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006fbc:	6839      	ldr	r1, [r7, #0]
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fb4f 	bl	8007662 <USBD_CtlError>
      break;
 8006fc4:	e000      	b.n	8006fc8 <USBD_StdEPReq+0x330>
      break;
 8006fc6:	bf00      	nop
  }

  return ret;
 8006fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
	...

08006fd4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	885b      	ldrh	r3, [r3, #2]
 8006fee:	0a1b      	lsrs	r3, r3, #8
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	2b06      	cmp	r3, #6
 8006ff6:	f200 8128 	bhi.w	800724a <USBD_GetDescriptor+0x276>
 8006ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8007000 <USBD_GetDescriptor+0x2c>)
 8006ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007000:	0800701d 	.word	0x0800701d
 8007004:	08007035 	.word	0x08007035
 8007008:	08007075 	.word	0x08007075
 800700c:	0800724b 	.word	0x0800724b
 8007010:	0800724b 	.word	0x0800724b
 8007014:	080071eb 	.word	0x080071eb
 8007018:	08007217 	.word	0x08007217
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	7c12      	ldrb	r2, [r2, #16]
 8007028:	f107 0108 	add.w	r1, r7, #8
 800702c:	4610      	mov	r0, r2
 800702e:	4798      	blx	r3
 8007030:	60f8      	str	r0, [r7, #12]
      break;
 8007032:	e112      	b.n	800725a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	7c1b      	ldrb	r3, [r3, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10d      	bne.n	8007058 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007044:	f107 0208 	add.w	r2, r7, #8
 8007048:	4610      	mov	r0, r2
 800704a:	4798      	blx	r3
 800704c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	3301      	adds	r3, #1
 8007052:	2202      	movs	r2, #2
 8007054:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007056:	e100      	b.n	800725a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800705e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007060:	f107 0208 	add.w	r2, r7, #8
 8007064:	4610      	mov	r0, r2
 8007066:	4798      	blx	r3
 8007068:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	3301      	adds	r3, #1
 800706e:	2202      	movs	r2, #2
 8007070:	701a      	strb	r2, [r3, #0]
      break;
 8007072:	e0f2      	b.n	800725a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	885b      	ldrh	r3, [r3, #2]
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b05      	cmp	r3, #5
 800707c:	f200 80ac 	bhi.w	80071d8 <USBD_GetDescriptor+0x204>
 8007080:	a201      	add	r2, pc, #4	@ (adr r2, 8007088 <USBD_GetDescriptor+0xb4>)
 8007082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007086:	bf00      	nop
 8007088:	080070a1 	.word	0x080070a1
 800708c:	080070d5 	.word	0x080070d5
 8007090:	08007109 	.word	0x08007109
 8007094:	0800713d 	.word	0x0800713d
 8007098:	08007171 	.word	0x08007171
 800709c:	080071a5 	.word	0x080071a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00b      	beq.n	80070c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	7c12      	ldrb	r2, [r2, #16]
 80070b8:	f107 0108 	add.w	r1, r7, #8
 80070bc:	4610      	mov	r0, r2
 80070be:	4798      	blx	r3
 80070c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070c2:	e091      	b.n	80071e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070c4:	6839      	ldr	r1, [r7, #0]
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 facb 	bl	8007662 <USBD_CtlError>
            err++;
 80070cc:	7afb      	ldrb	r3, [r7, #11]
 80070ce:	3301      	adds	r3, #1
 80070d0:	72fb      	strb	r3, [r7, #11]
          break;
 80070d2:	e089      	b.n	80071e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00b      	beq.n	80070f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	7c12      	ldrb	r2, [r2, #16]
 80070ec:	f107 0108 	add.w	r1, r7, #8
 80070f0:	4610      	mov	r0, r2
 80070f2:	4798      	blx	r3
 80070f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070f6:	e077      	b.n	80071e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fab1 	bl	8007662 <USBD_CtlError>
            err++;
 8007100:	7afb      	ldrb	r3, [r7, #11]
 8007102:	3301      	adds	r3, #1
 8007104:	72fb      	strb	r3, [r7, #11]
          break;
 8007106:	e06f      	b.n	80071e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00b      	beq.n	800712c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	7c12      	ldrb	r2, [r2, #16]
 8007120:	f107 0108 	add.w	r1, r7, #8
 8007124:	4610      	mov	r0, r2
 8007126:	4798      	blx	r3
 8007128:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800712a:	e05d      	b.n	80071e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800712c:	6839      	ldr	r1, [r7, #0]
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fa97 	bl	8007662 <USBD_CtlError>
            err++;
 8007134:	7afb      	ldrb	r3, [r7, #11]
 8007136:	3301      	adds	r3, #1
 8007138:	72fb      	strb	r3, [r7, #11]
          break;
 800713a:	e055      	b.n	80071e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00b      	beq.n	8007160 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	7c12      	ldrb	r2, [r2, #16]
 8007154:	f107 0108 	add.w	r1, r7, #8
 8007158:	4610      	mov	r0, r2
 800715a:	4798      	blx	r3
 800715c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800715e:	e043      	b.n	80071e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007160:	6839      	ldr	r1, [r7, #0]
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fa7d 	bl	8007662 <USBD_CtlError>
            err++;
 8007168:	7afb      	ldrb	r3, [r7, #11]
 800716a:	3301      	adds	r3, #1
 800716c:	72fb      	strb	r3, [r7, #11]
          break;
 800716e:	e03b      	b.n	80071e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007176:	695b      	ldr	r3, [r3, #20]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00b      	beq.n	8007194 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	7c12      	ldrb	r2, [r2, #16]
 8007188:	f107 0108 	add.w	r1, r7, #8
 800718c:	4610      	mov	r0, r2
 800718e:	4798      	blx	r3
 8007190:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007192:	e029      	b.n	80071e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007194:	6839      	ldr	r1, [r7, #0]
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fa63 	bl	8007662 <USBD_CtlError>
            err++;
 800719c:	7afb      	ldrb	r3, [r7, #11]
 800719e:	3301      	adds	r3, #1
 80071a0:	72fb      	strb	r3, [r7, #11]
          break;
 80071a2:	e021      	b.n	80071e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00b      	beq.n	80071c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	7c12      	ldrb	r2, [r2, #16]
 80071bc:	f107 0108 	add.w	r1, r7, #8
 80071c0:	4610      	mov	r0, r2
 80071c2:	4798      	blx	r3
 80071c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071c6:	e00f      	b.n	80071e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071c8:	6839      	ldr	r1, [r7, #0]
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 fa49 	bl	8007662 <USBD_CtlError>
            err++;
 80071d0:	7afb      	ldrb	r3, [r7, #11]
 80071d2:	3301      	adds	r3, #1
 80071d4:	72fb      	strb	r3, [r7, #11]
          break;
 80071d6:	e007      	b.n	80071e8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80071d8:	6839      	ldr	r1, [r7, #0]
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 fa41 	bl	8007662 <USBD_CtlError>
          err++;
 80071e0:	7afb      	ldrb	r3, [r7, #11]
 80071e2:	3301      	adds	r3, #1
 80071e4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80071e6:	bf00      	nop
      }
      break;
 80071e8:	e037      	b.n	800725a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	7c1b      	ldrb	r3, [r3, #16]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d109      	bne.n	8007206 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071fa:	f107 0208 	add.w	r2, r7, #8
 80071fe:	4610      	mov	r0, r2
 8007200:	4798      	blx	r3
 8007202:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007204:	e029      	b.n	800725a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007206:	6839      	ldr	r1, [r7, #0]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fa2a 	bl	8007662 <USBD_CtlError>
        err++;
 800720e:	7afb      	ldrb	r3, [r7, #11]
 8007210:	3301      	adds	r3, #1
 8007212:	72fb      	strb	r3, [r7, #11]
      break;
 8007214:	e021      	b.n	800725a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	7c1b      	ldrb	r3, [r3, #16]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10d      	bne.n	800723a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007226:	f107 0208 	add.w	r2, r7, #8
 800722a:	4610      	mov	r0, r2
 800722c:	4798      	blx	r3
 800722e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	3301      	adds	r3, #1
 8007234:	2207      	movs	r2, #7
 8007236:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007238:	e00f      	b.n	800725a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 fa10 	bl	8007662 <USBD_CtlError>
        err++;
 8007242:	7afb      	ldrb	r3, [r7, #11]
 8007244:	3301      	adds	r3, #1
 8007246:	72fb      	strb	r3, [r7, #11]
      break;
 8007248:	e007      	b.n	800725a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800724a:	6839      	ldr	r1, [r7, #0]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fa08 	bl	8007662 <USBD_CtlError>
      err++;
 8007252:	7afb      	ldrb	r3, [r7, #11]
 8007254:	3301      	adds	r3, #1
 8007256:	72fb      	strb	r3, [r7, #11]
      break;
 8007258:	bf00      	nop
  }

  if (err != 0U)
 800725a:	7afb      	ldrb	r3, [r7, #11]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d11e      	bne.n	800729e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	88db      	ldrh	r3, [r3, #6]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d016      	beq.n	8007296 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007268:	893b      	ldrh	r3, [r7, #8]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00e      	beq.n	800728c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	88da      	ldrh	r2, [r3, #6]
 8007272:	893b      	ldrh	r3, [r7, #8]
 8007274:	4293      	cmp	r3, r2
 8007276:	bf28      	it	cs
 8007278:	4613      	movcs	r3, r2
 800727a:	b29b      	uxth	r3, r3
 800727c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800727e:	893b      	ldrh	r3, [r7, #8]
 8007280:	461a      	mov	r2, r3
 8007282:	68f9      	ldr	r1, [r7, #12]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 fa69 	bl	800775c <USBD_CtlSendData>
 800728a:	e009      	b.n	80072a0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800728c:	6839      	ldr	r1, [r7, #0]
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f9e7 	bl	8007662 <USBD_CtlError>
 8007294:	e004      	b.n	80072a0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 faba 	bl	8007810 <USBD_CtlSendStatus>
 800729c:	e000      	b.n	80072a0 <USBD_GetDescriptor+0x2cc>
    return;
 800729e:	bf00      	nop
  }
}
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop

080072a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	889b      	ldrh	r3, [r3, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d131      	bne.n	800731e <USBD_SetAddress+0x76>
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	88db      	ldrh	r3, [r3, #6]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d12d      	bne.n	800731e <USBD_SetAddress+0x76>
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	885b      	ldrh	r3, [r3, #2]
 80072c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80072c8:	d829      	bhi.n	800731e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	885b      	ldrh	r3, [r3, #2]
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	2b03      	cmp	r3, #3
 80072e0:	d104      	bne.n	80072ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80072e2:	6839      	ldr	r1, [r7, #0]
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 f9bc 	bl	8007662 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ea:	e01d      	b.n	8007328 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	7bfa      	ldrb	r2, [r7, #15]
 80072f0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80072f4:	7bfb      	ldrb	r3, [r7, #15]
 80072f6:	4619      	mov	r1, r3
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 feeb 	bl	80080d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fa86 	bl	8007810 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007304:	7bfb      	ldrb	r3, [r7, #15]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d004      	beq.n	8007314 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2202      	movs	r2, #2
 800730e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007312:	e009      	b.n	8007328 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800731c:	e004      	b.n	8007328 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800731e:	6839      	ldr	r1, [r7, #0]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f99e 	bl	8007662 <USBD_CtlError>
  }
}
 8007326:	bf00      	nop
 8007328:	bf00      	nop
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800733a:	2300      	movs	r3, #0
 800733c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	885b      	ldrh	r3, [r3, #2]
 8007342:	b2da      	uxtb	r2, r3
 8007344:	4b4e      	ldr	r3, [pc, #312]	@ (8007480 <USBD_SetConfig+0x150>)
 8007346:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007348:	4b4d      	ldr	r3, [pc, #308]	@ (8007480 <USBD_SetConfig+0x150>)
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d905      	bls.n	800735c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007350:	6839      	ldr	r1, [r7, #0]
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f985 	bl	8007662 <USBD_CtlError>
    return USBD_FAIL;
 8007358:	2303      	movs	r3, #3
 800735a:	e08c      	b.n	8007476 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b02      	cmp	r3, #2
 8007366:	d002      	beq.n	800736e <USBD_SetConfig+0x3e>
 8007368:	2b03      	cmp	r3, #3
 800736a:	d029      	beq.n	80073c0 <USBD_SetConfig+0x90>
 800736c:	e075      	b.n	800745a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800736e:	4b44      	ldr	r3, [pc, #272]	@ (8007480 <USBD_SetConfig+0x150>)
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d020      	beq.n	80073b8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007376:	4b42      	ldr	r3, [pc, #264]	@ (8007480 <USBD_SetConfig+0x150>)
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	461a      	mov	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007380:	4b3f      	ldr	r3, [pc, #252]	@ (8007480 <USBD_SetConfig+0x150>)
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	4619      	mov	r1, r3
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f7fe ffe3 	bl	8006352 <USBD_SetClassConfig>
 800738c:	4603      	mov	r3, r0
 800738e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007390:	7bfb      	ldrb	r3, [r7, #15]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d008      	beq.n	80073a8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007396:	6839      	ldr	r1, [r7, #0]
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f962 	bl	8007662 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2202      	movs	r2, #2
 80073a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80073a6:	e065      	b.n	8007474 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fa31 	bl	8007810 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2203      	movs	r2, #3
 80073b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80073b6:	e05d      	b.n	8007474 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 fa29 	bl	8007810 <USBD_CtlSendStatus>
      break;
 80073be:	e059      	b.n	8007474 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80073c0:	4b2f      	ldr	r3, [pc, #188]	@ (8007480 <USBD_SetConfig+0x150>)
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d112      	bne.n	80073ee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2202      	movs	r2, #2
 80073cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80073d0:	4b2b      	ldr	r3, [pc, #172]	@ (8007480 <USBD_SetConfig+0x150>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	461a      	mov	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80073da:	4b29      	ldr	r3, [pc, #164]	@ (8007480 <USBD_SetConfig+0x150>)
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	4619      	mov	r1, r3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7fe ffd2 	bl	800638a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 fa12 	bl	8007810 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80073ec:	e042      	b.n	8007474 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80073ee:	4b24      	ldr	r3, [pc, #144]	@ (8007480 <USBD_SetConfig+0x150>)
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	461a      	mov	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d02a      	beq.n	8007452 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	b2db      	uxtb	r3, r3
 8007402:	4619      	mov	r1, r3
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f7fe ffc0 	bl	800638a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800740a:	4b1d      	ldr	r3, [pc, #116]	@ (8007480 <USBD_SetConfig+0x150>)
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	461a      	mov	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007414:	4b1a      	ldr	r3, [pc, #104]	@ (8007480 <USBD_SetConfig+0x150>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	4619      	mov	r1, r3
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7fe ff99 	bl	8006352 <USBD_SetClassConfig>
 8007420:	4603      	mov	r3, r0
 8007422:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007424:	7bfb      	ldrb	r3, [r7, #15]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00f      	beq.n	800744a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800742a:	6839      	ldr	r1, [r7, #0]
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f918 	bl	8007662 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	b2db      	uxtb	r3, r3
 8007438:	4619      	mov	r1, r3
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7fe ffa5 	bl	800638a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2202      	movs	r2, #2
 8007444:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007448:	e014      	b.n	8007474 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f9e0 	bl	8007810 <USBD_CtlSendStatus>
      break;
 8007450:	e010      	b.n	8007474 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f9dc 	bl	8007810 <USBD_CtlSendStatus>
      break;
 8007458:	e00c      	b.n	8007474 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800745a:	6839      	ldr	r1, [r7, #0]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f900 	bl	8007662 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007462:	4b07      	ldr	r3, [pc, #28]	@ (8007480 <USBD_SetConfig+0x150>)
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	4619      	mov	r1, r3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f7fe ff8e 	bl	800638a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800746e:	2303      	movs	r3, #3
 8007470:	73fb      	strb	r3, [r7, #15]
      break;
 8007472:	bf00      	nop
  }

  return ret;
 8007474:	7bfb      	ldrb	r3, [r7, #15]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	200001e8 	.word	0x200001e8

08007484 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	88db      	ldrh	r3, [r3, #6]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d004      	beq.n	80074a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007496:	6839      	ldr	r1, [r7, #0]
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 f8e2 	bl	8007662 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800749e:	e023      	b.n	80074e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	dc02      	bgt.n	80074b2 <USBD_GetConfig+0x2e>
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	dc03      	bgt.n	80074b8 <USBD_GetConfig+0x34>
 80074b0:	e015      	b.n	80074de <USBD_GetConfig+0x5a>
 80074b2:	2b03      	cmp	r3, #3
 80074b4:	d00b      	beq.n	80074ce <USBD_GetConfig+0x4a>
 80074b6:	e012      	b.n	80074de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	3308      	adds	r3, #8
 80074c2:	2201      	movs	r2, #1
 80074c4:	4619      	mov	r1, r3
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f948 	bl	800775c <USBD_CtlSendData>
        break;
 80074cc:	e00c      	b.n	80074e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	3304      	adds	r3, #4
 80074d2:	2201      	movs	r2, #1
 80074d4:	4619      	mov	r1, r3
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f940 	bl	800775c <USBD_CtlSendData>
        break;
 80074dc:	e004      	b.n	80074e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80074de:	6839      	ldr	r1, [r7, #0]
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 f8be 	bl	8007662 <USBD_CtlError>
        break;
 80074e6:	bf00      	nop
}
 80074e8:	bf00      	nop
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007500:	b2db      	uxtb	r3, r3
 8007502:	3b01      	subs	r3, #1
 8007504:	2b02      	cmp	r3, #2
 8007506:	d81e      	bhi.n	8007546 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	88db      	ldrh	r3, [r3, #6]
 800750c:	2b02      	cmp	r3, #2
 800750e:	d004      	beq.n	800751a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007510:	6839      	ldr	r1, [r7, #0]
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f8a5 	bl	8007662 <USBD_CtlError>
        break;
 8007518:	e01a      	b.n	8007550 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007526:	2b00      	cmp	r3, #0
 8007528:	d005      	beq.n	8007536 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	f043 0202 	orr.w	r2, r3, #2
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	330c      	adds	r3, #12
 800753a:	2202      	movs	r2, #2
 800753c:	4619      	mov	r1, r3
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f90c 	bl	800775c <USBD_CtlSendData>
      break;
 8007544:	e004      	b.n	8007550 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007546:	6839      	ldr	r1, [r7, #0]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f88a 	bl	8007662 <USBD_CtlError>
      break;
 800754e:	bf00      	nop
  }
}
 8007550:	bf00      	nop
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	885b      	ldrh	r3, [r3, #2]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d107      	bne.n	800757a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f94c 	bl	8007810 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007578:	e013      	b.n	80075a2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	885b      	ldrh	r3, [r3, #2]
 800757e:	2b02      	cmp	r3, #2
 8007580:	d10b      	bne.n	800759a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	889b      	ldrh	r3, [r3, #4]
 8007586:	0a1b      	lsrs	r3, r3, #8
 8007588:	b29b      	uxth	r3, r3
 800758a:	b2da      	uxtb	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f93c 	bl	8007810 <USBD_CtlSendStatus>
}
 8007598:	e003      	b.n	80075a2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800759a:	6839      	ldr	r1, [r7, #0]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f860 	bl	8007662 <USBD_CtlError>
}
 80075a2:	bf00      	nop
 80075a4:	3708      	adds	r7, #8
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b082      	sub	sp, #8
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
 80075b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	3b01      	subs	r3, #1
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d80b      	bhi.n	80075da <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	885b      	ldrh	r3, [r3, #2]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d10c      	bne.n	80075e4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f91c 	bl	8007810 <USBD_CtlSendStatus>
      }
      break;
 80075d8:	e004      	b.n	80075e4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80075da:	6839      	ldr	r1, [r7, #0]
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f840 	bl	8007662 <USBD_CtlError>
      break;
 80075e2:	e000      	b.n	80075e6 <USBD_ClrFeature+0x3c>
      break;
 80075e4:	bf00      	nop
  }
}
 80075e6:	bf00      	nop
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b084      	sub	sp, #16
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	781a      	ldrb	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	3301      	adds	r3, #1
 8007608:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	781a      	ldrb	r2, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	3301      	adds	r3, #1
 8007616:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f7ff fa40 	bl	8006a9e <SWAPBYTE>
 800761e:	4603      	mov	r3, r0
 8007620:	461a      	mov	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	3301      	adds	r3, #1
 800762a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	3301      	adds	r3, #1
 8007630:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f7ff fa33 	bl	8006a9e <SWAPBYTE>
 8007638:	4603      	mov	r3, r0
 800763a:	461a      	mov	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	3301      	adds	r3, #1
 8007644:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	3301      	adds	r3, #1
 800764a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f7ff fa26 	bl	8006a9e <SWAPBYTE>
 8007652:	4603      	mov	r3, r0
 8007654:	461a      	mov	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	80da      	strh	r2, [r3, #6]
}
 800765a:	bf00      	nop
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b082      	sub	sp, #8
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800766c:	2180      	movs	r1, #128	@ 0x80
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fcc6 	bl	8008000 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007674:	2100      	movs	r1, #0
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 fcc2 	bl	8008000 <USBD_LL_StallEP>
}
 800767c:	bf00      	nop
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b086      	sub	sp, #24
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007690:	2300      	movs	r3, #0
 8007692:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d042      	beq.n	8007720 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800769e:	6938      	ldr	r0, [r7, #16]
 80076a0:	f000 f842 	bl	8007728 <USBD_GetLen>
 80076a4:	4603      	mov	r3, r0
 80076a6:	3301      	adds	r3, #1
 80076a8:	005b      	lsls	r3, r3, #1
 80076aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076ae:	d808      	bhi.n	80076c2 <USBD_GetString+0x3e>
 80076b0:	6938      	ldr	r0, [r7, #16]
 80076b2:	f000 f839 	bl	8007728 <USBD_GetLen>
 80076b6:	4603      	mov	r3, r0
 80076b8:	3301      	adds	r3, #1
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	005b      	lsls	r3, r3, #1
 80076be:	b29a      	uxth	r2, r3
 80076c0:	e001      	b.n	80076c6 <USBD_GetString+0x42>
 80076c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80076ca:	7dfb      	ldrb	r3, [r7, #23]
 80076cc:	68ba      	ldr	r2, [r7, #8]
 80076ce:	4413      	add	r3, r2
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	7812      	ldrb	r2, [r2, #0]
 80076d4:	701a      	strb	r2, [r3, #0]
  idx++;
 80076d6:	7dfb      	ldrb	r3, [r7, #23]
 80076d8:	3301      	adds	r3, #1
 80076da:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80076dc:	7dfb      	ldrb	r3, [r7, #23]
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	4413      	add	r3, r2
 80076e2:	2203      	movs	r2, #3
 80076e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80076e6:	7dfb      	ldrb	r3, [r7, #23]
 80076e8:	3301      	adds	r3, #1
 80076ea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80076ec:	e013      	b.n	8007716 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80076ee:	7dfb      	ldrb	r3, [r7, #23]
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	4413      	add	r3, r2
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	7812      	ldrb	r2, [r2, #0]
 80076f8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	3301      	adds	r3, #1
 80076fe:	613b      	str	r3, [r7, #16]
    idx++;
 8007700:	7dfb      	ldrb	r3, [r7, #23]
 8007702:	3301      	adds	r3, #1
 8007704:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007706:	7dfb      	ldrb	r3, [r7, #23]
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	4413      	add	r3, r2
 800770c:	2200      	movs	r2, #0
 800770e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007710:	7dfb      	ldrb	r3, [r7, #23]
 8007712:	3301      	adds	r3, #1
 8007714:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1e7      	bne.n	80076ee <USBD_GetString+0x6a>
 800771e:	e000      	b.n	8007722 <USBD_GetString+0x9e>
    return;
 8007720:	bf00      	nop
  }
}
 8007722:	3718      	adds	r7, #24
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007730:	2300      	movs	r3, #0
 8007732:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007738:	e005      	b.n	8007746 <USBD_GetLen+0x1e>
  {
    len++;
 800773a:	7bfb      	ldrb	r3, [r7, #15]
 800773c:	3301      	adds	r3, #1
 800773e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	3301      	adds	r3, #1
 8007744:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1f5      	bne.n	800773a <USBD_GetLen+0x12>
  }

  return len;
 800774e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3714      	adds	r7, #20
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2202      	movs	r2, #2
 800776c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	2100      	movs	r1, #0
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f000 fcc5 	bl	8008112 <USBD_LL_Transmit>

  return USBD_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b084      	sub	sp, #16
 8007796:	af00      	add	r7, sp, #0
 8007798:	60f8      	str	r0, [r7, #12]
 800779a:	60b9      	str	r1, [r7, #8]
 800779c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	2100      	movs	r1, #0
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f000 fcb4 	bl	8008112 <USBD_LL_Transmit>

  return USBD_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2203      	movs	r2, #3
 80077c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	2100      	movs	r1, #0
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f000 fcb8 	bl	8008154 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b084      	sub	sp, #16
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	60f8      	str	r0, [r7, #12]
 80077f6:	60b9      	str	r1, [r7, #8]
 80077f8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	2100      	movs	r1, #0
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f000 fca7 	bl	8008154 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2204      	movs	r2, #4
 800781c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007820:	2300      	movs	r3, #0
 8007822:	2200      	movs	r2, #0
 8007824:	2100      	movs	r1, #0
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fc73 	bl	8008112 <USBD_LL_Transmit>

  return USBD_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b082      	sub	sp, #8
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2205      	movs	r2, #5
 8007842:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007846:	2300      	movs	r3, #0
 8007848:	2200      	movs	r2, #0
 800784a:	2100      	movs	r1, #0
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fc81 	bl	8008154 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007860:	2200      	movs	r2, #0
 8007862:	4912      	ldr	r1, [pc, #72]	@ (80078ac <MX_USB_DEVICE_Init+0x50>)
 8007864:	4812      	ldr	r0, [pc, #72]	@ (80078b0 <MX_USB_DEVICE_Init+0x54>)
 8007866:	f7fe fcf7 	bl	8006258 <USBD_Init>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d001      	beq.n	8007874 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007870:	f7f9 f9be 	bl	8000bf0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007874:	490f      	ldr	r1, [pc, #60]	@ (80078b4 <MX_USB_DEVICE_Init+0x58>)
 8007876:	480e      	ldr	r0, [pc, #56]	@ (80078b0 <MX_USB_DEVICE_Init+0x54>)
 8007878:	f7fe fd1e 	bl	80062b8 <USBD_RegisterClass>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d001      	beq.n	8007886 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007882:	f7f9 f9b5 	bl	8000bf0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007886:	490c      	ldr	r1, [pc, #48]	@ (80078b8 <MX_USB_DEVICE_Init+0x5c>)
 8007888:	4809      	ldr	r0, [pc, #36]	@ (80078b0 <MX_USB_DEVICE_Init+0x54>)
 800788a:	f7fe fc55 	bl	8006138 <USBD_CDC_RegisterInterface>
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d001      	beq.n	8007898 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007894:	f7f9 f9ac 	bl	8000bf0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007898:	4805      	ldr	r0, [pc, #20]	@ (80078b0 <MX_USB_DEVICE_Init+0x54>)
 800789a:	f7fe fd43 	bl	8006324 <USBD_Start>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d001      	beq.n	80078a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80078a4:	f7f9 f9a4 	bl	8000bf0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80078a8:	bf00      	nop
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	200000ac 	.word	0x200000ac
 80078b0:	200001ec 	.word	0x200001ec
 80078b4:	20000018 	.word	0x20000018
 80078b8:	20000098 	.word	0x20000098

080078bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80078c0:	2200      	movs	r2, #0
 80078c2:	4905      	ldr	r1, [pc, #20]	@ (80078d8 <CDC_Init_FS+0x1c>)
 80078c4:	4805      	ldr	r0, [pc, #20]	@ (80078dc <CDC_Init_FS+0x20>)
 80078c6:	f7fe fc51 	bl	800616c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80078ca:	4905      	ldr	r1, [pc, #20]	@ (80078e0 <CDC_Init_FS+0x24>)
 80078cc:	4803      	ldr	r0, [pc, #12]	@ (80078dc <CDC_Init_FS+0x20>)
 80078ce:	f7fe fc6f 	bl	80061b0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80078d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	20000cc8 	.word	0x20000cc8
 80078dc:	200001ec 	.word	0x200001ec
 80078e0:	200004c8 	.word	0x200004c8

080078e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80078e4:	b480      	push	{r7}
 80078e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80078e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	4603      	mov	r3, r0
 80078fc:	6039      	str	r1, [r7, #0]
 80078fe:	71fb      	strb	r3, [r7, #7]
 8007900:	4613      	mov	r3, r2
 8007902:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007904:	79fb      	ldrb	r3, [r7, #7]
 8007906:	2b23      	cmp	r3, #35	@ 0x23
 8007908:	d84a      	bhi.n	80079a0 <CDC_Control_FS+0xac>
 800790a:	a201      	add	r2, pc, #4	@ (adr r2, 8007910 <CDC_Control_FS+0x1c>)
 800790c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007910:	080079a1 	.word	0x080079a1
 8007914:	080079a1 	.word	0x080079a1
 8007918:	080079a1 	.word	0x080079a1
 800791c:	080079a1 	.word	0x080079a1
 8007920:	080079a1 	.word	0x080079a1
 8007924:	080079a1 	.word	0x080079a1
 8007928:	080079a1 	.word	0x080079a1
 800792c:	080079a1 	.word	0x080079a1
 8007930:	080079a1 	.word	0x080079a1
 8007934:	080079a1 	.word	0x080079a1
 8007938:	080079a1 	.word	0x080079a1
 800793c:	080079a1 	.word	0x080079a1
 8007940:	080079a1 	.word	0x080079a1
 8007944:	080079a1 	.word	0x080079a1
 8007948:	080079a1 	.word	0x080079a1
 800794c:	080079a1 	.word	0x080079a1
 8007950:	080079a1 	.word	0x080079a1
 8007954:	080079a1 	.word	0x080079a1
 8007958:	080079a1 	.word	0x080079a1
 800795c:	080079a1 	.word	0x080079a1
 8007960:	080079a1 	.word	0x080079a1
 8007964:	080079a1 	.word	0x080079a1
 8007968:	080079a1 	.word	0x080079a1
 800796c:	080079a1 	.word	0x080079a1
 8007970:	080079a1 	.word	0x080079a1
 8007974:	080079a1 	.word	0x080079a1
 8007978:	080079a1 	.word	0x080079a1
 800797c:	080079a1 	.word	0x080079a1
 8007980:	080079a1 	.word	0x080079a1
 8007984:	080079a1 	.word	0x080079a1
 8007988:	080079a1 	.word	0x080079a1
 800798c:	080079a1 	.word	0x080079a1
 8007990:	080079a1 	.word	0x080079a1
 8007994:	080079a1 	.word	0x080079a1
 8007998:	080079a1 	.word	0x080079a1
 800799c:	080079a1 	.word	0x080079a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80079a0:	bf00      	nop
  }

  return (USBD_OK);
 80079a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80079ba:	6879      	ldr	r1, [r7, #4]
 80079bc:	4805      	ldr	r0, [pc, #20]	@ (80079d4 <CDC_Receive_FS+0x24>)
 80079be:	f7fe fbf7 	bl	80061b0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80079c2:	4804      	ldr	r0, [pc, #16]	@ (80079d4 <CDC_Receive_FS+0x24>)
 80079c4:	f7fe fc12 	bl	80061ec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80079c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3708      	adds	r7, #8
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	200001ec 	.word	0x200001ec

080079d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	4613      	mov	r3, r2
 80079e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80079ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	371c      	adds	r7, #28
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
	...

080079fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	4603      	mov	r3, r0
 8007a04:	6039      	str	r1, [r7, #0]
 8007a06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	2212      	movs	r2, #18
 8007a0c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a0e:	4b03      	ldr	r3, [pc, #12]	@ (8007a1c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	200000c8 	.word	0x200000c8

08007a20 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	4603      	mov	r3, r0
 8007a28:	6039      	str	r1, [r7, #0]
 8007a2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	2204      	movs	r2, #4
 8007a30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a32:	4b03      	ldr	r3, [pc, #12]	@ (8007a40 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	200000dc 	.word	0x200000dc

08007a44 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	6039      	str	r1, [r7, #0]
 8007a4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a50:	79fb      	ldrb	r3, [r7, #7]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d105      	bne.n	8007a62 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a56:	683a      	ldr	r2, [r7, #0]
 8007a58:	4907      	ldr	r1, [pc, #28]	@ (8007a78 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a5a:	4808      	ldr	r0, [pc, #32]	@ (8007a7c <USBD_FS_ProductStrDescriptor+0x38>)
 8007a5c:	f7ff fe12 	bl	8007684 <USBD_GetString>
 8007a60:	e004      	b.n	8007a6c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	4904      	ldr	r1, [pc, #16]	@ (8007a78 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a66:	4805      	ldr	r0, [pc, #20]	@ (8007a7c <USBD_FS_ProductStrDescriptor+0x38>)
 8007a68:	f7ff fe0c 	bl	8007684 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a6c:	4b02      	ldr	r3, [pc, #8]	@ (8007a78 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	200014c8 	.word	0x200014c8
 8007a7c:	080082b4 	.word	0x080082b4

08007a80 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	4603      	mov	r3, r0
 8007a88:	6039      	str	r1, [r7, #0]
 8007a8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007a8c:	683a      	ldr	r2, [r7, #0]
 8007a8e:	4904      	ldr	r1, [pc, #16]	@ (8007aa0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007a90:	4804      	ldr	r0, [pc, #16]	@ (8007aa4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007a92:	f7ff fdf7 	bl	8007684 <USBD_GetString>
  return USBD_StrDesc;
 8007a96:	4b02      	ldr	r3, [pc, #8]	@ (8007aa0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	200014c8 	.word	0x200014c8
 8007aa4:	080082cc 	.word	0x080082cc

08007aa8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	4603      	mov	r3, r0
 8007ab0:	6039      	str	r1, [r7, #0]
 8007ab2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	221a      	movs	r2, #26
 8007ab8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007aba:	f000 f843 	bl	8007b44 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007abe:	4b02      	ldr	r3, [pc, #8]	@ (8007ac8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	200000e0 	.word	0x200000e0

08007acc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	6039      	str	r1, [r7, #0]
 8007ad6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007ad8:	79fb      	ldrb	r3, [r7, #7]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d105      	bne.n	8007aea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ade:	683a      	ldr	r2, [r7, #0]
 8007ae0:	4907      	ldr	r1, [pc, #28]	@ (8007b00 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ae2:	4808      	ldr	r0, [pc, #32]	@ (8007b04 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ae4:	f7ff fdce 	bl	8007684 <USBD_GetString>
 8007ae8:	e004      	b.n	8007af4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	4904      	ldr	r1, [pc, #16]	@ (8007b00 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007aee:	4805      	ldr	r0, [pc, #20]	@ (8007b04 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007af0:	f7ff fdc8 	bl	8007684 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007af4:	4b02      	ldr	r3, [pc, #8]	@ (8007b00 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3708      	adds	r7, #8
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	200014c8 	.word	0x200014c8
 8007b04:	080082e0 	.word	0x080082e0

08007b08 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	4603      	mov	r3, r0
 8007b10:	6039      	str	r1, [r7, #0]
 8007b12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b14:	79fb      	ldrb	r3, [r7, #7]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d105      	bne.n	8007b26 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b1a:	683a      	ldr	r2, [r7, #0]
 8007b1c:	4907      	ldr	r1, [pc, #28]	@ (8007b3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b1e:	4808      	ldr	r0, [pc, #32]	@ (8007b40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b20:	f7ff fdb0 	bl	8007684 <USBD_GetString>
 8007b24:	e004      	b.n	8007b30 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	4904      	ldr	r1, [pc, #16]	@ (8007b3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b2a:	4805      	ldr	r0, [pc, #20]	@ (8007b40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b2c:	f7ff fdaa 	bl	8007684 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b30:	4b02      	ldr	r3, [pc, #8]	@ (8007b3c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	200014c8 	.word	0x200014c8
 8007b40:	080082ec 	.word	0x080082ec

08007b44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8007b88 <Get_SerialNum+0x44>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007b50:	4b0e      	ldr	r3, [pc, #56]	@ (8007b8c <Get_SerialNum+0x48>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007b56:	4b0e      	ldr	r3, [pc, #56]	@ (8007b90 <Get_SerialNum+0x4c>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4413      	add	r3, r2
 8007b62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d009      	beq.n	8007b7e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007b6a:	2208      	movs	r2, #8
 8007b6c:	4909      	ldr	r1, [pc, #36]	@ (8007b94 <Get_SerialNum+0x50>)
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f000 f814 	bl	8007b9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007b74:	2204      	movs	r2, #4
 8007b76:	4908      	ldr	r1, [pc, #32]	@ (8007b98 <Get_SerialNum+0x54>)
 8007b78:	68b8      	ldr	r0, [r7, #8]
 8007b7a:	f000 f80f 	bl	8007b9c <IntToUnicode>
  }
}
 8007b7e:	bf00      	nop
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	1fff7a10 	.word	0x1fff7a10
 8007b8c:	1fff7a14 	.word	0x1fff7a14
 8007b90:	1fff7a18 	.word	0x1fff7a18
 8007b94:	200000e2 	.word	0x200000e2
 8007b98:	200000f2 	.word	0x200000f2

08007b9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b087      	sub	sp, #28
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007baa:	2300      	movs	r3, #0
 8007bac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007bae:	2300      	movs	r3, #0
 8007bb0:	75fb      	strb	r3, [r7, #23]
 8007bb2:	e027      	b.n	8007c04 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	0f1b      	lsrs	r3, r3, #28
 8007bb8:	2b09      	cmp	r3, #9
 8007bba:	d80b      	bhi.n	8007bd4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	0f1b      	lsrs	r3, r3, #28
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	7dfb      	ldrb	r3, [r7, #23]
 8007bc4:	005b      	lsls	r3, r3, #1
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	440b      	add	r3, r1
 8007bcc:	3230      	adds	r2, #48	@ 0x30
 8007bce:	b2d2      	uxtb	r2, r2
 8007bd0:	701a      	strb	r2, [r3, #0]
 8007bd2:	e00a      	b.n	8007bea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	0f1b      	lsrs	r3, r3, #28
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	7dfb      	ldrb	r3, [r7, #23]
 8007bdc:	005b      	lsls	r3, r3, #1
 8007bde:	4619      	mov	r1, r3
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	440b      	add	r3, r1
 8007be4:	3237      	adds	r2, #55	@ 0x37
 8007be6:	b2d2      	uxtb	r2, r2
 8007be8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	011b      	lsls	r3, r3, #4
 8007bee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007bf0:	7dfb      	ldrb	r3, [r7, #23]
 8007bf2:	005b      	lsls	r3, r3, #1
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	68ba      	ldr	r2, [r7, #8]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007bfe:	7dfb      	ldrb	r3, [r7, #23]
 8007c00:	3301      	adds	r3, #1
 8007c02:	75fb      	strb	r3, [r7, #23]
 8007c04:	7dfa      	ldrb	r2, [r7, #23]
 8007c06:	79fb      	ldrb	r3, [r7, #7]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d3d3      	bcc.n	8007bb4 <IntToUnicode+0x18>
  }
}
 8007c0c:	bf00      	nop
 8007c0e:	bf00      	nop
 8007c10:	371c      	adds	r7, #28
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr
	...

08007c1c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b08a      	sub	sp, #40	@ 0x28
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c24:	f107 0314 	add.w	r3, r7, #20
 8007c28:	2200      	movs	r2, #0
 8007c2a:	601a      	str	r2, [r3, #0]
 8007c2c:	605a      	str	r2, [r3, #4]
 8007c2e:	609a      	str	r2, [r3, #8]
 8007c30:	60da      	str	r2, [r3, #12]
 8007c32:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c3c:	d13a      	bne.n	8007cb4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c3e:	2300      	movs	r3, #0
 8007c40:	613b      	str	r3, [r7, #16]
 8007c42:	4b1e      	ldr	r3, [pc, #120]	@ (8007cbc <HAL_PCD_MspInit+0xa0>)
 8007c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c46:	4a1d      	ldr	r2, [pc, #116]	@ (8007cbc <HAL_PCD_MspInit+0xa0>)
 8007c48:	f043 0301 	orr.w	r3, r3, #1
 8007c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8007c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8007cbc <HAL_PCD_MspInit+0xa0>)
 8007c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c52:	f003 0301 	and.w	r3, r3, #1
 8007c56:	613b      	str	r3, [r7, #16]
 8007c58:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007c5a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c60:	2302      	movs	r3, #2
 8007c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c64:	2300      	movs	r3, #0
 8007c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007c6c:	230a      	movs	r3, #10
 8007c6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c70:	f107 0314 	add.w	r3, r7, #20
 8007c74:	4619      	mov	r1, r3
 8007c76:	4812      	ldr	r0, [pc, #72]	@ (8007cc0 <HAL_PCD_MspInit+0xa4>)
 8007c78:	f7f9 fa78 	bl	800116c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8007cbc <HAL_PCD_MspInit+0xa0>)
 8007c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c80:	4a0e      	ldr	r2, [pc, #56]	@ (8007cbc <HAL_PCD_MspInit+0xa0>)
 8007c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c86:	6353      	str	r3, [r2, #52]	@ 0x34
 8007c88:	2300      	movs	r3, #0
 8007c8a:	60fb      	str	r3, [r7, #12]
 8007c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8007cbc <HAL_PCD_MspInit+0xa0>)
 8007c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c90:	4a0a      	ldr	r2, [pc, #40]	@ (8007cbc <HAL_PCD_MspInit+0xa0>)
 8007c92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007c96:	6453      	str	r3, [r2, #68]	@ 0x44
 8007c98:	4b08      	ldr	r3, [pc, #32]	@ (8007cbc <HAL_PCD_MspInit+0xa0>)
 8007c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ca0:	60fb      	str	r3, [r7, #12]
 8007ca2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	2100      	movs	r1, #0
 8007ca8:	2043      	movs	r0, #67	@ 0x43
 8007caa:	f7f9 fa28 	bl	80010fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007cae:	2043      	movs	r0, #67	@ 0x43
 8007cb0:	f7f9 fa41 	bl	8001136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007cb4:	bf00      	nop
 8007cb6:	3728      	adds	r7, #40	@ 0x28
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	40023800 	.word	0x40023800
 8007cc0:	40020000 	.word	0x40020000

08007cc4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007cd8:	4619      	mov	r1, r3
 8007cda:	4610      	mov	r0, r2
 8007cdc:	f7fe fb6f 	bl	80063be <USBD_LL_SetupStage>
}
 8007ce0:	bf00      	nop
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007cfa:	78fa      	ldrb	r2, [r7, #3]
 8007cfc:	6879      	ldr	r1, [r7, #4]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	00db      	lsls	r3, r3, #3
 8007d02:	4413      	add	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	440b      	add	r3, r1
 8007d08:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	78fb      	ldrb	r3, [r7, #3]
 8007d10:	4619      	mov	r1, r3
 8007d12:	f7fe fba9 	bl	8006468 <USBD_LL_DataOutStage>
}
 8007d16:	bf00      	nop
 8007d18:	3708      	adds	r7, #8
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b082      	sub	sp, #8
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
 8007d26:	460b      	mov	r3, r1
 8007d28:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007d30:	78fa      	ldrb	r2, [r7, #3]
 8007d32:	6879      	ldr	r1, [r7, #4]
 8007d34:	4613      	mov	r3, r2
 8007d36:	00db      	lsls	r3, r3, #3
 8007d38:	4413      	add	r3, r2
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	440b      	add	r3, r1
 8007d3e:	3320      	adds	r3, #32
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	78fb      	ldrb	r3, [r7, #3]
 8007d44:	4619      	mov	r1, r3
 8007d46:	f7fe fc42 	bl	80065ce <USBD_LL_DataInStage>
}
 8007d4a:	bf00      	nop
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b082      	sub	sp, #8
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7fe fd7c 	bl	800685e <USBD_LL_SOF>
}
 8007d66:	bf00      	nop
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b084      	sub	sp, #16
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007d76:	2301      	movs	r3, #1
 8007d78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	79db      	ldrb	r3, [r3, #7]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d102      	bne.n	8007d88 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007d82:	2300      	movs	r3, #0
 8007d84:	73fb      	strb	r3, [r7, #15]
 8007d86:	e008      	b.n	8007d9a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	79db      	ldrb	r3, [r3, #7]
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d102      	bne.n	8007d96 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007d90:	2301      	movs	r3, #1
 8007d92:	73fb      	strb	r3, [r7, #15]
 8007d94:	e001      	b.n	8007d9a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007d96:	f7f8 ff2b 	bl	8000bf0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007da0:	7bfa      	ldrb	r2, [r7, #15]
 8007da2:	4611      	mov	r1, r2
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7fe fd16 	bl	80067d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7fe fcbe 	bl	8006732 <USBD_LL_Reset>
}
 8007db6:	bf00      	nop
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
	...

08007dc0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fe fd11 	bl	80067f6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	6812      	ldr	r2, [r2, #0]
 8007de2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007de6:	f043 0301 	orr.w	r3, r3, #1
 8007dea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	7adb      	ldrb	r3, [r3, #11]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d005      	beq.n	8007e00 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007df4:	4b04      	ldr	r3, [pc, #16]	@ (8007e08 <HAL_PCD_SuspendCallback+0x48>)
 8007df6:	691b      	ldr	r3, [r3, #16]
 8007df8:	4a03      	ldr	r2, [pc, #12]	@ (8007e08 <HAL_PCD_SuspendCallback+0x48>)
 8007dfa:	f043 0306 	orr.w	r3, r3, #6
 8007dfe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e00:	bf00      	nop
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	e000ed00 	.word	0xe000ed00

08007e0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fe fd07 	bl	800682e <USBD_LL_Resume>
}
 8007e20:	bf00      	nop
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	460b      	mov	r3, r1
 8007e32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e3a:	78fa      	ldrb	r2, [r7, #3]
 8007e3c:	4611      	mov	r1, r2
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7fe fd5f 	bl	8006902 <USBD_LL_IsoOUTIncomplete>
}
 8007e44:	bf00      	nop
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	460b      	mov	r3, r1
 8007e56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e5e:	78fa      	ldrb	r2, [r7, #3]
 8007e60:	4611      	mov	r1, r2
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7fe fd1b 	bl	800689e <USBD_LL_IsoINIncomplete>
}
 8007e68:	bf00      	nop
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7fe fd71 	bl	8006966 <USBD_LL_DevConnected>
}
 8007e84:	bf00      	nop
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7fe fd6e 	bl	800697c <USBD_LL_DevDisconnected>
}
 8007ea0:	bf00      	nop
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d13c      	bne.n	8007f32 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007eb8:	4a20      	ldr	r2, [pc, #128]	@ (8007f3c <USBD_LL_Init+0x94>)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a1e      	ldr	r2, [pc, #120]	@ (8007f3c <USBD_LL_Init+0x94>)
 8007ec4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8007f3c <USBD_LL_Init+0x94>)
 8007eca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007ece:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8007f3c <USBD_LL_Init+0x94>)
 8007ed2:	2204      	movs	r2, #4
 8007ed4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007ed6:	4b19      	ldr	r3, [pc, #100]	@ (8007f3c <USBD_LL_Init+0x94>)
 8007ed8:	2202      	movs	r2, #2
 8007eda:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007edc:	4b17      	ldr	r3, [pc, #92]	@ (8007f3c <USBD_LL_Init+0x94>)
 8007ede:	2200      	movs	r2, #0
 8007ee0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007ee2:	4b16      	ldr	r3, [pc, #88]	@ (8007f3c <USBD_LL_Init+0x94>)
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007ee8:	4b14      	ldr	r3, [pc, #80]	@ (8007f3c <USBD_LL_Init+0x94>)
 8007eea:	2200      	movs	r2, #0
 8007eec:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007eee:	4b13      	ldr	r3, [pc, #76]	@ (8007f3c <USBD_LL_Init+0x94>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007ef4:	4b11      	ldr	r3, [pc, #68]	@ (8007f3c <USBD_LL_Init+0x94>)
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007efa:	4b10      	ldr	r3, [pc, #64]	@ (8007f3c <USBD_LL_Init+0x94>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007f00:	4b0e      	ldr	r3, [pc, #56]	@ (8007f3c <USBD_LL_Init+0x94>)
 8007f02:	2200      	movs	r2, #0
 8007f04:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007f06:	480d      	ldr	r0, [pc, #52]	@ (8007f3c <USBD_LL_Init+0x94>)
 8007f08:	f7fa faf8 	bl	80024fc <HAL_PCD_Init>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d001      	beq.n	8007f16 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007f12:	f7f8 fe6d 	bl	8000bf0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007f16:	2180      	movs	r1, #128	@ 0x80
 8007f18:	4808      	ldr	r0, [pc, #32]	@ (8007f3c <USBD_LL_Init+0x94>)
 8007f1a:	f7fb fd24 	bl	8003966 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007f1e:	2240      	movs	r2, #64	@ 0x40
 8007f20:	2100      	movs	r1, #0
 8007f22:	4806      	ldr	r0, [pc, #24]	@ (8007f3c <USBD_LL_Init+0x94>)
 8007f24:	f7fb fcd8 	bl	80038d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007f28:	2280      	movs	r2, #128	@ 0x80
 8007f2a:	2101      	movs	r1, #1
 8007f2c:	4803      	ldr	r0, [pc, #12]	@ (8007f3c <USBD_LL_Init+0x94>)
 8007f2e:	f7fb fcd3 	bl	80038d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	200016c8 	.word	0x200016c8

08007f40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7fa fbdf 	bl	800271a <HAL_PCD_Start>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f60:	7bfb      	ldrb	r3, [r7, #15]
 8007f62:	4618      	mov	r0, r3
 8007f64:	f000 f942 	bl	80081ec <USBD_Get_USB_Status>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b084      	sub	sp, #16
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
 8007f7e:	4608      	mov	r0, r1
 8007f80:	4611      	mov	r1, r2
 8007f82:	461a      	mov	r2, r3
 8007f84:	4603      	mov	r3, r0
 8007f86:	70fb      	strb	r3, [r7, #3]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	70bb      	strb	r3, [r7, #2]
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f90:	2300      	movs	r3, #0
 8007f92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f94:	2300      	movs	r3, #0
 8007f96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007f9e:	78bb      	ldrb	r3, [r7, #2]
 8007fa0:	883a      	ldrh	r2, [r7, #0]
 8007fa2:	78f9      	ldrb	r1, [r7, #3]
 8007fa4:	f7fb f8b3 	bl	800310e <HAL_PCD_EP_Open>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fac:	7bfb      	ldrb	r3, [r7, #15]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f000 f91c 	bl	80081ec <USBD_Get_USB_Status>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b084      	sub	sp, #16
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
 8007fca:	460b      	mov	r3, r1
 8007fcc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007fdc:	78fa      	ldrb	r2, [r7, #3]
 8007fde:	4611      	mov	r1, r2
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7fb f8fe 	bl	80031e2 <HAL_PCD_EP_Close>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fea:	7bfb      	ldrb	r3, [r7, #15]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f000 f8fd 	bl	80081ec <USBD_Get_USB_Status>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ff6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	460b      	mov	r3, r1
 800800a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800800c:	2300      	movs	r3, #0
 800800e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008010:	2300      	movs	r3, #0
 8008012:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800801a:	78fa      	ldrb	r2, [r7, #3]
 800801c:	4611      	mov	r1, r2
 800801e:	4618      	mov	r0, r3
 8008020:	f7fb f9b6 	bl	8003390 <HAL_PCD_EP_SetStall>
 8008024:	4603      	mov	r3, r0
 8008026:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008028:	7bfb      	ldrb	r3, [r7, #15]
 800802a:	4618      	mov	r0, r3
 800802c:	f000 f8de 	bl	80081ec <USBD_Get_USB_Status>
 8008030:	4603      	mov	r3, r0
 8008032:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008034:	7bbb      	ldrb	r3, [r7, #14]
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b084      	sub	sp, #16
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
 8008046:	460b      	mov	r3, r1
 8008048:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800804a:	2300      	movs	r3, #0
 800804c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008058:	78fa      	ldrb	r2, [r7, #3]
 800805a:	4611      	mov	r1, r2
 800805c:	4618      	mov	r0, r3
 800805e:	f7fb f9fa 	bl	8003456 <HAL_PCD_EP_ClrStall>
 8008062:	4603      	mov	r3, r0
 8008064:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008066:	7bfb      	ldrb	r3, [r7, #15]
 8008068:	4618      	mov	r0, r3
 800806a:	f000 f8bf 	bl	80081ec <USBD_Get_USB_Status>
 800806e:	4603      	mov	r3, r0
 8008070:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008072:	7bbb      	ldrb	r3, [r7, #14]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	460b      	mov	r3, r1
 8008086:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800808e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008090:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008094:	2b00      	cmp	r3, #0
 8008096:	da0b      	bge.n	80080b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008098:	78fb      	ldrb	r3, [r7, #3]
 800809a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800809e:	68f9      	ldr	r1, [r7, #12]
 80080a0:	4613      	mov	r3, r2
 80080a2:	00db      	lsls	r3, r3, #3
 80080a4:	4413      	add	r3, r2
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	440b      	add	r3, r1
 80080aa:	3316      	adds	r3, #22
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	e00b      	b.n	80080c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80080b0:	78fb      	ldrb	r3, [r7, #3]
 80080b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80080b6:	68f9      	ldr	r1, [r7, #12]
 80080b8:	4613      	mov	r3, r2
 80080ba:	00db      	lsls	r3, r3, #3
 80080bc:	4413      	add	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	440b      	add	r3, r1
 80080c2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80080c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3714      	adds	r7, #20
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	460b      	mov	r3, r1
 80080de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080e0:	2300      	movs	r3, #0
 80080e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080e4:	2300      	movs	r3, #0
 80080e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80080ee:	78fa      	ldrb	r2, [r7, #3]
 80080f0:	4611      	mov	r1, r2
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fa ffe7 	bl	80030c6 <HAL_PCD_SetAddress>
 80080f8:	4603      	mov	r3, r0
 80080fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080fc:	7bfb      	ldrb	r3, [r7, #15]
 80080fe:	4618      	mov	r0, r3
 8008100:	f000 f874 	bl	80081ec <USBD_Get_USB_Status>
 8008104:	4603      	mov	r3, r0
 8008106:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008108:	7bbb      	ldrb	r3, [r7, #14]
}
 800810a:	4618      	mov	r0, r3
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b086      	sub	sp, #24
 8008116:	af00      	add	r7, sp, #0
 8008118:	60f8      	str	r0, [r7, #12]
 800811a:	607a      	str	r2, [r7, #4]
 800811c:	603b      	str	r3, [r7, #0]
 800811e:	460b      	mov	r3, r1
 8008120:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008122:	2300      	movs	r3, #0
 8008124:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008126:	2300      	movs	r3, #0
 8008128:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008130:	7af9      	ldrb	r1, [r7, #11]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	f7fb f8f1 	bl	800331c <HAL_PCD_EP_Transmit>
 800813a:	4603      	mov	r3, r0
 800813c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800813e:	7dfb      	ldrb	r3, [r7, #23]
 8008140:	4618      	mov	r0, r3
 8008142:	f000 f853 	bl	80081ec <USBD_Get_USB_Status>
 8008146:	4603      	mov	r3, r0
 8008148:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800814a:	7dbb      	ldrb	r3, [r7, #22]
}
 800814c:	4618      	mov	r0, r3
 800814e:	3718      	adds	r7, #24
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b086      	sub	sp, #24
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	607a      	str	r2, [r7, #4]
 800815e:	603b      	str	r3, [r7, #0]
 8008160:	460b      	mov	r3, r1
 8008162:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008164:	2300      	movs	r3, #0
 8008166:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008168:	2300      	movs	r3, #0
 800816a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008172:	7af9      	ldrb	r1, [r7, #11]
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	f7fb f87d 	bl	8003276 <HAL_PCD_EP_Receive>
 800817c:	4603      	mov	r3, r0
 800817e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008180:	7dfb      	ldrb	r3, [r7, #23]
 8008182:	4618      	mov	r0, r3
 8008184:	f000 f832 	bl	80081ec <USBD_Get_USB_Status>
 8008188:	4603      	mov	r3, r0
 800818a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800818c:	7dbb      	ldrb	r3, [r7, #22]
}
 800818e:	4618      	mov	r0, r3
 8008190:	3718      	adds	r7, #24
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b082      	sub	sp, #8
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
 800819e:	460b      	mov	r3, r1
 80081a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80081a8:	78fa      	ldrb	r2, [r7, #3]
 80081aa:	4611      	mov	r1, r2
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7fb f89d 	bl	80032ec <HAL_PCD_EP_GetRxCount>
 80081b2:	4603      	mov	r3, r0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3708      	adds	r7, #8
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80081c4:	4b03      	ldr	r3, [pc, #12]	@ (80081d4 <USBD_static_malloc+0x18>)
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	20001bac 	.word	0x20001bac

080081d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]

}
 80081e0:	bf00      	nop
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	4603      	mov	r3, r0
 80081f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081f6:	2300      	movs	r3, #0
 80081f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80081fa:	79fb      	ldrb	r3, [r7, #7]
 80081fc:	2b03      	cmp	r3, #3
 80081fe:	d817      	bhi.n	8008230 <USBD_Get_USB_Status+0x44>
 8008200:	a201      	add	r2, pc, #4	@ (adr r2, 8008208 <USBD_Get_USB_Status+0x1c>)
 8008202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008206:	bf00      	nop
 8008208:	08008219 	.word	0x08008219
 800820c:	0800821f 	.word	0x0800821f
 8008210:	08008225 	.word	0x08008225
 8008214:	0800822b 	.word	0x0800822b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008218:	2300      	movs	r3, #0
 800821a:	73fb      	strb	r3, [r7, #15]
    break;
 800821c:	e00b      	b.n	8008236 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800821e:	2303      	movs	r3, #3
 8008220:	73fb      	strb	r3, [r7, #15]
    break;
 8008222:	e008      	b.n	8008236 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008224:	2301      	movs	r3, #1
 8008226:	73fb      	strb	r3, [r7, #15]
    break;
 8008228:	e005      	b.n	8008236 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800822a:	2303      	movs	r3, #3
 800822c:	73fb      	strb	r3, [r7, #15]
    break;
 800822e:	e002      	b.n	8008236 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008230:	2303      	movs	r3, #3
 8008232:	73fb      	strb	r3, [r7, #15]
    break;
 8008234:	bf00      	nop
  }
  return usb_status;
 8008236:	7bfb      	ldrb	r3, [r7, #15]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <memset>:
 8008244:	4402      	add	r2, r0
 8008246:	4603      	mov	r3, r0
 8008248:	4293      	cmp	r3, r2
 800824a:	d100      	bne.n	800824e <memset+0xa>
 800824c:	4770      	bx	lr
 800824e:	f803 1b01 	strb.w	r1, [r3], #1
 8008252:	e7f9      	b.n	8008248 <memset+0x4>

08008254 <__libc_init_array>:
 8008254:	b570      	push	{r4, r5, r6, lr}
 8008256:	4d0d      	ldr	r5, [pc, #52]	@ (800828c <__libc_init_array+0x38>)
 8008258:	4c0d      	ldr	r4, [pc, #52]	@ (8008290 <__libc_init_array+0x3c>)
 800825a:	1b64      	subs	r4, r4, r5
 800825c:	10a4      	asrs	r4, r4, #2
 800825e:	2600      	movs	r6, #0
 8008260:	42a6      	cmp	r6, r4
 8008262:	d109      	bne.n	8008278 <__libc_init_array+0x24>
 8008264:	4d0b      	ldr	r5, [pc, #44]	@ (8008294 <__libc_init_array+0x40>)
 8008266:	4c0c      	ldr	r4, [pc, #48]	@ (8008298 <__libc_init_array+0x44>)
 8008268:	f000 f818 	bl	800829c <_init>
 800826c:	1b64      	subs	r4, r4, r5
 800826e:	10a4      	asrs	r4, r4, #2
 8008270:	2600      	movs	r6, #0
 8008272:	42a6      	cmp	r6, r4
 8008274:	d105      	bne.n	8008282 <__libc_init_array+0x2e>
 8008276:	bd70      	pop	{r4, r5, r6, pc}
 8008278:	f855 3b04 	ldr.w	r3, [r5], #4
 800827c:	4798      	blx	r3
 800827e:	3601      	adds	r6, #1
 8008280:	e7ee      	b.n	8008260 <__libc_init_array+0xc>
 8008282:	f855 3b04 	ldr.w	r3, [r5], #4
 8008286:	4798      	blx	r3
 8008288:	3601      	adds	r6, #1
 800828a:	e7f2      	b.n	8008272 <__libc_init_array+0x1e>
 800828c:	0800831c 	.word	0x0800831c
 8008290:	0800831c 	.word	0x0800831c
 8008294:	0800831c 	.word	0x0800831c
 8008298:	08008320 	.word	0x08008320

0800829c <_init>:
 800829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829e:	bf00      	nop
 80082a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082a2:	bc08      	pop	{r3}
 80082a4:	469e      	mov	lr, r3
 80082a6:	4770      	bx	lr

080082a8 <_fini>:
 80082a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082aa:	bf00      	nop
 80082ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ae:	bc08      	pop	{r3}
 80082b0:	469e      	mov	lr, r3
 80082b2:	4770      	bx	lr
